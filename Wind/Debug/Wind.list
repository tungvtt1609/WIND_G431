
Wind.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b470  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800b648  0800b648  0001b648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6c8  0800b6c8  000204c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6c8  0800b6c8  0001b6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6d0  0800b6d0  000204c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6d0  0800b6d0  0001b6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6d4  0800b6d4  0001b6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c0  20000000  0800b6d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000126c  200004c0  0800bb98  000204c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000172c  0800bb98  0002172c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000204f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f4af  00000000  00000000  00020533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052fb  00000000  00000000  0003f9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f0  00000000  00000000  00044ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013bc  00000000  00000000  000466d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002824b  00000000  00000000  00047a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024f92  00000000  00000000  0006fcd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e60ab  00000000  00000000  00094c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d00  00000000  00000000  0017ad14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00181a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200004c0 	.word	0x200004c0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b630 	.word	0x0800b630

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200004c4 	.word	0x200004c4
 8000214:	0800b630 	.word	0x0800b630

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <strlen>:
 800022c:	4603      	mov	r3, r0
 800022e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000232:	2a00      	cmp	r2, #0
 8000234:	d1fb      	bne.n	800022e <strlen+0x2>
 8000236:	1a18      	subs	r0, r3, r0
 8000238:	3801      	subs	r0, #1
 800023a:	4770      	bx	lr

0800023c <__aeabi_drsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000240:	e002      	b.n	8000248 <__adddf3>
 8000242:	bf00      	nop

08000244 <__aeabi_dsub>:
 8000244:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000248 <__adddf3>:
 8000248:	b530      	push	{r4, r5, lr}
 800024a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000252:	ea94 0f05 	teq	r4, r5
 8000256:	bf08      	it	eq
 8000258:	ea90 0f02 	teqeq	r0, r2
 800025c:	bf1f      	itttt	ne
 800025e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000262:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000266:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026e:	f000 80e2 	beq.w	8000436 <__adddf3+0x1ee>
 8000272:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000276:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027a:	bfb8      	it	lt
 800027c:	426d      	neglt	r5, r5
 800027e:	dd0c      	ble.n	800029a <__adddf3+0x52>
 8000280:	442c      	add	r4, r5
 8000282:	ea80 0202 	eor.w	r2, r0, r2
 8000286:	ea81 0303 	eor.w	r3, r1, r3
 800028a:	ea82 0000 	eor.w	r0, r2, r0
 800028e:	ea83 0101 	eor.w	r1, r3, r1
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	2d36      	cmp	r5, #54	; 0x36
 800029c:	bf88      	it	hi
 800029e:	bd30      	pophi	{r4, r5, pc}
 80002a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x70>
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x84>
 80002c6:	4252      	negs	r2, r2
 80002c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002cc:	ea94 0f05 	teq	r4, r5
 80002d0:	f000 80a7 	beq.w	8000422 <__adddf3+0x1da>
 80002d4:	f1a4 0401 	sub.w	r4, r4, #1
 80002d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002dc:	db0d      	blt.n	80002fa <__adddf3+0xb2>
 80002de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e2:	fa22 f205 	lsr.w	r2, r2, r5
 80002e6:	1880      	adds	r0, r0, r2
 80002e8:	f141 0100 	adc.w	r1, r1, #0
 80002ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f0:	1880      	adds	r0, r0, r2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	4159      	adcs	r1, r3
 80002f8:	e00e      	b.n	8000318 <__adddf3+0xd0>
 80002fa:	f1a5 0520 	sub.w	r5, r5, #32
 80002fe:	f10e 0e20 	add.w	lr, lr, #32
 8000302:	2a01      	cmp	r2, #1
 8000304:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000308:	bf28      	it	cs
 800030a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030e:	fa43 f305 	asr.w	r3, r3, r5
 8000312:	18c0      	adds	r0, r0, r3
 8000314:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800031c:	d507      	bpl.n	800032e <__adddf3+0xe6>
 800031e:	f04f 0e00 	mov.w	lr, #0
 8000322:	f1dc 0c00 	rsbs	ip, ip, #0
 8000326:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032a:	eb6e 0101 	sbc.w	r1, lr, r1
 800032e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000332:	d31b      	bcc.n	800036c <__adddf3+0x124>
 8000334:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000338:	d30c      	bcc.n	8000354 <__adddf3+0x10c>
 800033a:	0849      	lsrs	r1, r1, #1
 800033c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000340:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000344:	f104 0401 	add.w	r4, r4, #1
 8000348:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800034c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000350:	f080 809a 	bcs.w	8000488 <__adddf3+0x240>
 8000354:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000358:	bf08      	it	eq
 800035a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035e:	f150 0000 	adcs.w	r0, r0, #0
 8000362:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000366:	ea41 0105 	orr.w	r1, r1, r5
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000370:	4140      	adcs	r0, r0
 8000372:	eb41 0101 	adc.w	r1, r1, r1
 8000376:	3c01      	subs	r4, #1
 8000378:	bf28      	it	cs
 800037a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037e:	d2e9      	bcs.n	8000354 <__adddf3+0x10c>
 8000380:	f091 0f00 	teq	r1, #0
 8000384:	bf04      	itt	eq
 8000386:	4601      	moveq	r1, r0
 8000388:	2000      	moveq	r0, #0
 800038a:	fab1 f381 	clz	r3, r1
 800038e:	bf08      	it	eq
 8000390:	3320      	addeq	r3, #32
 8000392:	f1a3 030b 	sub.w	r3, r3, #11
 8000396:	f1b3 0220 	subs.w	r2, r3, #32
 800039a:	da0c      	bge.n	80003b6 <__adddf3+0x16e>
 800039c:	320c      	adds	r2, #12
 800039e:	dd08      	ble.n	80003b2 <__adddf3+0x16a>
 80003a0:	f102 0c14 	add.w	ip, r2, #20
 80003a4:	f1c2 020c 	rsb	r2, r2, #12
 80003a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003ac:	fa21 f102 	lsr.w	r1, r1, r2
 80003b0:	e00c      	b.n	80003cc <__adddf3+0x184>
 80003b2:	f102 0214 	add.w	r2, r2, #20
 80003b6:	bfd8      	it	le
 80003b8:	f1c2 0c20 	rsble	ip, r2, #32
 80003bc:	fa01 f102 	lsl.w	r1, r1, r2
 80003c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c4:	bfdc      	itt	le
 80003c6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ca:	4090      	lslle	r0, r2
 80003cc:	1ae4      	subs	r4, r4, r3
 80003ce:	bfa2      	ittt	ge
 80003d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d4:	4329      	orrge	r1, r5
 80003d6:	bd30      	popge	{r4, r5, pc}
 80003d8:	ea6f 0404 	mvn.w	r4, r4
 80003dc:	3c1f      	subs	r4, #31
 80003de:	da1c      	bge.n	800041a <__adddf3+0x1d2>
 80003e0:	340c      	adds	r4, #12
 80003e2:	dc0e      	bgt.n	8000402 <__adddf3+0x1ba>
 80003e4:	f104 0414 	add.w	r4, r4, #20
 80003e8:	f1c4 0220 	rsb	r2, r4, #32
 80003ec:	fa20 f004 	lsr.w	r0, r0, r4
 80003f0:	fa01 f302 	lsl.w	r3, r1, r2
 80003f4:	ea40 0003 	orr.w	r0, r0, r3
 80003f8:	fa21 f304 	lsr.w	r3, r1, r4
 80003fc:	ea45 0103 	orr.w	r1, r5, r3
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	f1c4 040c 	rsb	r4, r4, #12
 8000406:	f1c4 0220 	rsb	r2, r4, #32
 800040a:	fa20 f002 	lsr.w	r0, r0, r2
 800040e:	fa01 f304 	lsl.w	r3, r1, r4
 8000412:	ea40 0003 	orr.w	r0, r0, r3
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	fa21 f004 	lsr.w	r0, r1, r4
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	f094 0f00 	teq	r4, #0
 8000426:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042a:	bf06      	itte	eq
 800042c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000430:	3401      	addeq	r4, #1
 8000432:	3d01      	subne	r5, #1
 8000434:	e74e      	b.n	80002d4 <__adddf3+0x8c>
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf18      	it	ne
 800043c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000440:	d029      	beq.n	8000496 <__adddf3+0x24e>
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	d005      	beq.n	800045a <__adddf3+0x212>
 800044e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000452:	bf04      	itt	eq
 8000454:	4619      	moveq	r1, r3
 8000456:	4610      	moveq	r0, r2
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea91 0f03 	teq	r1, r3
 800045e:	bf1e      	ittt	ne
 8000460:	2100      	movne	r1, #0
 8000462:	2000      	movne	r0, #0
 8000464:	bd30      	popne	{r4, r5, pc}
 8000466:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046a:	d105      	bne.n	8000478 <__adddf3+0x230>
 800046c:	0040      	lsls	r0, r0, #1
 800046e:	4149      	adcs	r1, r1
 8000470:	bf28      	it	cs
 8000472:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000476:	bd30      	pop	{r4, r5, pc}
 8000478:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800047c:	bf3c      	itt	cc
 800047e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000482:	bd30      	popcc	{r4, r5, pc}
 8000484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000488:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800048c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf1a      	itte	ne
 800049c:	4619      	movne	r1, r3
 800049e:	4610      	movne	r0, r2
 80004a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a4:	bf1c      	itt	ne
 80004a6:	460b      	movne	r3, r1
 80004a8:	4602      	movne	r2, r0
 80004aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ae:	bf06      	itte	eq
 80004b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b4:	ea91 0f03 	teqeq	r1, r3
 80004b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	bf00      	nop

080004c0 <__aeabi_ui2d>:
 80004c0:	f090 0f00 	teq	r0, #0
 80004c4:	bf04      	itt	eq
 80004c6:	2100      	moveq	r1, #0
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d4:	f04f 0500 	mov.w	r5, #0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e750      	b.n	8000380 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_i2d>:
 80004e0:	f090 0f00 	teq	r0, #0
 80004e4:	bf04      	itt	eq
 80004e6:	2100      	moveq	r1, #0
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f8:	bf48      	it	mi
 80004fa:	4240      	negmi	r0, r0
 80004fc:	f04f 0100 	mov.w	r1, #0
 8000500:	e73e      	b.n	8000380 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_f2d>:
 8000504:	0042      	lsls	r2, r0, #1
 8000506:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050a:	ea4f 0131 	mov.w	r1, r1, rrx
 800050e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000512:	bf1f      	itttt	ne
 8000514:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800051c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000520:	4770      	bxne	lr
 8000522:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000526:	bf08      	it	eq
 8000528:	4770      	bxeq	lr
 800052a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052e:	bf04      	itt	eq
 8000530:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 7460 	mov.w	r4, #896	; 0x380
 800053c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000540:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000544:	e71c      	b.n	8000380 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_ul2d>:
 8000548:	ea50 0201 	orrs.w	r2, r0, r1
 800054c:	bf08      	it	eq
 800054e:	4770      	bxeq	lr
 8000550:	b530      	push	{r4, r5, lr}
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	e00a      	b.n	800056e <__aeabi_l2d+0x16>

08000558 <__aeabi_l2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000566:	d502      	bpl.n	800056e <__aeabi_l2d+0x16>
 8000568:	4240      	negs	r0, r0
 800056a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000572:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000576:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057a:	f43f aed8 	beq.w	800032e <__adddf3+0xe6>
 800057e:	f04f 0203 	mov.w	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000596:	f1c2 0320 	rsb	r3, r2, #32
 800059a:	fa00 fc03 	lsl.w	ip, r0, r3
 800059e:	fa20 f002 	lsr.w	r0, r0, r2
 80005a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a6:	ea40 000e 	orr.w	r0, r0, lr
 80005aa:	fa21 f102 	lsr.w	r1, r1, r2
 80005ae:	4414      	add	r4, r2
 80005b0:	e6bd      	b.n	800032e <__adddf3+0xe6>
 80005b2:	bf00      	nop

080005b4 <__aeabi_d2f>:
 80005b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005bc:	bf24      	itt	cs
 80005be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005c6:	d90d      	bls.n	80005e4 <__aeabi_d2f+0x30>
 80005c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005dc:	bf08      	it	eq
 80005de:	f020 0001 	biceq.w	r0, r0, #1
 80005e2:	4770      	bx	lr
 80005e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005e8:	d121      	bne.n	800062e <__aeabi_d2f+0x7a>
 80005ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005ee:	bfbc      	itt	lt
 80005f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005f4:	4770      	bxlt	lr
 80005f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005fe:	f1c2 0218 	rsb	r2, r2, #24
 8000602:	f1c2 0c20 	rsb	ip, r2, #32
 8000606:	fa10 f30c 	lsls.w	r3, r0, ip
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	bf18      	it	ne
 8000610:	f040 0001 	orrne.w	r0, r0, #1
 8000614:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000618:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800061c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000620:	ea40 000c 	orr.w	r0, r0, ip
 8000624:	fa23 f302 	lsr.w	r3, r3, r2
 8000628:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800062c:	e7cc      	b.n	80005c8 <__aeabi_d2f+0x14>
 800062e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000632:	d107      	bne.n	8000644 <__aeabi_d2f+0x90>
 8000634:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000638:	bf1e      	ittt	ne
 800063a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800063e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000642:	4770      	bxne	lr
 8000644:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000648:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800064c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <__aeabi_uldivmod>:
 8000654:	b953      	cbnz	r3, 800066c <__aeabi_uldivmod+0x18>
 8000656:	b94a      	cbnz	r2, 800066c <__aeabi_uldivmod+0x18>
 8000658:	2900      	cmp	r1, #0
 800065a:	bf08      	it	eq
 800065c:	2800      	cmpeq	r0, #0
 800065e:	bf1c      	itt	ne
 8000660:	f04f 31ff 	movne.w	r1, #4294967295
 8000664:	f04f 30ff 	movne.w	r0, #4294967295
 8000668:	f000 b970 	b.w	800094c <__aeabi_idiv0>
 800066c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000670:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000674:	f000 f806 	bl	8000684 <__udivmoddi4>
 8000678:	f8dd e004 	ldr.w	lr, [sp, #4]
 800067c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000680:	b004      	add	sp, #16
 8000682:	4770      	bx	lr

08000684 <__udivmoddi4>:
 8000684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000688:	9e08      	ldr	r6, [sp, #32]
 800068a:	460d      	mov	r5, r1
 800068c:	4604      	mov	r4, r0
 800068e:	460f      	mov	r7, r1
 8000690:	2b00      	cmp	r3, #0
 8000692:	d14a      	bne.n	800072a <__udivmoddi4+0xa6>
 8000694:	428a      	cmp	r2, r1
 8000696:	4694      	mov	ip, r2
 8000698:	d965      	bls.n	8000766 <__udivmoddi4+0xe2>
 800069a:	fab2 f382 	clz	r3, r2
 800069e:	b143      	cbz	r3, 80006b2 <__udivmoddi4+0x2e>
 80006a0:	fa02 fc03 	lsl.w	ip, r2, r3
 80006a4:	f1c3 0220 	rsb	r2, r3, #32
 80006a8:	409f      	lsls	r7, r3
 80006aa:	fa20 f202 	lsr.w	r2, r0, r2
 80006ae:	4317      	orrs	r7, r2
 80006b0:	409c      	lsls	r4, r3
 80006b2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006b6:	fa1f f58c 	uxth.w	r5, ip
 80006ba:	fbb7 f1fe 	udiv	r1, r7, lr
 80006be:	0c22      	lsrs	r2, r4, #16
 80006c0:	fb0e 7711 	mls	r7, lr, r1, r7
 80006c4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006c8:	fb01 f005 	mul.w	r0, r1, r5
 80006cc:	4290      	cmp	r0, r2
 80006ce:	d90a      	bls.n	80006e6 <__udivmoddi4+0x62>
 80006d0:	eb1c 0202 	adds.w	r2, ip, r2
 80006d4:	f101 37ff 	add.w	r7, r1, #4294967295
 80006d8:	f080 811c 	bcs.w	8000914 <__udivmoddi4+0x290>
 80006dc:	4290      	cmp	r0, r2
 80006de:	f240 8119 	bls.w	8000914 <__udivmoddi4+0x290>
 80006e2:	3902      	subs	r1, #2
 80006e4:	4462      	add	r2, ip
 80006e6:	1a12      	subs	r2, r2, r0
 80006e8:	b2a4      	uxth	r4, r4
 80006ea:	fbb2 f0fe 	udiv	r0, r2, lr
 80006ee:	fb0e 2210 	mls	r2, lr, r0, r2
 80006f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006f6:	fb00 f505 	mul.w	r5, r0, r5
 80006fa:	42a5      	cmp	r5, r4
 80006fc:	d90a      	bls.n	8000714 <__udivmoddi4+0x90>
 80006fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000702:	f100 32ff 	add.w	r2, r0, #4294967295
 8000706:	f080 8107 	bcs.w	8000918 <__udivmoddi4+0x294>
 800070a:	42a5      	cmp	r5, r4
 800070c:	f240 8104 	bls.w	8000918 <__udivmoddi4+0x294>
 8000710:	4464      	add	r4, ip
 8000712:	3802      	subs	r0, #2
 8000714:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000718:	1b64      	subs	r4, r4, r5
 800071a:	2100      	movs	r1, #0
 800071c:	b11e      	cbz	r6, 8000726 <__udivmoddi4+0xa2>
 800071e:	40dc      	lsrs	r4, r3
 8000720:	2300      	movs	r3, #0
 8000722:	e9c6 4300 	strd	r4, r3, [r6]
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	428b      	cmp	r3, r1
 800072c:	d908      	bls.n	8000740 <__udivmoddi4+0xbc>
 800072e:	2e00      	cmp	r6, #0
 8000730:	f000 80ed 	beq.w	800090e <__udivmoddi4+0x28a>
 8000734:	2100      	movs	r1, #0
 8000736:	e9c6 0500 	strd	r0, r5, [r6]
 800073a:	4608      	mov	r0, r1
 800073c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000740:	fab3 f183 	clz	r1, r3
 8000744:	2900      	cmp	r1, #0
 8000746:	d149      	bne.n	80007dc <__udivmoddi4+0x158>
 8000748:	42ab      	cmp	r3, r5
 800074a:	d302      	bcc.n	8000752 <__udivmoddi4+0xce>
 800074c:	4282      	cmp	r2, r0
 800074e:	f200 80f8 	bhi.w	8000942 <__udivmoddi4+0x2be>
 8000752:	1a84      	subs	r4, r0, r2
 8000754:	eb65 0203 	sbc.w	r2, r5, r3
 8000758:	2001      	movs	r0, #1
 800075a:	4617      	mov	r7, r2
 800075c:	2e00      	cmp	r6, #0
 800075e:	d0e2      	beq.n	8000726 <__udivmoddi4+0xa2>
 8000760:	e9c6 4700 	strd	r4, r7, [r6]
 8000764:	e7df      	b.n	8000726 <__udivmoddi4+0xa2>
 8000766:	b902      	cbnz	r2, 800076a <__udivmoddi4+0xe6>
 8000768:	deff      	udf	#255	; 0xff
 800076a:	fab2 f382 	clz	r3, r2
 800076e:	2b00      	cmp	r3, #0
 8000770:	f040 8090 	bne.w	8000894 <__udivmoddi4+0x210>
 8000774:	1a8a      	subs	r2, r1, r2
 8000776:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800077a:	fa1f fe8c 	uxth.w	lr, ip
 800077e:	2101      	movs	r1, #1
 8000780:	fbb2 f5f7 	udiv	r5, r2, r7
 8000784:	fb07 2015 	mls	r0, r7, r5, r2
 8000788:	0c22      	lsrs	r2, r4, #16
 800078a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800078e:	fb0e f005 	mul.w	r0, lr, r5
 8000792:	4290      	cmp	r0, r2
 8000794:	d908      	bls.n	80007a8 <__udivmoddi4+0x124>
 8000796:	eb1c 0202 	adds.w	r2, ip, r2
 800079a:	f105 38ff 	add.w	r8, r5, #4294967295
 800079e:	d202      	bcs.n	80007a6 <__udivmoddi4+0x122>
 80007a0:	4290      	cmp	r0, r2
 80007a2:	f200 80cb 	bhi.w	800093c <__udivmoddi4+0x2b8>
 80007a6:	4645      	mov	r5, r8
 80007a8:	1a12      	subs	r2, r2, r0
 80007aa:	b2a4      	uxth	r4, r4
 80007ac:	fbb2 f0f7 	udiv	r0, r2, r7
 80007b0:	fb07 2210 	mls	r2, r7, r0, r2
 80007b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007b8:	fb0e fe00 	mul.w	lr, lr, r0
 80007bc:	45a6      	cmp	lr, r4
 80007be:	d908      	bls.n	80007d2 <__udivmoddi4+0x14e>
 80007c0:	eb1c 0404 	adds.w	r4, ip, r4
 80007c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007c8:	d202      	bcs.n	80007d0 <__udivmoddi4+0x14c>
 80007ca:	45a6      	cmp	lr, r4
 80007cc:	f200 80bb 	bhi.w	8000946 <__udivmoddi4+0x2c2>
 80007d0:	4610      	mov	r0, r2
 80007d2:	eba4 040e 	sub.w	r4, r4, lr
 80007d6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007da:	e79f      	b.n	800071c <__udivmoddi4+0x98>
 80007dc:	f1c1 0720 	rsb	r7, r1, #32
 80007e0:	408b      	lsls	r3, r1
 80007e2:	fa22 fc07 	lsr.w	ip, r2, r7
 80007e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80007ea:	fa05 f401 	lsl.w	r4, r5, r1
 80007ee:	fa20 f307 	lsr.w	r3, r0, r7
 80007f2:	40fd      	lsrs	r5, r7
 80007f4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007f8:	4323      	orrs	r3, r4
 80007fa:	fbb5 f8f9 	udiv	r8, r5, r9
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	fb09 5518 	mls	r5, r9, r8, r5
 8000806:	0c1c      	lsrs	r4, r3, #16
 8000808:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800080c:	fb08 f50e 	mul.w	r5, r8, lr
 8000810:	42a5      	cmp	r5, r4
 8000812:	fa02 f201 	lsl.w	r2, r2, r1
 8000816:	fa00 f001 	lsl.w	r0, r0, r1
 800081a:	d90b      	bls.n	8000834 <__udivmoddi4+0x1b0>
 800081c:	eb1c 0404 	adds.w	r4, ip, r4
 8000820:	f108 3aff 	add.w	sl, r8, #4294967295
 8000824:	f080 8088 	bcs.w	8000938 <__udivmoddi4+0x2b4>
 8000828:	42a5      	cmp	r5, r4
 800082a:	f240 8085 	bls.w	8000938 <__udivmoddi4+0x2b4>
 800082e:	f1a8 0802 	sub.w	r8, r8, #2
 8000832:	4464      	add	r4, ip
 8000834:	1b64      	subs	r4, r4, r5
 8000836:	b29d      	uxth	r5, r3
 8000838:	fbb4 f3f9 	udiv	r3, r4, r9
 800083c:	fb09 4413 	mls	r4, r9, r3, r4
 8000840:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000844:	fb03 fe0e 	mul.w	lr, r3, lr
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x1da>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f103 35ff 	add.w	r5, r3, #4294967295
 8000854:	d26c      	bcs.n	8000930 <__udivmoddi4+0x2ac>
 8000856:	45a6      	cmp	lr, r4
 8000858:	d96a      	bls.n	8000930 <__udivmoddi4+0x2ac>
 800085a:	3b02      	subs	r3, #2
 800085c:	4464      	add	r4, ip
 800085e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000862:	fba3 9502 	umull	r9, r5, r3, r2
 8000866:	eba4 040e 	sub.w	r4, r4, lr
 800086a:	42ac      	cmp	r4, r5
 800086c:	46c8      	mov	r8, r9
 800086e:	46ae      	mov	lr, r5
 8000870:	d356      	bcc.n	8000920 <__udivmoddi4+0x29c>
 8000872:	d053      	beq.n	800091c <__udivmoddi4+0x298>
 8000874:	b156      	cbz	r6, 800088c <__udivmoddi4+0x208>
 8000876:	ebb0 0208 	subs.w	r2, r0, r8
 800087a:	eb64 040e 	sbc.w	r4, r4, lr
 800087e:	fa04 f707 	lsl.w	r7, r4, r7
 8000882:	40ca      	lsrs	r2, r1
 8000884:	40cc      	lsrs	r4, r1
 8000886:	4317      	orrs	r7, r2
 8000888:	e9c6 7400 	strd	r7, r4, [r6]
 800088c:	4618      	mov	r0, r3
 800088e:	2100      	movs	r1, #0
 8000890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000894:	f1c3 0120 	rsb	r1, r3, #32
 8000898:	fa02 fc03 	lsl.w	ip, r2, r3
 800089c:	fa20 f201 	lsr.w	r2, r0, r1
 80008a0:	fa25 f101 	lsr.w	r1, r5, r1
 80008a4:	409d      	lsls	r5, r3
 80008a6:	432a      	orrs	r2, r5
 80008a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ac:	fa1f fe8c 	uxth.w	lr, ip
 80008b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80008b4:	fb07 1510 	mls	r5, r7, r0, r1
 80008b8:	0c11      	lsrs	r1, r2, #16
 80008ba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008be:	fb00 f50e 	mul.w	r5, r0, lr
 80008c2:	428d      	cmp	r5, r1
 80008c4:	fa04 f403 	lsl.w	r4, r4, r3
 80008c8:	d908      	bls.n	80008dc <__udivmoddi4+0x258>
 80008ca:	eb1c 0101 	adds.w	r1, ip, r1
 80008ce:	f100 38ff 	add.w	r8, r0, #4294967295
 80008d2:	d22f      	bcs.n	8000934 <__udivmoddi4+0x2b0>
 80008d4:	428d      	cmp	r5, r1
 80008d6:	d92d      	bls.n	8000934 <__udivmoddi4+0x2b0>
 80008d8:	3802      	subs	r0, #2
 80008da:	4461      	add	r1, ip
 80008dc:	1b49      	subs	r1, r1, r5
 80008de:	b292      	uxth	r2, r2
 80008e0:	fbb1 f5f7 	udiv	r5, r1, r7
 80008e4:	fb07 1115 	mls	r1, r7, r5, r1
 80008e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008ec:	fb05 f10e 	mul.w	r1, r5, lr
 80008f0:	4291      	cmp	r1, r2
 80008f2:	d908      	bls.n	8000906 <__udivmoddi4+0x282>
 80008f4:	eb1c 0202 	adds.w	r2, ip, r2
 80008f8:	f105 38ff 	add.w	r8, r5, #4294967295
 80008fc:	d216      	bcs.n	800092c <__udivmoddi4+0x2a8>
 80008fe:	4291      	cmp	r1, r2
 8000900:	d914      	bls.n	800092c <__udivmoddi4+0x2a8>
 8000902:	3d02      	subs	r5, #2
 8000904:	4462      	add	r2, ip
 8000906:	1a52      	subs	r2, r2, r1
 8000908:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800090c:	e738      	b.n	8000780 <__udivmoddi4+0xfc>
 800090e:	4631      	mov	r1, r6
 8000910:	4630      	mov	r0, r6
 8000912:	e708      	b.n	8000726 <__udivmoddi4+0xa2>
 8000914:	4639      	mov	r1, r7
 8000916:	e6e6      	b.n	80006e6 <__udivmoddi4+0x62>
 8000918:	4610      	mov	r0, r2
 800091a:	e6fb      	b.n	8000714 <__udivmoddi4+0x90>
 800091c:	4548      	cmp	r0, r9
 800091e:	d2a9      	bcs.n	8000874 <__udivmoddi4+0x1f0>
 8000920:	ebb9 0802 	subs.w	r8, r9, r2
 8000924:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000928:	3b01      	subs	r3, #1
 800092a:	e7a3      	b.n	8000874 <__udivmoddi4+0x1f0>
 800092c:	4645      	mov	r5, r8
 800092e:	e7ea      	b.n	8000906 <__udivmoddi4+0x282>
 8000930:	462b      	mov	r3, r5
 8000932:	e794      	b.n	800085e <__udivmoddi4+0x1da>
 8000934:	4640      	mov	r0, r8
 8000936:	e7d1      	b.n	80008dc <__udivmoddi4+0x258>
 8000938:	46d0      	mov	r8, sl
 800093a:	e77b      	b.n	8000834 <__udivmoddi4+0x1b0>
 800093c:	3d02      	subs	r5, #2
 800093e:	4462      	add	r2, ip
 8000940:	e732      	b.n	80007a8 <__udivmoddi4+0x124>
 8000942:	4608      	mov	r0, r1
 8000944:	e70a      	b.n	800075c <__udivmoddi4+0xd8>
 8000946:	4464      	add	r4, ip
 8000948:	3802      	subs	r0, #2
 800094a:	e742      	b.n	80007d2 <__udivmoddi4+0x14e>

0800094c <__aeabi_idiv0>:
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <__NVIC_GetPriorityGrouping+0x18>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	f003 0307 	and.w	r3, r3, #7
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	db0b      	blt.n	8000996 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f003 021f 	and.w	r2, r3, #31
 8000984:	4907      	ldr	r1, [pc, #28]	; (80009a4 <__NVIC_EnableIRQ+0x38>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	095b      	lsrs	r3, r3, #5
 800098c:	2001      	movs	r0, #1
 800098e:	fa00 f202 	lsl.w	r2, r0, r2
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000e100 	.word	0xe000e100

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0a      	blt.n	80009d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	490c      	ldr	r1, [pc, #48]	; (80009f4 <__NVIC_SetPriority+0x4c>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	0112      	lsls	r2, r2, #4
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d0:	e00a      	b.n	80009e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4908      	ldr	r1, [pc, #32]	; (80009f8 <__NVIC_SetPriority+0x50>)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	3b04      	subs	r3, #4
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	b2d2      	uxtb	r2, r2
 80009e4:	440b      	add	r3, r1
 80009e6:	761a      	strb	r2, [r3, #24]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	; 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	f1c3 0307 	rsb	r3, r3, #7
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	bf28      	it	cs
 8000a1a:	2304      	movcs	r3, #4
 8000a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2b06      	cmp	r3, #6
 8000a24:	d902      	bls.n	8000a2c <NVIC_EncodePriority+0x30>
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3b03      	subs	r3, #3
 8000a2a:	e000      	b.n	8000a2e <NVIC_EncodePriority+0x32>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	f04f 32ff 	mov.w	r2, #4294967295
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	401a      	ands	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	43d9      	mvns	r1, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	4313      	orrs	r3, r2
         );
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3724      	adds	r7, #36	; 0x24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	601a      	str	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	601a      	str	r2, [r3, #0]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d02e      	beq.n	8000b12 <LL_TIM_OC_DisableFast+0x6e>
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d029      	beq.n	8000b0e <LL_TIM_OC_DisableFast+0x6a>
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	2b10      	cmp	r3, #16
 8000abe:	d024      	beq.n	8000b0a <LL_TIM_OC_DisableFast+0x66>
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2b40      	cmp	r3, #64	; 0x40
 8000ac4:	d01f      	beq.n	8000b06 <LL_TIM_OC_DisableFast+0x62>
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000acc:	d019      	beq.n	8000b02 <LL_TIM_OC_DisableFast+0x5e>
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ad4:	d013      	beq.n	8000afe <LL_TIM_OC_DisableFast+0x5a>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000adc:	d00d      	beq.n	8000afa <LL_TIM_OC_DisableFast+0x56>
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ae4:	d007      	beq.n	8000af6 <LL_TIM_OC_DisableFast+0x52>
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aec:	d101      	bne.n	8000af2 <LL_TIM_OC_DisableFast+0x4e>
 8000aee:	2308      	movs	r3, #8
 8000af0:	e010      	b.n	8000b14 <LL_TIM_OC_DisableFast+0x70>
 8000af2:	2309      	movs	r3, #9
 8000af4:	e00e      	b.n	8000b14 <LL_TIM_OC_DisableFast+0x70>
 8000af6:	2307      	movs	r3, #7
 8000af8:	e00c      	b.n	8000b14 <LL_TIM_OC_DisableFast+0x70>
 8000afa:	2306      	movs	r3, #6
 8000afc:	e00a      	b.n	8000b14 <LL_TIM_OC_DisableFast+0x70>
 8000afe:	2305      	movs	r3, #5
 8000b00:	e008      	b.n	8000b14 <LL_TIM_OC_DisableFast+0x70>
 8000b02:	2304      	movs	r3, #4
 8000b04:	e006      	b.n	8000b14 <LL_TIM_OC_DisableFast+0x70>
 8000b06:	2303      	movs	r3, #3
 8000b08:	e004      	b.n	8000b14 <LL_TIM_OC_DisableFast+0x70>
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	e002      	b.n	8000b14 <LL_TIM_OC_DisableFast+0x70>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <LL_TIM_OC_DisableFast+0x70>
 8000b12:	2300      	movs	r3, #0
 8000b14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3318      	adds	r3, #24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LL_TIM_OC_DisableFast+0xa8>)
 8000b20:	5cd3      	ldrb	r3, [r2, r3]
 8000b22:	440b      	add	r3, r1
 8000b24:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	4908      	ldr	r1, [pc, #32]	; (8000b50 <LL_TIM_OC_DisableFast+0xac>)
 8000b2e:	5ccb      	ldrb	r3, [r1, r3]
 8000b30:	4619      	mov	r1, r3
 8000b32:	2304      	movs	r3, #4
 8000b34:	408b      	lsls	r3, r1
 8000b36:	43db      	mvns	r3, r3
 8000b38:	401a      	ands	r2, r3
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	601a      	str	r2, [r3, #0]

}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	0800b670 	.word	0x0800b670
 8000b50:	0800b67c 	.word	0x0800b67c

08000b54 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d02e      	beq.n	8000bc2 <LL_TIM_OC_EnablePreload+0x6e>
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d029      	beq.n	8000bbe <LL_TIM_OC_EnablePreload+0x6a>
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b10      	cmp	r3, #16
 8000b6e:	d024      	beq.n	8000bba <LL_TIM_OC_EnablePreload+0x66>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2b40      	cmp	r3, #64	; 0x40
 8000b74:	d01f      	beq.n	8000bb6 <LL_TIM_OC_EnablePreload+0x62>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b7c:	d019      	beq.n	8000bb2 <LL_TIM_OC_EnablePreload+0x5e>
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b84:	d013      	beq.n	8000bae <LL_TIM_OC_EnablePreload+0x5a>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b8c:	d00d      	beq.n	8000baa <LL_TIM_OC_EnablePreload+0x56>
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b94:	d007      	beq.n	8000ba6 <LL_TIM_OC_EnablePreload+0x52>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b9c:	d101      	bne.n	8000ba2 <LL_TIM_OC_EnablePreload+0x4e>
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	e010      	b.n	8000bc4 <LL_TIM_OC_EnablePreload+0x70>
 8000ba2:	2309      	movs	r3, #9
 8000ba4:	e00e      	b.n	8000bc4 <LL_TIM_OC_EnablePreload+0x70>
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	e00c      	b.n	8000bc4 <LL_TIM_OC_EnablePreload+0x70>
 8000baa:	2306      	movs	r3, #6
 8000bac:	e00a      	b.n	8000bc4 <LL_TIM_OC_EnablePreload+0x70>
 8000bae:	2305      	movs	r3, #5
 8000bb0:	e008      	b.n	8000bc4 <LL_TIM_OC_EnablePreload+0x70>
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	e006      	b.n	8000bc4 <LL_TIM_OC_EnablePreload+0x70>
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e004      	b.n	8000bc4 <LL_TIM_OC_EnablePreload+0x70>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	e002      	b.n	8000bc4 <LL_TIM_OC_EnablePreload+0x70>
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <LL_TIM_OC_EnablePreload+0x70>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3318      	adds	r3, #24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LL_TIM_OC_EnablePreload+0xa4>)
 8000bd0:	5cd3      	ldrb	r3, [r2, r3]
 8000bd2:	440b      	add	r3, r1
 8000bd4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	4907      	ldr	r1, [pc, #28]	; (8000bfc <LL_TIM_OC_EnablePreload+0xa8>)
 8000bde:	5ccb      	ldrb	r3, [r1, r3]
 8000be0:	4619      	mov	r1, r3
 8000be2:	2308      	movs	r3, #8
 8000be4:	408b      	lsls	r3, r1
 8000be6:	431a      	orrs	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	601a      	str	r2, [r3, #0]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	0800b670 	.word	0x0800b670
 8000bfc:	0800b67c 	.word	0x0800b67c

08000c00 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000c12:	f023 0307 	bic.w	r3, r3, #7
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	431a      	orrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	605a      	str	r2, [r3, #4]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	605a      	str	r2, [r3, #4]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ca6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ca8:	4907      	ldr	r1, [pc, #28]	; (8000cc8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000

08000ccc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ce2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d00:	f001 f853 	bl	8001daa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d04:	f000 f817 	bl	8000d36 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d08:	f000 fc64 	bl	80015d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d0c:	f000 fc3e 	bl	800158c <MX_DMA_Init>
  MX_ADC1_Init();
 8000d10:	f000 f85a 	bl	8000dc8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d14:	f000 f902 	bl	8000f1c <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000d18:	f000 fb9e 	bl	8001458 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000d1c:	f000 f996 	bl	800104c <MX_I2C2_Init>
  MX_TIM1_Init();
 8000d20:	f000 f9d4 	bl	80010cc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000d24:	f000 fbe4 	bl	80014f0 <MX_USART3_UART_Init>
  MX_TIM15_Init();
 8000d28:	f000 fae0 	bl	80012ec <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  AppMainInit();
 8000d2c:	f009 fa40 	bl	800a1b0 <AppMainInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	AppMainProcess();
 8000d30:	f009 fa6c 	bl	800a20c <AppMainProcess>
 8000d34:	e7fc      	b.n	8000d30 <main+0x34>

08000d36 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b094      	sub	sp, #80	; 0x50
 8000d3a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	2238      	movs	r2, #56	; 0x38
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f00a fbbf 	bl	800b4c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f003 fbaf 	bl	80044bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d74:	2355      	movs	r3, #85	; 0x55
 8000d76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 fc3b 	bl	8004604 <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d94:	f000 fcac 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	230f      	movs	r3, #15
 8000d9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2104      	movs	r1, #4
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 ff3f 	bl	8004c34 <HAL_RCC_ClockConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000dbc:	f000 fc98 	bl	80016f0 <Error_Handler>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3750      	adds	r7, #80	; 0x50
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	; 0x30
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2220      	movs	r2, #32
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f00a fb71 	bl	800b4c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000de6:	4b48      	ldr	r3, [pc, #288]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000de8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dee:	4b46      	ldr	r3, [pc, #280]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000df0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000df4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df6:	4b44      	ldr	r3, [pc, #272]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dfc:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e02:	4b41      	ldr	r3, [pc, #260]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e08:	4b3f      	ldr	r3, [pc, #252]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e0e:	4b3e      	ldr	r3, [pc, #248]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e10:	2204      	movs	r2, #4
 8000e12:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e14:	4b3c      	ldr	r3, [pc, #240]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e1a:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000e20:	4b39      	ldr	r3, [pc, #228]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e22:	2204      	movs	r2, #4
 8000e24:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e26:	4b38      	ldr	r3, [pc, #224]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e30:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e36:	4b34      	ldr	r3, [pc, #208]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e3e:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e46:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e56:	482c      	ldr	r0, [pc, #176]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e58:	f001 face 	bl	80023f8 <HAL_ADC_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000e62:	f000 fc45 	bl	80016f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4825      	ldr	r0, [pc, #148]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e72:	f002 fb17 	bl	80034a4 <HAL_ADCEx_MultiModeConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000e7c:	f000 fc38 	bl	80016f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <MX_ADC1_Init+0x144>)
 8000e82:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e84:	2306      	movs	r3, #6
 8000e86:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000e88:	2305      	movs	r3, #5
 8000e8a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e8c:	237f      	movs	r3, #127	; 0x7f
 8000e8e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e90:	2304      	movs	r3, #4
 8000e92:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481a      	ldr	r0, [pc, #104]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000e9e:	f001 fd07 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000ea8:	f000 fc22 	bl	80016f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_ADC1_Init+0x148>)
 8000eae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000eb0:	230c      	movs	r3, #12
 8000eb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4813      	ldr	r0, [pc, #76]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000eba:	f001 fcf9 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000ec4:	f000 fc14 	bl	80016f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_ADC1_Init+0x14c>)
 8000eca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ecc:	2312      	movs	r3, #18
 8000ece:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000ed6:	f001 fceb 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000ee0:	f000 fc06 	bl	80016f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_ADC1_Init+0x150>)
 8000ee6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ee8:	2318      	movs	r3, #24
 8000eea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_ADC1_Init+0x140>)
 8000ef2:	f001 fcdd 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000efc:	f000 fbf8 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	3730      	adds	r7, #48	; 0x30
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200004dc 	.word	0x200004dc
 8000f0c:	04300002 	.word	0x04300002
 8000f10:	08600004 	.word	0x08600004
 8000f14:	14f00020 	.word	0x14f00020
 8000f18:	3ef08000 	.word	0x3ef08000

08000f1c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2220      	movs	r2, #32
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f00a facd 	bl	800b4c8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f2e:	4b41      	ldr	r3, [pc, #260]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f30:	4a41      	ldr	r2, [pc, #260]	; (8001038 <MX_ADC2_Init+0x11c>)
 8000f32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f34:	4b3f      	ldr	r3, [pc, #252]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f36:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f3a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3c:	4b3d      	ldr	r3, [pc, #244]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f42:	4b3c      	ldr	r3, [pc, #240]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f48:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f4e:	4b39      	ldr	r3, [pc, #228]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f54:	4b37      	ldr	r3, [pc, #220]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f5a:	4b36      	ldr	r3, [pc, #216]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f60:	4b34      	ldr	r3, [pc, #208]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 8000f66:	4b33      	ldr	r3, [pc, #204]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f68:	2204      	movs	r2, #4
 8000f6a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f6c:	4b31      	ldr	r3, [pc, #196]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f74:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f76:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f82:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f84:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f92:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f9c:	4825      	ldr	r0, [pc, #148]	; (8001034 <MX_ADC2_Init+0x118>)
 8000f9e:	f001 fa2b 	bl	80023f8 <HAL_ADC_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000fa8:	f000 fba2 	bl	80016f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_ADC2_Init+0x120>)
 8000fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb8:	237f      	movs	r3, #127	; 0x7f
 8000fba:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	481a      	ldr	r0, [pc, #104]	; (8001034 <MX_ADC2_Init+0x118>)
 8000fca:	f001 fc71 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000fd4:	f000 fb8c 	bl	80016f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_ADC2_Init+0x124>)
 8000fda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fdc:	230c      	movs	r3, #12
 8000fde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4813      	ldr	r0, [pc, #76]	; (8001034 <MX_ADC2_Init+0x118>)
 8000fe6:	f001 fc63 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 8000ff0:	f000 fb7e 	bl	80016f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <MX_ADC2_Init+0x128>)
 8000ff6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ff8:	2312      	movs	r3, #18
 8000ffa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <MX_ADC2_Init+0x118>)
 8001002:	f001 fc55 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 800100c:	f000 fb70 	bl	80016f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <MX_ADC2_Init+0x12c>)
 8001012:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001014:	2318      	movs	r3, #24
 8001016:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_ADC2_Init+0x118>)
 800101e:	f001 fc47 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC2_Init+0x110>
  {
    Error_Handler();
 8001028:	f000 fb62 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000548 	.word	0x20000548
 8001038:	50000100 	.word	0x50000100
 800103c:	0c900008 	.word	0x0c900008
 8001040:	10c00010 	.word	0x10c00010
 8001044:	36902000 	.word	0x36902000
 8001048:	47520000 	.word	0x47520000

0800104c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_I2C2_Init+0x74>)
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <MX_I2C2_Init+0x78>)
 8001054:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_I2C2_Init+0x74>)
 8001058:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <MX_I2C2_Init+0x7c>)
 800105a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_I2C2_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_I2C2_Init+0x74>)
 8001064:	2201      	movs	r2, #1
 8001066:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_I2C2_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_I2C2_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_I2C2_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_I2C2_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_I2C2_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001086:	480e      	ldr	r0, [pc, #56]	; (80010c0 <MX_I2C2_Init+0x74>)
 8001088:	f003 f8f2 	bl	8004270 <HAL_I2C_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001092:	f000 fb2d 	bl	80016f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001096:	2100      	movs	r1, #0
 8001098:	4809      	ldr	r0, [pc, #36]	; (80010c0 <MX_I2C2_Init+0x74>)
 800109a:	f003 f978 	bl	800438e <HAL_I2CEx_ConfigAnalogFilter>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010a4:	f000 fb24 	bl	80016f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010a8:	2100      	movs	r1, #0
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_I2C2_Init+0x74>)
 80010ac:	f003 f9ba 	bl	8004424 <HAL_I2CEx_ConfigDigitalFilter>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010b6:	f000 fb1b 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000674 	.word	0x20000674
 80010c4:	40005800 	.word	0x40005800
 80010c8:	30a0a7fb 	.word	0x30a0a7fb

080010cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0a0      	sub	sp, #128	; 0x80
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80010d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80010e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010e6:	2220      	movs	r2, #32
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00a f9ec 	bl	800b4c8 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	2230      	movs	r2, #48	; 0x30
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00a f9e5 	bl	800b4c8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800110e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001112:	f7ff fddb 	bl	8000ccc <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001116:	f7ff fc1b 	bl	8000950 <__NVIC_GetPriorityGrouping>
 800111a:	4603      	mov	r3, r0
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fc6b 	bl	80009fc <NVIC_EncodePriority>
 8001126:	4603      	mov	r3, r0
 8001128:	4619      	mov	r1, r3
 800112a:	2018      	movs	r0, #24
 800112c:	f7ff fc3c 	bl	80009a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001130:	2018      	movs	r0, #24
 8001132:	f7ff fc1b 	bl	800096c <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001136:	f7ff fc0b 	bl	8000950 <__NVIC_GetPriorityGrouping>
 800113a:	4603      	mov	r3, r0
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fc5b 	bl	80009fc <NVIC_EncodePriority>
 8001146:	4603      	mov	r3, r0
 8001148:	4619      	mov	r1, r3
 800114a:	201b      	movs	r0, #27
 800114c:	f7ff fc2c 	bl	80009a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001150:	201b      	movs	r0, #27
 8001152:	f7ff fc0b 	bl	800096c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800115c:	2300      	movs	r3, #0
 800115e:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 3399;
 8001160:	f640 5347 	movw	r3, #3399	; 0xd47
 8001164:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800116e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001172:	4619      	mov	r1, r3
 8001174:	485c      	ldr	r0, [pc, #368]	; (80012e8 <MX_TIM1_Init+0x21c>)
 8001176:	f006 fd39 	bl	8007bec <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 800117a:	485b      	ldr	r0, [pc, #364]	; (80012e8 <MX_TIM1_Init+0x21c>)
 800117c:	f7ff fc71 	bl	8000a62 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001180:	2100      	movs	r1, #0
 8001182:	4859      	ldr	r0, [pc, #356]	; (80012e8 <MX_TIM1_Init+0x21c>)
 8001184:	f7ff fd3c 	bl	8000c00 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001188:	2101      	movs	r1, #1
 800118a:	4857      	ldr	r0, [pc, #348]	; (80012e8 <MX_TIM1_Init+0x21c>)
 800118c:	f7ff fce2 	bl	8000b54 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001190:	2360      	movs	r3, #96	; 0x60
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80011a4:	2300      	movs	r3, #0
 80011a6:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80011b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011b4:	461a      	mov	r2, r3
 80011b6:	2101      	movs	r1, #1
 80011b8:	484b      	ldr	r0, [pc, #300]	; (80012e8 <MX_TIM1_Init+0x21c>)
 80011ba:	f006 fda1 	bl	8007d00 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80011be:	2101      	movs	r1, #1
 80011c0:	4849      	ldr	r0, [pc, #292]	; (80012e8 <MX_TIM1_Init+0x21c>)
 80011c2:	f7ff fc6f 	bl	8000aa4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 80011c6:	2110      	movs	r1, #16
 80011c8:	4847      	ldr	r0, [pc, #284]	; (80012e8 <MX_TIM1_Init+0x21c>)
 80011ca:	f7ff fcc3 	bl	8000b54 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80011ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011d2:	461a      	mov	r2, r3
 80011d4:	2110      	movs	r1, #16
 80011d6:	4844      	ldr	r0, [pc, #272]	; (80012e8 <MX_TIM1_Init+0x21c>)
 80011d8:	f006 fd92 	bl	8007d00 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 80011dc:	2110      	movs	r1, #16
 80011de:	4842      	ldr	r0, [pc, #264]	; (80012e8 <MX_TIM1_Init+0x21c>)
 80011e0:	f7ff fc60 	bl	8000aa4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 80011e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e8:	483f      	ldr	r0, [pc, #252]	; (80012e8 <MX_TIM1_Init+0x21c>)
 80011ea:	f7ff fcb3 	bl	8000b54 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80011ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011f2:	461a      	mov	r2, r3
 80011f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f8:	483b      	ldr	r0, [pc, #236]	; (80012e8 <MX_TIM1_Init+0x21c>)
 80011fa:	f006 fd81 	bl	8007d00 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80011fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001202:	4839      	ldr	r0, [pc, #228]	; (80012e8 <MX_TIM1_Init+0x21c>)
 8001204:	f7ff fc4e 	bl	8000aa4 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 8001208:	2330      	movs	r3, #48	; 0x30
 800120a:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800120c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001210:	461a      	mov	r2, r3
 8001212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001216:	4834      	ldr	r0, [pc, #208]	; (80012e8 <MX_TIM1_Init+0x21c>)
 8001218:	f006 fd72 	bl	8007d00 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 800121c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001220:	4831      	ldr	r0, [pc, #196]	; (80012e8 <MX_TIM1_Init+0x21c>)
 8001222:	f7ff fc3f 	bl	8000aa4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
 8001226:	2170      	movs	r1, #112	; 0x70
 8001228:	482f      	ldr	r0, [pc, #188]	; (80012e8 <MX_TIM1_Init+0x21c>)
 800122a:	f7ff fcfe 	bl	8000c2a <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800122e:	2100      	movs	r1, #0
 8001230:	482d      	ldr	r0, [pc, #180]	; (80012e8 <MX_TIM1_Init+0x21c>)
 8001232:	f7ff fd0f 	bl	8000c54 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001236:	482c      	ldr	r0, [pc, #176]	; (80012e8 <MX_TIM1_Init+0x21c>)
 8001238:	f7ff fd1f 	bl	8000c7a <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 800123c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001240:	4829      	ldr	r0, [pc, #164]	; (80012e8 <MX_TIM1_Init+0x21c>)
 8001242:	f7ff fc87 	bl	8000b54 <LL_TIM_OC_EnablePreload>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800125c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8001266:	2300      	movs	r3, #0
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 800126e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001272:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4818      	ldr	r0, [pc, #96]	; (80012e8 <MX_TIM1_Init+0x21c>)
 8001288:	f006 fd9a 	bl	8007dc0 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff fd05 	bl	8000c9c <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA11   ------> TIM1_CH1N
  PA12   ------> TIM1_CH2N
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001292:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001296:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001298:	2302      	movs	r3, #2
 800129a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80012a4:	2302      	movs	r3, #2
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80012a8:	2306      	movs	r3, #6
 80012aa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b4:	f006 fb9b 	bl	80079ee <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80012b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012be:	2302      	movs	r3, #2
 80012c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80012ca:	2302      	movs	r3, #2
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80012ce:	2306      	movs	r3, #6
 80012d0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012da:	f006 fb88 	bl	80079ee <LL_GPIO_Init>

}
 80012de:	bf00      	nop
 80012e0:	3780      	adds	r7, #128	; 0x80
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40012c00 	.word	0x40012c00

080012ec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0a0      	sub	sp, #128	; 0x80
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80012f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001302:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001306:	2220      	movs	r2, #32
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f00a f8dc 	bl	800b4c8 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	2230      	movs	r2, #48	; 0x30
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f00a f8d5 	bl	800b4c8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM15);
 800132e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001332:	f7ff fccb 	bl	8000ccc <LL_APB2_GRP1_EnableClock>

  /* TIM15 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001336:	f7ff fb0b 	bl	8000950 <__NVIC_GetPriorityGrouping>
 800133a:	4603      	mov	r3, r0
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fb5b 	bl	80009fc <NVIC_EncodePriority>
 8001346:	4603      	mov	r3, r0
 8001348:	4619      	mov	r1, r3
 800134a:	2018      	movs	r0, #24
 800134c:	f7ff fb2c 	bl	80009a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001350:	2018      	movs	r0, #24
 8001352:	f7ff fb0b 	bl	800096c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800135c:	2300      	movs	r3, #0
 800135e:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 65535;
 8001360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001364:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM15, &TIM_InitStruct);
 800136e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001372:	4619      	mov	r1, r3
 8001374:	4836      	ldr	r0, [pc, #216]	; (8001450 <MX_TIM15_Init+0x164>)
 8001376:	f006 fc39 	bl	8007bec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM15);
 800137a:	4835      	ldr	r0, [pc, #212]	; (8001450 <MX_TIM15_Init+0x164>)
 800137c:	f7ff fb81 	bl	8000a82 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 8001380:	2330      	movs	r3, #48	; 0x30
 8001382:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001390:	2300      	movs	r3, #0
 8001392:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001394:	2300      	movs	r3, #0
 8001396:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM15, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80013a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013a4:	461a      	mov	r2, r3
 80013a6:	2101      	movs	r1, #1
 80013a8:	4829      	ldr	r0, [pc, #164]	; (8001450 <MX_TIM15_Init+0x164>)
 80013aa:	f006 fca9 	bl	8007d00 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM15, LL_TIM_CHANNEL_CH1);
 80013ae:	2101      	movs	r1, #1
 80013b0:	4827      	ldr	r0, [pc, #156]	; (8001450 <MX_TIM15_Init+0x164>)
 80013b2:	f7ff fb77 	bl	8000aa4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM15, LL_TIM_CHANNEL_CH2);
 80013b6:	2110      	movs	r1, #16
 80013b8:	4825      	ldr	r0, [pc, #148]	; (8001450 <MX_TIM15_Init+0x164>)
 80013ba:	f7ff fbcb 	bl	8000b54 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80013be:	2360      	movs	r3, #96	; 0x60
 80013c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_TIM_OC_Init(TIM15, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80013c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013c6:	461a      	mov	r2, r3
 80013c8:	2110      	movs	r1, #16
 80013ca:	4821      	ldr	r0, [pc, #132]	; (8001450 <MX_TIM15_Init+0x164>)
 80013cc:	f006 fc98 	bl	8007d00 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM15, LL_TIM_CHANNEL_CH2);
 80013d0:	2110      	movs	r1, #16
 80013d2:	481f      	ldr	r0, [pc, #124]	; (8001450 <MX_TIM15_Init+0x164>)
 80013d4:	f7ff fb66 	bl	8000aa4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM15, LL_TIM_TRGO_OC1REF);
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	481d      	ldr	r0, [pc, #116]	; (8001450 <MX_TIM15_Init+0x164>)
 80013dc:	f7ff fc25 	bl	8000c2a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM15);
 80013e0:	481b      	ldr	r0, [pc, #108]	; (8001450 <MX_TIM15_Init+0x164>)
 80013e2:	f7ff fc4a 	bl	8000c7a <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_EnablePreload(TIM15, LL_TIM_CHANNEL_CH1);
 80013e6:	2101      	movs	r1, #1
 80013e8:	4819      	ldr	r0, [pc, #100]	; (8001450 <MX_TIM15_Init+0x164>)
 80013ea:	f7ff fbb3 	bl	8000b54 <LL_TIM_OC_EnablePreload>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM15, &TIM_BDTRInitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <MX_TIM15_Init+0x164>)
 800141a:	f006 fcd1 	bl	8007dc0 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800141e:	2002      	movs	r0, #2
 8001420:	f7ff fc3c 	bl	8000c9c <LL_AHB2_GRP1_EnableClock>
  /**TIM15 GPIO Configuration
  PB15   ------> TIM15_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001428:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800142a:	2302      	movs	r3, #2
 800142c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001436:	2302      	movs	r3, #2
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800143a:	2301      	movs	r3, #1
 800143c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_TIM15_Init+0x168>)
 8001444:	f006 fad3 	bl	80079ee <LL_GPIO_Init>

}
 8001448:	bf00      	nop
 800144a:	3780      	adds	r7, #128	; 0x80
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40014000 	.word	0x40014000
 8001454:	48000400 	.word	0x48000400

08001458 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 800145e:	4a23      	ldr	r2, [pc, #140]	; (80014ec <MX_USART2_UART_Init+0x94>)
 8001460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 8001464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 800147e:	220c      	movs	r2, #12
 8001480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a0:	4811      	ldr	r0, [pc, #68]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 80014a2:	f003 ffd3 	bl	800544c <HAL_UART_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014ac:	f000 f920 	bl	80016f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b0:	2100      	movs	r1, #0
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 80014b4:	f006 f886 	bl	80075c4 <HAL_UARTEx_SetTxFifoThreshold>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014be:	f000 f917 	bl	80016f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c2:	2100      	movs	r1, #0
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 80014c6:	f006 f8bb 	bl	8007640 <HAL_UARTEx_SetRxFifoThreshold>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014d0:	f000 f90e 	bl	80016f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <MX_USART2_UART_Init+0x90>)
 80014d6:	f006 f83c 	bl	8007552 <HAL_UARTEx_DisableFifoMode>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014e0:	f000 f906 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200006c0 	.word	0x200006c0
 80014ec:	40004400 	.word	0x40004400

080014f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <MX_USART3_UART_Init+0x94>)
 80014f6:	4a24      	ldr	r2, [pc, #144]	; (8001588 <MX_USART3_UART_Init+0x98>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <MX_USART3_UART_Init+0x94>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <MX_USART3_UART_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <MX_USART3_UART_Init+0x94>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <MX_USART3_UART_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_USART3_UART_Init+0x94>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_USART3_UART_Init+0x94>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_USART3_UART_Init+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_USART3_UART_Init+0x94>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <MX_USART3_UART_Init+0x94>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_USART3_UART_Init+0x94>)
 8001534:	2200      	movs	r2, #0
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001538:	4812      	ldr	r0, [pc, #72]	; (8001584 <MX_USART3_UART_Init+0x94>)
 800153a:	f003 ff87 	bl	800544c <HAL_UART_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001544:	f000 f8d4 	bl	80016f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001548:	2100      	movs	r1, #0
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <MX_USART3_UART_Init+0x94>)
 800154c:	f006 f83a 	bl	80075c4 <HAL_UARTEx_SetTxFifoThreshold>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001556:	f000 f8cb 	bl	80016f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800155a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800155e:	4809      	ldr	r0, [pc, #36]	; (8001584 <MX_USART3_UART_Init+0x94>)
 8001560:	f006 f86e 	bl	8007640 <HAL_UARTEx_SetRxFifoThreshold>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 800156a:	f000 f8c1 	bl	80016f0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_USART3_UART_Init+0x94>)
 8001570:	f005 ffb4 	bl	80074dc <HAL_UARTEx_EnableFifoMode>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 800157a:	f000 f8b9 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000750 	.word	0x20000750
 8001588:	40004800 	.word	0x40004800

0800158c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_DMA_Init+0x44>)
 8001594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <MX_DMA_Init+0x44>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6493      	str	r3, [r2, #72]	; 0x48
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_DMA_Init+0x44>)
 80015a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_DMA_Init+0x44>)
 80015ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <MX_DMA_Init+0x44>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6493      	str	r3, [r2, #72]	; 0x48
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_DMA_Init+0x44>)
 80015b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <MX_GPIO_Init+0x110>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4a3d      	ldr	r2, [pc, #244]	; (80016e4 <MX_GPIO_Init+0x110>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <MX_GPIO_Init+0x110>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001602:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <MX_GPIO_Init+0x110>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4a37      	ldr	r2, [pc, #220]	; (80016e4 <MX_GPIO_Init+0x110>)
 8001608:	f043 0320 	orr.w	r3, r3, #32
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <MX_GPIO_Init+0x110>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <MX_GPIO_Init+0x110>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a31      	ldr	r2, [pc, #196]	; (80016e4 <MX_GPIO_Init+0x110>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <MX_GPIO_Init+0x110>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <MX_GPIO_Init+0x110>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4a2b      	ldr	r2, [pc, #172]	; (80016e4 <MX_GPIO_Init+0x110>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <MX_GPIO_Init+0x110>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001650:	4825      	ldr	r0, [pc, #148]	; (80016e8 <MX_GPIO_Init+0x114>)
 8001652:	f002 fdf5 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Control_485_Pin|Reset_3g_Pin
 8001656:	2200      	movs	r2, #0
 8001658:	f243 2186 	movw	r1, #12934	; 0x3286
 800165c:	4823      	ldr	r0, [pc, #140]	; (80016ec <MX_GPIO_Init+0x118>)
 800165e:	f002 fdef 	bl	8004240 <HAL_GPIO_WritePin>
                          |BUZZ_Pin|Power_on_off_3g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800166c:	2301      	movs	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	481b      	ldr	r0, [pc, #108]	; (80016e8 <MX_GPIO_Init+0x114>)
 800167c:	f002 fb7c 	bl	8003d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8001680:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4813      	ldr	r0, [pc, #76]	; (80016e8 <MX_GPIO_Init+0x114>)
 800169a:	f002 fb6d 	bl	8003d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Reset_3g_Pin BUZZ_Pin
                           Power_on_off_3g_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Reset_3g_Pin|BUZZ_Pin
 800169e:	f242 2386 	movw	r3, #8838	; 0x2286
 80016a2:	617b      	str	r3, [r7, #20]
                          |Power_on_off_3g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	480d      	ldr	r0, [pc, #52]	; (80016ec <MX_GPIO_Init+0x118>)
 80016b8:	f002 fb5e 	bl	8003d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : Control_485_Pin */
  GPIO_InitStruct.Pin = Control_485_Pin;
 80016bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ca:	2302      	movs	r3, #2
 80016cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Control_485_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_GPIO_Init+0x118>)
 80016d6:	f002 fb4f 	bl	8003d78 <HAL_GPIO_Init>

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000800 	.word	0x48000800
 80016ec:	48000400 	.word	0x48000400

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <Error_Handler+0x8>
	...

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_MspInit+0x50>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001706:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_MspInit+0x50>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6613      	str	r3, [r2, #96]	; 0x60
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_MspInit+0x50>)
 8001710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_MspInit+0x50>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <HAL_MspInit+0x50>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6593      	str	r3, [r2, #88]	; 0x58
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_MspInit+0x50>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8001732:	2020      	movs	r0, #32
 8001734:	f000 fbcc 	bl	8001ed0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001738:	f000 fbf2 	bl	8001f20 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 800173c:	2000      	movs	r0, #0
 800173e:	f000 fbdb 	bl	8001ef8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000

08001750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b09e      	sub	sp, #120	; 0x78
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001768:	f107 0320 	add.w	r3, r7, #32
 800176c:	2244      	movs	r2, #68	; 0x44
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f009 fea9 	bl	800b4c8 <memset>
  if(hadc->Instance==ADC1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800177e:	f040 8084 	bne.w	800188a <HAL_ADC_MspInit+0x13a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001786:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001788:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800178c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fc6a 	bl	800506c <HAL_RCCEx_PeriphCLKConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800179e:	f7ff ffa7 	bl	80016f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017a2:	4b73      	ldr	r3, [pc, #460]	; (8001970 <HAL_ADC_MspInit+0x220>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	4a71      	ldr	r2, [pc, #452]	; (8001970 <HAL_ADC_MspInit+0x220>)
 80017aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017ac:	4b70      	ldr	r3, [pc, #448]	; (8001970 <HAL_ADC_MspInit+0x220>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d10b      	bne.n	80017cc <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017b4:	4b6f      	ldr	r3, [pc, #444]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	4a6e      	ldr	r2, [pc, #440]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80017ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c0:	4b6c      	ldr	r3, [pc, #432]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b69      	ldr	r3, [pc, #420]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80017ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d0:	4a68      	ldr	r2, [pc, #416]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d8:	4b66      	ldr	r3, [pc, #408]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	4b63      	ldr	r3, [pc, #396]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	4a62      	ldr	r2, [pc, #392]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f0:	4b60      	ldr	r3, [pc, #384]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC1_IN1_VOUT_Pin|ADC1_IN2_TEMP2_Pin;
 80017fc:	2303      	movs	r3, #3
 80017fe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001800:	2303      	movs	r3, #3
 8001802:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f002 fab1 	bl	8003d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN15_WIND_Pin|ADC1_IN5_FREQ_Pin;
 8001816:	f244 0301 	movw	r3, #16385	; 0x4001
 800181a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181c:	2303      	movs	r3, #3
 800181e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001828:	4619      	mov	r1, r3
 800182a:	4853      	ldr	r0, [pc, #332]	; (8001978 <HAL_ADC_MspInit+0x228>)
 800182c:	f002 faa4 	bl	8003d78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001830:	4b52      	ldr	r3, [pc, #328]	; (800197c <HAL_ADC_MspInit+0x22c>)
 8001832:	4a53      	ldr	r2, [pc, #332]	; (8001980 <HAL_ADC_MspInit+0x230>)
 8001834:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001836:	4b51      	ldr	r3, [pc, #324]	; (800197c <HAL_ADC_MspInit+0x22c>)
 8001838:	2205      	movs	r2, #5
 800183a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183c:	4b4f      	ldr	r3, [pc, #316]	; (800197c <HAL_ADC_MspInit+0x22c>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001842:	4b4e      	ldr	r3, [pc, #312]	; (800197c <HAL_ADC_MspInit+0x22c>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001848:	4b4c      	ldr	r3, [pc, #304]	; (800197c <HAL_ADC_MspInit+0x22c>)
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800184e:	4b4b      	ldr	r3, [pc, #300]	; (800197c <HAL_ADC_MspInit+0x22c>)
 8001850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001854:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001856:	4b49      	ldr	r3, [pc, #292]	; (800197c <HAL_ADC_MspInit+0x22c>)
 8001858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_ADC_MspInit+0x22c>)
 8001860:	2220      	movs	r2, #32
 8001862:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001864:	4b45      	ldr	r3, [pc, #276]	; (800197c <HAL_ADC_MspInit+0x22c>)
 8001866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800186c:	4843      	ldr	r0, [pc, #268]	; (800197c <HAL_ADC_MspInit+0x22c>)
 800186e:	f001 ffff 	bl	8003870 <HAL_DMA_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8001878:	f7ff ff3a 	bl	80016f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a3f      	ldr	r2, [pc, #252]	; (800197c <HAL_ADC_MspInit+0x22c>)
 8001880:	655a      	str	r2, [r3, #84]	; 0x54
 8001882:	4a3e      	ldr	r2, [pc, #248]	; (800197c <HAL_ADC_MspInit+0x22c>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001888:	e06e      	b.n	8001968 <HAL_ADC_MspInit+0x218>
  else if(hadc->Instance==ADC2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a3d      	ldr	r2, [pc, #244]	; (8001984 <HAL_ADC_MspInit+0x234>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d169      	bne.n	8001968 <HAL_ADC_MspInit+0x218>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001894:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001898:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800189a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800189e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 fbe1 	bl	800506c <HAL_RCCEx_PeriphCLKConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_ADC_MspInit+0x164>
      Error_Handler();
 80018b0:	f7ff ff1e 	bl	80016f0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018b4:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <HAL_ADC_MspInit+0x220>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	4a2d      	ldr	r2, [pc, #180]	; (8001970 <HAL_ADC_MspInit+0x220>)
 80018bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018be:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <HAL_ADC_MspInit+0x220>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d10b      	bne.n	80018de <HAL_ADC_MspInit+0x18e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80018cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d2:	4b28      	ldr	r3, [pc, #160]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	4a24      	ldr	r2, [pc, #144]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_ADC_MspInit+0x224>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|ADC2_IN13_IDUMP_Pin|ADC2_IN3_VIN_Pin|ADC2_IN4_TEMP1_Pin;
 80018f6:	23f0      	movs	r3, #240	; 0xf0
 80018f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fa:	2303      	movs	r3, #3
 80018fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001906:	4619      	mov	r1, r3
 8001908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190c:	f002 fa34 	bl	8003d78 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_ADC_MspInit+0x238>)
 8001912:	4a1e      	ldr	r2, [pc, #120]	; (800198c <HAL_ADC_MspInit+0x23c>)
 8001914:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001916:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <HAL_ADC_MspInit+0x238>)
 8001918:	2224      	movs	r2, #36	; 0x24
 800191a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_ADC_MspInit+0x238>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_ADC_MspInit+0x238>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_ADC_MspInit+0x238>)
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <HAL_ADC_MspInit+0x238>)
 8001930:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001934:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_ADC_MspInit+0x238>)
 8001938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_ADC_MspInit+0x238>)
 8001940:	2220      	movs	r2, #32
 8001942:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_ADC_MspInit+0x238>)
 8001946:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800194c:	480e      	ldr	r0, [pc, #56]	; (8001988 <HAL_ADC_MspInit+0x238>)
 800194e:	f001 ff8f 	bl	8003870 <HAL_DMA_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_ADC_MspInit+0x20c>
      Error_Handler();
 8001958:	f7ff feca 	bl	80016f0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_ADC_MspInit+0x238>)
 8001960:	655a      	str	r2, [r3, #84]	; 0x54
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <HAL_ADC_MspInit+0x238>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001968:	bf00      	nop
 800196a:	3778      	adds	r7, #120	; 0x78
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200007e0 	.word	0x200007e0
 8001974:	40021000 	.word	0x40021000
 8001978:	48000400 	.word	0x48000400
 800197c:	200005b4 	.word	0x200005b4
 8001980:	40020008 	.word	0x40020008
 8001984:	50000100 	.word	0x50000100
 8001988:	20000614 	.word	0x20000614
 800198c:	40020030 	.word	0x40020030

08001990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b09a      	sub	sp, #104	; 0x68
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	2244      	movs	r2, #68	; 0x44
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f009 fd89 	bl	800b4c8 <memset>
  if(hi2c->Instance==I2C2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <HAL_I2C_MspInit+0xa8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d137      	bne.n	8001a30 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 fb4d 	bl	800506c <HAL_RCCEx_PeriphCLKConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019d8:	f7ff fe8a 	bl	80016f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_I2C_MspInit+0xac>)
 80019de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e0:	4a16      	ldr	r2, [pc, #88]	; (8001a3c <HAL_I2C_MspInit+0xac>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_I2C_MspInit+0xac>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019fa:	2312      	movs	r3, #18
 80019fc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a06:	2304      	movs	r3, #4
 8001a08:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a14:	f002 f9b0 	bl	8003d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_I2C_MspInit+0xac>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <HAL_I2C_MspInit+0xac>)
 8001a1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a22:	6593      	str	r3, [r2, #88]	; 0x58
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_I2C_MspInit+0xac>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a30:	bf00      	nop
 8001a32:	3768      	adds	r7, #104	; 0x68
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40005800 	.word	0x40005800
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b09c      	sub	sp, #112	; 0x70
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a58:	f107 0318 	add.w	r3, r7, #24
 8001a5c:	2244      	movs	r2, #68	; 0x44
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f009 fd31 	bl	800b4c8 <memset>
  if(huart->Instance==USART2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a41      	ldr	r2, [pc, #260]	; (8001b70 <HAL_UART_MspInit+0x130>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d13e      	bne.n	8001aee <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 faf5 	bl	800506c <HAL_RCCEx_PeriphCLKConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a88:	f7ff fe32 	bl	80016f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_UART_MspInit+0x134>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <HAL_UART_MspInit+0x134>)
 8001a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a96:	6593      	str	r3, [r2, #88]	; 0x58
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_UART_MspInit+0x134>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <HAL_UART_MspInit+0x134>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa8:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <HAL_UART_MspInit+0x134>)
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab0:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <HAL_UART_MspInit+0x134>)
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001abc:	2318      	movs	r3, #24
 8001abe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001acc:	2307      	movs	r3, #7
 8001ace:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4828      	ldr	r0, [pc, #160]	; (8001b78 <HAL_UART_MspInit+0x138>)
 8001ad8:	f002 f94e 	bl	8003d78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2026      	movs	r0, #38	; 0x26
 8001ae2:	f001 fe82 	bl	80037ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ae6:	2026      	movs	r0, #38	; 0x26
 8001ae8:	f001 fe99 	bl	800381e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001aec:	e03b      	b.n	8001b66 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART3)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a22      	ldr	r2, [pc, #136]	; (8001b7c <HAL_UART_MspInit+0x13c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d136      	bne.n	8001b66 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001af8:	2304      	movs	r3, #4
 8001afa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	4618      	mov	r0, r3
 8001b06:	f003 fab1 	bl	800506c <HAL_RCCEx_PeriphCLKConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001b10:	f7ff fdee 	bl	80016f0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_UART_MspInit+0x134>)
 8001b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b18:	4a16      	ldr	r2, [pc, #88]	; (8001b74 <HAL_UART_MspInit+0x134>)
 8001b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_UART_MspInit+0x134>)
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_UART_MspInit+0x134>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <HAL_UART_MspInit+0x134>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_UART_MspInit+0x134>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX_485_Pin|RX_485_Pin;
 8001b44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b48:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b56:	2307      	movs	r3, #7
 8001b58:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	; (8001b78 <HAL_UART_MspInit+0x138>)
 8001b62:	f002 f909 	bl	8003d78 <HAL_GPIO_Init>
}
 8001b66:	bf00      	nop
 8001b68:	3770      	adds	r7, #112	; 0x70
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40004400 	.word	0x40004400
 8001b74:	40021000 	.word	0x40021000
 8001b78:	48000400 	.word	0x48000400
 8001b7c:	40004800 	.word	0x40004800

08001b80 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <HAL_UART_MspDeInit+0x58>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10d      	bne.n	8001bae <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_UART_MspDeInit+0x5c>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <HAL_UART_MspDeInit+0x5c>)
 8001b98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b9c:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4);
 8001b9e:	2118      	movs	r1, #24
 8001ba0:	480f      	ldr	r0, [pc, #60]	; (8001be0 <HAL_UART_MspDeInit+0x60>)
 8001ba2:	f002 fa6b 	bl	800407c <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001ba6:	2026      	movs	r0, #38	; 0x26
 8001ba8:	f001 fe47 	bl	800383a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8001bac:	e00f      	b.n	8001bce <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART3)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_UART_MspDeInit+0x64>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d10a      	bne.n	8001bce <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_UART_MspDeInit+0x5c>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <HAL_UART_MspDeInit+0x5c>)
 8001bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc2:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, TX_485_Pin|RX_485_Pin);
 8001bc4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <HAL_UART_MspDeInit+0x60>)
 8001bca:	f002 fa57 	bl	800407c <HAL_GPIO_DeInit>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40004400 	.word	0x40004400
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	48000400 	.word	0x48000400
 8001be4:	40004800 	.word	0x40004800

08001be8 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f06f 0208 	mvn.w	r2, #8
 8001bf6:	611a      	str	r2, [r3, #16]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_TIM_ClearFlag_CC3OVR>:
  * @rmtoll SR           CC3OF         LL_TIM_ClearFlag_CC3OVR
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3OVR(TIM_TypeDef *TIMx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3OF));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001c12:	611a      	str	r2, [r3, #16]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <NMI_Handler+0x4>

08001c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <MemManage_Handler+0x4>

08001c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <BusFault_Handler+0x4>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <UsageFault_Handler+0x4>

08001c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  TimerTick1kHz();
 8001c6c:	f008 f9d8 	bl	800a020 <TimerTick1kHz>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c70:	f000 f8ee 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
	LL_TIM_ClearFlag_CC3(TIM1);
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <TIM1_CC_IRQHandler+0x24>)
 8001c8e:	f7ff ffab 	bl	8001be8 <LL_TIM_ClearFlag_CC3>
	LL_TIM_ClearFlag_CC3OVR(TIM1);
 8001c92:	4806      	ldr	r0, [pc, #24]	; (8001cac <TIM1_CC_IRQHandler+0x24>)
 8001c94:	f7ff ffb6 	bl	8001c04 <LL_TIM_ClearFlag_CC3OVR>
	if(Tim1CCIsr != NULL)
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <TIM1_CC_IRQHandler+0x28>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <TIM1_CC_IRQHandler+0x1e>
		Tim1CCIsr();
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <TIM1_CC_IRQHandler+0x28>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4798      	blx	r3
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	20001488 	.word	0x20001488

08001cb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <USART2_IRQHandler+0x10>)
 8001cba:	f003 fe13 	bl	80058e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200006c0 	.word	0x200006c0

08001cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <_sbrk+0x5c>)
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <_sbrk+0x60>)
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <_sbrk+0x64>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <_sbrk+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf8:	f009 fc14 	bl	800b524 <__errno>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	220c      	movs	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	e009      	b.n	8001d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <_sbrk+0x64>)
 8001d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20008000 	.word	0x20008000
 8001d28:	00000400 	.word	0x00000400
 8001d2c:	200007e4 	.word	0x200007e4
 8001d30:	20001730 	.word	0x20001730

08001d34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <SystemInit+0x20>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <SystemInit+0x20>)
 8001d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d58:	480d      	ldr	r0, [pc, #52]	; (8001d90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d5c:	480d      	ldr	r0, [pc, #52]	; (8001d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d5e:	490e      	ldr	r1, [pc, #56]	; (8001d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <LoopForever+0xe>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d74:	4c0b      	ldr	r4, [pc, #44]	; (8001da4 <LoopForever+0x16>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d82:	f7ff ffd7 	bl	8001d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d86:	f009 fbd3 	bl	800b530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d8a:	f7fe ffb7 	bl	8000cfc <main>

08001d8e <LoopForever>:

LoopForever:
    b LoopForever
 8001d8e:	e7fe      	b.n	8001d8e <LoopForever>
  ldr   r0, =_estack
 8001d90:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	200004c0 	.word	0x200004c0
  ldr r2, =_sidata
 8001d9c:	0800b6d8 	.word	0x0800b6d8
  ldr r2, =_sbss
 8001da0:	200004c0 	.word	0x200004c0
  ldr r4, =_ebss
 8001da4:	2000172c 	.word	0x2000172c

08001da8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC1_2_IRQHandler>

08001daa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db4:	2003      	movs	r0, #3
 8001db6:	f001 fd0d 	bl	80037d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dba:	200f      	movs	r0, #15
 8001dbc:	f000 f80e 	bl	8001ddc <HAL_InitTick>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	71fb      	strb	r3, [r7, #7]
 8001dca:	e001      	b.n	8001dd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dcc:	f7ff fc96 	bl	80016fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]

}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001de8:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <HAL_InitTick+0x68>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d022      	beq.n	8001e36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001df0:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_InitTick+0x6c>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_InitTick+0x68>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	f001 fd26 	bl	8003856 <HAL_SYSTICK_Config>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10f      	bne.n	8001e30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b0f      	cmp	r3, #15
 8001e14:	d809      	bhi.n	8001e2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e16:	2200      	movs	r2, #0
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1e:	f001 fce4 	bl	80037ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_InitTick+0x70>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e007      	b.n	8001e3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	e004      	b.n	8001e3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e001      	b.n	8001e3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000008 	.word	0x20000008
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_IncTick+0x1c>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_IncTick+0x20>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a03      	ldr	r2, [pc, #12]	; (8001e6c <HAL_IncTick+0x1c>)
 8001e60:	6013      	str	r3, [r2, #0]
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	200007e8 	.word	0x200007e8
 8001e70:	20000008 	.word	0x20000008

08001e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_GetTick+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	200007e8 	.word	0x200007e8

08001e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e94:	f7ff ffee 	bl	8001e74 <HAL_GetTick>
 8001e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d004      	beq.n	8001eb0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_Delay+0x40>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eb0:	bf00      	nop
 8001eb2:	f7ff ffdf 	bl	8001e74 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d8f7      	bhi.n	8001eb2 <HAL_Delay+0x26>
  {
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ee0:	4904      	ldr	r1, [pc, #16]	; (8001ef4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40010030 	.word	0x40010030

08001ef8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 0202 	bic.w	r2, r3, #2
 8001f08:	4904      	ldr	r1, [pc, #16]	; (8001f1c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40010030 	.word	0x40010030

08001f20 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001f32:	f7ff ff9f 	bl	8001e74 <HAL_GetTick>
 8001f36:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001f38:	e008      	b.n	8001f4c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001f3a:	f7ff ff9b 	bl	8001e74 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b0a      	cmp	r3, #10
 8001f46:	d901      	bls.n	8001f4c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e006      	b.n	8001f5a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40010030 	.word	0x40010030

08001f68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	609a      	str	r2, [r3, #8]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3360      	adds	r3, #96	; 0x60
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <LL_ADC_SetOffset+0x44>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002008:	bf00      	nop
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	03fff000 	.word	0x03fff000

08002018 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3360      	adds	r3, #96	; 0x60
 8002026:	461a      	mov	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3360      	adds	r3, #96	; 0x60
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	431a      	orrs	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800206e:	bf00      	nop
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800207a:	b480      	push	{r7}
 800207c:	b087      	sub	sp, #28
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3360      	adds	r3, #96	; 0x60
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	431a      	orrs	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020a4:	bf00      	nop
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3360      	adds	r3, #96	; 0x60
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	431a      	orrs	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	615a      	str	r2, [r3, #20]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002132:	b480      	push	{r7}
 8002134:	b087      	sub	sp, #28
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3330      	adds	r3, #48	; 0x30
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	4413      	add	r3, r2
 8002150:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	211f      	movs	r1, #31
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	401a      	ands	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	0e9b      	lsrs	r3, r3, #26
 800216a:	f003 011f 	and.w	r1, r3, #31
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	431a      	orrs	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800217e:	bf00      	nop
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800218a:	b480      	push	{r7}
 800218c:	b087      	sub	sp, #28
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3314      	adds	r3, #20
 800219a:	461a      	mov	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	0e5b      	lsrs	r3, r3, #25
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	4413      	add	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	0d1b      	lsrs	r3, r3, #20
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	2107      	movs	r1, #7
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	401a      	ands	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	0d1b      	lsrs	r3, r3, #20
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	431a      	orrs	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a0f      	ldr	r2, [pc, #60]	; (800222c <LL_ADC_SetChannelSingleDiff+0x4c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d10a      	bne.n	800220a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002200:	431a      	orrs	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002208:	e00a      	b.n	8002220 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002216:	43db      	mvns	r3, r3
 8002218:	401a      	ands	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	407f0000 	.word	0x407f0000

08002230 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 031f 	and.w	r3, r3, #31
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800225c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6093      	str	r3, [r2, #8]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002284:	d101      	bne.n	800228a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022d4:	d101      	bne.n	80022da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002320:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002324:	f043 0202 	orr.w	r2, r3, #2
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <LL_ADC_IsEnabled+0x18>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <LL_ADC_IsEnabled+0x1a>
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b02      	cmp	r3, #2
 8002370:	d101      	bne.n	8002376 <LL_ADC_IsDisableOngoing+0x18>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <LL_ADC_IsDisableOngoing+0x1a>
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002394:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002398:	f043 0204 	orr.w	r2, r3, #4
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d101      	bne.n	80023c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d101      	bne.n	80023ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e177      	b.n	8002702 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff f995 	bl	8001750 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff19 	bl	8002270 <LL_ADC_IsDeepPowerDownEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff feff 	bl	800224c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff34 	bl	80022c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d115      	bne.n	800248a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff18 	bl	8002298 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002468:	4b9c      	ldr	r3, [pc, #624]	; (80026dc <HAL_ADC_Init+0x2e4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	4a9c      	ldr	r2, [pc, #624]	; (80026e0 <HAL_ADC_Init+0x2e8>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	099b      	lsrs	r3, r3, #6
 8002476:	3301      	adds	r3, #1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800247c:	e002      	b.n	8002484 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	3b01      	subs	r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f9      	bne.n	800247e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff16 	bl	80022c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10d      	bne.n	80024b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	f043 0210 	orr.w	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff76 	bl	80023ac <LL_ADC_REG_IsConversionOngoing>
 80024c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f040 8110 	bne.w	80026f0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 810c 	bne.w	80026f0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024e0:	f043 0202 	orr.w	r2, r3, #2
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff23 	bl	8002338 <LL_ADC_IsEnabled>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d111      	bne.n	800251c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024fc:	f7ff ff1c 	bl	8002338 <LL_ADC_IsEnabled>
 8002500:	4604      	mov	r4, r0
 8002502:	4878      	ldr	r0, [pc, #480]	; (80026e4 <HAL_ADC_Init+0x2ec>)
 8002504:	f7ff ff18 	bl	8002338 <LL_ADC_IsEnabled>
 8002508:	4603      	mov	r3, r0
 800250a:	4323      	orrs	r3, r4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4619      	mov	r1, r3
 8002516:	4874      	ldr	r0, [pc, #464]	; (80026e8 <HAL_ADC_Init+0x2f0>)
 8002518:	f7ff fd26 	bl	8001f68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7f5b      	ldrb	r3, [r3, #29]
 8002520:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002526:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800252c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002532:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800253a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002546:	2b01      	cmp	r3, #1
 8002548:	d106      	bne.n	8002558 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	3b01      	subs	r3, #1
 8002550:	045b      	lsls	r3, r3, #17
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	4b5c      	ldr	r3, [pc, #368]	; (80026ec <HAL_ADC_Init+0x2f4>)
 800257c:	4013      	ands	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	69b9      	ldr	r1, [r7, #24]
 8002584:	430b      	orrs	r3, r1
 8002586:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ff02 	bl	80023ac <LL_ADC_REG_IsConversionOngoing>
 80025a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff0f 	bl	80023d2 <LL_ADC_INJ_IsConversionOngoing>
 80025b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d16d      	bne.n	8002698 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d16a      	bne.n	8002698 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025c6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025ce:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025de:	f023 0302 	bic.w	r3, r3, #2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	69b9      	ldr	r1, [r7, #24]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d017      	beq.n	8002624 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002602:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800260c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002610:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6911      	ldr	r1, [r2, #16]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	430b      	orrs	r3, r1
 800261e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002622:	e013      	b.n	800264c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002632:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002644:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002648:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002652:	2b01      	cmp	r3, #1
 8002654:	d118      	bne.n	8002688 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002660:	f023 0304 	bic.w	r3, r3, #4
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800266c:	4311      	orrs	r1, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002672:	4311      	orrs	r1, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002678:	430a      	orrs	r2, r1
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	611a      	str	r2, [r3, #16]
 8002686:	e007      	b.n	8002698 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d10c      	bne.n	80026ba <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f023 010f 	bic.w	r1, r3, #15
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	1e5a      	subs	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
 80026b8:	e007      	b.n	80026ca <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 020f 	bic.w	r2, r2, #15
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80026da:	e011      	b.n	8002700 <HAL_ADC_Init+0x308>
 80026dc:	20000000 	.word	0x20000000
 80026e0:	053e2d63 	.word	0x053e2d63
 80026e4:	50000100 	.word	0x50000100
 80026e8:	50000300 	.word	0x50000300
 80026ec:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	f043 0210 	orr.w	r2, r3, #16
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002700:	7ffb      	ldrb	r3, [r7, #31]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3724      	adds	r7, #36	; 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd90      	pop	{r4, r7, pc}
 800270a:	bf00      	nop

0800270c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002718:	4851      	ldr	r0, [pc, #324]	; (8002860 <HAL_ADC_Start_DMA+0x154>)
 800271a:	f7ff fd89 	bl	8002230 <LL_ADC_GetMultimode>
 800271e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fe41 	bl	80023ac <LL_ADC_REG_IsConversionOngoing>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	f040 808f 	bne.w	8002850 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_ADC_Start_DMA+0x34>
 800273c:	2302      	movs	r3, #2
 800273e:	e08a      	b.n	8002856 <HAL_ADC_Start_DMA+0x14a>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d002      	beq.n	800275a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b09      	cmp	r3, #9
 8002758:	d173      	bne.n	8002842 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fc98 	bl	8003090 <ADC_Enable>
 8002760:	4603      	mov	r3, r0
 8002762:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d166      	bne.n	8002838 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a38      	ldr	r2, [pc, #224]	; (8002864 <HAL_ADC_Start_DMA+0x158>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d002      	beq.n	800278e <HAL_ADC_Start_DMA+0x82>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	e001      	b.n	8002792 <HAL_ADC_Start_DMA+0x86>
 800278e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	4293      	cmp	r3, r2
 8002798:	d002      	beq.n	80027a0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d006      	beq.n	80027c6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027bc:	f023 0206 	bic.w	r2, r3, #6
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	661a      	str	r2, [r3, #96]	; 0x60
 80027c4:	e002      	b.n	80027cc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <HAL_ADC_Start_DMA+0x15c>)
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d8:	4a24      	ldr	r2, [pc, #144]	; (800286c <HAL_ADC_Start_DMA+0x160>)
 80027da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	4a23      	ldr	r2, [pc, #140]	; (8002870 <HAL_ADC_Start_DMA+0x164>)
 80027e2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	221c      	movs	r2, #28
 80027ea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0210 	orr.w	r2, r2, #16
 8002802:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3340      	adds	r3, #64	; 0x40
 800281e:	4619      	mov	r1, r3
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f001 f8cc 	bl	80039c0 <HAL_DMA_Start_IT>
 8002828:	4603      	mov	r3, r0
 800282a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fda7 	bl	8002384 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002836:	e00d      	b.n	8002854 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002840:	e008      	b.n	8002854 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800284e:	e001      	b.n	8002854 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002850:	2302      	movs	r3, #2
 8002852:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002854:	7dfb      	ldrb	r3, [r7, #23]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	50000300 	.word	0x50000300
 8002864:	50000100 	.word	0x50000100
 8002868:	08003213 	.word	0x08003213
 800286c:	080032eb 	.word	0x080032eb
 8002870:	08003307 	.word	0x08003307

08002874 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b0b6      	sub	sp, #216	; 0xd8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x22>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e3c8      	b.n	8003064 <HAL_ADC_ConfigChannel+0x7b4>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fd64 	bl	80023ac <LL_ADC_REG_IsConversionOngoing>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 83ad 	bne.w	8003046 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	f7ff fc1a 	bl	8002132 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fd52 	bl	80023ac <LL_ADC_REG_IsConversionOngoing>
 8002908:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fd5e 	bl	80023d2 <LL_ADC_INJ_IsConversionOngoing>
 8002916:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800291a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800291e:	2b00      	cmp	r3, #0
 8002920:	f040 81d9 	bne.w	8002cd6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002924:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002928:	2b00      	cmp	r3, #0
 800292a:	f040 81d4 	bne.w	8002cd6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002936:	d10f      	bne.n	8002958 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2200      	movs	r2, #0
 8002942:	4619      	mov	r1, r3
 8002944:	f7ff fc21 	bl	800218a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fbc8 	bl	80020e6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002956:	e00e      	b.n	8002976 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6819      	ldr	r1, [r3, #0]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	461a      	mov	r2, r3
 8002966:	f7ff fc10 	bl	800218a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fbb8 	bl	80020e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	08db      	lsrs	r3, r3, #3
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b04      	cmp	r3, #4
 8002996:	d022      	beq.n	80029de <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6919      	ldr	r1, [r3, #16]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029a8:	f7ff fb12 	bl	8001fd0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6919      	ldr	r1, [r3, #16]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	461a      	mov	r2, r3
 80029ba:	f7ff fb5e 	bl	800207a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6919      	ldr	r1, [r3, #16]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	7f1b      	ldrb	r3, [r3, #28]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d102      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x124>
 80029ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d2:	e000      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x126>
 80029d4:	2300      	movs	r3, #0
 80029d6:	461a      	mov	r2, r3
 80029d8:	f7ff fb6a 	bl	80020b0 <LL_ADC_SetOffsetSaturation>
 80029dc:	e17b      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fb17 	bl	8002018 <LL_ADC_GetOffsetChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x15a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fb0c 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	e01e      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x198>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fb01 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	e004      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002a3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d105      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x1b0>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0e9b      	lsrs	r3, r3, #26
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	e018      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x1e2>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e004      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002a88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d106      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fad0 	bl	8002044 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fab4 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x220>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff faa9 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	f003 021f 	and.w	r2, r3, #31
 8002ace:	e01e      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x25e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fa9e 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002af2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002af6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002afe:	2320      	movs	r3, #32
 8002b00:	e004      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x276>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	0e9b      	lsrs	r3, r3, #26
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	e018      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x2a8>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	e004      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002b4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d106      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2200      	movs	r2, #0
 8002b62:	2101      	movs	r1, #1
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fa6d 	bl	8002044 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2102      	movs	r1, #2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fa51 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x2e6>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2102      	movs	r1, #2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fa46 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	f003 021f 	and.w	r2, r3, #31
 8002b94:	e01e      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x324>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fa3b 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002bbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	e004      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x33c>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0e9b      	lsrs	r3, r3, #26
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	e016      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x36a>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002bfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	e004      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d106      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	2102      	movs	r1, #2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fa0c 	bl	8002044 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2103      	movs	r1, #3
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f9f0 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10a      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x3a8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2103      	movs	r1, #3
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff f9e5 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	0e9b      	lsrs	r3, r3, #26
 8002c52:	f003 021f 	and.w	r2, r3, #31
 8002c56:	e017      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x3d8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2103      	movs	r1, #3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff f9da 	bl	8002018 <LL_ADC_GetOffsetChannel>
 8002c64:	4603      	mov	r3, r0
 8002c66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c72:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	e003      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x3f0>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	0e9b      	lsrs	r3, r3, #26
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	e011      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x414>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002cb8:	2320      	movs	r3, #32
 8002cba:	e003      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d106      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2103      	movs	r1, #3
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff f9b7 	bl	8002044 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fb2c 	bl	8002338 <LL_ADC_IsEnabled>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 8140 	bne.w	8002f68 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f7ff fa73 	bl	80021e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	4a8f      	ldr	r2, [pc, #572]	; (8002f3c <HAL_ADC_ConfigChannel+0x68c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	f040 8131 	bne.w	8002f68 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10b      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x47e>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	0e9b      	lsrs	r3, r3, #26
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2b09      	cmp	r3, #9
 8002d24:	bf94      	ite	ls
 8002d26:	2301      	movls	r3, #1
 8002d28:	2300      	movhi	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	e019      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x4b2>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e003      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	2b09      	cmp	r3, #9
 8002d5a:	bf94      	ite	ls
 8002d5c:	2301      	movls	r3, #1
 8002d5e:	2300      	movhi	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d079      	beq.n	8002e5a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d107      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x4d2>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	0e9b      	lsrs	r3, r3, #26
 8002d78:	3301      	adds	r3, #1
 8002d7a:	069b      	lsls	r3, r3, #26
 8002d7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d80:	e015      	b.n	8002dae <HAL_ADC_ConfigChannel+0x4fe>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d92:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	e003      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	3301      	adds	r3, #1
 8002da8:	069b      	lsls	r3, r3, #26
 8002daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x51e>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0e9b      	lsrs	r3, r3, #26
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dcc:	e017      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x54e>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002de6:	2320      	movs	r3, #32
 8002de8:	e003      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	2101      	movs	r1, #1
 8002dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfe:	ea42 0103 	orr.w	r1, r2, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x574>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	0e9b      	lsrs	r3, r3, #26
 8002e14:	3301      	adds	r3, #1
 8002e16:	f003 021f 	and.w	r2, r3, #31
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	051b      	lsls	r3, r3, #20
 8002e22:	e018      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x5a6>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002e3c:	2320      	movs	r3, #32
 8002e3e:	e003      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	f003 021f 	and.w	r2, r3, #31
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e56:	430b      	orrs	r3, r1
 8002e58:	e081      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d107      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x5c6>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	0e9b      	lsrs	r3, r3, #26
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	069b      	lsls	r3, r3, #26
 8002e70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e74:	e015      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x5f2>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002e8e:	2320      	movs	r3, #32
 8002e90:	e003      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	069b      	lsls	r3, r3, #26
 8002e9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x612>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	0e9b      	lsrs	r3, r3, #26
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	e017      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x642>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	61fb      	str	r3, [r7, #28]
  return result;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002eda:	2320      	movs	r3, #32
 8002edc:	e003      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	2101      	movs	r1, #1
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	ea42 0103 	orr.w	r1, r2, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10d      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x66e>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	0e9b      	lsrs	r3, r3, #26
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f003 021f 	and.w	r2, r3, #31
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	3b1e      	subs	r3, #30
 8002f16:	051b      	lsls	r3, r3, #20
 8002f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	e01e      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x6ac>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	613b      	str	r3, [r7, #16]
  return result;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d104      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002f36:	2320      	movs	r3, #32
 8002f38:	e006      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x698>
 8002f3a:	bf00      	nop
 8002f3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f003 021f 	and.w	r2, r3, #31
 8002f4e:	4613      	mov	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	3b1e      	subs	r3, #30
 8002f56:	051b      	lsls	r3, r3, #20
 8002f58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	6892      	ldr	r2, [r2, #8]
 8002f62:	4619      	mov	r1, r3
 8002f64:	f7ff f911 	bl	800218a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b3f      	ldr	r3, [pc, #252]	; (800306c <HAL_ADC_ConfigChannel+0x7bc>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d071      	beq.n	8003058 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f74:	483e      	ldr	r0, [pc, #248]	; (8003070 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f76:	f7ff f81d 	bl	8001fb4 <LL_ADC_GetCommonPathInternalCh>
 8002f7a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a3c      	ldr	r2, [pc, #240]	; (8003074 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_ADC_ConfigChannel+0x6e2>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a3a      	ldr	r2, [pc, #232]	; (8003078 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d127      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d121      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa6:	d157      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	482f      	ldr	r0, [pc, #188]	; (8003070 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fb4:	f7fe ffeb 	bl	8001f8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fb8:	4b30      	ldr	r3, [pc, #192]	; (800307c <HAL_ADC_ConfigChannel+0x7cc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	4a30      	ldr	r2, [pc, #192]	; (8003080 <HAL_ADC_ConfigChannel+0x7d0>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fd2:	e002      	b.n	8002fda <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f9      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fe0:	e03a      	b.n	8003058 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a27      	ldr	r2, [pc, #156]	; (8003084 <HAL_ADC_ConfigChannel+0x7d4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d113      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x764>
 8002fec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a22      	ldr	r2, [pc, #136]	; (8003088 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d02a      	beq.n	8003058 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300a:	4619      	mov	r1, r3
 800300c:	4818      	ldr	r0, [pc, #96]	; (8003070 <HAL_ADC_ConfigChannel+0x7c0>)
 800300e:	f7fe ffbe 	bl	8001f8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003012:	e021      	b.n	8003058 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1c      	ldr	r2, [pc, #112]	; (800308c <HAL_ADC_ConfigChannel+0x7dc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d11c      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800301e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d116      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a16      	ldr	r2, [pc, #88]	; (8003088 <HAL_ADC_ConfigChannel+0x7d8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d011      	beq.n	8003058 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800303c:	4619      	mov	r1, r3
 800303e:	480c      	ldr	r0, [pc, #48]	; (8003070 <HAL_ADC_ConfigChannel+0x7c0>)
 8003040:	f7fe ffa5 	bl	8001f8e <LL_ADC_SetCommonPathInternalCh>
 8003044:	e008      	b.n	8003058 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304a:	f043 0220 	orr.w	r2, r3, #32
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003060:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003064:	4618      	mov	r0, r3
 8003066:	37d8      	adds	r7, #216	; 0xd8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	80080000 	.word	0x80080000
 8003070:	50000300 	.word	0x50000300
 8003074:	c3210000 	.word	0xc3210000
 8003078:	90c00010 	.word	0x90c00010
 800307c:	20000000 	.word	0x20000000
 8003080:	053e2d63 	.word	0x053e2d63
 8003084:	c7520000 	.word	0xc7520000
 8003088:	50000100 	.word	0x50000100
 800308c:	cb840000 	.word	0xcb840000

08003090 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff f94b 	bl	8002338 <LL_ADC_IsEnabled>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d14d      	bne.n	8003144 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	4b28      	ldr	r3, [pc, #160]	; (8003150 <ADC_Enable+0xc0>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	f043 0210 	orr.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e039      	b.n	8003146 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff f906 	bl	80022e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030dc:	f7fe feca 	bl	8001e74 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e2:	e028      	b.n	8003136 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff f925 	bl	8002338 <LL_ADC_IsEnabled>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d104      	bne.n	80030fe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff f8f5 	bl	80022e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030fe:	f7fe feb9 	bl	8001e74 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d914      	bls.n	8003136 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b01      	cmp	r3, #1
 8003118:	d00d      	beq.n	8003136 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	f043 0210 	orr.w	r2, r3, #16
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312a:	f043 0201 	orr.w	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e007      	b.n	8003146 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d1cf      	bne.n	80030e4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	8000003f 	.word	0x8000003f

08003154 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff f8fc 	bl	800235e <LL_ADC_IsDisableOngoing>
 8003166:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff f8e3 	bl	8002338 <LL_ADC_IsEnabled>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d047      	beq.n	8003208 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d144      	bne.n	8003208 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 030d 	and.w	r3, r3, #13
 8003188:	2b01      	cmp	r3, #1
 800318a:	d10c      	bne.n	80031a6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff f8bd 	bl	8002310 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2203      	movs	r2, #3
 800319c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800319e:	f7fe fe69 	bl	8001e74 <HAL_GetTick>
 80031a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031a4:	e029      	b.n	80031fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	f043 0210 	orr.w	r2, r3, #16
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	f043 0201 	orr.w	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e023      	b.n	800320a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031c2:	f7fe fe57 	bl	8001e74 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d914      	bls.n	80031fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00d      	beq.n	80031fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e2:	f043 0210 	orr.w	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ee:	f043 0201 	orr.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e007      	b.n	800320a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1dc      	bne.n	80031c2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003228:	2b00      	cmp	r3, #0
 800322a:	d14b      	bne.n	80032c4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d021      	beq.n	800328a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe ff5e 	bl	800210c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d032      	beq.n	80032bc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d12b      	bne.n	80032bc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d11f      	bne.n	80032bc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	65da      	str	r2, [r3, #92]	; 0x5c
 8003288:	e018      	b.n	80032bc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d111      	bne.n	80032bc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff fad9 	bl	8002874 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032c2:	e00e      	b.n	80032e2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7ff fae3 	bl	800289c <HAL_ADC_ErrorCallback>
}
 80032d6:	e004      	b.n	80032e2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
}
 80032e2:	bf00      	nop
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f7ff fac5 	bl	8002888 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003324:	f043 0204 	orr.w	r2, r3, #4
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fab5 	bl	800289c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <LL_ADC_IsEnabled>:
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <LL_ADC_IsEnabled+0x18>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <LL_ADC_IsEnabled+0x1a>
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <LL_ADC_StartCalibration>:
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003372:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800337c:	4313      	orrs	r3, r2
 800337e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	609a      	str	r2, [r3, #8]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <LL_ADC_IsCalibrationOnGoing>:
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033a6:	d101      	bne.n	80033ac <LL_ADC_IsCalibrationOnGoing+0x1a>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <LL_ADC_IsCalibrationOnGoing+0x1c>
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <LL_ADC_REG_IsConversionOngoing>:
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d101      	bne.n	80033d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_ADCEx_Calibration_Start+0x1c>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e04d      	b.n	8003498 <HAL_ADCEx_Calibration_Start+0xb8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff fea5 	bl	8003154 <ADC_Disable>
 800340a:	4603      	mov	r3, r0
 800340c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d136      	bne.n	8003482 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800341c:	f023 0302 	bic.w	r3, r3, #2
 8003420:	f043 0202 	orr.w	r2, r3, #2
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6839      	ldr	r1, [r7, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ff96 	bl	8003360 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003434:	e014      	b.n	8003460 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3301      	adds	r3, #1
 800343a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d90d      	bls.n	8003460 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	f023 0312 	bic.w	r3, r3, #18
 800344c:	f043 0210 	orr.w	r2, r3, #16
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e01b      	b.n	8003498 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ff94 	bl	8003392 <LL_ADC_IsCalibrationOnGoing>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e2      	bne.n	8003436 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003474:	f023 0303 	bic.w	r3, r3, #3
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003480:	e005      	b.n	800348e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	f043 0210 	orr.w	r2, r3, #16
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003496:	7bfb      	ldrb	r3, [r7, #15]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	0004de01 	.word	0x0004de01

080034a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b0a1      	sub	sp, #132	; 0x84
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034be:	2302      	movs	r3, #2
 80034c0:	e08b      	b.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80034ca:	2300      	movs	r3, #0
 80034cc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80034ce:	2300      	movs	r3, #0
 80034d0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034da:	d102      	bne.n	80034e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034dc:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	e001      	b.n	80034e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10b      	bne.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e06a      	b.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff ff57 	bl	80033ba <LL_ADC_REG_IsConversionOngoing>
 800350c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff51 	bl	80033ba <LL_ADC_REG_IsConversionOngoing>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d14c      	bne.n	80035b8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800351e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003520:	2b00      	cmp	r3, #0
 8003522:	d149      	bne.n	80035b8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003524:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003526:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d028      	beq.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6859      	ldr	r1, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003542:	035b      	lsls	r3, r3, #13
 8003544:	430b      	orrs	r3, r1
 8003546:	431a      	orrs	r2, r3
 8003548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800354a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800354c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003550:	f7ff fef3 	bl	800333a <LL_ADC_IsEnabled>
 8003554:	4604      	mov	r4, r0
 8003556:	4823      	ldr	r0, [pc, #140]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003558:	f7ff feef 	bl	800333a <LL_ADC_IsEnabled>
 800355c:	4603      	mov	r3, r0
 800355e:	4323      	orrs	r3, r4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d133      	bne.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800356c:	f023 030f 	bic.w	r3, r3, #15
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	6811      	ldr	r1, [r2, #0]
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	6892      	ldr	r2, [r2, #8]
 8003578:	430a      	orrs	r2, r1
 800357a:	431a      	orrs	r2, r3
 800357c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800357e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003580:	e024      	b.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800358a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800358c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800358e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003592:	f7ff fed2 	bl	800333a <LL_ADC_IsEnabled>
 8003596:	4604      	mov	r4, r0
 8003598:	4812      	ldr	r0, [pc, #72]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800359a:	f7ff fece 	bl	800333a <LL_ADC_IsEnabled>
 800359e:	4603      	mov	r3, r0
 80035a0:	4323      	orrs	r3, r4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d112      	bne.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035ae:	f023 030f 	bic.w	r3, r3, #15
 80035b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035b6:	e009      	b.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80035ca:	e000      	b.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80035d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3784      	adds	r7, #132	; 0x84
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd90      	pop	{r4, r7, pc}
 80035e2:	bf00      	nop
 80035e4:	50000100 	.word	0x50000100
 80035e8:	50000300 	.word	0x50000300

080035ec <__NVIC_SetPriorityGrouping>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035fc:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <__NVIC_SetPriorityGrouping+0x44>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003608:	4013      	ands	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800361e:	4a04      	ldr	r2, [pc, #16]	; (8003630 <__NVIC_SetPriorityGrouping+0x44>)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	60d3      	str	r3, [r2, #12]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <__NVIC_GetPriorityGrouping>:
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003638:	4b04      	ldr	r3, [pc, #16]	; (800364c <__NVIC_GetPriorityGrouping+0x18>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	0a1b      	lsrs	r3, r3, #8
 800363e:	f003 0307 	and.w	r3, r3, #7
}
 8003642:	4618      	mov	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <__NVIC_EnableIRQ>:
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	2b00      	cmp	r3, #0
 8003660:	db0b      	blt.n	800367a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	f003 021f 	and.w	r2, r3, #31
 8003668:	4907      	ldr	r1, [pc, #28]	; (8003688 <__NVIC_EnableIRQ+0x38>)
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	2001      	movs	r0, #1
 8003672:	fa00 f202 	lsl.w	r2, r0, r2
 8003676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	e000e100 	.word	0xe000e100

0800368c <__NVIC_DisableIRQ>:
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	2b00      	cmp	r3, #0
 800369c:	db12      	blt.n	80036c4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	f003 021f 	and.w	r2, r3, #31
 80036a4:	490a      	ldr	r1, [pc, #40]	; (80036d0 <__NVIC_DisableIRQ+0x44>)
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	2001      	movs	r0, #1
 80036ae:	fa00 f202 	lsl.w	r2, r0, r2
 80036b2:	3320      	adds	r3, #32
 80036b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80036b8:	f3bf 8f4f 	dsb	sy
}
 80036bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036be:	f3bf 8f6f 	isb	sy
}
 80036c2:	bf00      	nop
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000e100 	.word	0xe000e100

080036d4 <__NVIC_SetPriority>:
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	6039      	str	r1, [r7, #0]
 80036de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	db0a      	blt.n	80036fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	490c      	ldr	r1, [pc, #48]	; (8003720 <__NVIC_SetPriority+0x4c>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	0112      	lsls	r2, r2, #4
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	440b      	add	r3, r1
 80036f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036fc:	e00a      	b.n	8003714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4908      	ldr	r1, [pc, #32]	; (8003724 <__NVIC_SetPriority+0x50>)
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	3b04      	subs	r3, #4
 800370c:	0112      	lsls	r2, r2, #4
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	440b      	add	r3, r1
 8003712:	761a      	strb	r2, [r3, #24]
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000e100 	.word	0xe000e100
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <NVIC_EncodePriority>:
{
 8003728:	b480      	push	{r7}
 800372a:	b089      	sub	sp, #36	; 0x24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f1c3 0307 	rsb	r3, r3, #7
 8003742:	2b04      	cmp	r3, #4
 8003744:	bf28      	it	cs
 8003746:	2304      	movcs	r3, #4
 8003748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3304      	adds	r3, #4
 800374e:	2b06      	cmp	r3, #6
 8003750:	d902      	bls.n	8003758 <NVIC_EncodePriority+0x30>
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3b03      	subs	r3, #3
 8003756:	e000      	b.n	800375a <NVIC_EncodePriority+0x32>
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800375c:	f04f 32ff 	mov.w	r2, #4294967295
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	401a      	ands	r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003770:	f04f 31ff 	mov.w	r1, #4294967295
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	43d9      	mvns	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003780:	4313      	orrs	r3, r2
}
 8003782:	4618      	mov	r0, r3
 8003784:	3724      	adds	r7, #36	; 0x24
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3b01      	subs	r3, #1
 800379c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a0:	d301      	bcc.n	80037a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037a2:	2301      	movs	r3, #1
 80037a4:	e00f      	b.n	80037c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037a6:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <SysTick_Config+0x40>)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ae:	210f      	movs	r1, #15
 80037b0:	f04f 30ff 	mov.w	r0, #4294967295
 80037b4:	f7ff ff8e 	bl	80036d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <SysTick_Config+0x40>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037be:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <SysTick_Config+0x40>)
 80037c0:	2207      	movs	r2, #7
 80037c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	e000e010 	.word	0xe000e010

080037d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff05 	bl	80035ec <__NVIC_SetPriorityGrouping>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	4603      	mov	r3, r0
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037f8:	f7ff ff1c 	bl	8003634 <__NVIC_GetPriorityGrouping>
 80037fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	6978      	ldr	r0, [r7, #20]
 8003804:	f7ff ff90 	bl	8003728 <NVIC_EncodePriority>
 8003808:	4602      	mov	r2, r0
 800380a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff5f 	bl	80036d4 <__NVIC_SetPriority>
}
 8003816:	bf00      	nop
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff0f 	bl	8003650 <__NVIC_EnableIRQ>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff1f 	bl	800368c <__NVIC_DisableIRQ>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ff96 	bl	8003790 <SysTick_Config>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e08d      	b.n	800399e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_DMA_Init+0x138>)
 800388a:	429a      	cmp	r2, r3
 800388c:	d80f      	bhi.n	80038ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	4b45      	ldr	r3, [pc, #276]	; (80039ac <HAL_DMA_Init+0x13c>)
 8003896:	4413      	add	r3, r2
 8003898:	4a45      	ldr	r2, [pc, #276]	; (80039b0 <HAL_DMA_Init+0x140>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	009a      	lsls	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a42      	ldr	r2, [pc, #264]	; (80039b4 <HAL_DMA_Init+0x144>)
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40
 80038ac:	e00e      	b.n	80038cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <HAL_DMA_Init+0x148>)
 80038b6:	4413      	add	r3, r2
 80038b8:	4a3d      	ldr	r2, [pc, #244]	; (80039b0 <HAL_DMA_Init+0x140>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	009a      	lsls	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a3c      	ldr	r2, [pc, #240]	; (80039bc <HAL_DMA_Init+0x14c>)
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f9c8 	bl	8003cb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800392c:	d102      	bne.n	8003934 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003948:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d010      	beq.n	8003974 <HAL_DMA_Init+0x104>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b04      	cmp	r3, #4
 8003958:	d80c      	bhi.n	8003974 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9e8 	bl	8003d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	e008      	b.n	8003986 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40020407 	.word	0x40020407
 80039ac:	bffdfff8 	.word	0xbffdfff8
 80039b0:	cccccccd 	.word	0xcccccccd
 80039b4:	40020000 	.word	0x40020000
 80039b8:	bffdfbf8 	.word	0xbffdfbf8
 80039bc:	40020400 	.word	0x40020400

080039c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_DMA_Start_IT+0x20>
 80039dc:	2302      	movs	r3, #2
 80039de:	e066      	b.n	8003aae <HAL_DMA_Start_IT+0xee>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d155      	bne.n	8003aa0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f90c 	bl	8003c36 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 020e 	orr.w	r2, r2, #14
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e00f      	b.n	8003a58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0204 	bic.w	r2, r2, #4
 8003a46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 020a 	orr.w	r2, r2, #10
 8003a56:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a74:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a8c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	e005      	b.n	8003aac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b085      	sub	sp, #20
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d005      	beq.n	8003ada <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
 8003ad8:	e037      	b.n	8003b4a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 020e 	bic.w	r2, r2, #14
 8003ae8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003af8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f003 021f 	and.w	r2, r3, #31
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b26:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00c      	beq.n	8003b4a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b3e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b48:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d00d      	beq.n	8003b9c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2204      	movs	r2, #4
 8003b84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
 8003b9a:	e047      	b.n	8003c2c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 020e 	bic.w	r2, r2, #14
 8003baa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	f003 021f 	and.w	r2, r3, #31
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	2101      	movs	r1, #1
 8003bda:	fa01 f202 	lsl.w	r2, r1, r2
 8003bde:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003be8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c0a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
    }
  }
  return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c4c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c5e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	f003 021f 	and.w	r2, r3, #31
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c72:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d108      	bne.n	8003c96 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c94:	e007      	b.n	8003ca6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	60da      	str	r2, [r3, #12]
}
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d802      	bhi.n	8003cce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003cc8:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e001      	b.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003cce:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003cd0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	3b08      	subs	r3, #8
 8003cde:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cec:	089b      	lsrs	r3, r3, #2
 8003cee:	009a      	lsls	r2, r3, #2
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	; (8003d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003cfe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	2201      	movs	r2, #1
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40020407 	.word	0x40020407
 8003d20:	40020800 	.word	0x40020800
 8003d24:	40020820 	.word	0x40020820
 8003d28:	cccccccd 	.word	0xcccccccd
 8003d2c:	40020880 	.word	0x40020880

08003d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d52:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	1000823f 	.word	0x1000823f
 8003d74:	40020940 	.word	0x40020940

08003d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d86:	e15a      	b.n	800403e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	fa01 f303 	lsl.w	r3, r1, r3
 8003d94:	4013      	ands	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 814c 	beq.w	8004038 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d005      	beq.n	8003db8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d130      	bne.n	8003e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dee:	2201      	movs	r2, #1
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	091b      	lsrs	r3, r3, #4
 8003e04:	f003 0201 	and.w	r2, r3, #1
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d017      	beq.n	8003e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	2203      	movs	r2, #3
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d123      	bne.n	8003eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	08da      	lsrs	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3208      	adds	r2, #8
 8003e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	220f      	movs	r2, #15
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4013      	ands	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	08da      	lsrs	r2, r3, #3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3208      	adds	r2, #8
 8003ea4:	6939      	ldr	r1, [r7, #16]
 8003ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 0203 	and.w	r2, r3, #3
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80a6 	beq.w	8004038 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eec:	4b5b      	ldr	r3, [pc, #364]	; (800405c <HAL_GPIO_Init+0x2e4>)
 8003eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef0:	4a5a      	ldr	r2, [pc, #360]	; (800405c <HAL_GPIO_Init+0x2e4>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6613      	str	r3, [r2, #96]	; 0x60
 8003ef8:	4b58      	ldr	r3, [pc, #352]	; (800405c <HAL_GPIO_Init+0x2e4>)
 8003efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f04:	4a56      	ldr	r2, [pc, #344]	; (8004060 <HAL_GPIO_Init+0x2e8>)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	089b      	lsrs	r3, r3, #2
 8003f0a:	3302      	adds	r3, #2
 8003f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	220f      	movs	r2, #15
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f2e:	d01f      	beq.n	8003f70 <HAL_GPIO_Init+0x1f8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a4c      	ldr	r2, [pc, #304]	; (8004064 <HAL_GPIO_Init+0x2ec>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d019      	beq.n	8003f6c <HAL_GPIO_Init+0x1f4>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a4b      	ldr	r2, [pc, #300]	; (8004068 <HAL_GPIO_Init+0x2f0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d013      	beq.n	8003f68 <HAL_GPIO_Init+0x1f0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a4a      	ldr	r2, [pc, #296]	; (800406c <HAL_GPIO_Init+0x2f4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00d      	beq.n	8003f64 <HAL_GPIO_Init+0x1ec>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a49      	ldr	r2, [pc, #292]	; (8004070 <HAL_GPIO_Init+0x2f8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <HAL_GPIO_Init+0x1e8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a48      	ldr	r2, [pc, #288]	; (8004074 <HAL_GPIO_Init+0x2fc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d101      	bne.n	8003f5c <HAL_GPIO_Init+0x1e4>
 8003f58:	2305      	movs	r3, #5
 8003f5a:	e00a      	b.n	8003f72 <HAL_GPIO_Init+0x1fa>
 8003f5c:	2306      	movs	r3, #6
 8003f5e:	e008      	b.n	8003f72 <HAL_GPIO_Init+0x1fa>
 8003f60:	2304      	movs	r3, #4
 8003f62:	e006      	b.n	8003f72 <HAL_GPIO_Init+0x1fa>
 8003f64:	2303      	movs	r3, #3
 8003f66:	e004      	b.n	8003f72 <HAL_GPIO_Init+0x1fa>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e002      	b.n	8003f72 <HAL_GPIO_Init+0x1fa>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <HAL_GPIO_Init+0x1fa>
 8003f70:	2300      	movs	r3, #0
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	f002 0203 	and.w	r2, r2, #3
 8003f78:	0092      	lsls	r2, r2, #2
 8003f7a:	4093      	lsls	r3, r2
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f82:	4937      	ldr	r1, [pc, #220]	; (8004060 <HAL_GPIO_Init+0x2e8>)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	089b      	lsrs	r3, r3, #2
 8003f88:	3302      	adds	r3, #2
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f90:	4b39      	ldr	r3, [pc, #228]	; (8004078 <HAL_GPIO_Init+0x300>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fb4:	4a30      	ldr	r2, [pc, #192]	; (8004078 <HAL_GPIO_Init+0x300>)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fba:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <HAL_GPIO_Init+0x300>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fde:	4a26      	ldr	r2, [pc, #152]	; (8004078 <HAL_GPIO_Init+0x300>)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003fe4:	4b24      	ldr	r3, [pc, #144]	; (8004078 <HAL_GPIO_Init+0x300>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004008:	4a1b      	ldr	r2, [pc, #108]	; (8004078 <HAL_GPIO_Init+0x300>)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800400e:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <HAL_GPIO_Init+0x300>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	43db      	mvns	r3, r3
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4013      	ands	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004032:	4a11      	ldr	r2, [pc, #68]	; (8004078 <HAL_GPIO_Init+0x300>)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	3301      	adds	r3, #1
 800403c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	f47f ae9d 	bne.w	8003d88 <HAL_GPIO_Init+0x10>
  }
}
 800404e:	bf00      	nop
 8004050:	bf00      	nop
 8004052:	371c      	adds	r7, #28
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	40021000 	.word	0x40021000
 8004060:	40010000 	.word	0x40010000
 8004064:	48000400 	.word	0x48000400
 8004068:	48000800 	.word	0x48000800
 800406c:	48000c00 	.word	0x48000c00
 8004070:	48001000 	.word	0x48001000
 8004074:	48001400 	.word	0x48001400
 8004078:	40010400 	.word	0x40010400

0800407c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800408a:	e0bd      	b.n	8004208 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800408c:	2201      	movs	r2, #1
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80b0 	beq.w	8004202 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80040a2:	4a60      	ldr	r2, [pc, #384]	; (8004224 <HAL_GPIO_DeInit+0x1a8>)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	3302      	adds	r3, #2
 80040aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	220f      	movs	r2, #15
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040ca:	d01f      	beq.n	800410c <HAL_GPIO_DeInit+0x90>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a56      	ldr	r2, [pc, #344]	; (8004228 <HAL_GPIO_DeInit+0x1ac>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d019      	beq.n	8004108 <HAL_GPIO_DeInit+0x8c>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a55      	ldr	r2, [pc, #340]	; (800422c <HAL_GPIO_DeInit+0x1b0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <HAL_GPIO_DeInit+0x88>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a54      	ldr	r2, [pc, #336]	; (8004230 <HAL_GPIO_DeInit+0x1b4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00d      	beq.n	8004100 <HAL_GPIO_DeInit+0x84>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a53      	ldr	r2, [pc, #332]	; (8004234 <HAL_GPIO_DeInit+0x1b8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <HAL_GPIO_DeInit+0x80>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a52      	ldr	r2, [pc, #328]	; (8004238 <HAL_GPIO_DeInit+0x1bc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d101      	bne.n	80040f8 <HAL_GPIO_DeInit+0x7c>
 80040f4:	2305      	movs	r3, #5
 80040f6:	e00a      	b.n	800410e <HAL_GPIO_DeInit+0x92>
 80040f8:	2306      	movs	r3, #6
 80040fa:	e008      	b.n	800410e <HAL_GPIO_DeInit+0x92>
 80040fc:	2304      	movs	r3, #4
 80040fe:	e006      	b.n	800410e <HAL_GPIO_DeInit+0x92>
 8004100:	2303      	movs	r3, #3
 8004102:	e004      	b.n	800410e <HAL_GPIO_DeInit+0x92>
 8004104:	2302      	movs	r3, #2
 8004106:	e002      	b.n	800410e <HAL_GPIO_DeInit+0x92>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <HAL_GPIO_DeInit+0x92>
 800410c:	2300      	movs	r3, #0
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	f002 0203 	and.w	r2, r2, #3
 8004114:	0092      	lsls	r2, r2, #2
 8004116:	4093      	lsls	r3, r2
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	429a      	cmp	r2, r3
 800411c:	d132      	bne.n	8004184 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800411e:	4b47      	ldr	r3, [pc, #284]	; (800423c <HAL_GPIO_DeInit+0x1c0>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	43db      	mvns	r3, r3
 8004126:	4945      	ldr	r1, [pc, #276]	; (800423c <HAL_GPIO_DeInit+0x1c0>)
 8004128:	4013      	ands	r3, r2
 800412a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800412c:	4b43      	ldr	r3, [pc, #268]	; (800423c <HAL_GPIO_DeInit+0x1c0>)
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	43db      	mvns	r3, r3
 8004134:	4941      	ldr	r1, [pc, #260]	; (800423c <HAL_GPIO_DeInit+0x1c0>)
 8004136:	4013      	ands	r3, r2
 8004138:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800413a:	4b40      	ldr	r3, [pc, #256]	; (800423c <HAL_GPIO_DeInit+0x1c0>)
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	43db      	mvns	r3, r3
 8004142:	493e      	ldr	r1, [pc, #248]	; (800423c <HAL_GPIO_DeInit+0x1c0>)
 8004144:	4013      	ands	r3, r2
 8004146:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004148:	4b3c      	ldr	r3, [pc, #240]	; (800423c <HAL_GPIO_DeInit+0x1c0>)
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	43db      	mvns	r3, r3
 8004150:	493a      	ldr	r1, [pc, #232]	; (800423c <HAL_GPIO_DeInit+0x1c0>)
 8004152:	4013      	ands	r3, r2
 8004154:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	220f      	movs	r2, #15
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004166:	4a2f      	ldr	r2, [pc, #188]	; (8004224 <HAL_GPIO_DeInit+0x1a8>)
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	089b      	lsrs	r3, r3, #2
 800416c:	3302      	adds	r3, #2
 800416e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	43da      	mvns	r2, r3
 8004176:	482b      	ldr	r0, [pc, #172]	; (8004224 <HAL_GPIO_DeInit+0x1a8>)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	089b      	lsrs	r3, r3, #2
 800417c:	400a      	ands	r2, r1
 800417e:	3302      	adds	r3, #2
 8004180:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	2103      	movs	r1, #3
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	08da      	lsrs	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3208      	adds	r2, #8
 80041a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	220f      	movs	r2, #15
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	08d2      	lsrs	r2, r2, #3
 80041b8:	4019      	ands	r1, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3208      	adds	r2, #8
 80041be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	2103      	movs	r1, #3
 80041cc:	fa01 f303 	lsl.w	r3, r1, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	401a      	ands	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	2101      	movs	r1, #1
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	fa01 f303 	lsl.w	r3, r1, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	401a      	ands	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	2103      	movs	r1, #3
 80041f6:	fa01 f303 	lsl.w	r3, r1, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	401a      	ands	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	3301      	adds	r3, #1
 8004206:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	f47f af3b 	bne.w	800408c <HAL_GPIO_DeInit+0x10>
  }
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	40010000 	.word	0x40010000
 8004228:	48000400 	.word	0x48000400
 800422c:	48000800 	.word	0x48000800
 8004230:	48000c00 	.word	0x48000c00
 8004234:	48001000 	.word	0x48001000
 8004238:	48001400 	.word	0x48001400
 800423c:	40010400 	.word	0x40010400

08004240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	807b      	strh	r3, [r7, #2]
 800424c:	4613      	mov	r3, r2
 800424e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004250:	787b      	ldrb	r3, [r7, #1]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004256:	887a      	ldrh	r2, [r7, #2]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800425c:	e002      	b.n	8004264 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800425e:	887a      	ldrh	r2, [r7, #2]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e081      	b.n	8004386 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd fb7a 	bl	8001990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	; 0x24
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d107      	bne.n	80042ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	e006      	b.n	80042f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80042f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d104      	bne.n	800430a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004308:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800431c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800432c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69d9      	ldr	r1, [r3, #28]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1a      	ldr	r2, [r3, #32]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d138      	bne.n	8004416 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e032      	b.n	8004418 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2224      	movs	r2, #36	; 0x24
 80043be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043e0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6819      	ldr	r1, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0201 	orr.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e000      	b.n	8004418 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004416:	2302      	movs	r3, #2
  }
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b20      	cmp	r3, #32
 8004438:	d139      	bne.n	80044ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004444:	2302      	movs	r3, #2
 8004446:	e033      	b.n	80044b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2224      	movs	r2, #36	; 0x24
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004476:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0201 	orr.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
  }
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d141      	bne.n	800454e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044ca:	4b4b      	ldr	r3, [pc, #300]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d6:	d131      	bne.n	800453c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044d8:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044de:	4a46      	ldr	r2, [pc, #280]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044e8:	4b43      	ldr	r3, [pc, #268]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044f0:	4a41      	ldr	r2, [pc, #260]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044f8:	4b40      	ldr	r3, [pc, #256]	; (80045fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2232      	movs	r2, #50	; 0x32
 80044fe:	fb02 f303 	mul.w	r3, r2, r3
 8004502:	4a3f      	ldr	r2, [pc, #252]	; (8004600 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	0c9b      	lsrs	r3, r3, #18
 800450a:	3301      	adds	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800450e:	e002      	b.n	8004516 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3b01      	subs	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004516:	4b38      	ldr	r3, [pc, #224]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004522:	d102      	bne.n	800452a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f2      	bne.n	8004510 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800452a:	4b33      	ldr	r3, [pc, #204]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004536:	d158      	bne.n	80045ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e057      	b.n	80045ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800453c:	4b2e      	ldr	r3, [pc, #184]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800453e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004542:	4a2d      	ldr	r2, [pc, #180]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004548:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800454c:	e04d      	b.n	80045ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004554:	d141      	bne.n	80045da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004556:	4b28      	ldr	r3, [pc, #160]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800455e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004562:	d131      	bne.n	80045c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004564:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800456a:	4a23      	ldr	r2, [pc, #140]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800456c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004570:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004574:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800457c:	4a1e      	ldr	r2, [pc, #120]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800457e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004582:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004584:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2232      	movs	r2, #50	; 0x32
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	4a1c      	ldr	r2, [pc, #112]	; (8004600 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	0c9b      	lsrs	r3, r3, #18
 8004596:	3301      	adds	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800459a:	e002      	b.n	80045a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3b01      	subs	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045a2:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ae:	d102      	bne.n	80045b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f2      	bne.n	800459c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045b6:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c2:	d112      	bne.n	80045ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e011      	b.n	80045ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ce:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80045d8:	e007      	b.n	80045ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045da:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045e2:	4a05      	ldr	r2, [pc, #20]	; (80045f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	40007000 	.word	0x40007000
 80045fc:	20000000 	.word	0x20000000
 8004600:	431bde83 	.word	0x431bde83

08004604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e306      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d075      	beq.n	800470e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004622:	4b97      	ldr	r3, [pc, #604]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800462c:	4b94      	ldr	r3, [pc, #592]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b0c      	cmp	r3, #12
 800463a:	d102      	bne.n	8004642 <HAL_RCC_OscConfig+0x3e>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b03      	cmp	r3, #3
 8004640:	d002      	beq.n	8004648 <HAL_RCC_OscConfig+0x44>
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b08      	cmp	r3, #8
 8004646:	d10b      	bne.n	8004660 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004648:	4b8d      	ldr	r3, [pc, #564]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d05b      	beq.n	800470c <HAL_RCC_OscConfig+0x108>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d157      	bne.n	800470c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e2e1      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004668:	d106      	bne.n	8004678 <HAL_RCC_OscConfig+0x74>
 800466a:	4b85      	ldr	r3, [pc, #532]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a84      	ldr	r2, [pc, #528]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e01d      	b.n	80046b4 <HAL_RCC_OscConfig+0xb0>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0x98>
 8004682:	4b7f      	ldr	r3, [pc, #508]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a7e      	ldr	r2, [pc, #504]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b7c      	ldr	r3, [pc, #496]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a7b      	ldr	r2, [pc, #492]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e00b      	b.n	80046b4 <HAL_RCC_OscConfig+0xb0>
 800469c:	4b78      	ldr	r3, [pc, #480]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a77      	ldr	r2, [pc, #476]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 80046a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	4b75      	ldr	r3, [pc, #468]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a74      	ldr	r2, [pc, #464]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 80046ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d013      	beq.n	80046e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fd fbda 	bl	8001e74 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c4:	f7fd fbd6 	bl	8001e74 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b64      	cmp	r3, #100	; 0x64
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e2a6      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046d6:	4b6a      	ldr	r3, [pc, #424]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0xc0>
 80046e2:	e014      	b.n	800470e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fd fbc6 	bl	8001e74 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ec:	f7fd fbc2 	bl	8001e74 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e292      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046fe:	4b60      	ldr	r3, [pc, #384]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0xe8>
 800470a:	e000      	b.n	800470e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d075      	beq.n	8004806 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800471a:	4b59      	ldr	r3, [pc, #356]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004724:	4b56      	ldr	r3, [pc, #344]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b0c      	cmp	r3, #12
 8004732:	d102      	bne.n	800473a <HAL_RCC_OscConfig+0x136>
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d002      	beq.n	8004740 <HAL_RCC_OscConfig+0x13c>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b04      	cmp	r3, #4
 800473e:	d11f      	bne.n	8004780 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004740:	4b4f      	ldr	r3, [pc, #316]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_OscConfig+0x154>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e265      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004758:	4b49      	ldr	r3, [pc, #292]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	4946      	ldr	r1, [pc, #280]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800476c:	4b45      	ldr	r3, [pc, #276]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7fd fb33 	bl	8001ddc <HAL_InitTick>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d043      	beq.n	8004804 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e251      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d023      	beq.n	80047d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004788:	4b3d      	ldr	r3, [pc, #244]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a3c      	ldr	r2, [pc, #240]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 800478e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fd fb6e 	bl	8001e74 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800479c:	f7fd fb6a 	bl	8001e74 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e23a      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047ae:	4b34      	ldr	r3, [pc, #208]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ba:	4b31      	ldr	r3, [pc, #196]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	061b      	lsls	r3, r3, #24
 80047c8:	492d      	ldr	r1, [pc, #180]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	604b      	str	r3, [r1, #4]
 80047ce:	e01a      	b.n	8004806 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047d0:	4b2b      	ldr	r3, [pc, #172]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a2a      	ldr	r2, [pc, #168]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 80047d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7fd fb4a 	bl	8001e74 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e4:	f7fd fb46 	bl	8001e74 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e216      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x1e0>
 8004802:	e000      	b.n	8004806 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004804:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d041      	beq.n	8004896 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d01c      	beq.n	8004854 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800481a:	4b19      	ldr	r3, [pc, #100]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 800481c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004820:	4a17      	ldr	r2, [pc, #92]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482a:	f7fd fb23 	bl	8001e74 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004832:	f7fd fb1f 	bl	8001e74 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e1ef      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0ef      	beq.n	8004832 <HAL_RCC_OscConfig+0x22e>
 8004852:	e020      	b.n	8004896 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 8004856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800485a:	4a09      	ldr	r2, [pc, #36]	; (8004880 <HAL_RCC_OscConfig+0x27c>)
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fd fb06 	bl	8001e74 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800486a:	e00d      	b.n	8004888 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800486c:	f7fd fb02 	bl	8001e74 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d906      	bls.n	8004888 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e1d2      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
 800487e:	bf00      	nop
 8004880:	40021000 	.word	0x40021000
 8004884:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004888:	4b8c      	ldr	r3, [pc, #560]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 800488a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ea      	bne.n	800486c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80a6 	beq.w	80049f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a4:	2300      	movs	r3, #0
 80048a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048a8:	4b84      	ldr	r3, [pc, #528]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_OscConfig+0x2b4>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <HAL_RCC_OscConfig+0x2b6>
 80048b8:	2300      	movs	r3, #0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00d      	beq.n	80048da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048be:	4b7f      	ldr	r3, [pc, #508]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80048c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c2:	4a7e      	ldr	r2, [pc, #504]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80048c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c8:	6593      	str	r3, [r2, #88]	; 0x58
 80048ca:	4b7c      	ldr	r3, [pc, #496]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048d6:	2301      	movs	r3, #1
 80048d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048da:	4b79      	ldr	r3, [pc, #484]	; (8004ac0 <HAL_RCC_OscConfig+0x4bc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d118      	bne.n	8004918 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e6:	4b76      	ldr	r3, [pc, #472]	; (8004ac0 <HAL_RCC_OscConfig+0x4bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a75      	ldr	r2, [pc, #468]	; (8004ac0 <HAL_RCC_OscConfig+0x4bc>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f2:	f7fd fabf 	bl	8001e74 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fa:	f7fd fabb 	bl	8001e74 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e18b      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800490c:	4b6c      	ldr	r3, [pc, #432]	; (8004ac0 <HAL_RCC_OscConfig+0x4bc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d108      	bne.n	8004932 <HAL_RCC_OscConfig+0x32e>
 8004920:	4b66      	ldr	r3, [pc, #408]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004926:	4a65      	ldr	r2, [pc, #404]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004930:	e024      	b.n	800497c <HAL_RCC_OscConfig+0x378>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b05      	cmp	r3, #5
 8004938:	d110      	bne.n	800495c <HAL_RCC_OscConfig+0x358>
 800493a:	4b60      	ldr	r3, [pc, #384]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004940:	4a5e      	ldr	r2, [pc, #376]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004942:	f043 0304 	orr.w	r3, r3, #4
 8004946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800494a:	4b5c      	ldr	r3, [pc, #368]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004950:	4a5a      	ldr	r2, [pc, #360]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800495a:	e00f      	b.n	800497c <HAL_RCC_OscConfig+0x378>
 800495c:	4b57      	ldr	r3, [pc, #348]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	4a56      	ldr	r2, [pc, #344]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800496c:	4b53      	ldr	r3, [pc, #332]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	4a52      	ldr	r2, [pc, #328]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004974:	f023 0304 	bic.w	r3, r3, #4
 8004978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d016      	beq.n	80049b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7fd fa76 	bl	8001e74 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498c:	f7fd fa72 	bl	8001e74 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	; 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e140      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a2:	4b46      	ldr	r3, [pc, #280]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80049a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0ed      	beq.n	800498c <HAL_RCC_OscConfig+0x388>
 80049b0:	e015      	b.n	80049de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b2:	f7fd fa5f 	bl	8001e74 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fd fa5b 	bl	8001e74 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e129      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049d0:	4b3a      	ldr	r3, [pc, #232]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1ed      	bne.n	80049ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049de:	7ffb      	ldrb	r3, [r7, #31]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d105      	bne.n	80049f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e4:	4b35      	ldr	r3, [pc, #212]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80049e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e8:	4a34      	ldr	r2, [pc, #208]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 80049ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d03c      	beq.n	8004a76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01c      	beq.n	8004a3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a04:	4b2d      	ldr	r3, [pc, #180]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a0a:	4a2c      	ldr	r2, [pc, #176]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fd fa2e 	bl	8001e74 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a1c:	f7fd fa2a 	bl	8001e74 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e0fa      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a2e:	4b23      	ldr	r3, [pc, #140]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0ef      	beq.n	8004a1c <HAL_RCC_OscConfig+0x418>
 8004a3c:	e01b      	b.n	8004a76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a3e:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a44:	4a1d      	ldr	r2, [pc, #116]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a46:	f023 0301 	bic.w	r3, r3, #1
 8004a4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4e:	f7fd fa11 	bl	8001e74 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a56:	f7fd fa0d 	bl	8001e74 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e0dd      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a68:	4b14      	ldr	r3, [pc, #80]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1ef      	bne.n	8004a56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80d1 	beq.w	8004c22 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a80:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b0c      	cmp	r3, #12
 8004a8a:	f000 808b 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d15e      	bne.n	8004b54 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a96:	4b09      	ldr	r3, [pc, #36]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a08      	ldr	r2, [pc, #32]	; (8004abc <HAL_RCC_OscConfig+0x4b8>)
 8004a9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa2:	f7fd f9e7 	bl	8001e74 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa8:	e00c      	b.n	8004ac4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aaa:	f7fd f9e3 	bl	8001e74 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d905      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e0b3      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac4:	4b59      	ldr	r3, [pc, #356]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1ec      	bne.n	8004aaa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ad0:	4b56      	ldr	r3, [pc, #344]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	4b56      	ldr	r3, [pc, #344]	; (8004c30 <HAL_RCC_OscConfig+0x62c>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6a11      	ldr	r1, [r2, #32]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ae0:	3a01      	subs	r2, #1
 8004ae2:	0112      	lsls	r2, r2, #4
 8004ae4:	4311      	orrs	r1, r2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004aea:	0212      	lsls	r2, r2, #8
 8004aec:	4311      	orrs	r1, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004af2:	0852      	lsrs	r2, r2, #1
 8004af4:	3a01      	subs	r2, #1
 8004af6:	0552      	lsls	r2, r2, #21
 8004af8:	4311      	orrs	r1, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004afe:	0852      	lsrs	r2, r2, #1
 8004b00:	3a01      	subs	r2, #1
 8004b02:	0652      	lsls	r2, r2, #25
 8004b04:	4311      	orrs	r1, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b0a:	06d2      	lsls	r2, r2, #27
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	4947      	ldr	r1, [pc, #284]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b14:	4b45      	ldr	r3, [pc, #276]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a44      	ldr	r2, [pc, #272]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b1e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b20:	4b42      	ldr	r3, [pc, #264]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a41      	ldr	r2, [pc, #260]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fd f9a2 	bl	8001e74 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b34:	f7fd f99e 	bl	8001e74 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e06e      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b46:	4b39      	ldr	r3, [pc, #228]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0x530>
 8004b52:	e066      	b.n	8004c22 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b54:	4b35      	ldr	r3, [pc, #212]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a34      	ldr	r2, [pc, #208]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b60:	4b32      	ldr	r3, [pc, #200]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4a31      	ldr	r2, [pc, #196]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004b6c:	4b2f      	ldr	r3, [pc, #188]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4a2e      	ldr	r2, [pc, #184]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b72:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fd f97a 	bl	8001e74 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b84:	f7fd f976 	bl	8001e74 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e046      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b96:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0x580>
 8004ba2:	e03e      	b.n	8004c22 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e039      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004bb0:	4b1e      	ldr	r3, [pc, #120]	; (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f003 0203 	and.w	r2, r3, #3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d12c      	bne.n	8004c1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d123      	bne.n	8004c1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d11b      	bne.n	8004c1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d113      	bne.n	8004c1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	085b      	lsrs	r3, r3, #1
 8004c02:	3b01      	subs	r3, #1
 8004c04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d109      	bne.n	8004c1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	3b01      	subs	r3, #1
 8004c18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d001      	beq.n	8004c22 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3720      	adds	r7, #32
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	019f800c 	.word	0x019f800c

08004c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e11e      	b.n	8004e8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c4c:	4b91      	ldr	r3, [pc, #580]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d910      	bls.n	8004c7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5a:	4b8e      	ldr	r3, [pc, #568]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f023 020f 	bic.w	r2, r3, #15
 8004c62:	498c      	ldr	r1, [pc, #560]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6a:	4b8a      	ldr	r3, [pc, #552]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e106      	b.n	8004e8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d073      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d129      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c90:	4b81      	ldr	r3, [pc, #516]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0f4      	b.n	8004e8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ca0:	f000 f99e 	bl	8004fe0 <RCC_GetSysClockFreqFromPLLSource>
 8004ca4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	4a7c      	ldr	r2, [pc, #496]	; (8004e9c <HAL_RCC_ClockConfig+0x268>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d93f      	bls.n	8004d2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004cae:	4b7a      	ldr	r3, [pc, #488]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d033      	beq.n	8004d2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d12f      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cce:	4b72      	ldr	r3, [pc, #456]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd6:	4a70      	ldr	r2, [pc, #448]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cdc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	e024      	b.n	8004d2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cec:	4b6a      	ldr	r3, [pc, #424]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0c6      	b.n	8004e8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cfc:	4b66      	ldr	r3, [pc, #408]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0be      	b.n	8004e8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d0c:	f000 f8ce 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 8004d10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4a61      	ldr	r2, [pc, #388]	; (8004e9c <HAL_RCC_ClockConfig+0x268>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d909      	bls.n	8004d2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d1a:	4b5f      	ldr	r3, [pc, #380]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d22:	4a5d      	ldr	r2, [pc, #372]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d2a:	2380      	movs	r3, #128	; 0x80
 8004d2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d2e:	4b5a      	ldr	r3, [pc, #360]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f023 0203 	bic.w	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4957      	ldr	r1, [pc, #348]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d40:	f7fd f898 	bl	8001e74 <HAL_GetTick>
 8004d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d48:	f7fd f894 	bl	8001e74 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e095      	b.n	8004e8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	4b4e      	ldr	r3, [pc, #312]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 020c 	and.w	r2, r3, #12
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d1eb      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d023      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d88:	4b43      	ldr	r3, [pc, #268]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4a42      	ldr	r2, [pc, #264]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004d8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004da0:	4b3d      	ldr	r3, [pc, #244]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004da8:	4a3b      	ldr	r2, [pc, #236]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004daa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004dae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db0:	4b39      	ldr	r3, [pc, #228]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4936      	ldr	r1, [pc, #216]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	608b      	str	r3, [r1, #8]
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2b80      	cmp	r3, #128	; 0x80
 8004dc8:	d105      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004dca:	4b33      	ldr	r3, [pc, #204]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	4a32      	ldr	r2, [pc, #200]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004dd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd6:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d21d      	bcs.n	8004e20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de4:	4b2b      	ldr	r3, [pc, #172]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f023 020f 	bic.w	r2, r3, #15
 8004dec:	4929      	ldr	r1, [pc, #164]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004df4:	f7fd f83e 	bl	8001e74 <HAL_GetTick>
 8004df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfa:	e00a      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dfc:	f7fd f83a 	bl	8001e74 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e03b      	b.n	8004e8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e12:	4b20      	ldr	r3, [pc, #128]	; (8004e94 <HAL_RCC_ClockConfig+0x260>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1ed      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e2c:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4917      	ldr	r1, [pc, #92]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e4a:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	490f      	ldr	r1, [pc, #60]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e5e:	f000 f825 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 8004e62:	4602      	mov	r2, r0
 8004e64:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <HAL_RCC_ClockConfig+0x264>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	490c      	ldr	r1, [pc, #48]	; (8004ea0 <HAL_RCC_ClockConfig+0x26c>)
 8004e70:	5ccb      	ldrb	r3, [r1, r3]
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <HAL_RCC_ClockConfig+0x270>)
 8004e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <HAL_RCC_ClockConfig+0x274>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fc ffaa 	bl	8001ddc <HAL_InitTick>
 8004e88:	4603      	mov	r3, r0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40022000 	.word	0x40022000
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	04c4b400 	.word	0x04c4b400
 8004ea0:	0800b688 	.word	0x0800b688
 8004ea4:	20000000 	.word	0x20000000
 8004ea8:	20000004 	.word	0x20000004

08004eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004eb2:	4b2c      	ldr	r3, [pc, #176]	; (8004f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d102      	bne.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ebe:	4b2a      	ldr	r3, [pc, #168]	; (8004f68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	e047      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ec4:	4b27      	ldr	r3, [pc, #156]	; (8004f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 030c 	and.w	r3, r3, #12
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d102      	bne.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ed0:	4b26      	ldr	r3, [pc, #152]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	e03e      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004ed6:	4b23      	ldr	r3, [pc, #140]	; (8004f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 030c 	and.w	r3, r3, #12
 8004ede:	2b0c      	cmp	r3, #12
 8004ee0:	d136      	bne.n	8004f50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ee2:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004eec:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d10c      	bne.n	8004f1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f00:	4a1a      	ldr	r2, [pc, #104]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	4a16      	ldr	r2, [pc, #88]	; (8004f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f0a:	68d2      	ldr	r2, [r2, #12]
 8004f0c:	0a12      	lsrs	r2, r2, #8
 8004f0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f12:	fb02 f303 	mul.w	r3, r2, r3
 8004f16:	617b      	str	r3, [r7, #20]
      break;
 8004f18:	e00c      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f1a:	4a13      	ldr	r2, [pc, #76]	; (8004f68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f22:	4a10      	ldr	r2, [pc, #64]	; (8004f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f24:	68d2      	ldr	r2, [r2, #12]
 8004f26:	0a12      	lsrs	r2, r2, #8
 8004f28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f2c:	fb02 f303 	mul.w	r3, r2, r3
 8004f30:	617b      	str	r3, [r7, #20]
      break;
 8004f32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f34:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	0e5b      	lsrs	r3, r3, #25
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	3301      	adds	r3, #1
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	e001      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f54:	693b      	ldr	r3, [r7, #16]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40021000 	.word	0x40021000
 8004f68:	00f42400 	.word	0x00f42400
 8004f6c:	007a1200 	.word	0x007a1200

08004f70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f74:	4b03      	ldr	r3, [pc, #12]	; (8004f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f76:	681b      	ldr	r3, [r3, #0]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20000000 	.word	0x20000000

08004f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f8c:	f7ff fff0 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8004f90:	4602      	mov	r2, r0
 8004f92:	4b06      	ldr	r3, [pc, #24]	; (8004fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	0a1b      	lsrs	r3, r3, #8
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	4904      	ldr	r1, [pc, #16]	; (8004fb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f9e:	5ccb      	ldrb	r3, [r1, r3]
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	0800b698 	.word	0x0800b698

08004fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fb8:	f7ff ffda 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0adb      	lsrs	r3, r3, #11
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4904      	ldr	r1, [pc, #16]	; (8004fdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	0800b698 	.word	0x0800b698

08004fe0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fe6:	4b1e      	ldr	r3, [pc, #120]	; (8005060 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ff0:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b03      	cmp	r3, #3
 8005002:	d10c      	bne.n	800501e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005004:	4a17      	ldr	r2, [pc, #92]	; (8005064 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	4a14      	ldr	r2, [pc, #80]	; (8005060 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800500e:	68d2      	ldr	r2, [r2, #12]
 8005010:	0a12      	lsrs	r2, r2, #8
 8005012:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	617b      	str	r3, [r7, #20]
    break;
 800501c:	e00c      	b.n	8005038 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800501e:	4a12      	ldr	r2, [pc, #72]	; (8005068 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	fbb2 f3f3 	udiv	r3, r2, r3
 8005026:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005028:	68d2      	ldr	r2, [r2, #12]
 800502a:	0a12      	lsrs	r2, r2, #8
 800502c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005030:	fb02 f303 	mul.w	r3, r2, r3
 8005034:	617b      	str	r3, [r7, #20]
    break;
 8005036:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	0e5b      	lsrs	r3, r3, #25
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	3301      	adds	r3, #1
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005052:	687b      	ldr	r3, [r7, #4]
}
 8005054:	4618      	mov	r0, r3
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	40021000 	.word	0x40021000
 8005064:	007a1200 	.word	0x007a1200
 8005068:	00f42400 	.word	0x00f42400

0800506c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005074:	2300      	movs	r3, #0
 8005076:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005078:	2300      	movs	r3, #0
 800507a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8098 	beq.w	80051ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800508a:	2300      	movs	r3, #0
 800508c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800508e:	4b43      	ldr	r3, [pc, #268]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10d      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800509a:	4b40      	ldr	r3, [pc, #256]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800509c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509e:	4a3f      	ldr	r2, [pc, #252]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6593      	str	r3, [r2, #88]	; 0x58
 80050a6:	4b3d      	ldr	r3, [pc, #244]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ae:	60bb      	str	r3, [r7, #8]
 80050b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b2:	2301      	movs	r3, #1
 80050b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b6:	4b3a      	ldr	r3, [pc, #232]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a39      	ldr	r2, [pc, #228]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050c2:	f7fc fed7 	bl	8001e74 <HAL_GetTick>
 80050c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050c8:	e009      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ca:	f7fc fed3 	bl	8001e74 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d902      	bls.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	74fb      	strb	r3, [r7, #19]
        break;
 80050dc:	e005      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050de:	4b30      	ldr	r3, [pc, #192]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0ef      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d159      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050f0:	4b2a      	ldr	r3, [pc, #168]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01e      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	429a      	cmp	r2, r3
 800510a:	d019      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800510c:	4b23      	ldr	r3, [pc, #140]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005116:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005118:	4b20      	ldr	r3, [pc, #128]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	4a1f      	ldr	r2, [pc, #124]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005128:	4b1c      	ldr	r3, [pc, #112]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512e:	4a1b      	ldr	r2, [pc, #108]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005138:	4a18      	ldr	r2, [pc, #96]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d016      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514a:	f7fc fe93 	bl	8001e74 <HAL_GetTick>
 800514e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005150:	e00b      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005152:	f7fc fe8f 	bl	8001e74 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005160:	4293      	cmp	r3, r2
 8005162:	d902      	bls.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	74fb      	strb	r3, [r7, #19]
            break;
 8005168:	e006      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800516a:	4b0c      	ldr	r3, [pc, #48]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0ec      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10b      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800517e:	4b07      	ldr	r3, [pc, #28]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	4903      	ldr	r1, [pc, #12]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005194:	e008      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005196:	7cfb      	ldrb	r3, [r7, #19]
 8005198:	74bb      	strb	r3, [r7, #18]
 800519a:	e005      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800519c:	40021000 	.word	0x40021000
 80051a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a4:	7cfb      	ldrb	r3, [r7, #19]
 80051a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a8:	7c7b      	ldrb	r3, [r7, #17]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d105      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ae:	4ba6      	ldr	r3, [pc, #664]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	4aa5      	ldr	r2, [pc, #660]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051c6:	4ba0      	ldr	r3, [pc, #640]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051cc:	f023 0203 	bic.w	r2, r3, #3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	499c      	ldr	r1, [pc, #624]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051e8:	4b97      	ldr	r3, [pc, #604]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	f023 020c 	bic.w	r2, r3, #12
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	4994      	ldr	r1, [pc, #592]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800520a:	4b8f      	ldr	r3, [pc, #572]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005210:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	498b      	ldr	r1, [pc, #556]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800522c:	4b86      	ldr	r3, [pc, #536]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	4983      	ldr	r1, [pc, #524]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800524e:	4b7e      	ldr	r3, [pc, #504]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	497a      	ldr	r1, [pc, #488]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005270:	4b75      	ldr	r3, [pc, #468]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	4972      	ldr	r1, [pc, #456]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005292:	4b6d      	ldr	r3, [pc, #436]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005298:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	4969      	ldr	r1, [pc, #420]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052b4:	4b64      	ldr	r3, [pc, #400]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	4961      	ldr	r1, [pc, #388]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052d6:	4b5c      	ldr	r3, [pc, #368]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	4958      	ldr	r1, [pc, #352]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d015      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052f8:	4b53      	ldr	r3, [pc, #332]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005306:	4950      	ldr	r1, [pc, #320]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005316:	d105      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005318:	4b4b      	ldr	r3, [pc, #300]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a4a      	ldr	r2, [pc, #296]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005322:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532c:	2b00      	cmp	r3, #0
 800532e:	d015      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005330:	4b45      	ldr	r3, [pc, #276]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	4942      	ldr	r1, [pc, #264]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800534e:	d105      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005350:	4b3d      	ldr	r3, [pc, #244]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4a3c      	ldr	r2, [pc, #240]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800535a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d015      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005368:	4b37      	ldr	r3, [pc, #220]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	4934      	ldr	r1, [pc, #208]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005386:	d105      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005388:	4b2f      	ldr	r3, [pc, #188]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4a2e      	ldr	r2, [pc, #184]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005392:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d015      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053a0:	4b29      	ldr	r3, [pc, #164]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ae:	4926      	ldr	r1, [pc, #152]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053be:	d105      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c0:	4b21      	ldr	r3, [pc, #132]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a20      	ldr	r2, [pc, #128]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d015      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053d8:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	4918      	ldr	r1, [pc, #96]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053f6:	d105      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f8:	4b13      	ldr	r3, [pc, #76]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4a12      	ldr	r2, [pc, #72]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005402:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d015      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005410:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	490a      	ldr	r1, [pc, #40]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800542e:	d105      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4a04      	ldr	r2, [pc, #16]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800543c:	7cbb      	ldrb	r3, [r7, #18]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40021000 	.word	0x40021000

0800544c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e042      	b.n	80054e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005464:	2b00      	cmp	r3, #0
 8005466:	d106      	bne.n	8005476 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7fc fae5 	bl	8001a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2224      	movs	r2, #36	; 0x24
 800547a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0201 	bic.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fd56 	bl	8005f40 <UART_SetConfig>
 8005494:	4603      	mov	r3, r0
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e022      	b.n	80054e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f001 f816 	bl	80064d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 f89d 	bl	800661c <UART_CheckIdleState>
 80054e2:	4603      	mov	r3, r0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e02e      	b.n	800555c <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2224      	movs	r2, #36	; 0x24
 8005502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0201 	bic.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2200      	movs	r2, #0
 8005524:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fc fb26 	bl	8001b80 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	; 0x28
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	4613      	mov	r3, r2
 8005572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800557a:	2b20      	cmp	r3, #32
 800557c:	f040 8083 	bne.w	8005686 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_UART_Transmit+0x28>
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e07b      	b.n	8005688 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_UART_Transmit+0x3a>
 800559a:	2302      	movs	r3, #2
 800559c:	e074      	b.n	8005688 <HAL_UART_Transmit+0x124>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2221      	movs	r2, #33	; 0x21
 80055b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055b6:	f7fc fc5d 	bl	8001e74 <HAL_GetTick>
 80055ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	88fa      	ldrh	r2, [r7, #6]
 80055c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	88fa      	ldrh	r2, [r7, #6]
 80055c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d4:	d108      	bne.n	80055e8 <HAL_UART_Transmit+0x84>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d104      	bne.n	80055e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	e003      	b.n	80055f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80055f8:	e02c      	b.n	8005654 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2200      	movs	r2, #0
 8005602:	2180      	movs	r1, #128	; 0x80
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f001 f854 	bl	80066b2 <UART_WaitOnFlagUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e039      	b.n	8005688 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10b      	bne.n	8005632 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005628:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	3302      	adds	r3, #2
 800562e:	61bb      	str	r3, [r7, #24]
 8005630:	e007      	b.n	8005642 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	3301      	adds	r3, #1
 8005640:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1cc      	bne.n	80055fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2200      	movs	r2, #0
 8005668:	2140      	movs	r1, #64	; 0x40
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f001 f821 	bl	80066b2 <UART_WaitOnFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e006      	b.n	8005688 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	e000      	b.n	8005688 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005686:	2302      	movs	r3, #2
  }
}
 8005688:	4618      	mov	r0, r3
 800568a:	3720      	adds	r7, #32
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	; 0x28
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	f040 80c0 	bne.w	800582c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <HAL_UART_Receive+0x28>
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0b8      	b.n	800582e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Receive+0x3a>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e0b1      	b.n	800582e <HAL_UART_Receive+0x19e>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2222      	movs	r2, #34	; 0x22
 80056de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056e8:	f7fc fbc4 	bl	8001e74 <HAL_GetTick>
 80056ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	88fa      	ldrh	r2, [r7, #6]
 80056f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	88fa      	ldrh	r2, [r7, #6]
 80056fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005706:	d10e      	bne.n	8005726 <HAL_UART_Receive+0x96>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d105      	bne.n	800571c <HAL_UART_Receive+0x8c>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005716:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800571a:	e02d      	b.n	8005778 <HAL_UART_Receive+0xe8>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	22ff      	movs	r2, #255	; 0xff
 8005720:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005724:	e028      	b.n	8005778 <HAL_UART_Receive+0xe8>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <HAL_UART_Receive+0xba>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d104      	bne.n	8005740 <HAL_UART_Receive+0xb0>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	22ff      	movs	r2, #255	; 0xff
 800573a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800573e:	e01b      	b.n	8005778 <HAL_UART_Receive+0xe8>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	227f      	movs	r2, #127	; 0x7f
 8005744:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005748:	e016      	b.n	8005778 <HAL_UART_Receive+0xe8>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005752:	d10d      	bne.n	8005770 <HAL_UART_Receive+0xe0>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d104      	bne.n	8005766 <HAL_UART_Receive+0xd6>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	227f      	movs	r2, #127	; 0x7f
 8005760:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005764:	e008      	b.n	8005778 <HAL_UART_Receive+0xe8>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	223f      	movs	r2, #63	; 0x3f
 800576a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800576e:	e003      	b.n	8005778 <HAL_UART_Receive+0xe8>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800577e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005788:	d108      	bne.n	800579c <HAL_UART_Receive+0x10c>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d104      	bne.n	800579c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	e003      	b.n	80057a4 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80057ac:	e032      	b.n	8005814 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	2120      	movs	r1, #32
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 ff7a 	bl	80066b2 <UART_WaitOnFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e032      	b.n	800582e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10c      	bne.n	80057e8 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	8a7b      	ldrh	r3, [r7, #18]
 80057d8:	4013      	ands	r3, r2
 80057da:	b29a      	uxth	r2, r3
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	3302      	adds	r3, #2
 80057e4:	61bb      	str	r3, [r7, #24]
 80057e6:	e00c      	b.n	8005802 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	8a7b      	ldrh	r3, [r7, #18]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	4013      	ands	r3, r2
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	3301      	adds	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1c6      	bne.n	80057ae <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	e000      	b.n	800582e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800582c:	2302      	movs	r3, #2
  }
}
 800582e:	4618      	mov	r0, r3
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584c:	2b20      	cmp	r3, #32
 800584e:	d142      	bne.n	80058d6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_UART_Receive_IT+0x24>
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e03b      	b.n	80058d8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_UART_Receive_IT+0x36>
 800586a:	2302      	movs	r3, #2
 800586c:	e034      	b.n	80058d8 <HAL_UART_Receive_IT+0xa0>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a17      	ldr	r2, [pc, #92]	; (80058e0 <HAL_UART_Receive_IT+0xa8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01f      	beq.n	80058c6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d018      	beq.n	80058c6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	613b      	str	r3, [r7, #16]
   return(result);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	623b      	str	r3, [r7, #32]
 80058b4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	69f9      	ldr	r1, [r7, #28]
 80058b8:	6a3a      	ldr	r2, [r7, #32]
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e6      	bne.n	8005894 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058c6:	88fb      	ldrh	r3, [r7, #6]
 80058c8:	461a      	mov	r2, r3
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 ffb9 	bl	8006844 <UART_Start_Receive_IT>
 80058d2:	4603      	mov	r3, r0
 80058d4:	e000      	b.n	80058d8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
  }
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3728      	adds	r7, #40	; 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40008000 	.word	0x40008000

080058e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b0ba      	sub	sp, #232	; 0xe8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800590a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800590e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005912:	4013      	ands	r3, r2
 8005914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d11b      	bne.n	8005958 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d015      	beq.n	8005958 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800592c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b00      	cmp	r3, #0
 8005936:	d105      	bne.n	8005944 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800593c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d009      	beq.n	8005958 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 82d6 	beq.w	8005efa <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
      }
      return;
 8005956:	e2d0      	b.n	8005efa <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 811f 	beq.w	8005ba0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005962:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005966:	4b8b      	ldr	r3, [pc, #556]	; (8005b94 <HAL_UART_IRQHandler+0x2b0>)
 8005968:	4013      	ands	r3, r2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800596e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005972:	4b89      	ldr	r3, [pc, #548]	; (8005b98 <HAL_UART_IRQHandler+0x2b4>)
 8005974:	4013      	ands	r3, r2
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8112 	beq.w	8005ba0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800597c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d011      	beq.n	80059ac <HAL_UART_IRQHandler+0xc8>
 8005988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00b      	beq.n	80059ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2201      	movs	r2, #1
 800599a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059a2:	f043 0201 	orr.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d011      	beq.n	80059dc <HAL_UART_IRQHandler+0xf8>
 80059b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00b      	beq.n	80059dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2202      	movs	r2, #2
 80059ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d2:	f043 0204 	orr.w	r2, r3, #4
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d011      	beq.n	8005a0c <HAL_UART_IRQHandler+0x128>
 80059e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2204      	movs	r2, #4
 80059fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a02:	f043 0202 	orr.w	r2, r3, #2
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d017      	beq.n	8005a48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d105      	bne.n	8005a30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005a24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005a28:	4b5a      	ldr	r3, [pc, #360]	; (8005b94 <HAL_UART_IRQHandler+0x2b0>)
 8005a2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00b      	beq.n	8005a48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2208      	movs	r2, #8
 8005a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3e:	f043 0208 	orr.w	r2, r3, #8
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d012      	beq.n	8005a7a <HAL_UART_IRQHandler+0x196>
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00c      	beq.n	8005a7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a70:	f043 0220 	orr.w	r2, r3, #32
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 823c 	beq.w	8005efe <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d013      	beq.n	8005aba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d105      	bne.n	8005aaa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d005      	beq.n	8005ade <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ad6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d04f      	beq.n	8005b7e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 ffda 	bl	8006a98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b40      	cmp	r3, #64	; 0x40
 8005af0:	d141      	bne.n	8005b76 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3308      	adds	r3, #8
 8005af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1d9      	bne.n	8005af2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d013      	beq.n	8005b6e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b4a:	4a14      	ldr	r2, [pc, #80]	; (8005b9c <HAL_UART_IRQHandler+0x2b8>)
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe f808 	bl	8003b68 <HAL_DMA_Abort_IT>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d017      	beq.n	8005b8e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6c:	e00f      	b.n	8005b8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f004 f90a 	bl	8009d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b74:	e00b      	b.n	8005b8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f004 f906 	bl	8009d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	e007      	b.n	8005b8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f004 f902 	bl	8009d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005b8c:	e1b7      	b.n	8005efe <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8e:	bf00      	nop
    return;
 8005b90:	e1b5      	b.n	8005efe <HAL_UART_IRQHandler+0x61a>
 8005b92:	bf00      	nop
 8005b94:	10000001 	.word	0x10000001
 8005b98:	04000120 	.word	0x04000120
 8005b9c:	08006b65 	.word	0x08006b65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	f040 814a 	bne.w	8005e3e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bae:	f003 0310 	and.w	r3, r3, #16
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 8143 	beq.w	8005e3e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 813c 	beq.w	8005e3e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2210      	movs	r2, #16
 8005bcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	f040 80b5 	bne.w	8005d48 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 8187 	beq.w	8005f02 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	f080 817f 	bcs.w	8005f02 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f040 8086 	bne.w	8005d2c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1da      	bne.n	8005c20 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3308      	adds	r3, #8
 8005c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e1      	bne.n	8005c6a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3308      	adds	r3, #8
 8005cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e3      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cfc:	f023 0310 	bic.w	r3, r3, #16
 8005d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e4      	bne.n	8005cec <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fd fec5 	bl	8003ab6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f8f1 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d46:	e0dc      	b.n	8005f02 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 80ce 	beq.w	8005f06 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005d6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 80c9 	beq.w	8005f06 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	461a      	mov	r2, r3
 8005d92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d96:	647b      	str	r3, [r7, #68]	; 0x44
 8005d98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e4      	bne.n	8005d74 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3308      	adds	r3, #8
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3308      	adds	r3, #8
 8005dce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dd2:	633a      	str	r2, [r7, #48]	; 0x30
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e1      	bne.n	8005daa <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	e853 3f00 	ldrex	r3, [r3]
 8005e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0310 	bic.w	r3, r3, #16
 8005e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	69b9      	ldr	r1, [r7, #24]
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	617b      	str	r3, [r7, #20]
   return(result);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e4      	bne.n	8005dfa <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f876 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e3c:	e063      	b.n	8005f06 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00e      	beq.n	8005e68 <HAL_UART_IRQHandler+0x584>
 8005e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f001 fb1d 	bl	80074a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e66:	e051      	b.n	8005f0c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d014      	beq.n	8005e9e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d105      	bne.n	8005e8c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d03a      	beq.n	8005f0a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	4798      	blx	r3
    }
    return;
 8005e9c:	e035      	b.n	8005f0a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <HAL_UART_IRQHandler+0x5da>
 8005eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fe6a 	bl	8006b90 <UART_EndTransmit_IT>
    return;
 8005ebc:	e026      	b.n	8005f0c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <HAL_UART_IRQHandler+0x5fa>
 8005eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ece:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f001 faf6 	bl	80074c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005edc:	e016      	b.n	8005f0c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d010      	beq.n	8005f0c <HAL_UART_IRQHandler+0x628>
 8005eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	da0c      	bge.n	8005f0c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f001 fade 	bl	80074b4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ef8:	e008      	b.n	8005f0c <HAL_UART_IRQHandler+0x628>
      return;
 8005efa:	bf00      	nop
 8005efc:	e006      	b.n	8005f0c <HAL_UART_IRQHandler+0x628>
    return;
 8005efe:	bf00      	nop
 8005f00:	e004      	b.n	8005f0c <HAL_UART_IRQHandler+0x628>
      return;
 8005f02:	bf00      	nop
 8005f04:	e002      	b.n	8005f0c <HAL_UART_IRQHandler+0x628>
      return;
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <HAL_UART_IRQHandler+0x628>
    return;
 8005f0a:	bf00      	nop
  }
}
 8005f0c:	37e8      	adds	r7, #232	; 0xe8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop

08005f14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f44:	b08c      	sub	sp, #48	; 0x30
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	4bab      	ldr	r3, [pc, #684]	; (800621c <UART_SetConfig+0x2dc>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4aa0      	ldr	r2, [pc, #640]	; (8006220 <UART_SetConfig+0x2e0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005fb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	6812      	ldr	r2, [r2, #0]
 8005fbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	f023 010f 	bic.w	r1, r3, #15
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a91      	ldr	r2, [pc, #580]	; (8006224 <UART_SetConfig+0x2e4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d125      	bne.n	8006030 <UART_SetConfig+0xf0>
 8005fe4:	4b90      	ldr	r3, [pc, #576]	; (8006228 <UART_SetConfig+0x2e8>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d81a      	bhi.n	8006028 <UART_SetConfig+0xe8>
 8005ff2:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <UART_SetConfig+0xb8>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	08006009 	.word	0x08006009
 8005ffc:	08006019 	.word	0x08006019
 8006000:	08006011 	.word	0x08006011
 8006004:	08006021 	.word	0x08006021
 8006008:	2301      	movs	r3, #1
 800600a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800600e:	e0d6      	b.n	80061be <UART_SetConfig+0x27e>
 8006010:	2302      	movs	r3, #2
 8006012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006016:	e0d2      	b.n	80061be <UART_SetConfig+0x27e>
 8006018:	2304      	movs	r3, #4
 800601a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800601e:	e0ce      	b.n	80061be <UART_SetConfig+0x27e>
 8006020:	2308      	movs	r3, #8
 8006022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006026:	e0ca      	b.n	80061be <UART_SetConfig+0x27e>
 8006028:	2310      	movs	r3, #16
 800602a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800602e:	e0c6      	b.n	80061be <UART_SetConfig+0x27e>
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a7d      	ldr	r2, [pc, #500]	; (800622c <UART_SetConfig+0x2ec>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d138      	bne.n	80060ac <UART_SetConfig+0x16c>
 800603a:	4b7b      	ldr	r3, [pc, #492]	; (8006228 <UART_SetConfig+0x2e8>)
 800603c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006040:	f003 030c 	and.w	r3, r3, #12
 8006044:	2b0c      	cmp	r3, #12
 8006046:	d82d      	bhi.n	80060a4 <UART_SetConfig+0x164>
 8006048:	a201      	add	r2, pc, #4	; (adr r2, 8006050 <UART_SetConfig+0x110>)
 800604a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604e:	bf00      	nop
 8006050:	08006085 	.word	0x08006085
 8006054:	080060a5 	.word	0x080060a5
 8006058:	080060a5 	.word	0x080060a5
 800605c:	080060a5 	.word	0x080060a5
 8006060:	08006095 	.word	0x08006095
 8006064:	080060a5 	.word	0x080060a5
 8006068:	080060a5 	.word	0x080060a5
 800606c:	080060a5 	.word	0x080060a5
 8006070:	0800608d 	.word	0x0800608d
 8006074:	080060a5 	.word	0x080060a5
 8006078:	080060a5 	.word	0x080060a5
 800607c:	080060a5 	.word	0x080060a5
 8006080:	0800609d 	.word	0x0800609d
 8006084:	2300      	movs	r3, #0
 8006086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800608a:	e098      	b.n	80061be <UART_SetConfig+0x27e>
 800608c:	2302      	movs	r3, #2
 800608e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006092:	e094      	b.n	80061be <UART_SetConfig+0x27e>
 8006094:	2304      	movs	r3, #4
 8006096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800609a:	e090      	b.n	80061be <UART_SetConfig+0x27e>
 800609c:	2308      	movs	r3, #8
 800609e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060a2:	e08c      	b.n	80061be <UART_SetConfig+0x27e>
 80060a4:	2310      	movs	r3, #16
 80060a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060aa:	e088      	b.n	80061be <UART_SetConfig+0x27e>
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a5f      	ldr	r2, [pc, #380]	; (8006230 <UART_SetConfig+0x2f0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d125      	bne.n	8006102 <UART_SetConfig+0x1c2>
 80060b6:	4b5c      	ldr	r3, [pc, #368]	; (8006228 <UART_SetConfig+0x2e8>)
 80060b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060c0:	2b30      	cmp	r3, #48	; 0x30
 80060c2:	d016      	beq.n	80060f2 <UART_SetConfig+0x1b2>
 80060c4:	2b30      	cmp	r3, #48	; 0x30
 80060c6:	d818      	bhi.n	80060fa <UART_SetConfig+0x1ba>
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d00a      	beq.n	80060e2 <UART_SetConfig+0x1a2>
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	d814      	bhi.n	80060fa <UART_SetConfig+0x1ba>
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <UART_SetConfig+0x19a>
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d008      	beq.n	80060ea <UART_SetConfig+0x1aa>
 80060d8:	e00f      	b.n	80060fa <UART_SetConfig+0x1ba>
 80060da:	2300      	movs	r3, #0
 80060dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060e0:	e06d      	b.n	80061be <UART_SetConfig+0x27e>
 80060e2:	2302      	movs	r3, #2
 80060e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060e8:	e069      	b.n	80061be <UART_SetConfig+0x27e>
 80060ea:	2304      	movs	r3, #4
 80060ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060f0:	e065      	b.n	80061be <UART_SetConfig+0x27e>
 80060f2:	2308      	movs	r3, #8
 80060f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060f8:	e061      	b.n	80061be <UART_SetConfig+0x27e>
 80060fa:	2310      	movs	r3, #16
 80060fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006100:	e05d      	b.n	80061be <UART_SetConfig+0x27e>
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a4b      	ldr	r2, [pc, #300]	; (8006234 <UART_SetConfig+0x2f4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d125      	bne.n	8006158 <UART_SetConfig+0x218>
 800610c:	4b46      	ldr	r3, [pc, #280]	; (8006228 <UART_SetConfig+0x2e8>)
 800610e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006112:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006116:	2bc0      	cmp	r3, #192	; 0xc0
 8006118:	d016      	beq.n	8006148 <UART_SetConfig+0x208>
 800611a:	2bc0      	cmp	r3, #192	; 0xc0
 800611c:	d818      	bhi.n	8006150 <UART_SetConfig+0x210>
 800611e:	2b80      	cmp	r3, #128	; 0x80
 8006120:	d00a      	beq.n	8006138 <UART_SetConfig+0x1f8>
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d814      	bhi.n	8006150 <UART_SetConfig+0x210>
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <UART_SetConfig+0x1f0>
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d008      	beq.n	8006140 <UART_SetConfig+0x200>
 800612e:	e00f      	b.n	8006150 <UART_SetConfig+0x210>
 8006130:	2300      	movs	r3, #0
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006136:	e042      	b.n	80061be <UART_SetConfig+0x27e>
 8006138:	2302      	movs	r3, #2
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800613e:	e03e      	b.n	80061be <UART_SetConfig+0x27e>
 8006140:	2304      	movs	r3, #4
 8006142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006146:	e03a      	b.n	80061be <UART_SetConfig+0x27e>
 8006148:	2308      	movs	r3, #8
 800614a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800614e:	e036      	b.n	80061be <UART_SetConfig+0x27e>
 8006150:	2310      	movs	r3, #16
 8006152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006156:	e032      	b.n	80061be <UART_SetConfig+0x27e>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a30      	ldr	r2, [pc, #192]	; (8006220 <UART_SetConfig+0x2e0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d12a      	bne.n	80061b8 <UART_SetConfig+0x278>
 8006162:	4b31      	ldr	r3, [pc, #196]	; (8006228 <UART_SetConfig+0x2e8>)
 8006164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800616c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006170:	d01a      	beq.n	80061a8 <UART_SetConfig+0x268>
 8006172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006176:	d81b      	bhi.n	80061b0 <UART_SetConfig+0x270>
 8006178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800617c:	d00c      	beq.n	8006198 <UART_SetConfig+0x258>
 800617e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006182:	d815      	bhi.n	80061b0 <UART_SetConfig+0x270>
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <UART_SetConfig+0x250>
 8006188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618c:	d008      	beq.n	80061a0 <UART_SetConfig+0x260>
 800618e:	e00f      	b.n	80061b0 <UART_SetConfig+0x270>
 8006190:	2300      	movs	r3, #0
 8006192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006196:	e012      	b.n	80061be <UART_SetConfig+0x27e>
 8006198:	2302      	movs	r3, #2
 800619a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800619e:	e00e      	b.n	80061be <UART_SetConfig+0x27e>
 80061a0:	2304      	movs	r3, #4
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061a6:	e00a      	b.n	80061be <UART_SetConfig+0x27e>
 80061a8:	2308      	movs	r3, #8
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ae:	e006      	b.n	80061be <UART_SetConfig+0x27e>
 80061b0:	2310      	movs	r3, #16
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b6:	e002      	b.n	80061be <UART_SetConfig+0x27e>
 80061b8:	2310      	movs	r3, #16
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a17      	ldr	r2, [pc, #92]	; (8006220 <UART_SetConfig+0x2e0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	f040 80a8 	bne.w	800631a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d834      	bhi.n	800623c <UART_SetConfig+0x2fc>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <UART_SetConfig+0x298>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061fd 	.word	0x080061fd
 80061dc:	0800623d 	.word	0x0800623d
 80061e0:	08006205 	.word	0x08006205
 80061e4:	0800623d 	.word	0x0800623d
 80061e8:	0800620b 	.word	0x0800620b
 80061ec:	0800623d 	.word	0x0800623d
 80061f0:	0800623d 	.word	0x0800623d
 80061f4:	0800623d 	.word	0x0800623d
 80061f8:	08006213 	.word	0x08006213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061fc:	f7fe fec4 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 8006200:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006202:	e021      	b.n	8006248 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006204:	4b0c      	ldr	r3, [pc, #48]	; (8006238 <UART_SetConfig+0x2f8>)
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006208:	e01e      	b.n	8006248 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800620a:	f7fe fe4f 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 800620e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006210:	e01a      	b.n	8006248 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006218:	e016      	b.n	8006248 <UART_SetConfig+0x308>
 800621a:	bf00      	nop
 800621c:	cfff69f3 	.word	0xcfff69f3
 8006220:	40008000 	.word	0x40008000
 8006224:	40013800 	.word	0x40013800
 8006228:	40021000 	.word	0x40021000
 800622c:	40004400 	.word	0x40004400
 8006230:	40004800 	.word	0x40004800
 8006234:	40004c00 	.word	0x40004c00
 8006238:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006246:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 812a 	beq.w	80064a4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	4a9e      	ldr	r2, [pc, #632]	; (80064d0 <UART_SetConfig+0x590>)
 8006256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800625a:	461a      	mov	r2, r3
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006262:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	4613      	mov	r3, r2
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	4413      	add	r3, r2
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	429a      	cmp	r2, r3
 8006272:	d305      	bcc.n	8006280 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	429a      	cmp	r2, r3
 800627e:	d903      	bls.n	8006288 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006286:	e10d      	b.n	80064a4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	2200      	movs	r2, #0
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	60fa      	str	r2, [r7, #12]
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	4a8e      	ldr	r2, [pc, #568]	; (80064d0 <UART_SetConfig+0x590>)
 8006296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800629a:	b29b      	uxth	r3, r3
 800629c:	2200      	movs	r2, #0
 800629e:	603b      	str	r3, [r7, #0]
 80062a0:	607a      	str	r2, [r7, #4]
 80062a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062aa:	f7fa f9d3 	bl	8000654 <__aeabi_uldivmod>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4610      	mov	r0, r2
 80062b4:	4619      	mov	r1, r3
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	020b      	lsls	r3, r1, #8
 80062c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062c4:	0202      	lsls	r2, r0, #8
 80062c6:	6979      	ldr	r1, [r7, #20]
 80062c8:	6849      	ldr	r1, [r1, #4]
 80062ca:	0849      	lsrs	r1, r1, #1
 80062cc:	2000      	movs	r0, #0
 80062ce:	460c      	mov	r4, r1
 80062d0:	4605      	mov	r5, r0
 80062d2:	eb12 0804 	adds.w	r8, r2, r4
 80062d6:	eb43 0905 	adc.w	r9, r3, r5
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	469a      	mov	sl, r3
 80062e2:	4693      	mov	fp, r2
 80062e4:	4652      	mov	r2, sl
 80062e6:	465b      	mov	r3, fp
 80062e8:	4640      	mov	r0, r8
 80062ea:	4649      	mov	r1, r9
 80062ec:	f7fa f9b2 	bl	8000654 <__aeabi_uldivmod>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4613      	mov	r3, r2
 80062f6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062fe:	d308      	bcc.n	8006312 <UART_SetConfig+0x3d2>
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006306:	d204      	bcs.n	8006312 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6a3a      	ldr	r2, [r7, #32]
 800630e:	60da      	str	r2, [r3, #12]
 8006310:	e0c8      	b.n	80064a4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006318:	e0c4      	b.n	80064a4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006322:	d167      	bne.n	80063f4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006324:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006328:	2b08      	cmp	r3, #8
 800632a:	d828      	bhi.n	800637e <UART_SetConfig+0x43e>
 800632c:	a201      	add	r2, pc, #4	; (adr r2, 8006334 <UART_SetConfig+0x3f4>)
 800632e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006332:	bf00      	nop
 8006334:	08006359 	.word	0x08006359
 8006338:	08006361 	.word	0x08006361
 800633c:	08006369 	.word	0x08006369
 8006340:	0800637f 	.word	0x0800637f
 8006344:	0800636f 	.word	0x0800636f
 8006348:	0800637f 	.word	0x0800637f
 800634c:	0800637f 	.word	0x0800637f
 8006350:	0800637f 	.word	0x0800637f
 8006354:	08006377 	.word	0x08006377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006358:	f7fe fe16 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 800635c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800635e:	e014      	b.n	800638a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006360:	f7fe fe28 	bl	8004fb4 <HAL_RCC_GetPCLK2Freq>
 8006364:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006366:	e010      	b.n	800638a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006368:	4b5a      	ldr	r3, [pc, #360]	; (80064d4 <UART_SetConfig+0x594>)
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800636c:	e00d      	b.n	800638a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800636e:	f7fe fd9d 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 8006372:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006374:	e009      	b.n	800638a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800637a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800637c:	e005      	b.n	800638a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8089 	beq.w	80064a4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	4a4e      	ldr	r2, [pc, #312]	; (80064d0 <UART_SetConfig+0x590>)
 8006398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800639c:	461a      	mov	r2, r3
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80063a4:	005a      	lsls	r2, r3, #1
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	441a      	add	r2, r3
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	2b0f      	cmp	r3, #15
 80063bc:	d916      	bls.n	80063ec <UART_SetConfig+0x4ac>
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c4:	d212      	bcs.n	80063ec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f023 030f 	bic.w	r3, r3, #15
 80063ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	b29a      	uxth	r2, r3
 80063dc:	8bfb      	ldrh	r3, [r7, #30]
 80063de:	4313      	orrs	r3, r2
 80063e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	8bfa      	ldrh	r2, [r7, #30]
 80063e8:	60da      	str	r2, [r3, #12]
 80063ea:	e05b      	b.n	80064a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063f2:	e057      	b.n	80064a4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d828      	bhi.n	800644e <UART_SetConfig+0x50e>
 80063fc:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <UART_SetConfig+0x4c4>)
 80063fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006402:	bf00      	nop
 8006404:	08006429 	.word	0x08006429
 8006408:	08006431 	.word	0x08006431
 800640c:	08006439 	.word	0x08006439
 8006410:	0800644f 	.word	0x0800644f
 8006414:	0800643f 	.word	0x0800643f
 8006418:	0800644f 	.word	0x0800644f
 800641c:	0800644f 	.word	0x0800644f
 8006420:	0800644f 	.word	0x0800644f
 8006424:	08006447 	.word	0x08006447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006428:	f7fe fdae 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 800642c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800642e:	e014      	b.n	800645a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006430:	f7fe fdc0 	bl	8004fb4 <HAL_RCC_GetPCLK2Freq>
 8006434:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006436:	e010      	b.n	800645a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006438:	4b26      	ldr	r3, [pc, #152]	; (80064d4 <UART_SetConfig+0x594>)
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800643c:	e00d      	b.n	800645a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800643e:	f7fe fd35 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 8006442:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006444:	e009      	b.n	800645a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800644c:	e005      	b.n	800645a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006458:	bf00      	nop
    }

    if (pclk != 0U)
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	2b00      	cmp	r3, #0
 800645e:	d021      	beq.n	80064a4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	4a1a      	ldr	r2, [pc, #104]	; (80064d0 <UART_SetConfig+0x590>)
 8006466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800646a:	461a      	mov	r2, r3
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	441a      	add	r2, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006482:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	2b0f      	cmp	r3, #15
 8006488:	d909      	bls.n	800649e <UART_SetConfig+0x55e>
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006490:	d205      	bcs.n	800649e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	b29a      	uxth	r2, r3
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60da      	str	r2, [r3, #12]
 800649c:	e002      	b.n	80064a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2200      	movs	r2, #0
 80064b8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2200      	movs	r2, #0
 80064be:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80064c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3730      	adds	r7, #48	; 0x30
 80064c8:	46bd      	mov	sp, r7
 80064ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ce:	bf00      	nop
 80064d0:	0800b6a0 	.word	0x0800b6a0
 80064d4:	00f42400 	.word	0x00f42400

080064d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d01a      	beq.n	80065ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d6:	d10a      	bne.n	80065ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	605a      	str	r2, [r3, #4]
  }
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af02      	add	r7, sp, #8
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800662c:	f7fb fc22 	bl	8001e74 <HAL_GetTick>
 8006630:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b08      	cmp	r3, #8
 800663e:	d10e      	bne.n	800665e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f82f 	bl	80066b2 <UART_WaitOnFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e025      	b.n	80066aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b04      	cmp	r3, #4
 800666a:	d10e      	bne.n	800668a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800666c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f819 	bl	80066b2 <UART_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e00f      	b.n	80066aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b09c      	sub	sp, #112	; 0x70
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	603b      	str	r3, [r7, #0]
 80066be:	4613      	mov	r3, r2
 80066c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c2:	e0a9      	b.n	8006818 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ca:	f000 80a5 	beq.w	8006818 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ce:	f7fb fbd1 	bl	8001e74 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066da:	429a      	cmp	r2, r3
 80066dc:	d302      	bcc.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80066de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d140      	bne.n	8006766 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066f8:	667b      	str	r3, [r7, #100]	; 0x64
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006704:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006708:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e6      	bne.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3308      	adds	r3, #8
 800671c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	663b      	str	r3, [r7, #96]	; 0x60
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3308      	adds	r3, #8
 8006734:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006736:	64ba      	str	r2, [r7, #72]	; 0x48
 8006738:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800673c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e5      	bne.n	8006716 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e069      	b.n	800683a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d051      	beq.n	8006818 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800677e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006782:	d149      	bne.n	8006818 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800678c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ac:	637b      	str	r3, [r7, #52]	; 0x34
 80067ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067b4:	e841 2300 	strex	r3, r2, [r1]
 80067b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e6      	bne.n	800678e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3308      	adds	r3, #8
 80067c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	e853 3f00 	ldrex	r3, [r3]
 80067ce:	613b      	str	r3, [r7, #16]
   return(result);
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f023 0301 	bic.w	r3, r3, #1
 80067d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3308      	adds	r3, #8
 80067de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067e0:	623a      	str	r2, [r7, #32]
 80067e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	69f9      	ldr	r1, [r7, #28]
 80067e6:	6a3a      	ldr	r2, [r7, #32]
 80067e8:	e841 2300 	strex	r3, r2, [r1]
 80067ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e5      	bne.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2220      	movs	r2, #32
 8006808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e010      	b.n	800683a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69da      	ldr	r2, [r3, #28]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4013      	ands	r3, r2
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	429a      	cmp	r2, r3
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	429a      	cmp	r2, r3
 8006834:	f43f af46 	beq.w	80066c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3770      	adds	r7, #112	; 0x70
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006844:	b480      	push	{r7}
 8006846:	b0a3      	sub	sp, #140	; 0x8c
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	4613      	mov	r3, r2
 8006850:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	88fa      	ldrh	r2, [r7, #6]
 800685c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	88fa      	ldrh	r2, [r7, #6]
 8006864:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006876:	d10e      	bne.n	8006896 <UART_Start_Receive_IT+0x52>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d105      	bne.n	800688c <UART_Start_Receive_IT+0x48>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006886:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800688a:	e02d      	b.n	80068e8 <UART_Start_Receive_IT+0xa4>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	22ff      	movs	r2, #255	; 0xff
 8006890:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006894:	e028      	b.n	80068e8 <UART_Start_Receive_IT+0xa4>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10d      	bne.n	80068ba <UART_Start_Receive_IT+0x76>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <UART_Start_Receive_IT+0x6c>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	22ff      	movs	r2, #255	; 0xff
 80068aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068ae:	e01b      	b.n	80068e8 <UART_Start_Receive_IT+0xa4>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	227f      	movs	r2, #127	; 0x7f
 80068b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068b8:	e016      	b.n	80068e8 <UART_Start_Receive_IT+0xa4>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068c2:	d10d      	bne.n	80068e0 <UART_Start_Receive_IT+0x9c>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d104      	bne.n	80068d6 <UART_Start_Receive_IT+0x92>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	227f      	movs	r2, #127	; 0x7f
 80068d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068d4:	e008      	b.n	80068e8 <UART_Start_Receive_IT+0xa4>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	223f      	movs	r2, #63	; 0x3f
 80068da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068de:	e003      	b.n	80068e8 <UART_Start_Receive_IT+0xa4>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2222      	movs	r2, #34	; 0x22
 80068f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3308      	adds	r3, #8
 80068fe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006902:	e853 3f00 	ldrex	r3, [r3]
 8006906:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800690a:	f043 0301 	orr.w	r3, r3, #1
 800690e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3308      	adds	r3, #8
 8006918:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800691c:	673a      	str	r2, [r7, #112]	; 0x70
 800691e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006922:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800692a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e3      	bne.n	80068f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006938:	d153      	bne.n	80069e2 <UART_Start_Receive_IT+0x19e>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006940:	88fa      	ldrh	r2, [r7, #6]
 8006942:	429a      	cmp	r2, r3
 8006944:	d34d      	bcc.n	80069e2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800694e:	d107      	bne.n	8006960 <UART_Start_Receive_IT+0x11c>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d103      	bne.n	8006960 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4a4b      	ldr	r2, [pc, #300]	; (8006a88 <UART_Start_Receive_IT+0x244>)
 800695c:	671a      	str	r2, [r3, #112]	; 0x70
 800695e:	e002      	b.n	8006966 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a4a      	ldr	r2, [pc, #296]	; (8006a8c <UART_Start_Receive_IT+0x248>)
 8006964:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01a      	beq.n	80069ac <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800698a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800699a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800699e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e4      	bne.n	8006976 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3308      	adds	r3, #8
 80069b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3308      	adds	r3, #8
 80069ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80069cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80069ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e5      	bne.n	80069ac <UART_Start_Receive_IT+0x168>
 80069e0:	e04a      	b.n	8006a78 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ea:	d107      	bne.n	80069fc <UART_Start_Receive_IT+0x1b8>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d103      	bne.n	80069fc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4a26      	ldr	r2, [pc, #152]	; (8006a90 <UART_Start_Receive_IT+0x24c>)
 80069f8:	671a      	str	r2, [r3, #112]	; 0x70
 80069fa:	e002      	b.n	8006a02 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a25      	ldr	r2, [pc, #148]	; (8006a94 <UART_Start_Receive_IT+0x250>)
 8006a00:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d019      	beq.n	8006a46 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006a26:	677b      	str	r3, [r7, #116]	; 0x74
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
 8006a32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e6      	bne.n	8006a12 <UART_Start_Receive_IT+0x1ce>
 8006a44:	e018      	b.n	8006a78 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	613b      	str	r3, [r7, #16]
   return(result);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f043 0320 	orr.w	r3, r3, #32
 8006a5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	461a      	mov	r2, r3
 8006a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a64:	623b      	str	r3, [r7, #32]
 8006a66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	69f9      	ldr	r1, [r7, #28]
 8006a6a:	6a3a      	ldr	r2, [r7, #32]
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e6      	bne.n	8006a46 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	378c      	adds	r7, #140	; 0x8c
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	080071a1 	.word	0x080071a1
 8006a8c:	08006ea9 	.word	0x08006ea9
 8006a90:	08006d47 	.word	0x08006d47
 8006a94:	08006be7 	.word	0x08006be7

08006a98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b095      	sub	sp, #84	; 0x54
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006abe:	643b      	str	r3, [r7, #64]	; 0x40
 8006ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e6      	bne.n	8006aa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ae8:	f023 0301 	bic.w	r3, r3, #1
 8006aec:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3308      	adds	r3, #8
 8006af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e3      	bne.n	8006ad2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d118      	bne.n	8006b44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f023 0310 	bic.w	r3, r3, #16
 8006b26:	647b      	str	r3, [r7, #68]	; 0x44
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6979      	ldr	r1, [r7, #20]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e6      	bne.n	8006b12 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006b58:	bf00      	nop
 8006b5a:	3754      	adds	r7, #84	; 0x54
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f003 f900 	bl	8009d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b88:	bf00      	nop
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bac:	61fb      	str	r3, [r7, #28]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	61bb      	str	r3, [r7, #24]
 8006bb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	6979      	ldr	r1, [r7, #20]
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e6      	bne.n	8006b98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff f99b 	bl	8005f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bde:	bf00      	nop
 8006be0:	3720      	adds	r7, #32
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b096      	sub	sp, #88	; 0x58
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006bf4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfe:	2b22      	cmp	r3, #34	; 0x22
 8006c00:	f040 8095 	bne.w	8006d2e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c0e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006c12:	b2d9      	uxtb	r1, r3
 8006c14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1e:	400a      	ands	r2, r1
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d178      	bne.n	8006d3e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c60:	653b      	str	r3, [r7, #80]	; 0x50
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e6      	bne.n	8006c4c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e5      	bne.n	8006c7e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d12e      	bne.n	8006d26 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	e853 3f00 	ldrex	r3, [r3]
 8006cda:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0310 	bic.w	r3, r3, #16
 8006ce2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cec:	61fb      	str	r3, [r7, #28]
 8006cee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	69b9      	ldr	r1, [r7, #24]
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e6      	bne.n	8006cce <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	f003 0310 	and.w	r3, r3, #16
 8006d0a:	2b10      	cmp	r3, #16
 8006d0c:	d103      	bne.n	8006d16 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2210      	movs	r2, #16
 8006d14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff f902 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d24:	e00b      	b.n	8006d3e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f003 f814 	bl	8009d54 <HAL_UART_RxCpltCallback>
}
 8006d2c:	e007      	b.n	8006d3e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	699a      	ldr	r2, [r3, #24]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0208 	orr.w	r2, r2, #8
 8006d3c:	619a      	str	r2, [r3, #24]
}
 8006d3e:	bf00      	nop
 8006d40:	3758      	adds	r7, #88	; 0x58
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b096      	sub	sp, #88	; 0x58
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5e:	2b22      	cmp	r3, #34	; 0x22
 8006d60:	f040 8095 	bne.w	8006e8e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d72:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d74:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006d78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d82:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d88:	1c9a      	adds	r2, r3, #2
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	3b01      	subs	r3, #1
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d178      	bne.n	8006e9e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dca:	643b      	str	r3, [r7, #64]	; 0x40
 8006dcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e6      	bne.n	8006dac <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3308      	adds	r3, #8
 8006de4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	f023 0301 	bic.w	r3, r3, #1
 8006df4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e5      	bne.n	8006dde <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d12e      	bne.n	8006e86 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f023 0310 	bic.w	r3, r3, #16
 8006e42:	647b      	str	r3, [r7, #68]	; 0x44
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6979      	ldr	r1, [r7, #20]
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e6      	bne.n	8006e2e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b10      	cmp	r3, #16
 8006e6c:	d103      	bne.n	8006e76 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2210      	movs	r2, #16
 8006e74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff f852 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e84:	e00b      	b.n	8006e9e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f002 ff64 	bl	8009d54 <HAL_UART_RxCpltCallback>
}
 8006e8c:	e007      	b.n	8006e9e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f042 0208 	orr.w	r2, r2, #8
 8006e9c:	619a      	str	r2, [r3, #24]
}
 8006e9e:	bf00      	nop
 8006ea0:	3758      	adds	r7, #88	; 0x58
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b0a6      	sub	sp, #152	; 0x98
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006eb6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ede:	2b22      	cmp	r3, #34	; 0x22
 8006ee0:	f040 814f 	bne.w	8007182 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006eea:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006eee:	e0f6      	b.n	80070de <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006efa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006efe:	b2d9      	uxtb	r1, r3
 8006f00:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0a:	400a      	ands	r2, r1
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f3a:	f003 0307 	and.w	r3, r3, #7
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d053      	beq.n	8006fea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d011      	beq.n	8006f72 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00b      	beq.n	8006f72 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f68:	f043 0201 	orr.w	r2, r3, #1
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d011      	beq.n	8006fa2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006f7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00b      	beq.n	8006fa2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f98:	f043 0204 	orr.w	r2, r3, #4
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006fa6:	f003 0304 	and.w	r3, r3, #4
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d011      	beq.n	8006fd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006fae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00b      	beq.n	8006fd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fc8:	f043 0202 	orr.w	r2, r3, #2
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d006      	beq.n	8006fea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f002 fed3 	bl	8009d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d173      	bne.n	80070de <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007006:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800700a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007018:	66bb      	str	r3, [r7, #104]	; 0x68
 800701a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800701e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007020:	e841 2300 	strex	r3, r2, [r1]
 8007024:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e4      	bne.n	8006ff6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3308      	adds	r3, #8
 8007032:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800703c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800703e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007042:	f023 0301 	bic.w	r3, r3, #1
 8007046:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3308      	adds	r3, #8
 800704e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007050:	657a      	str	r2, [r7, #84]	; 0x54
 8007052:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007056:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800705e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e3      	bne.n	800702c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007076:	2b01      	cmp	r3, #1
 8007078:	d12e      	bne.n	80070d8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	f023 0310 	bic.w	r3, r3, #16
 8007094:	67bb      	str	r3, [r7, #120]	; 0x78
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800709e:	643b      	str	r3, [r7, #64]	; 0x40
 80070a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e6      	bne.n	8007080 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b10      	cmp	r3, #16
 80070be:	d103      	bne.n	80070c8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2210      	movs	r2, #16
 80070c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7fe ff29 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
 80070d6:	e002      	b.n	80070de <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f002 fe3b 	bl	8009d54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d006      	beq.n	80070f4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80070e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f47f aefe 	bne.w	8006ef0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80070fe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007102:	2b00      	cmp	r3, #0
 8007104:	d045      	beq.n	8007192 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800710c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007110:	429a      	cmp	r2, r3
 8007112:	d23e      	bcs.n	8007192 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	61fb      	str	r3, [r7, #28]
   return(result);
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800712a:	673b      	str	r3, [r7, #112]	; 0x70
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3308      	adds	r3, #8
 8007132:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007134:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800713a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e5      	bne.n	8007114 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a14      	ldr	r2, [pc, #80]	; (800719c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800714c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	60bb      	str	r3, [r7, #8]
   return(result);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f043 0320 	orr.w	r3, r3, #32
 8007162:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716c:	61bb      	str	r3, [r7, #24]
 800716e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6979      	ldr	r1, [r7, #20]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	613b      	str	r3, [r7, #16]
   return(result);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e6      	bne.n	800714e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007180:	e007      	b.n	8007192 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	699a      	ldr	r2, [r3, #24]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0208 	orr.w	r2, r2, #8
 8007190:	619a      	str	r2, [r3, #24]
}
 8007192:	bf00      	nop
 8007194:	3798      	adds	r7, #152	; 0x98
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	08006be7 	.word	0x08006be7

080071a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b0a8      	sub	sp, #160	; 0xa0
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80071ae:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d6:	2b22      	cmp	r3, #34	; 0x22
 80071d8:	f040 8153 	bne.w	8007482 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071e2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071e6:	e0fa      	b.n	80073de <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80071fa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80071fe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007202:	4013      	ands	r3, r2
 8007204:	b29a      	uxth	r2, r3
 8007206:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800720a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007210:	1c9a      	adds	r2, r3, #2
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800721c:	b29b      	uxth	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	b29a      	uxth	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007232:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b00      	cmp	r3, #0
 800723c:	d053      	beq.n	80072e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800723e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d011      	beq.n	800726e <UART_RxISR_16BIT_FIFOEN+0xce>
 800724a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800724e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00b      	beq.n	800726e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2201      	movs	r2, #1
 800725c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007264:	f043 0201 	orr.w	r2, r3, #1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800726e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d011      	beq.n	800729e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800727a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00b      	beq.n	800729e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2202      	movs	r2, #2
 800728c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007294:	f043 0204 	orr.w	r2, r3, #4
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800729e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d011      	beq.n	80072ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80072aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00b      	beq.n	80072ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2204      	movs	r2, #4
 80072bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c4:	f043 0202 	orr.w	r2, r3, #2
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d006      	beq.n	80072e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f002 fd55 	bl	8009d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d175      	bne.n	80073de <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072fa:	e853 3f00 	ldrex	r3, [r3]
 80072fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007306:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007316:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007318:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800731a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800731c:	e841 2300 	strex	r3, r2, [r1]
 8007320:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1e4      	bne.n	80072f2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3308      	adds	r3, #8
 800732e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800733a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800733e:	f023 0301 	bic.w	r3, r3, #1
 8007342:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3308      	adds	r3, #8
 800734c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007350:	65ba      	str	r2, [r7, #88]	; 0x58
 8007352:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007356:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800735e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e1      	bne.n	8007328 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2220      	movs	r2, #32
 8007368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007376:	2b01      	cmp	r3, #1
 8007378:	d12e      	bne.n	80073d8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800738e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007390:	f023 0310 	bic.w	r3, r3, #16
 8007394:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800739e:	647b      	str	r3, [r7, #68]	; 0x44
 80073a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e6      	bne.n	8007380 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b10      	cmp	r3, #16
 80073be:	d103      	bne.n	80073c8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2210      	movs	r2, #16
 80073c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7fe fda9 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
 80073d6:	e002      	b.n	80073de <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f002 fcbb 	bl	8009d54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073de:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d006      	beq.n	80073f4 <UART_RxISR_16BIT_FIFOEN+0x254>
 80073e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f47f aefa 	bne.w	80071e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073fa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80073fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007402:	2b00      	cmp	r3, #0
 8007404:	d045      	beq.n	8007492 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800740c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007410:	429a      	cmp	r2, r3
 8007412:	d23e      	bcs.n	8007492 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3308      	adds	r3, #8
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	e853 3f00 	ldrex	r3, [r3]
 8007422:	623b      	str	r3, [r7, #32]
   return(result);
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800742a:	677b      	str	r3, [r7, #116]	; 0x74
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3308      	adds	r3, #8
 8007432:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007434:	633a      	str	r2, [r7, #48]	; 0x30
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800743a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800743c:	e841 2300 	strex	r3, r2, [r1]
 8007440:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e5      	bne.n	8007414 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a14      	ldr	r2, [pc, #80]	; (800749c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800744c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	60fb      	str	r3, [r7, #12]
   return(result);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f043 0320 	orr.w	r3, r3, #32
 8007462:	673b      	str	r3, [r7, #112]	; 0x70
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800746c:	61fb      	str	r3, [r7, #28]
 800746e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	69b9      	ldr	r1, [r7, #24]
 8007472:	69fa      	ldr	r2, [r7, #28]
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	617b      	str	r3, [r7, #20]
   return(result);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e6      	bne.n	800744e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007480:	e007      	b.n	8007492 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	699a      	ldr	r2, [r3, #24]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 0208 	orr.w	r2, r2, #8
 8007490:	619a      	str	r2, [r3, #24]
}
 8007492:	bf00      	nop
 8007494:	37a0      	adds	r7, #160	; 0xa0
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	08006d47 	.word	0x08006d47

080074a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_UARTEx_EnableFifoMode+0x16>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e02b      	b.n	800754a <HAL_UARTEx_EnableFifoMode+0x6e>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2224      	movs	r2, #36	; 0x24
 80074fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0201 	bic.w	r2, r2, #1
 8007518:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007520:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007528:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f8c2 	bl	80076bc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007552:	b480      	push	{r7}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_UARTEx_DisableFifoMode+0x16>
 8007564:	2302      	movs	r3, #2
 8007566:	e027      	b.n	80075b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2224      	movs	r2, #36	; 0x24
 8007574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 0201 	bic.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007596:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075d8:	2302      	movs	r3, #2
 80075da:	e02d      	b.n	8007638 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2224      	movs	r2, #36	; 0x24
 80075e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0201 	bic.w	r2, r2, #1
 8007602:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f84f 	bl	80076bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007650:	2b01      	cmp	r3, #1
 8007652:	d101      	bne.n	8007658 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007654:	2302      	movs	r3, #2
 8007656:	e02d      	b.n	80076b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2224      	movs	r2, #36	; 0x24
 8007664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0201 	bic.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f811 	bl	80076bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d108      	bne.n	80076de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076dc:	e031      	b.n	8007742 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076de:	2308      	movs	r3, #8
 80076e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076e2:	2308      	movs	r3, #8
 80076e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	0e5b      	lsrs	r3, r3, #25
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	0f5b      	lsrs	r3, r3, #29
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	7b3a      	ldrb	r2, [r7, #12]
 800770a:	4911      	ldr	r1, [pc, #68]	; (8007750 <UARTEx_SetNbDataToProcess+0x94>)
 800770c:	5c8a      	ldrb	r2, [r1, r2]
 800770e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007712:	7b3a      	ldrb	r2, [r7, #12]
 8007714:	490f      	ldr	r1, [pc, #60]	; (8007754 <UARTEx_SetNbDataToProcess+0x98>)
 8007716:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007718:	fb93 f3f2 	sdiv	r3, r3, r2
 800771c:	b29a      	uxth	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	7b7a      	ldrb	r2, [r7, #13]
 8007728:	4909      	ldr	r1, [pc, #36]	; (8007750 <UARTEx_SetNbDataToProcess+0x94>)
 800772a:	5c8a      	ldrb	r2, [r1, r2]
 800772c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007730:	7b7a      	ldrb	r2, [r7, #13]
 8007732:	4908      	ldr	r1, [pc, #32]	; (8007754 <UARTEx_SetNbDataToProcess+0x98>)
 8007734:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007736:	fb93 f3f2 	sdiv	r3, r3, r2
 800773a:	b29a      	uxth	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007742:	bf00      	nop
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	0800b6b8 	.word	0x0800b6b8
 8007754:	0800b6c0 	.word	0x0800b6c0

08007758 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007758:	b480      	push	{r7}
 800775a:	b08b      	sub	sp, #44	; 0x2c
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	fa93 f3a3 	rbit	r3, r3
 8007772:	613b      	str	r3, [r7, #16]
  return result;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800777e:	2320      	movs	r3, #32
 8007780:	e003      	b.n	800778a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	fab3 f383 	clz	r3, r3
 8007788:	b2db      	uxtb	r3, r3
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	2103      	movs	r1, #3
 800778e:	fa01 f303 	lsl.w	r3, r1, r3
 8007792:	43db      	mvns	r3, r3
 8007794:	401a      	ands	r2, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	fa93 f3a3 	rbit	r3, r3
 80077a0:	61fb      	str	r3, [r7, #28]
  return result;
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80077ac:	2320      	movs	r3, #32
 80077ae:	e003      	b.n	80077b8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	fab3 f383 	clz	r3, r3
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	fa01 f303 	lsl.w	r3, r1, r3
 80077c0:	431a      	orrs	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	601a      	str	r2, [r3, #0]
}
 80077c6:	bf00      	nop
 80077c8:	372c      	adds	r7, #44	; 0x2c
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b085      	sub	sp, #20
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	43db      	mvns	r3, r3
 80077e6:	401a      	ands	r2, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	fb01 f303 	mul.w	r3, r1, r3
 80077f0:	431a      	orrs	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	605a      	str	r2, [r3, #4]
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007802:	b480      	push	{r7}
 8007804:	b08b      	sub	sp, #44	; 0x2c
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	fa93 f3a3 	rbit	r3, r3
 800781c:	613b      	str	r3, [r7, #16]
  return result;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007828:	2320      	movs	r3, #32
 800782a:	e003      	b.n	8007834 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	fab3 f383 	clz	r3, r3
 8007832:	b2db      	uxtb	r3, r3
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	2103      	movs	r1, #3
 8007838:	fa01 f303 	lsl.w	r3, r1, r3
 800783c:	43db      	mvns	r3, r3
 800783e:	401a      	ands	r2, r3
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	fa93 f3a3 	rbit	r3, r3
 800784a:	61fb      	str	r3, [r7, #28]
  return result;
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007856:	2320      	movs	r3, #32
 8007858:	e003      	b.n	8007862 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	fab3 f383 	clz	r3, r3
 8007860:	b2db      	uxtb	r3, r3
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	6879      	ldr	r1, [r7, #4]
 8007866:	fa01 f303 	lsl.w	r3, r1, r3
 800786a:	431a      	orrs	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8007870:	bf00      	nop
 8007872:	372c      	adds	r7, #44	; 0x2c
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800787c:	b480      	push	{r7}
 800787e:	b08b      	sub	sp, #44	; 0x2c
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	fa93 f3a3 	rbit	r3, r3
 8007896:	613b      	str	r3, [r7, #16]
  return result;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80078a2:	2320      	movs	r3, #32
 80078a4:	e003      	b.n	80078ae <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	fab3 f383 	clz	r3, r3
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	2103      	movs	r1, #3
 80078b2:	fa01 f303 	lsl.w	r3, r1, r3
 80078b6:	43db      	mvns	r3, r3
 80078b8:	401a      	ands	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	fa93 f3a3 	rbit	r3, r3
 80078c4:	61fb      	str	r3, [r7, #28]
  return result;
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80078d0:	2320      	movs	r3, #32
 80078d2:	e003      	b.n	80078dc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	fab3 f383 	clz	r3, r3
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	fa01 f303 	lsl.w	r3, r1, r3
 80078e4:	431a      	orrs	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	60da      	str	r2, [r3, #12]
}
 80078ea:	bf00      	nop
 80078ec:	372c      	adds	r7, #44	; 0x2c
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b08b      	sub	sp, #44	; 0x2c
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6a1a      	ldr	r2, [r3, #32]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	fa93 f3a3 	rbit	r3, r3
 8007910:	613b      	str	r3, [r7, #16]
  return result;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800791c:	2320      	movs	r3, #32
 800791e:	e003      	b.n	8007928 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	fab3 f383 	clz	r3, r3
 8007926:	b2db      	uxtb	r3, r3
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	210f      	movs	r1, #15
 800792c:	fa01 f303 	lsl.w	r3, r1, r3
 8007930:	43db      	mvns	r3, r3
 8007932:	401a      	ands	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	fa93 f3a3 	rbit	r3, r3
 800793e:	61fb      	str	r3, [r7, #28]
  return result;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800794a:	2320      	movs	r3, #32
 800794c:	e003      	b.n	8007956 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	fab3 f383 	clz	r3, r3
 8007954:	b2db      	uxtb	r3, r3
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	6879      	ldr	r1, [r7, #4]
 800795a:	fa01 f303 	lsl.w	r3, r1, r3
 800795e:	431a      	orrs	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007964:	bf00      	nop
 8007966:	372c      	adds	r7, #44	; 0x2c
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007970:	b480      	push	{r7}
 8007972:	b08b      	sub	sp, #44	; 0x2c
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	0a1b      	lsrs	r3, r3, #8
 8007984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	fa93 f3a3 	rbit	r3, r3
 800798c:	613b      	str	r3, [r7, #16]
  return result;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007998:	2320      	movs	r3, #32
 800799a:	e003      	b.n	80079a4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	fab3 f383 	clz	r3, r3
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	210f      	movs	r1, #15
 80079a8:	fa01 f303 	lsl.w	r3, r1, r3
 80079ac:	43db      	mvns	r3, r3
 80079ae:	401a      	ands	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	fa93 f3a3 	rbit	r3, r3
 80079bc:	61fb      	str	r3, [r7, #28]
  return result;
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80079c8:	2320      	movs	r3, #32
 80079ca:	e003      	b.n	80079d4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	fab3 f383 	clz	r3, r3
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	fa01 f303 	lsl.w	r3, r1, r3
 80079dc:	431a      	orrs	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80079e2:	bf00      	nop
 80079e4:	372c      	adds	r7, #44	; 0x2c
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b088      	sub	sp, #32
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	fa93 f3a3 	rbit	r3, r3
 8007a04:	60fb      	str	r3, [r7, #12]
  return result;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <LL_GPIO_Init+0x26>
    return 32U;
 8007a10:	2320      	movs	r3, #32
 8007a12:	e003      	b.n	8007a1c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	fab3 f383 	clz	r3, r3
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007a1e:	e048      	b.n	8007ab2 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	2101      	movs	r1, #1
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d03a      	beq.n	8007aac <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d003      	beq.n	8007a46 <LL_GPIO_Init+0x58>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d10e      	bne.n	8007a64 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	69b9      	ldr	r1, [r7, #24]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7ff fed7 	bl	8007802 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	6819      	ldr	r1, [r3, #0]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff feb7 	bl	80077d2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	69b9      	ldr	r1, [r7, #24]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff ff05 	bl	800787c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d111      	bne.n	8007a9e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2bff      	cmp	r3, #255	; 0xff
 8007a7e:	d807      	bhi.n	8007a90 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	461a      	mov	r2, r3
 8007a86:	69b9      	ldr	r1, [r7, #24]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff ff34 	bl	80078f6 <LL_GPIO_SetAFPin_0_7>
 8007a8e:	e006      	b.n	8007a9e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	461a      	mov	r2, r3
 8007a96:	69b9      	ldr	r1, [r7, #24]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff ff69 	bl	8007970 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	69b9      	ldr	r1, [r7, #24]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff fe56 	bl	8007758 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1af      	bne.n	8007a20 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <LL_TIM_SetPrescaler>:
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <LL_TIM_SetAutoReload>:
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <LL_TIM_SetRepetitionCounter>:
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <LL_TIM_OC_SetCompareCH1>:
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <LL_TIM_OC_SetCompareCH2>:
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007b4a:	bf00      	nop
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <LL_TIM_OC_SetCompareCH3>:
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <LL_TIM_OC_SetCompareCH4>:
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <LL_TIM_OC_SetCompareCH5>:
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <LL_TIM_OC_SetCompareCH6>:
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b083      	sub	sp, #12
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	f043 0201 	orr.w	r2, r3, #1
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	615a      	str	r2, [r3, #20]
}
 8007bde:	bf00      	nop
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
	...

08007bec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a39      	ldr	r2, [pc, #228]	; (8007ce4 <LL_TIM_Init+0xf8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d00f      	beq.n	8007c24 <LL_TIM_Init+0x38>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c0a:	d00b      	beq.n	8007c24 <LL_TIM_Init+0x38>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a36      	ldr	r2, [pc, #216]	; (8007ce8 <LL_TIM_Init+0xfc>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d007      	beq.n	8007c24 <LL_TIM_Init+0x38>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a35      	ldr	r2, [pc, #212]	; (8007cec <LL_TIM_Init+0x100>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d003      	beq.n	8007c24 <LL_TIM_Init+0x38>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a34      	ldr	r2, [pc, #208]	; (8007cf0 <LL_TIM_Init+0x104>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d106      	bne.n	8007c32 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a2b      	ldr	r2, [pc, #172]	; (8007ce4 <LL_TIM_Init+0xf8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d01b      	beq.n	8007c72 <LL_TIM_Init+0x86>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c40:	d017      	beq.n	8007c72 <LL_TIM_Init+0x86>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a28      	ldr	r2, [pc, #160]	; (8007ce8 <LL_TIM_Init+0xfc>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d013      	beq.n	8007c72 <LL_TIM_Init+0x86>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a27      	ldr	r2, [pc, #156]	; (8007cec <LL_TIM_Init+0x100>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00f      	beq.n	8007c72 <LL_TIM_Init+0x86>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a26      	ldr	r2, [pc, #152]	; (8007cf0 <LL_TIM_Init+0x104>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00b      	beq.n	8007c72 <LL_TIM_Init+0x86>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a25      	ldr	r2, [pc, #148]	; (8007cf4 <LL_TIM_Init+0x108>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d007      	beq.n	8007c72 <LL_TIM_Init+0x86>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a24      	ldr	r2, [pc, #144]	; (8007cf8 <LL_TIM_Init+0x10c>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d003      	beq.n	8007c72 <LL_TIM_Init+0x86>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a23      	ldr	r2, [pc, #140]	; (8007cfc <LL_TIM_Init+0x110>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d106      	bne.n	8007c80 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7ff ff2a 	bl	8007ae6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff ff16 	bl	8007aca <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a10      	ldr	r2, [pc, #64]	; (8007ce4 <LL_TIM_Init+0xf8>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d00f      	beq.n	8007cc6 <LL_TIM_Init+0xda>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a11      	ldr	r2, [pc, #68]	; (8007cf0 <LL_TIM_Init+0x104>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00b      	beq.n	8007cc6 <LL_TIM_Init+0xda>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a10      	ldr	r2, [pc, #64]	; (8007cf4 <LL_TIM_Init+0x108>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d007      	beq.n	8007cc6 <LL_TIM_Init+0xda>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a0f      	ldr	r2, [pc, #60]	; (8007cf8 <LL_TIM_Init+0x10c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d003      	beq.n	8007cc6 <LL_TIM_Init+0xda>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a0e      	ldr	r2, [pc, #56]	; (8007cfc <LL_TIM_Init+0x110>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d105      	bne.n	8007cd2 <LL_TIM_Init+0xe6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff ff18 	bl	8007b02 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff ff79 	bl	8007bca <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40000400 	.word	0x40000400
 8007cec:	40000800 	.word	0x40000800
 8007cf0:	40013400 	.word	0x40013400
 8007cf4:	40014000 	.word	0x40014000
 8007cf8:	40014400 	.word	0x40014400
 8007cfc:	40014800 	.word	0x40014800

08007d00 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d16:	d045      	beq.n	8007da4 <LL_TIM_OC_Init+0xa4>
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d1e:	d848      	bhi.n	8007db2 <LL_TIM_OC_Init+0xb2>
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d26:	d036      	beq.n	8007d96 <LL_TIM_OC_Init+0x96>
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d2e:	d840      	bhi.n	8007db2 <LL_TIM_OC_Init+0xb2>
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d36:	d027      	beq.n	8007d88 <LL_TIM_OC_Init+0x88>
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3e:	d838      	bhi.n	8007db2 <LL_TIM_OC_Init+0xb2>
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d46:	d018      	beq.n	8007d7a <LL_TIM_OC_Init+0x7a>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d4e:	d830      	bhi.n	8007db2 <LL_TIM_OC_Init+0xb2>
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d003      	beq.n	8007d5e <LL_TIM_OC_Init+0x5e>
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b10      	cmp	r3, #16
 8007d5a:	d007      	beq.n	8007d6c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007d5c:	e029      	b.n	8007db2 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 f8b5 	bl	8007ed0 <OC1Config>
 8007d66:	4603      	mov	r3, r0
 8007d68:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6a:	e023      	b.n	8007db4 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007d6c:	6879      	ldr	r1, [r7, #4]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 f92e 	bl	8007fd0 <OC2Config>
 8007d74:	4603      	mov	r3, r0
 8007d76:	75fb      	strb	r3, [r7, #23]
      break;
 8007d78:	e01c      	b.n	8007db4 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8007d7a:	6879      	ldr	r1, [r7, #4]
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f9ab 	bl	80080d8 <OC3Config>
 8007d82:	4603      	mov	r3, r0
 8007d84:	75fb      	strb	r3, [r7, #23]
      break;
 8007d86:	e015      	b.n	8007db4 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 fa28 	bl	80081e0 <OC4Config>
 8007d90:	4603      	mov	r3, r0
 8007d92:	75fb      	strb	r3, [r7, #23]
      break;
 8007d94:	e00e      	b.n	8007db4 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 faa5 	bl	80082e8 <OC5Config>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75fb      	strb	r3, [r7, #23]
      break;
 8007da2:	e007      	b.n	8007db4 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 fb02 	bl	80083b0 <OC6Config>
 8007dac:	4603      	mov	r3, r0
 8007dae:	75fb      	strb	r3, [r7, #23]
      break;
 8007db0:	e000      	b.n	8007db4 <LL_TIM_OC_Init+0xb4>
      break;
 8007db2:	bf00      	nop
  }

  return result;
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3718      	adds	r7, #24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
	...

08007dc0 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	7b12      	ldrb	r2, [r2, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	89d2      	ldrh	r2, [r2, #14]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a21      	ldr	r2, [pc, #132]	; (8007ec8 <LL_TIM_BDTR_Init+0x108>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d003      	beq.n	8007e4e <LL_TIM_BDTR_Init+0x8e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a20      	ldr	r2, [pc, #128]	; (8007ecc <LL_TIM_BDTR_Init+0x10c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d10d      	bne.n	8007e6a <LL_TIM_BDTR_Init+0xaa>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a16      	ldr	r2, [pc, #88]	; (8007ec8 <LL_TIM_BDTR_Init+0x108>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d003      	beq.n	8007e7a <LL_TIM_BDTR_Init+0xba>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a15      	ldr	r2, [pc, #84]	; (8007ecc <LL_TIM_BDTR_Init+0x10c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d11b      	bne.n	8007eb2 <LL_TIM_BDTR_Init+0xf2>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	4313      	orrs	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40012c00 	.word	0x40012c00
 8007ecc:	40013400 	.word	0x40013400

08007ed0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	f023 0201 	bic.w	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0303 	bic.w	r3, r3, #3
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	6812      	ldr	r2, [r2, #0]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f023 0202 	bic.w	r2, r3, #2
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f023 0201 	bic.w	r2, r3, #1
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a22      	ldr	r2, [pc, #136]	; (8007fbc <OC1Config+0xec>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00f      	beq.n	8007f56 <OC1Config+0x86>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a21      	ldr	r2, [pc, #132]	; (8007fc0 <OC1Config+0xf0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00b      	beq.n	8007f56 <OC1Config+0x86>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a20      	ldr	r2, [pc, #128]	; (8007fc4 <OC1Config+0xf4>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d007      	beq.n	8007f56 <OC1Config+0x86>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a1f      	ldr	r2, [pc, #124]	; (8007fc8 <OC1Config+0xf8>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d003      	beq.n	8007f56 <OC1Config+0x86>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a1e      	ldr	r2, [pc, #120]	; (8007fcc <OC1Config+0xfc>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d11e      	bne.n	8007f94 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f023 0208 	bic.w	r2, r3, #8
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f023 0204 	bic.w	r2, r3, #4
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4313      	orrs	r3, r2
 8007f74:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	4313      	orrs	r3, r2
 8007f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7ff fdb9 	bl	8007b1e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	40012c00 	.word	0x40012c00
 8007fc0:	40013400 	.word	0x40013400
 8007fc4:	40014000 	.word	0x40014000
 8007fc8:	40014400 	.word	0x40014400
 8007fcc:	40014800 	.word	0x40014800

08007fd0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	f023 0210 	bic.w	r2, r3, #16
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	6812      	ldr	r2, [r2, #0]
 800800e:	0212      	lsls	r2, r2, #8
 8008010:	4313      	orrs	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f023 0220 	bic.w	r2, r3, #32
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	011b      	lsls	r3, r3, #4
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f023 0210 	bic.w	r2, r3, #16
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a23      	ldr	r2, [pc, #140]	; (80080c4 <OC2Config+0xf4>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00f      	beq.n	800805c <OC2Config+0x8c>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a22      	ldr	r2, [pc, #136]	; (80080c8 <OC2Config+0xf8>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d00b      	beq.n	800805c <OC2Config+0x8c>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a21      	ldr	r2, [pc, #132]	; (80080cc <OC2Config+0xfc>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d007      	beq.n	800805c <OC2Config+0x8c>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a20      	ldr	r2, [pc, #128]	; (80080d0 <OC2Config+0x100>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d003      	beq.n	800805c <OC2Config+0x8c>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a1f      	ldr	r2, [pc, #124]	; (80080d4 <OC2Config+0x104>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d11f      	bne.n	800809c <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	019b      	lsls	r3, r3, #6
 8008068:	4313      	orrs	r3, r2
 800806a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	019b      	lsls	r3, r3, #6
 8008078:	4313      	orrs	r3, r2
 800807a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4313      	orrs	r3, r2
 800808a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	4313      	orrs	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff fd43 	bl	8007b3a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	40012c00 	.word	0x40012c00
 80080c8:	40013400 	.word	0x40013400
 80080cc:	40014000 	.word	0x40014000
 80080d0:	40014400 	.word	0x40014400
 80080d4:	40014800 	.word	0x40014800

080080d8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 0303 	bic.w	r3, r3, #3
 8008106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800810e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	021b      	lsls	r3, r3, #8
 8008126:	4313      	orrs	r3, r2
 8008128:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	021b      	lsls	r3, r3, #8
 8008136:	4313      	orrs	r3, r2
 8008138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a23      	ldr	r2, [pc, #140]	; (80081cc <OC3Config+0xf4>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00f      	beq.n	8008162 <OC3Config+0x8a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a22      	ldr	r2, [pc, #136]	; (80081d0 <OC3Config+0xf8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d00b      	beq.n	8008162 <OC3Config+0x8a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a21      	ldr	r2, [pc, #132]	; (80081d4 <OC3Config+0xfc>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d007      	beq.n	8008162 <OC3Config+0x8a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a20      	ldr	r2, [pc, #128]	; (80081d8 <OC3Config+0x100>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d003      	beq.n	8008162 <OC3Config+0x8a>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a1f      	ldr	r2, [pc, #124]	; (80081dc <OC3Config+0x104>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d11f      	bne.n	80081a2 <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	029b      	lsls	r3, r3, #10
 800816e:	4313      	orrs	r3, r2
 8008170:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	029b      	lsls	r3, r3, #10
 800817e:	4313      	orrs	r3, r2
 8008180:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	011b      	lsls	r3, r3, #4
 800818e:	4313      	orrs	r3, r2
 8008190:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	015b      	lsls	r3, r3, #5
 800819e:	4313      	orrs	r3, r2
 80081a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff fcce 	bl	8007b56 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	40012c00 	.word	0x40012c00
 80081d0:	40013400 	.word	0x40013400
 80081d4:	40014000 	.word	0x40014000
 80081d8:	40014400 	.word	0x40014400
 80081dc:	40014800 	.word	0x40014800

080081e0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800820e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	6812      	ldr	r2, [r2, #0]
 800821e:	0212      	lsls	r2, r2, #8
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	031b      	lsls	r3, r3, #12
 8008230:	4313      	orrs	r3, r2
 8008232:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	031b      	lsls	r3, r3, #12
 8008240:	4313      	orrs	r3, r2
 8008242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a23      	ldr	r2, [pc, #140]	; (80082d4 <OC4Config+0xf4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d00f      	beq.n	800826c <OC4Config+0x8c>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a22      	ldr	r2, [pc, #136]	; (80082d8 <OC4Config+0xf8>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d00b      	beq.n	800826c <OC4Config+0x8c>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a21      	ldr	r2, [pc, #132]	; (80082dc <OC4Config+0xfc>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d007      	beq.n	800826c <OC4Config+0x8c>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a20      	ldr	r2, [pc, #128]	; (80082e0 <OC4Config+0x100>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d003      	beq.n	800826c <OC4Config+0x8c>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a1f      	ldr	r2, [pc, #124]	; (80082e4 <OC4Config+0x104>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d11f      	bne.n	80082ac <OC4Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	039b      	lsls	r3, r3, #14
 8008278:	4313      	orrs	r3, r2
 800827a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	039b      	lsls	r3, r3, #14
 8008288:	4313      	orrs	r3, r2
 800828a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	019b      	lsls	r3, r3, #6
 8008298:	4313      	orrs	r3, r2
 800829a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	01db      	lsls	r3, r3, #7
 80082a8:	4313      	orrs	r3, r2
 80082aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7ff fc57 	bl	8007b72 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	40012c00 	.word	0x40012c00
 80082d8:	40013400 	.word	0x40013400
 80082dc:	40014000 	.word	0x40014000
 80082e0:	40014400 	.word	0x40014400
 80082e4:	40014800 	.word	0x40014800

080082e8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008308:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	6812      	ldr	r2, [r2, #0]
 8008318:	4313      	orrs	r3, r2
 800831a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	041b      	lsls	r3, r3, #16
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	041b      	lsls	r3, r3, #16
 8008338:	4313      	orrs	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a17      	ldr	r2, [pc, #92]	; (800839c <OC5Config+0xb4>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00f      	beq.n	8008364 <OC5Config+0x7c>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a16      	ldr	r2, [pc, #88]	; (80083a0 <OC5Config+0xb8>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d00b      	beq.n	8008364 <OC5Config+0x7c>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a15      	ldr	r2, [pc, #84]	; (80083a4 <OC5Config+0xbc>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d007      	beq.n	8008364 <OC5Config+0x7c>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a14      	ldr	r2, [pc, #80]	; (80083a8 <OC5Config+0xc0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d003      	beq.n	8008364 <OC5Config+0x7c>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a13      	ldr	r2, [pc, #76]	; (80083ac <OC5Config+0xc4>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d109      	bne.n	8008378 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	431a      	orrs	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff fc02 	bl	8007b8e <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	40012c00 	.word	0x40012c00
 80083a0:	40013400 	.word	0x40013400
 80083a4:	40014000 	.word	0x40014000
 80083a8:	40014400 	.word	0x40014400
 80083ac:	40014800 	.word	0x40014800

080083b0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	6812      	ldr	r2, [r2, #0]
 80083e0:	0212      	lsls	r2, r2, #8
 80083e2:	4313      	orrs	r3, r2
 80083e4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	051b      	lsls	r3, r3, #20
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	051b      	lsls	r3, r3, #20
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a16      	ldr	r2, [pc, #88]	; (8008464 <OC6Config+0xb4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00f      	beq.n	800842e <OC6Config+0x7e>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a15      	ldr	r2, [pc, #84]	; (8008468 <OC6Config+0xb8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00b      	beq.n	800842e <OC6Config+0x7e>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a14      	ldr	r2, [pc, #80]	; (800846c <OC6Config+0xbc>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d007      	beq.n	800842e <OC6Config+0x7e>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a13      	ldr	r2, [pc, #76]	; (8008470 <OC6Config+0xc0>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d003      	beq.n	800842e <OC6Config+0x7e>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a12      	ldr	r2, [pc, #72]	; (8008474 <OC6Config+0xc4>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d109      	bne.n	8008442 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	029b      	lsls	r3, r3, #10
 800843c:	431a      	orrs	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7ff fbad 	bl	8007bae <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	40012c00 	.word	0x40012c00
 8008468:	40013400 	.word	0x40013400
 800846c:	40014000 	.word	0x40014000
 8008470:	40014400 	.word	0x40014400
 8008474:	40014800 	.word	0x40014800

08008478 <calcCRC>:
#include "common.h"
#include <stdio.h>
#include <stdint.h>

uint16_t calcCRC(uint8_t *buf, uint16_t len)
{
 8008478:	b480      	push	{r7}
 800847a:	b089      	sub	sp, #36	; 0x24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	807b      	strh	r3, [r7, #2]
    int i, j;
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8008484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008488:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++)
 800848a:	2300      	movs	r3, #0
 800848c:	61fb      	str	r3, [r7, #28]
 800848e:	e023      	b.n	80084d8 <calcCRC+0x60>
    {
        temp = temp ^ buf[i];
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	4413      	add	r3, r2
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	4053      	eors	r3, r2
 800849e:	617b      	str	r3, [r7, #20]
        for (j = 1; j <= 8; j++)
 80084a0:	2301      	movs	r3, #1
 80084a2:	61bb      	str	r3, [r7, #24]
 80084a4:	e012      	b.n	80084cc <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	60fb      	str	r3, [r7, #12]
            temp >>=1;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	085b      	lsrs	r3, r3, #1
 80084b2:	617b      	str	r3, [r7, #20]
            if (flag)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d005      	beq.n	80084c6 <calcCRC+0x4e>
                temp ^= 0xA001;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 80084c0:	f083 0301 	eor.w	r3, r3, #1
 80084c4:	617b      	str	r3, [r7, #20]
        for (j = 1; j <= 8; j++)
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	3301      	adds	r3, #1
 80084ca:	61bb      	str	r3, [r7, #24]
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2b08      	cmp	r3, #8
 80084d0:	dde9      	ble.n	80084a6 <calcCRC+0x2e>
    for (i = 0; i < len; i++)
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	3301      	adds	r3, #1
 80084d6:	61fb      	str	r3, [r7, #28]
 80084d8:	887b      	ldrh	r3, [r7, #2]
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	429a      	cmp	r2, r3
 80084de:	dbd7      	blt.n	8008490 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	0a1b      	lsrs	r3, r3, #8
 80084e4:	613b      	str	r3, [r7, #16]
    temp = (temp << 8) | temp2;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	b29b      	uxth	r3, r3
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3724      	adds	r7, #36	; 0x24
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
	...

08008508 <create_fifo>:
static uint16_t FIFO_Get(fifo* fifo, void* byte);
static bool FIFO_Gets(fifo* fifo, void* buffer, uint16_t length);
static bool FIFO_Clear(fifo* fifo);

fifo* create_fifo(uint16_t size, uint16_t element_size)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	460a      	mov	r2, r1
 8008512:	80fb      	strh	r3, [r7, #6]
 8008514:	4613      	mov	r3, r2
 8008516:	80bb      	strh	r3, [r7, #4]
	fifo* ff;
	ff = (fifo*)malloc(sizeof(fifo));
 8008518:	2030      	movs	r0, #48	; 0x30
 800851a:	f002 ff19 	bl	800b350 <malloc>
 800851e:	4603      	mov	r3, r0
 8008520:	60fb      	str	r3, [r7, #12]
	if(ff != NULL)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d036      	beq.n	8008596 <create_fifo+0x8e>
	{
		memset(ff, 0, sizeof(fifo));
 8008528:	2230      	movs	r2, #48	; 0x30
 800852a:	2100      	movs	r1, #0
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f002 ffcb 	bl	800b4c8 <memset>
		ff->size = size;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	88fa      	ldrh	r2, [r7, #6]
 8008536:	815a      	strh	r2, [r3, #10]
		ff->size_element = element_size;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	88ba      	ldrh	r2, [r7, #4]
 800853c:	819a      	strh	r2, [r3, #12]
		ff->Put = FIFO_Put;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4a17      	ldr	r2, [pc, #92]	; (80085a0 <create_fifo+0x98>)
 8008542:	611a      	str	r2, [r3, #16]
		ff->Puts = FIFO_Puts;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4a17      	ldr	r2, [pc, #92]	; (80085a4 <create_fifo+0x9c>)
 8008548:	615a      	str	r2, [r3, #20]
		ff->Peak = FIFO_Peak;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	4a16      	ldr	r2, [pc, #88]	; (80085a8 <create_fifo+0xa0>)
 800854e:	619a      	str	r2, [r3, #24]
		ff->Peaks = FIFO_Peaks;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4a16      	ldr	r2, [pc, #88]	; (80085ac <create_fifo+0xa4>)
 8008554:	61da      	str	r2, [r3, #28]
		ff->Get = FIFO_Get;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	4a15      	ldr	r2, [pc, #84]	; (80085b0 <create_fifo+0xa8>)
 800855a:	621a      	str	r2, [r3, #32]
		ff->Gets = FIFO_Gets;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4a15      	ldr	r2, [pc, #84]	; (80085b4 <create_fifo+0xac>)
 8008560:	625a      	str	r2, [r3, #36]	; 0x24
		ff->Clear = FIFO_Clear;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	4a14      	ldr	r2, [pc, #80]	; (80085b8 <create_fifo+0xb0>)
 8008566:	629a      	str	r2, [r3, #40]	; 0x28
		ff->GetAvaiableSpace = FIFO_GetAvaiableSpace;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4a14      	ldr	r2, [pc, #80]	; (80085bc <create_fifo+0xb4>)
 800856c:	62da      	str	r2, [r3, #44]	; 0x2c
		ff->buffer = malloc(size * element_size);
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	88ba      	ldrh	r2, [r7, #4]
 8008572:	fb02 f303 	mul.w	r3, r2, r3
 8008576:	4618      	mov	r0, r3
 8008578:	f002 feea 	bl	800b350 <malloc>
 800857c:	4603      	mov	r3, r0
 800857e:	461a      	mov	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	605a      	str	r2, [r3, #4]
		if(ff->buffer != NULL) return ff;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <create_fifo+0x88>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	e003      	b.n	8008598 <create_fifo+0x90>
		else
			free(ff);
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f002 fee5 	bl	800b360 <free>
	}
	return NULL;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	080085eb 	.word	0x080085eb
 80085a4:	08008663 	.word	0x08008663
 80085a8:	080086db 	.word	0x080086db
 80085ac:	08008725 	.word	0x08008725
 80085b0:	0800879f 	.word	0x0800879f
 80085b4:	08008823 	.word	0x08008823
 80085b8:	0800887f 	.word	0x0800887f
 80085bc:	080085c1 	.word	0x080085c1

080085c0 <FIFO_GetAvaiableSpace>:

uint16_t FIFO_GetAvaiableSpace(fifo* fifo)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
	if(fifo == NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <FIFO_GetAvaiableSpace+0x12>
		return 0;
 80085ce:	2300      	movs	r3, #0
 80085d0:	e005      	b.n	80085de <FIFO_GetAvaiableSpace+0x1e>
    return (fifo->size - fifo->data_len);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	895a      	ldrh	r2, [r3, #10]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	891b      	ldrh	r3, [r3, #8]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	b29b      	uxth	r3, r3
}
 80085de:	4618      	mov	r0, r3
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <FIFO_Put>:

static bool FIFO_Put(fifo* fifo, void* byte)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
	if(fifo == NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <FIFO_Put+0x14>
		return false;
 80085fa:	2300      	movs	r3, #0
 80085fc:	e02d      	b.n	800865a <FIFO_Put+0x70>
    if(fifo->data_len < fifo->size)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	891a      	ldrh	r2, [r3, #8]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	895b      	ldrh	r3, [r3, #10]
 8008606:	429a      	cmp	r2, r3
 8008608:	d226      	bcs.n	8008658 <FIFO_Put+0x6e>
    {
      memcpy(&(fifo->buffer[fifo->write_idx*fifo->size_element]), byte, fifo->size_element);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	8852      	ldrh	r2, [r2, #2]
 8008612:	4611      	mov	r1, r2
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	8992      	ldrh	r2, [r2, #12]
 8008618:	fb01 f202 	mul.w	r2, r1, r2
 800861c:	1898      	adds	r0, r3, r2
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	899b      	ldrh	r3, [r3, #12]
 8008622:	461a      	mov	r2, r3
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	f002 ffa9 	bl	800b57c <memcpy>
      fifo->write_idx++;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	885b      	ldrh	r3, [r3, #2]
 800862e:	3301      	adds	r3, #1
 8008630:	b29a      	uxth	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	805a      	strh	r2, [r3, #2]
      fifo->data_len++;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	891b      	ldrh	r3, [r3, #8]
 800863a:	3301      	adds	r3, #1
 800863c:	b29a      	uxth	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	811a      	strh	r2, [r3, #8]
      if(fifo->write_idx == fifo->size)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	885a      	ldrh	r2, [r3, #2]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	895b      	ldrh	r3, [r3, #10]
 800864a:	429a      	cmp	r2, r3
 800864c:	d102      	bne.n	8008654 <FIFO_Put+0x6a>
        fifo->write_idx = 0;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	805a      	strh	r2, [r3, #2]
      return true;
 8008654:	2301      	movs	r3, #1
 8008656:	e000      	b.n	800865a <FIFO_Put+0x70>
    }
    return false;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <FIFO_Puts>:

bool FIFO_Puts(fifo* fifo, void* buffer, uint16_t length   )
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b086      	sub	sp, #24
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	4613      	mov	r3, r2
 800866e:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint8_t* ptr = (uint8_t*)buffer;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	613b      	str	r3, [r7, #16]
	if(fifo == NULL)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <FIFO_Puts+0x1c>
		return false;
 800867a:	2300      	movs	r3, #0
 800867c:	e029      	b.n	80086d2 <FIFO_Puts+0x70>
    if( length <= FIFO_GetAvaiableSpace(fifo))
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f7ff ff9e 	bl	80085c0 <FIFO_GetAvaiableSpace>
 8008684:	4603      	mov	r3, r0
 8008686:	461a      	mov	r2, r3
 8008688:	88fb      	ldrh	r3, [r7, #6]
 800868a:	4293      	cmp	r3, r2
 800868c:	d81e      	bhi.n	80086cc <FIFO_Puts+0x6a>
    {
        for(i = 0; i < length; i++)
 800868e:	2300      	movs	r3, #0
 8008690:	82fb      	strh	r3, [r7, #22]
 8008692:	e016      	b.n	80086c2 <FIFO_Puts+0x60>
        if(FIFO_Put(fifo, ptr + i*fifo->size_element) == 0)
 8008694:	8afb      	ldrh	r3, [r7, #22]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	8992      	ldrh	r2, [r2, #12]
 800869a:	fb02 f303 	mul.w	r3, r2, r3
 800869e:	461a      	mov	r2, r3
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	4413      	add	r3, r2
 80086a4:	4619      	mov	r1, r3
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7ff ff9f 	bl	80085ea <FIFO_Put>
 80086ac:	4603      	mov	r3, r0
 80086ae:	f083 0301 	eor.w	r3, r3, #1
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <FIFO_Puts+0x5a>
            return false;
 80086b8:	2300      	movs	r3, #0
 80086ba:	e00a      	b.n	80086d2 <FIFO_Puts+0x70>
        for(i = 0; i < length; i++)
 80086bc:	8afb      	ldrh	r3, [r7, #22]
 80086be:	3301      	adds	r3, #1
 80086c0:	82fb      	strh	r3, [r7, #22]
 80086c2:	8afa      	ldrh	r2, [r7, #22]
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d3e4      	bcc.n	8008694 <FIFO_Puts+0x32>
 80086ca:	e001      	b.n	80086d0 <FIFO_Puts+0x6e>
    }
    else
        return false;
 80086cc:	2300      	movs	r3, #0
 80086ce:	e000      	b.n	80086d2 <FIFO_Puts+0x70>
    return true;
 80086d0:	2301      	movs	r3, #1
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <FIFO_Peak>:

bool FIFO_Peak(fifo* fifo, void* data)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	6039      	str	r1, [r7, #0]
	if(fifo == NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <FIFO_Peak+0x14>
		return false;
 80086ea:	2300      	movs	r3, #0
 80086ec:	e016      	b.n	800871c <FIFO_Peak+0x42>
    if(fifo->data_len > 0)       // it empty
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	891b      	ldrh	r3, [r3, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d011      	beq.n	800871a <FIFO_Peak+0x40>
    {
    	memcpy(data, &(fifo->buffer[fifo->read_idx*fifo->size_element]), fifo->size_element);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	8812      	ldrh	r2, [r2, #0]
 80086fe:	4611      	mov	r1, r2
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	8992      	ldrh	r2, [r2, #12]
 8008704:	fb01 f202 	mul.w	r2, r1, r2
 8008708:	1899      	adds	r1, r3, r2
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	899b      	ldrh	r3, [r3, #12]
 800870e:	461a      	mov	r2, r3
 8008710:	6838      	ldr	r0, [r7, #0]
 8008712:	f002 ff33 	bl	800b57c <memcpy>
      return true;
 8008716:	2301      	movs	r3, #1
 8008718:	e000      	b.n	800871c <FIFO_Peak+0x42>
    }
    else
        return false;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <FIFO_Peaks>:

bool FIFO_Peaks(fifo* fifo, void* data, uint16_t len)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	80fb      	strh	r3, [r7, #6]
	uint16_t index;
	uint8_t* ptr_data = (uint8_t*)data;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	613b      	str	r3, [r7, #16]
	if(fifo == NULL)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d101      	bne.n	8008740 <FIFO_Peaks+0x1c>
		return false;
 800873c:	2300      	movs	r3, #0
 800873e:	e02a      	b.n	8008796 <FIFO_Peaks+0x72>
    if(fifo->data_len >= len)       // it empty
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	891b      	ldrh	r3, [r3, #8]
 8008744:	88fa      	ldrh	r2, [r7, #6]
 8008746:	429a      	cmp	r2, r3
 8008748:	d824      	bhi.n	8008794 <FIFO_Peaks+0x70>
    {
    	for(index = 0; index < len; index++)
 800874a:	2300      	movs	r3, #0
 800874c:	82fb      	strh	r3, [r7, #22]
 800874e:	e01b      	b.n	8008788 <FIFO_Peaks+0x64>
    		memcpy(ptr_data + index*fifo->size_element, &(fifo->buffer[(fifo->read_idx + index)*fifo->size_element]), fifo->size_element);
 8008750:	8afb      	ldrh	r3, [r7, #22]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	8992      	ldrh	r2, [r2, #12]
 8008756:	fb02 f303 	mul.w	r3, r2, r3
 800875a:	461a      	mov	r2, r3
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	1898      	adds	r0, r3, r2
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	8812      	ldrh	r2, [r2, #0]
 8008768:	4611      	mov	r1, r2
 800876a:	8afa      	ldrh	r2, [r7, #22]
 800876c:	440a      	add	r2, r1
 800876e:	68f9      	ldr	r1, [r7, #12]
 8008770:	8989      	ldrh	r1, [r1, #12]
 8008772:	fb01 f202 	mul.w	r2, r1, r2
 8008776:	1899      	adds	r1, r3, r2
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	899b      	ldrh	r3, [r3, #12]
 800877c:	461a      	mov	r2, r3
 800877e:	f002 fefd 	bl	800b57c <memcpy>
    	for(index = 0; index < len; index++)
 8008782:	8afb      	ldrh	r3, [r7, #22]
 8008784:	3301      	adds	r3, #1
 8008786:	82fb      	strh	r3, [r7, #22]
 8008788:	8afa      	ldrh	r2, [r7, #22]
 800878a:	88fb      	ldrh	r3, [r7, #6]
 800878c:	429a      	cmp	r2, r3
 800878e:	d3df      	bcc.n	8008750 <FIFO_Peaks+0x2c>
      return true;
 8008790:	2301      	movs	r3, #1
 8008792:	e000      	b.n	8008796 <FIFO_Peaks+0x72>
    }
    else
        return false;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <FIFO_Get>:

uint16_t FIFO_Get(fifo* fifo, void* byte)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	6039      	str	r1, [r7, #0]
	if(fifo == NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <FIFO_Get+0x14>
		return 0;
 80087ae:	2300      	movs	r3, #0
 80087b0:	e033      	b.n	800881a <FIFO_Get+0x7c>
    if(fifo->data_len > 0)       // it empty
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	891b      	ldrh	r3, [r3, #8]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d02e      	beq.n	8008818 <FIFO_Get+0x7a>
    {
    	memcpy(byte, &(fifo->buffer[fifo->read_idx*fifo->size_element]), fifo->size_element);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	8812      	ldrh	r2, [r2, #0]
 80087c2:	4611      	mov	r1, r2
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	8992      	ldrh	r2, [r2, #12]
 80087c8:	fb01 f202 	mul.w	r2, r1, r2
 80087cc:	1899      	adds	r1, r3, r2
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	899b      	ldrh	r3, [r3, #12]
 80087d2:	461a      	mov	r2, r3
 80087d4:	6838      	ldr	r0, [r7, #0]
 80087d6:	f002 fed1 	bl	800b57c <memcpy>
      fifo->read_idx++;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	3301      	adds	r3, #1
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	801a      	strh	r2, [r3, #0]
      fifo->data_len--;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	891b      	ldrh	r3, [r3, #8]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	811a      	strh	r2, [r3, #8]
      if(fifo->read_idx == fifo->size)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	881a      	ldrh	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	895b      	ldrh	r3, [r3, #10]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d102      	bne.n	8008804 <FIFO_Get+0x66>
        fifo->read_idx = 0;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	801a      	strh	r2, [r3, #0]
      if(fifo->data_len == 0) fifo->write_idx = fifo->read_idx;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	891b      	ldrh	r3, [r3, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d103      	bne.n	8008814 <FIFO_Get+0x76>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	881a      	ldrh	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	805a      	strh	r2, [r3, #2]
      return 1;
 8008814:	2301      	movs	r3, #1
 8008816:	e000      	b.n	800881a <FIFO_Get+0x7c>
    }
    return 0;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <FIFO_Gets>:

bool FIFO_Gets(fifo* fifo, void* buffer, uint16_t length)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b086      	sub	sp, #24
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	4613      	mov	r3, r2
 800882e:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	if(fifo == NULL)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <FIFO_Gets+0x18>
		return false;
 8008836:	2300      	movs	r3, #0
 8008838:	e01d      	b.n	8008876 <FIFO_Gets+0x54>
    if(length <= fifo->data_len)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	891b      	ldrh	r3, [r3, #8]
 800883e:	88fa      	ldrh	r2, [r7, #6]
 8008840:	429a      	cmp	r2, r3
 8008842:	d817      	bhi.n	8008874 <FIFO_Gets+0x52>
    {
        for(i = 0; i < length; i++)
 8008844:	2300      	movs	r3, #0
 8008846:	82fb      	strh	r3, [r7, #22]
 8008848:	e00e      	b.n	8008868 <FIFO_Gets+0x46>
          FIFO_Get(fifo, (buffer + i*fifo->size_element));
 800884a:	8afb      	ldrh	r3, [r7, #22]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	8992      	ldrh	r2, [r2, #12]
 8008850:	fb02 f303 	mul.w	r3, r2, r3
 8008854:	461a      	mov	r2, r3
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	4413      	add	r3, r2
 800885a:	4619      	mov	r1, r3
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f7ff ff9e 	bl	800879e <FIFO_Get>
        for(i = 0; i < length; i++)
 8008862:	8afb      	ldrh	r3, [r7, #22]
 8008864:	3301      	adds	r3, #1
 8008866:	82fb      	strh	r3, [r7, #22]
 8008868:	8afa      	ldrh	r2, [r7, #22]
 800886a:	88fb      	ldrh	r3, [r7, #6]
 800886c:	429a      	cmp	r2, r3
 800886e:	d3ec      	bcc.n	800884a <FIFO_Gets+0x28>
        return true;
 8008870:	2301      	movs	r3, #1
 8008872:	e000      	b.n	8008876 <FIFO_Gets+0x54>
    }
    return false;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <FIFO_Clear>:

bool FIFO_Clear(fifo* fifo)
{
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
	if(fifo == NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <FIFO_Clear+0x12>
		return false;
 800888c:	2300      	movs	r3, #0
 800888e:	e007      	b.n	80088a0 <FIFO_Clear+0x22>
	fifo->data_len = 0;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	811a      	strh	r2, [r3, #8]
	fifo->read_idx = fifo->write_idx;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	885a      	ldrh	r2, [r3, #2]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	801a      	strh	r2, [r3, #0]
	return true;
 800889e:	2301      	movs	r3, #1
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <ModbusResetValue>:
static void ModbusResetValue(volatile m_modbus_obj *mb_obj);
static void ModbusGetData(m_modbus_obj *mb_obj);


static void ModbusResetValue(volatile m_modbus_obj *mb_obj)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
    int i;
    for(i = 0; i < RXSIZE; i++)
 80088b4:	2300      	movs	r3, #0
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	e008      	b.n	80088cc <ModbusResetValue+0x20>
    {
        mb_obj->rdata[i] = 0;
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4413      	add	r3, r2
 80088c0:	330c      	adds	r3, #12
 80088c2:	2200      	movs	r2, #0
 80088c4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < RXSIZE; i++)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3301      	adds	r3, #1
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b63      	cmp	r3, #99	; 0x63
 80088d0:	ddf3      	ble.n	80088ba <ModbusResetValue+0xe>
    }

    for(i = 0; i < TXSIZE; i++)
 80088d2:	2300      	movs	r3, #0
 80088d4:	60fb      	str	r3, [r7, #12]
 80088d6:	e008      	b.n	80088ea <ModbusResetValue+0x3e>
    {
        mb_obj->sdata[i] = 0;
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4413      	add	r3, r2
 80088de:	3370      	adds	r3, #112	; 0x70
 80088e0:	2200      	movs	r2, #0
 80088e2:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < TXSIZE; i++)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3301      	adds	r3, #1
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2b63      	cmp	r3, #99	; 0x63
 80088ee:	ddf3      	ble.n	80088d8 <ModbusResetValue+0x2c>
    }

    mb_obj->rcount = 0;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    mb_obj->scount = 0;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    mb_obj->tick = 0;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
}
 8008908:	bf00      	nop
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <ModbusGetData>:

static void ModbusGetData(m_modbus_obj *mb_obj) // Get Function
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
    uint16_t crc;
    if(mb_obj->tick >= RXTIMEOUT)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008922:	2b09      	cmp	r3, #9
 8008924:	dd7e      	ble.n	8008a24 <ModbusGetData+0x110>
    {
        mb_obj->tick = 0;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        if(mb_obj->rcount >= 8)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008934:	2b07      	cmp	r3, #7
 8008936:	dd71      	ble.n	8008a1c <ModbusGetData+0x108>
        {
            if( mb_obj->rdata[0] == mb_obj->modbus.id)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	7b1b      	ldrb	r3, [r3, #12]
 800893c:	b29a      	uxth	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	429a      	cmp	r2, r3
 8008944:	d166      	bne.n	8008a14 <ModbusGetData+0x100>
            {
                switch(mb_obj->rdata[1])
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	7b5b      	ldrb	r3, [r3, #13]
 800894a:	2b03      	cmp	r3, #3
 800894c:	d002      	beq.n	8008954 <ModbusGetData+0x40>
 800894e:	2b10      	cmp	r3, #16
 8008950:	d026      	beq.n	80089a0 <ModbusGetData+0x8c>
 8008952:	e057      	b.n	8008a04 <ModbusGetData+0xf0>
                {
                case 0x03:
                    if(mb_obj->rcount >= 8)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800895a:	2b07      	cmp	r3, #7
 800895c:	dd57      	ble.n	8008a0e <ModbusGetData+0xfa>
                    {
                        crc = calcCRC(mb_obj->rdata, 6);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	330c      	adds	r3, #12
 8008962:	2106      	movs	r1, #6
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff fd87 	bl	8008478 <calcCRC>
 800896a:	4603      	mov	r3, r0
 800896c:	81fb      	strh	r3, [r7, #14]
                        if((mb_obj->rdata[6] == (crc >> 8 & 0xFF)) && (mb_obj->rdata[7] == (crc & 0xFF)))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	7c9b      	ldrb	r3, [r3, #18]
 8008972:	461a      	mov	r2, r3
 8008974:	89fb      	ldrh	r3, [r7, #14]
 8008976:	0a1b      	lsrs	r3, r3, #8
 8008978:	b29b      	uxth	r3, r3
 800897a:	b2db      	uxtb	r3, r3
 800897c:	429a      	cmp	r2, r3
 800897e:	d146      	bne.n	8008a0e <ModbusGetData+0xfa>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	7cdb      	ldrb	r3, [r3, #19]
 8008984:	461a      	mov	r2, r3
 8008986:	89fb      	ldrh	r3, [r7, #14]
 8008988:	b2db      	uxtb	r3, r3
 800898a:	429a      	cmp	r2, r3
 800898c:	d13f      	bne.n	8008a0e <ModbusGetData+0xfa>
                        {
                            mb_obj->RcvTask = &ModbusCreateData;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a26      	ldr	r2, [pc, #152]	; (8008a2c <ModbusGetData+0x118>)
 8008992:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                            mb_obj->tick = 0;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                        }
                    }
                    break;
 800899e:	e036      	b.n	8008a0e <ModbusGetData+0xfa>
                case 0x10:
                    crc = calcCRC(mb_obj->rdata, mb_obj->rcount - 2);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f103 020c 	add.w	r2, r3, #12
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	3b02      	subs	r3, #2
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	4619      	mov	r1, r3
 80089b4:	4610      	mov	r0, r2
 80089b6:	f7ff fd5f 	bl	8008478 <calcCRC>
 80089ba:	4603      	mov	r3, r0
 80089bc:	81fb      	strh	r3, [r7, #14]
                    if((mb_obj->rdata[mb_obj->rcount - 2] == (crc >> 8 & 0xFF)) && (mb_obj->rdata[mb_obj->rcount - 1] == (crc & 0xFF)))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80089c4:	3b02      	subs	r3, #2
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	4413      	add	r3, r2
 80089ca:	7b1b      	ldrb	r3, [r3, #12]
 80089cc:	461a      	mov	r2, r3
 80089ce:	89fb      	ldrh	r3, [r7, #14]
 80089d0:	0a1b      	lsrs	r3, r3, #8
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d11b      	bne.n	8008a12 <ModbusGetData+0xfe>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80089e0:	3b01      	subs	r3, #1
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	4413      	add	r3, r2
 80089e6:	7b1b      	ldrb	r3, [r3, #12]
 80089e8:	461a      	mov	r2, r3
 80089ea:	89fb      	ldrh	r3, [r7, #14]
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d10f      	bne.n	8008a12 <ModbusGetData+0xfe>
                    {
                        mb_obj->RcvTask = &ModbusSetData;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a0e      	ldr	r2, [pc, #56]	; (8008a30 <ModbusGetData+0x11c>)
 80089f6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                        mb_obj->tick = 0;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                    }
                    break;
 8008a02:	e006      	b.n	8008a12 <ModbusGetData+0xfe>
                default:
                    mb_obj->tick = 0;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8008a0c:	e002      	b.n	8008a14 <ModbusGetData+0x100>
                    break;
 8008a0e:	bf00      	nop
 8008a10:	e000      	b.n	8008a14 <ModbusGetData+0x100>
                    break;
 8008a12:	bf00      	nop
                }
            }
            mb_obj->rcount = 0;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        }
        mb_obj->rcount = 0;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }
}
 8008a24:	bf00      	nop
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	08008c1d 	.word	0x08008c1d
 8008a30:	08008a35 	.word	0x08008a35

08008a34 <ModbusSetData>:
static void ModbusSetData(m_modbus_obj *mb_obj)
{
 8008a34:	b590      	push	{r4, r7, lr}
 8008a36:	b089      	sub	sp, #36	; 0x24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
    int i, j, k;
    uint16_t crc;
    uint16_t addrData;
    uint16_t sizeData;
    uint16_t *ptr_data = NULL;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < 6; i++)
 8008a40:	2300      	movs	r3, #0
 8008a42:	61fb      	str	r3, [r7, #28]
 8008a44:	e00d      	b.n	8008a62 <ModbusSetData+0x2e>
    {
        mb_obj->sdata[i] = mb_obj->rdata[i];
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	330c      	adds	r3, #12
 8008a4e:	7819      	ldrb	r1, [r3, #0]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	4413      	add	r3, r2
 8008a56:	3370      	adds	r3, #112	; 0x70
 8008a58:	460a      	mov	r2, r1
 8008a5a:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < 6; i++)
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	61fb      	str	r3, [r7, #28]
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	2b05      	cmp	r3, #5
 8008a66:	ddee      	ble.n	8008a46 <ModbusSetData+0x12>
    }

    addrData = mb_obj->rdata[2] << 8 | mb_obj->rdata[3];
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	7b9b      	ldrb	r3, [r3, #14]
 8008a6c:	021b      	lsls	r3, r3, #8
 8008a6e:	b21a      	sxth	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	7bdb      	ldrb	r3, [r3, #15]
 8008a74:	b21b      	sxth	r3, r3
 8008a76:	4313      	orrs	r3, r2
 8008a78:	b21b      	sxth	r3, r3
 8008a7a:	827b      	strh	r3, [r7, #18]
    sizeData = mb_obj->rdata[4] << 8 | mb_obj->rdata[5];
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	7c1b      	ldrb	r3, [r3, #16]
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	b21a      	sxth	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	7c5b      	ldrb	r3, [r3, #17]
 8008a88:	b21b      	sxth	r3, r3
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	b21b      	sxth	r3, r3
 8008a8e:	817b      	strh	r3, [r7, #10]
    if(sizeData > (TXSIZE - 6))
 8008a90:	897b      	ldrh	r3, [r7, #10]
 8008a92:	2b5e      	cmp	r3, #94	; 0x5e
 8008a94:	d907      	bls.n	8008aa6 <ModbusSetData+0x72>
    {
        mb_obj->RcvTask = &ModbusGetData;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a5d      	ldr	r2, [pc, #372]	; (8008c10 <ModbusSetData+0x1dc>)
 8008a9a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        mb_obj->tick = 0;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    }
    for(j = 0; j < MAX_VAR_SHOW; j++)
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	61bb      	str	r3, [r7, #24]
 8008aaa:	e044      	b.n	8008b36 <ModbusSetData+0x102>
    {
        if(data_list[j].data != NULL)
 8008aac:	4959      	ldr	r1, [pc, #356]	; (8008c14 <ModbusSetData+0x1e0>)
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	005b      	lsls	r3, r3, #1
 8008ab4:	4413      	add	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	440b      	add	r3, r1
 8008aba:	3304      	adds	r3, #4
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d036      	beq.n	8008b30 <ModbusSetData+0xfc>
        {
            if(addrData >= data_list[j].start_addr && addrData <= data_list[j].start_addr + data_list[j].len)
 8008ac2:	4954      	ldr	r1, [pc, #336]	; (8008c14 <ModbusSetData+0x1e0>)
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	440b      	add	r3, r1
 8008ad0:	881b      	ldrh	r3, [r3, #0]
 8008ad2:	8a7a      	ldrh	r2, [r7, #18]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d32b      	bcc.n	8008b30 <ModbusSetData+0xfc>
 8008ad8:	8a79      	ldrh	r1, [r7, #18]
 8008ada:	484e      	ldr	r0, [pc, #312]	; (8008c14 <ModbusSetData+0x1e0>)
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4403      	add	r3, r0
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	461c      	mov	r4, r3
 8008aec:	4849      	ldr	r0, [pc, #292]	; (8008c14 <ModbusSetData+0x1e0>)
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	4613      	mov	r3, r2
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	4413      	add	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4403      	add	r3, r0
 8008afa:	3308      	adds	r3, #8
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	4423      	add	r3, r4
 8008b00:	4299      	cmp	r1, r3
 8008b02:	dc15      	bgt.n	8008b30 <ModbusSetData+0xfc>
            {
                ptr_data = (uint16_t *)data_list[j].data;
 8008b04:	4943      	ldr	r1, [pc, #268]	; (8008c14 <ModbusSetData+0x1e0>)
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	440b      	add	r3, r1
 8008b12:	3304      	adds	r3, #4
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	60fb      	str	r3, [r7, #12]
                addrData = addrData - data_list[j].start_addr;
 8008b18:	493e      	ldr	r1, [pc, #248]	; (8008c14 <ModbusSetData+0x1e0>)
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	005b      	lsls	r3, r3, #1
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	440b      	add	r3, r1
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	8a7a      	ldrh	r2, [r7, #18]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	827b      	strh	r3, [r7, #18]
                break;
 8008b2e:	e005      	b.n	8008b3c <ModbusSetData+0x108>
    for(j = 0; j < MAX_VAR_SHOW; j++)
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	3301      	adds	r3, #1
 8008b34:	61bb      	str	r3, [r7, #24]
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	2b09      	cmp	r3, #9
 8008b3a:	ddb7      	ble.n	8008aac <ModbusSetData+0x78>
            }
        }
    }
    if(ptr_data == NULL)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d104      	bne.n	8008b4c <ModbusSetData+0x118>
    {
        mb_obj->RcvTask = &ModbusGetData;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a32      	ldr	r2, [pc, #200]	; (8008c10 <ModbusSetData+0x1dc>)
 8008b46:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        return;
 8008b4a:	e05e      	b.n	8008c0a <ModbusSetData+0x1d6>
    }

    k = 7;
 8008b4c:	2307      	movs	r3, #7
 8008b4e:	617b      	str	r3, [r7, #20]
//        *(ptr_data + addrData + 1) = (mb_obj->rdata[k+2] << 8) + mb_obj->rdata[k+3];
//        addrData += 2;
//        k += 4;
//    }

    for(j = 0; j < sizeData; j++)
 8008b50:	2300      	movs	r3, #0
 8008b52:	61bb      	str	r3, [r7, #24]
 8008b54:	e01d      	b.n	8008b92 <ModbusSetData+0x15e>
    {
        *((uint16_t*)ptr_data + addrData) = (uint16_t)(((uint16_t)mb_obj->rdata[k] << 8) + (uint16_t)mb_obj->rdata[k + 1]);
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	330c      	adds	r3, #12
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	021b      	lsls	r3, r3, #8
 8008b64:	b299      	uxth	r1, r3
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	7b1b      	ldrb	r3, [r3, #12]
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	8a7b      	ldrh	r3, [r7, #18]
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	4403      	add	r3, r0
 8008b7a:	440a      	add	r2, r1
 8008b7c:	b292      	uxth	r2, r2
 8008b7e:	801a      	strh	r2, [r3, #0]
        k = k + 2;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	3302      	adds	r3, #2
 8008b84:	617b      	str	r3, [r7, #20]
        addrData += 1;
 8008b86:	8a7b      	ldrh	r3, [r7, #18]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	827b      	strh	r3, [r7, #18]
    for(j = 0; j < sizeData; j++)
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	61bb      	str	r3, [r7, #24]
 8008b92:	897b      	ldrh	r3, [r7, #10]
 8008b94:	69ba      	ldr	r2, [r7, #24]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	dbdd      	blt.n	8008b56 <ModbusSetData+0x122>
    }

    crc = calcCRC(mb_obj->sdata, i);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	3370      	adds	r3, #112	; 0x70
 8008b9e:	69fa      	ldr	r2, [r7, #28]
 8008ba0:	b292      	uxth	r2, r2
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7ff fc67 	bl	8008478 <calcCRC>
 8008baa:	4603      	mov	r3, r0
 8008bac:	813b      	strh	r3, [r7, #8]
    mb_obj->sdata[i++] = (crc >> 8) & 0xFF;
 8008bae:	893b      	ldrh	r3, [r7, #8]
 8008bb0:	0a1b      	lsrs	r3, r3, #8
 8008bb2:	b299      	uxth	r1, r3
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	61fa      	str	r2, [r7, #28]
 8008bba:	b2c9      	uxtb	r1, r1
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	460a      	mov	r2, r1
 8008bc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    mb_obj->sdata[i++] = crc & 0xFF;
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	61fa      	str	r2, [r7, #28]
 8008bcc:	893a      	ldrh	r2, [r7, #8]
 8008bce:	b2d1      	uxtb	r1, r2
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	460a      	mov	r2, r1
 8008bd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    mb_obj->sSend = i;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	69fa      	ldr	r2, [r7, #28]
 8008bde:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    if(mb_obj->modbus.SetReDe != NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <ModbusSetData+0x1be>
    	mb_obj->modbus.SetReDe(0);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	2000      	movs	r0, #0
 8008bf0:	4798      	blx	r3
    mb_obj->RcvTask = &ModbusSendData;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a08      	ldr	r2, [pc, #32]	; (8008c18 <ModbusSetData+0x1e4>)
 8008bf6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    mb_obj->tick = 0;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    mb_obj->scount = 0;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

}
 8008c0a:	3724      	adds	r7, #36	; 0x24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd90      	pop	{r4, r7, pc}
 8008c10:	08008915 	.word	0x08008915
 8008c14:	200007f0 	.word	0x200007f0
 8008c18:	08008e39 	.word	0x08008e39

08008c1c <ModbusCreateData>:
static void ModbusCreateData(m_modbus_obj *mb_obj)
{
 8008c1c:	b590      	push	{r4, r7, lr}
 8008c1e:	b089      	sub	sp, #36	; 0x24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
    int i, j;
    uint16_t crc;
    uint16_t addrData;
    uint16_t sizeData;
    uint16_t *ptr_data = NULL;
 8008c24:	2300      	movs	r3, #0
 8008c26:	613b      	str	r3, [r7, #16]
    for(i = 0; i < 2; i++)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	61fb      	str	r3, [r7, #28]
 8008c2c:	e00d      	b.n	8008c4a <ModbusCreateData+0x2e>
    {
        mb_obj->sdata[i] = mb_obj->rdata[i];
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	4413      	add	r3, r2
 8008c34:	330c      	adds	r3, #12
 8008c36:	7819      	ldrb	r1, [r3, #0]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	3370      	adds	r3, #112	; 0x70
 8008c40:	460a      	mov	r2, r1
 8008c42:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < 2; i++)
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	3301      	adds	r3, #1
 8008c48:	61fb      	str	r3, [r7, #28]
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	ddee      	ble.n	8008c2e <ModbusCreateData+0x12>
    }

    addrData = mb_obj->rdata[2] << 8 | mb_obj->rdata[3];
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	7b9b      	ldrb	r3, [r3, #14]
 8008c54:	021b      	lsls	r3, r3, #8
 8008c56:	b21a      	sxth	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	7bdb      	ldrb	r3, [r3, #15]
 8008c5c:	b21b      	sxth	r3, r3
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	b21b      	sxth	r3, r3
 8008c62:	82fb      	strh	r3, [r7, #22]
    sizeData = mb_obj->rdata[4] << 8 | mb_obj->rdata[5];
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	7c1b      	ldrb	r3, [r3, #16]
 8008c68:	021b      	lsls	r3, r3, #8
 8008c6a:	b21a      	sxth	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	7c5b      	ldrb	r3, [r3, #17]
 8008c70:	b21b      	sxth	r3, r3
 8008c72:	4313      	orrs	r3, r2
 8008c74:	b21b      	sxth	r3, r3
 8008c76:	81fb      	strh	r3, [r7, #14]

    mb_obj->sdata[i++] = sizeData * 2;
 8008c78:	89fb      	ldrh	r3, [r7, #14]
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	1c59      	adds	r1, r3, #1
 8008c80:	61f9      	str	r1, [r7, #28]
 8008c82:	0052      	lsls	r2, r2, #1
 8008c84:	b2d1      	uxtb	r1, r2
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	4413      	add	r3, r2
 8008c8a:	460a      	mov	r2, r1
 8008c8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    if(sizeData * 2 > (TXSIZE - 6))
 8008c90:	89fb      	ldrh	r3, [r7, #14]
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	2b5e      	cmp	r3, #94	; 0x5e
 8008c96:	dd04      	ble.n	8008ca2 <ModbusCreateData+0x86>
    {
        mb_obj->RcvTask = &ModbusGetData;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a64      	ldr	r2, [pc, #400]	; (8008e2c <ModbusCreateData+0x210>)
 8008c9c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        return;           // over len buff
 8008ca0:	e0c0      	b.n	8008e24 <ModbusCreateData+0x208>
    }
    for(j = 0; j < MAX_VAR_SHOW; j++)
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61bb      	str	r3, [r7, #24]
 8008ca6:	e044      	b.n	8008d32 <ModbusCreateData+0x116>
    {
        if(data_list[j].data != NULL)
 8008ca8:	4961      	ldr	r1, [pc, #388]	; (8008e30 <ModbusCreateData+0x214>)
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	4613      	mov	r3, r2
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d036      	beq.n	8008d2c <ModbusCreateData+0x110>
        {
            if(addrData >= data_list[j].start_addr && addrData < data_list[j].start_addr + data_list[j].len)
 8008cbe:	495c      	ldr	r1, [pc, #368]	; (8008e30 <ModbusCreateData+0x214>)
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	440b      	add	r3, r1
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	8afa      	ldrh	r2, [r7, #22]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d32b      	bcc.n	8008d2c <ModbusCreateData+0x110>
 8008cd4:	8af9      	ldrh	r1, [r7, #22]
 8008cd6:	4856      	ldr	r0, [pc, #344]	; (8008e30 <ModbusCreateData+0x214>)
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4403      	add	r3, r0
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	461c      	mov	r4, r3
 8008ce8:	4851      	ldr	r0, [pc, #324]	; (8008e30 <ModbusCreateData+0x214>)
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	4613      	mov	r3, r2
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4403      	add	r3, r0
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	4423      	add	r3, r4
 8008cfc:	4299      	cmp	r1, r3
 8008cfe:	da15      	bge.n	8008d2c <ModbusCreateData+0x110>
            {
                ptr_data = (uint16_t *)data_list[j].data;
 8008d00:	494b      	ldr	r1, [pc, #300]	; (8008e30 <ModbusCreateData+0x214>)
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	4613      	mov	r3, r2
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	4413      	add	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	440b      	add	r3, r1
 8008d0e:	3304      	adds	r3, #4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	613b      	str	r3, [r7, #16]
                addrData = addrData - data_list[j].start_addr;
 8008d14:	4946      	ldr	r1, [pc, #280]	; (8008e30 <ModbusCreateData+0x214>)
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	440b      	add	r3, r1
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	8afa      	ldrh	r2, [r7, #22]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	82fb      	strh	r3, [r7, #22]
                break;
 8008d2a:	e005      	b.n	8008d38 <ModbusCreateData+0x11c>
    for(j = 0; j < MAX_VAR_SHOW; j++)
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	61bb      	str	r3, [r7, #24]
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	2b09      	cmp	r3, #9
 8008d36:	ddb7      	ble.n	8008ca8 <ModbusCreateData+0x8c>
            }
        }
    }
    if(ptr_data == NULL)
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d104      	bne.n	8008d48 <ModbusCreateData+0x12c>
    {
        mb_obj->RcvTask = &ModbusGetData;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a3a      	ldr	r2, [pc, #232]	; (8008e2c <ModbusCreateData+0x210>)
 8008d42:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        return;
 8008d46:	e06d      	b.n	8008e24 <ModbusCreateData+0x208>
    }

    for(j = 0; j < sizeData; j++)
 8008d48:	2300      	movs	r3, #0
 8008d4a:	61bb      	str	r3, [r7, #24]
 8008d4c:	e02e      	b.n	8008dac <ModbusCreateData+0x190>
    {
        memcpy(&mb_obj->sdata[i], (uint16_t*)ptr_data + addrData, 2);
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	3370      	adds	r3, #112	; 0x70
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	4413      	add	r3, r2
 8008d56:	8afa      	ldrh	r2, [r7, #22]
 8008d58:	0052      	lsls	r2, r2, #1
 8008d5a:	6939      	ldr	r1, [r7, #16]
 8008d5c:	440a      	add	r2, r1
 8008d5e:	8812      	ldrh	r2, [r2, #0]
 8008d60:	b292      	uxth	r2, r2
 8008d62:	801a      	strh	r2, [r3, #0]
        uint8_t fw = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	72fb      	strb	r3, [r7, #11]
        fw = mb_obj->sdata[i];
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	3370      	adds	r3, #112	; 0x70
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	72fb      	strb	r3, [r7, #11]
        mb_obj->sdata[i] = mb_obj->sdata[i + 1];
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	3301      	adds	r3, #1
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f893 1070 	ldrb.w	r1, [r3, #112]	; 0x70
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	4413      	add	r3, r2
 8008d86:	3370      	adds	r3, #112	; 0x70
 8008d88:	460a      	mov	r2, r1
 8008d8a:	701a      	strb	r2, [r3, #0]
        mb_obj->sdata[i + 1] = fw;
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	4413      	add	r3, r2
 8008d94:	7afa      	ldrb	r2, [r7, #11]
 8008d96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        i += 2;
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	3302      	adds	r3, #2
 8008d9e:	61fb      	str	r3, [r7, #28]
        addrData += 1;
 8008da0:	8afb      	ldrh	r3, [r7, #22]
 8008da2:	3301      	adds	r3, #1
 8008da4:	82fb      	strh	r3, [r7, #22]
    for(j = 0; j < sizeData; j++)
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	3301      	adds	r3, #1
 8008daa:	61bb      	str	r3, [r7, #24]
 8008dac:	89fb      	ldrh	r3, [r7, #14]
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	dbcc      	blt.n	8008d4e <ModbusCreateData+0x132>
    }
//    memcpy(&mb_obj->sdata[i], (uint16_t*)ptr_data + addrData, 2*sizeData);
//    i += 2*sizeData;
    crc = calcCRC(mb_obj->sdata, i);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3370      	adds	r3, #112	; 0x70
 8008db8:	69fa      	ldr	r2, [r7, #28]
 8008dba:	b292      	uxth	r2, r2
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff fb5a 	bl	8008478 <calcCRC>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	81bb      	strh	r3, [r7, #12]
    mb_obj->sdata[i++] = (crc >> 8) & 0xFF;
 8008dc8:	89bb      	ldrh	r3, [r7, #12]
 8008dca:	0a1b      	lsrs	r3, r3, #8
 8008dcc:	b299      	uxth	r1, r3
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	61fa      	str	r2, [r7, #28]
 8008dd4:	b2c9      	uxtb	r1, r1
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	4413      	add	r3, r2
 8008dda:	460a      	mov	r2, r1
 8008ddc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    mb_obj->sdata[i++] = crc & 0xFF;
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	61fa      	str	r2, [r7, #28]
 8008de6:	89ba      	ldrh	r2, [r7, #12]
 8008de8:	b2d1      	uxtb	r1, r2
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	4413      	add	r3, r2
 8008dee:	460a      	mov	r2, r1
 8008df0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    if(mb_obj->modbus.SetReDe != NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <ModbusCreateData+0x1e8>
    	mb_obj->modbus.SetReDe(0);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	2000      	movs	r0, #0
 8008e02:	4798      	blx	r3
    mb_obj->sSend = i;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	69fa      	ldr	r2, [r7, #28]
 8008e08:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    mb_obj->RcvTask = &ModbusSendData;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a09      	ldr	r2, [pc, #36]	; (8008e34 <ModbusCreateData+0x218>)
 8008e10:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    mb_obj->tick = 0;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    mb_obj->scount = 0;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
}
 8008e24:	3724      	adds	r7, #36	; 0x24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd90      	pop	{r4, r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	08008915 	.word	0x08008915
 8008e30:	200007f0 	.word	0x200007f0
 8008e34:	08008e39 	.word	0x08008e39

08008e38 <ModbusSendData>:

static void ModbusSendData(m_modbus_obj *mb_obj) // Task 1
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
    if(mb_obj->tick >= TXTIMEOUT)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008e46:	2b09      	cmp	r3, #9
 8008e48:	dd13      	ble.n	8008e72 <ModbusSendData+0x3a>
    {
    	if(mb_obj->modbus.SetReDe != NULL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <ModbusSendData+0x22>
    		mb_obj->modbus.SetReDe(1);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	2001      	movs	r0, #1
 8008e58:	4798      	blx	r3
        mb_obj->RcvTask = &ModbusGetData;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a07      	ldr	r2, [pc, #28]	; (8008e7c <ModbusSendData+0x44>)
 8008e5e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        mb_obj->scount = 0;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
        mb_obj->tick = 0;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    }
}
 8008e72:	bf00      	nop
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	08008915 	.word	0x08008915

08008e80 <ModbusSetReDe>:

static void ModbusSetReDe(uint32_t level)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
	if(1 == level)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d103      	bne.n	8008e96 <ModbusSetReDe+0x16>
		Pin_Func_TurnOn(CONTROL_485);
 8008e8e:	2004      	movs	r0, #4
 8008e90:	f000 fb76 	bl	8009580 <Pin_Func_TurnOn>
	else
		Pin_Func_TurnOff(CONTROL_485);
}
 8008e94:	e002      	b.n	8008e9c <ModbusSetReDe+0x1c>
		Pin_Func_TurnOff(CONTROL_485);
 8008e96:	2004      	movs	r0, #4
 8008e98:	f000 fb9c 	bl	80095d4 <Pin_Func_TurnOff>
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <create_modbus>:

modbus_master_obj* create_modbus(uint16_t id, serial_obj *serial)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	80fb      	strh	r3, [r7, #6]
	if(current_index_modbus_dev >= MAX_MODBUS_DEV)
 8008eb0:	4b19      	ldr	r3, [pc, #100]	; (8008f18 <create_modbus+0x74>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	dd00      	ble.n	8008eba <create_modbus+0x16>
	{
		while(1); // no modbus more than
 8008eb8:	e7fe      	b.n	8008eb8 <create_modbus+0x14>
	}
	m_modbus_obj *modbus = malloc(sizeof(m_modbus_obj));
 8008eba:	20e8      	movs	r0, #232	; 0xe8
 8008ebc:	f002 fa48 	bl	800b350 <malloc>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	60fb      	str	r3, [r7, #12]
	memset(modbus, 0, sizeof(m_modbus_obj));
 8008ec4:	22e8      	movs	r2, #232	; 0xe8
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f002 fafd 	bl	800b4c8 <memset>
	if(modbus != NULL)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d01c      	beq.n	8008f0e <create_modbus+0x6a>
	{
		modbus->modbus.id = id;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	88fa      	ldrh	r2, [r7, #6]
 8008ed8:	801a      	strh	r2, [r3, #0]
		modbus->modbus.serial_port = serial;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	605a      	str	r2, [r3, #4]
		modbus_list[current_index_modbus_dev] = modbus;
 8008ee0:	4b0d      	ldr	r3, [pc, #52]	; (8008f18 <create_modbus+0x74>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	490d      	ldr	r1, [pc, #52]	; (8008f1c <create_modbus+0x78>)
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ModbusResetValue(modbus);
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f7ff fcdd 	bl	80088ac <ModbusResetValue>
		current_index_modbus_dev++;
 8008ef2:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <create_modbus+0x74>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	4a07      	ldr	r2, [pc, #28]	; (8008f18 <create_modbus+0x74>)
 8008efa:	6013      	str	r3, [r2, #0]
		modbus->RcvTask = &ModbusGetData;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4a08      	ldr	r2, [pc, #32]	; (8008f20 <create_modbus+0x7c>)
 8008f00:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		modbus->modbus.SetReDe = ModbusSetReDe;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4a07      	ldr	r2, [pc, #28]	; (8008f24 <create_modbus+0x80>)
 8008f08:	609a      	str	r2, [r3, #8]
		return &(modbus->modbus);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	e000      	b.n	8008f10 <create_modbus+0x6c>
	}
	return NULL;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	20000868 	.word	0x20000868
 8008f1c:	2000086c 	.word	0x2000086c
 8008f20:	08008915 	.word	0x08008915
 8008f24:	08008e81 	.word	0x08008e81

08008f28 <Modbus1kHz>:


void Modbus1kHz(void)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
	int index_modbus_dev = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	607b      	str	r3, [r7, #4]
	for(index_modbus_dev = 0; index_modbus_dev < current_index_modbus_dev; index_modbus_dev++)
 8008f32:	2300      	movs	r3, #0
 8008f34:	607b      	str	r3, [r7, #4]
 8008f36:	e00e      	b.n	8008f56 <Modbus1kHz+0x2e>
	{
		m_modbus_obj *modbus = modbus_list[index_modbus_dev];
 8008f38:	4a0d      	ldr	r2, [pc, #52]	; (8008f70 <Modbus1kHz+0x48>)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f40:	603b      	str	r3, [r7, #0]
		modbus->tick++;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	for(index_modbus_dev = 0; index_modbus_dev < current_index_modbus_dev; index_modbus_dev++)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3301      	adds	r3, #1
 8008f54:	607b      	str	r3, [r7, #4]
 8008f56:	4b07      	ldr	r3, [pc, #28]	; (8008f74 <Modbus1kHz+0x4c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	dbeb      	blt.n	8008f38 <Modbus1kHz+0x10>
	}
}
 8008f60:	bf00      	nop
 8008f62:	bf00      	nop
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	2000086c 	.word	0x2000086c
 8008f74:	20000868 	.word	0x20000868

08008f78 <ModbusBackground>:

void ModbusBackground(void)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
	int index_modbus_dev = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]
	for(index_modbus_dev = 0; index_modbus_dev < current_index_modbus_dev; index_modbus_dev++)
 8008f82:	2300      	movs	r3, #0
 8008f84:	60fb      	str	r3, [r7, #12]
 8008f86:	e079      	b.n	800907c <ModbusBackground+0x104>
	{
        if(modbus_list[index_modbus_dev]->RcvTask != NULL)
 8008f88:	4a42      	ldr	r2, [pc, #264]	; (8009094 <ModbusBackground+0x11c>)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <ModbusBackground+0x38>
        {
        	modbus_list[index_modbus_dev]->RcvTask(modbus_list[index_modbus_dev]);
 8008f98:	4a3e      	ldr	r2, [pc, #248]	; (8009094 <ModbusBackground+0x11c>)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fa0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008fa4:	493b      	ldr	r1, [pc, #236]	; (8009094 <ModbusBackground+0x11c>)
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008fac:	4610      	mov	r0, r2
 8008fae:	4798      	blx	r3
        }

        m_modbus_obj *modbus = modbus_list[index_modbus_dev];
 8008fb0:	4a38      	ldr	r2, [pc, #224]	; (8009094 <ModbusBackground+0x11c>)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fb8:	60bb      	str	r3, [r7, #8]
		SerialHandle(modbus->modbus.serial_port);
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fef6 	bl	8009db0 <SerialHandle>
		while(modbus->modbus.serial_port->length_received > 0 && modbus->RcvTask == (void*)&ModbusGetData)	 // check if a char has been received
 8008fc4:	e020      	b.n	8009008 <ModbusBackground+0x90>
		{
			if(modbus->rcount >= RXSIZE)
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008fcc:	2b63      	cmp	r3, #99	; 0x63
 8008fce:	dd03      	ble.n	8008fd8 <ModbusBackground+0x60>
			{
				modbus->rcount = 0;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			}
			SerialReadBuf(modbus->modbus.serial_port,
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	6858      	ldr	r0, [r3, #4]
							&(modbus->rdata[modbus->rcount]),
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
			SerialReadBuf(modbus->modbus.serial_port,
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	3304      	adds	r3, #4
 8008fea:	2201      	movs	r2, #1
 8008fec:	4619      	mov	r1, r3
 8008fee:	f000 ffcf 	bl	8009f90 <SerialReadBuf>
							1);
			modbus->rcount++;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			modbus->tick = 0;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2200      	movs	r2, #0
 8009004:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		while(modbus->modbus.serial_port->length_received > 0 && modbus->RcvTask == (void*)&ModbusGetData)	 // check if a char has been received
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	8a1b      	ldrh	r3, [r3, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d005      	beq.n	800901e <ModbusBackground+0xa6>
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009018:	4a1f      	ldr	r2, [pc, #124]	; (8009098 <ModbusBackground+0x120>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d0d3      	beq.n	8008fc6 <ModbusBackground+0x4e>
		}
		send:
 800901e:	bf00      	nop
		if(modbus->scount < modbus->sSend && modbus->RcvTask == (void*)&ModbusSendData)
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800902c:	429a      	cmp	r2, r3
 800902e:	da22      	bge.n	8009076 <ModbusBackground+0xfe>
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009036:	4a19      	ldr	r2, [pc, #100]	; (800909c <ModbusBackground+0x124>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d11c      	bne.n	8009076 <ModbusBackground+0xfe>
		{
			bool ret;
			ret = SerialSendBuf(modbus->modbus.serial_port, &modbus->sdata[modbus->scount], 1);
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	6858      	ldr	r0, [r3, #4]
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009046:	3370      	adds	r3, #112	; 0x70
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	4413      	add	r3, r2
 800904c:	2201      	movs	r2, #1
 800904e:	4619      	mov	r1, r3
 8009050:	f000 ff78 	bl	8009f44 <SerialSendBuf>
 8009054:	4603      	mov	r3, r0
 8009056:	71fb      	strb	r3, [r7, #7]
			if(ret == true)
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d014      	beq.n	8009088 <ModbusBackground+0x110>
			{
				modbus->tick = 0;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2200      	movs	r2, #0
 8009062:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				modbus->scount++;
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800906c:	1c5a      	adds	r2, r3, #1
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				goto send;
 8009074:	e7d4      	b.n	8009020 <ModbusBackground+0xa8>
	for(index_modbus_dev = 0; index_modbus_dev < current_index_modbus_dev; index_modbus_dev++)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3301      	adds	r3, #1
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	4b08      	ldr	r3, [pc, #32]	; (80090a0 <ModbusBackground+0x128>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	429a      	cmp	r2, r3
 8009084:	db80      	blt.n	8008f88 <ModbusBackground+0x10>
				break;
			}
		}

	}
}
 8009086:	e000      	b.n	800908a <ModbusBackground+0x112>
				break;
 8009088:	bf00      	nop
}
 800908a:	bf00      	nop
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	2000086c 	.word	0x2000086c
 8009098:	08008915 	.word	0x08008915
 800909c:	08008e39 	.word	0x08008e39
 80090a0:	20000868 	.word	0x20000868

080090a4 <ModbusAddVariable>:

void ModbusAddVariable(modbus_master_obj *obj, uint16_t addr, void *data, uint16_t len)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	607a      	str	r2, [r7, #4]
 80090ae:	461a      	mov	r2, r3
 80090b0:	460b      	mov	r3, r1
 80090b2:	817b      	strh	r3, [r7, #10]
 80090b4:	4613      	mov	r3, r2
 80090b6:	813b      	strh	r3, [r7, #8]
    if(current_index_list_var >= MAX_VAR_SHOW) return;
 80090b8:	4b17      	ldr	r3, [pc, #92]	; (8009118 <ModbusAddVariable+0x74>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b09      	cmp	r3, #9
 80090be:	dc25      	bgt.n	800910c <ModbusAddVariable+0x68>
    data_list[current_index_list_var].start_addr = addr;
 80090c0:	4b15      	ldr	r3, [pc, #84]	; (8009118 <ModbusAddVariable+0x74>)
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	4915      	ldr	r1, [pc, #84]	; (800911c <ModbusAddVariable+0x78>)
 80090c6:	4613      	mov	r3, r2
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	4413      	add	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	897a      	ldrh	r2, [r7, #10]
 80090d2:	801a      	strh	r2, [r3, #0]
    data_list[current_index_list_var].data = data;
 80090d4:	4b10      	ldr	r3, [pc, #64]	; (8009118 <ModbusAddVariable+0x74>)
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	4910      	ldr	r1, [pc, #64]	; (800911c <ModbusAddVariable+0x78>)
 80090da:	4613      	mov	r3, r2
 80090dc:	005b      	lsls	r3, r3, #1
 80090de:	4413      	add	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	440b      	add	r3, r1
 80090e4:	3304      	adds	r3, #4
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	601a      	str	r2, [r3, #0]
    data_list[current_index_list_var].len = len;
 80090ea:	4b0b      	ldr	r3, [pc, #44]	; (8009118 <ModbusAddVariable+0x74>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	490b      	ldr	r1, [pc, #44]	; (800911c <ModbusAddVariable+0x78>)
 80090f0:	4613      	mov	r3, r2
 80090f2:	005b      	lsls	r3, r3, #1
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	440b      	add	r3, r1
 80090fa:	3308      	adds	r3, #8
 80090fc:	893a      	ldrh	r2, [r7, #8]
 80090fe:	801a      	strh	r2, [r3, #0]
    current_index_list_var++;
 8009100:	4b05      	ldr	r3, [pc, #20]	; (8009118 <ModbusAddVariable+0x74>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3301      	adds	r3, #1
 8009106:	4a04      	ldr	r2, [pc, #16]	; (8009118 <ModbusAddVariable+0x74>)
 8009108:	6013      	str	r3, [r2, #0]
 800910a:	e000      	b.n	800910e <ModbusAddVariable+0x6a>
    if(current_index_list_var >= MAX_VAR_SHOW) return;
 800910c:	bf00      	nop
}
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	200007ec 	.word	0x200007ec
 800911c:	200007f0 	.word	0x200007f0

08009120 <SetCompareCH3>:
	WRITE_REG(advancetimerobjX->advtimer->CCR2, CompareValue);
}


__STATIC_INLINE void SetCompareCH3(timer_advance_obj_t *advancetimerobjX, uint32_t CompareValue)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR3, CompareValue);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009132:	bf00      	nop
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <SetCompareCH4>:
{
	WRITE_REG(advancetimerobjX->advtimer->CCR3, CompareValue);
}

__STATIC_INLINE void SetCompareCH4(timer_advance_obj_t *advancetimerobjX, uint32_t CompareValue)
{
 800913e:	b480      	push	{r7}
 8009140:	b083      	sub	sp, #12
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR4, CompareValue);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <DisableTimerChanel>:
{
	WRITE_REG(advancetimerobjX->advtimer->CCR4, CompareValue);
}

__STATIC_INLINE void DisableTimerChanel(timer_advance_obj_t *advancetimerobjX)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->BDTR, TIM_BDTR_MOE);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009172:	645a      	str	r2, [r3, #68]	; 0x44
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <EnableTimerChanel>:
__STATIC_INLINE void EnableTimerChanel(timer_advance_obj_t *advancetimerobjX)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->BDTR, TIM_BDTR_MOE);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009196:	645a      	str	r2, [r3, #68]	; 0x44
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <EnableCH1NOutput>:
{
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1);
}

__STATIC_INLINE void EnableCH1NOutput(timer_advance_obj_t *advancetimerobjX)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1N);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	6a1a      	ldr	r2, [r3, #32]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f042 0204 	orr.w	r2, r2, #4
 80091ba:	621a      	str	r2, [r3, #32]
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <EnableCH2NOutput>:
{
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2);
}

__STATIC_INLINE void EnableCH2NOutput(timer_advance_obj_t *advancetimerobjX)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2N);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	6a1a      	ldr	r2, [r3, #32]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091de:	621a      	str	r2, [r3, #32]
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <DisableCH1NOutput>:
{
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1);
}

__STATIC_INLINE void DisableCH1NOutput(timer_advance_obj_t *advancetimerobjX)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1N);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	6a1a      	ldr	r2, [r3, #32]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f022 0204 	bic.w	r2, r2, #4
 8009202:	621a      	str	r2, [r3, #32]
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <DisableCH2NOutput>:
{
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2);
}

__STATIC_INLINE void DisableCH2NOutput(timer_advance_obj_t *advancetimerobjX)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2N);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	6a1a      	ldr	r2, [r3, #32]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009226:	621a      	str	r2, [r3, #32]
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <DisableCH1NAndCH2NOutputs>:
{
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1|LL_TIM_CHANNEL_CH2);
}

__STATIC_INLINE void DisableCH1NAndCH2NOutputs(timer_advance_obj_t *advancetimerobjX)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1N|LL_TIM_CHANNEL_CH2N);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	6a1a      	ldr	r2, [r3, #32]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800924a:	621a      	str	r2, [r3, #32]
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <EnableCntTimer>:
						 |LL_TIM_CHANNEL_CH3N|LL_TIM_CHANNEL_CH4|LL_TIM_CHANNEL_CH4N);
}
//=======================================-END_DISABLE_OUTPUT-===============================================================//

__STATIC_INLINE void EnableCntTimer(timer_advance_obj_t *advancetimerobjX)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->CR1, TIM_CR1_CEN);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f042 0201 	orr.w	r2, r2, #1
 800926e:	601a      	str	r2, [r3, #0]
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <TIM_EnableIT_CC3>:

__STATIC_INLINE void TIM_EnableIT_CC3(timer_advance_obj_t *advancetimerobjX)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  SET_BIT(advancetimerobjX->advtimer->DIER, TIM_DIER_CC3IE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f042 0208 	orr.w	r2, r2, #8
 8009292:	60da      	str	r2, [r3, #12]
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <TIM_ClearFlag_CC3>:

__STATIC_INLINE void TIM_ClearFlag_CC3(timer_advance_obj_t *advancetimerobjX)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(advancetimerobjX->advtimer->SR, ~(TIM_SR_CC3IF));
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f06f 0208 	mvn.w	r2, #8
 80092b0:	611a      	str	r2, [r3, #16]
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
	...

080092c0 <PwmWindBoostInit>:
	TIM_ClearFlag_CC3(timeradvanceX);
	TIM_EnableIT_CC3(timeradvanceX);

}

void PwmWindBoostInit(timer_advance_obj_t *timeradvanceX, pTIMER_ADVANCE_EVENT_INT_HANDLE WindBoostCtrlFn){
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
	if(timeradvanceX->advance_timer_id == TIMER_ADVANCE_ID_1){
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d107      	bne.n	80092e2 <PwmWindBoostInit+0x22>
		Tim1CCIsr = WindBoostCtrlFn;
 80092d2:	4a11      	ldr	r2, [pc, #68]	; (8009318 <PwmWindBoostInit+0x58>)
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	6013      	str	r3, [r2, #0]
//		SetCompareCH4(timeradvanceX, timeradvanceX->TimerPeriod - 1);
		SetCompareCH4(timeradvanceX, 0);
 80092d8:	2100      	movs	r1, #0
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7ff ff2f 	bl	800913e <SetCompareCH4>
 80092e0:	e006      	b.n	80092f0 <PwmWindBoostInit+0x30>
	}
	else if(timeradvanceX->advance_timer_id == TIMER_ADVANCE_ID_2){
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d102      	bne.n	80092f0 <PwmWindBoostInit+0x30>
		Tim15CCIsr = WindBoostCtrlFn;
 80092ea:	4a0c      	ldr	r2, [pc, #48]	; (800931c <PwmWindBoostInit+0x5c>)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	6013      	str	r3, [r2, #0]
	}
	PwmWindBuckBoostDisableAllOutput(timeradvanceX);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f815 	bl	8009320 <PwmWindBuckBoostDisableAllOutput>
//	PwmWindBoostDisable(timeradvanceX);
	SetCompareCH3(timeradvanceX, 1);
 80092f6:	2101      	movs	r1, #1
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7ff ff11 	bl	8009120 <SetCompareCH3>
	EnableCntTimer(timeradvanceX);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7ff ffaa 	bl	8009258 <EnableCntTimer>
	TIM_ClearFlag_CC3(timeradvanceX);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7ff ffcb 	bl	80092a0 <TIM_ClearFlag_CC3>
	TIM_EnableIT_CC3(timeradvanceX);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7ff ffb6 	bl	800927c <TIM_EnableIT_CC3>

}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20001488 	.word	0x20001488
 800931c:	2000148c 	.word	0x2000148c

08009320 <PwmWindBuckBoostDisableAllOutput>:
void PwmWindBuckBoostEnableAllOutput(timer_advance_obj_t *timeradvanceX){
	EnableTimerChanel(timeradvanceX);
	EnableCH1NAndCH2NOutputs(timeradvanceX);
}

void PwmWindBuckBoostDisableAllOutput(timer_advance_obj_t *timeradvanceX){
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
	DisableTimerChanel(timeradvanceX);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7ff ff17 	bl	800915c <DisableTimerChanel>
	DisableCH1NAndCH2NOutputs(timeradvanceX);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7ff ff80 	bl	8009234 <DisableCH1NAndCH2NOutputs>
}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <PwmWindBuckEnable>:

void PwmWindBuckEnable(timer_advance_obj_t *timeradvanceX){
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
	EnableTimerChanel(timeradvanceX);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff ff1b 	bl	8009180 <EnableTimerChanel>
	EnableCH2NOutput(timeradvanceX);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff ff3c 	bl	80091c8 <EnableCH2NOutput>
}
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <PwmWindBoostEnable>:

void PwmWindBoostEnable(timer_advance_obj_t *timeradvanceX){
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
	EnableTimerChanel(timeradvanceX);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7ff ff0d 	bl	8009180 <EnableTimerChanel>
	EnableCH1NOutput(timeradvanceX);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff ff1c 	bl	80091a4 <EnableCH1NOutput>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <PwmWindBuckDisable>:

void PwmWindBuckDisable(timer_advance_obj_t *timeradvanceX)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
	DisableCH2NOutput(timeradvanceX);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7ff ff47 	bl	8009210 <DisableCH2NOutput>
}
 8009382:	bf00      	nop
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <PwmWindBoostDisable>:
void PwmWindBoostDisable(timer_advance_obj_t *timeradvanceX)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b082      	sub	sp, #8
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
	DisableCH1NOutput(timeradvanceX);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff ff2a 	bl	80091ec <DisableCH1NOutput>
}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <DisableTimerChanel>:
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->BDTR, TIM_BDTR_MOE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093b6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <EnableTimerChanel>:
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->BDTR, TIM_BDTR_MOE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093da:	645a      	str	r2, [r3, #68]	; 0x44
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <EnableCH2Output>:
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	6a1a      	ldr	r2, [r3, #32]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f042 0210 	orr.w	r2, r2, #16
 80093fe:	621a      	str	r2, [r3, #32]
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <DisableCH2Output>:
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	6a1a      	ldr	r2, [r3, #32]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	f022 0210 	bic.w	r2, r2, #16
 8009422:	621a      	str	r2, [r3, #32]
}
 8009424:	bf00      	nop
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <PwmWindDumpLoadEnableOutput>:
//	TIM_ClearFlag_CC2(timeradvanceX);
//	TIM_EnableIT_CC2(timeradvanceX);

}
void PwmWindDumpLoadEnableOutput(timer_advance_obj_t *timeradvanceX)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
	EnableTimerChanel(timeradvanceX);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff ffc3 	bl	80093c4 <EnableTimerChanel>
	EnableCH2Output(timeradvanceX);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7ff ffd2 	bl	80093e8 <EnableCH2Output>
}
 8009444:	bf00      	nop
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <PwmWindDumpLoadDisableOutput>:

void PwmWindDumpLoadDisableOutput(timer_advance_obj_t *timeradvanceX)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
	DisableTimerChanel(timeradvanceX);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff ffa3 	bl	80093a0 <DisableTimerChanel>
	DisableCH2Output(timeradvanceX);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff ffd6 	bl	800940c <DisableCH2Output>

}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <Pin_Func_Init>:
		{RESET_4G	, 			PORT_B, 		PIN_13, 		OUTPUT, 		GPIO_LOW		},
		{POWER_4G, 			    PORT_B, 		PIN_9, 		    OUTPUT, 		GPIO_LOW		},
};

void Pin_Func_Init(void)
{
 8009468:	b590      	push	{r4, r7, lr}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
    pin_func_id_e id = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	71fb      	strb	r3, [r7, #7]
    for (id = 0; id < PIN_FUNC_MAX; id++)
 8009472:	2300      	movs	r3, #0
 8009474:	71fb      	strb	r3, [r7, #7]
 8009476:	e078      	b.n	800956a <Pin_Func_Init+0x102>
    {
        if (pin_func_list[id].port_id != PORT_MAX)
 8009478:	79fa      	ldrb	r2, [r7, #7]
 800947a:	4940      	ldr	r1, [pc, #256]	; (800957c <Pin_Func_Init+0x114>)
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	440b      	add	r3, r1
 8009484:	3301      	adds	r3, #1
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	2b07      	cmp	r3, #7
 800948a:	d06b      	beq.n	8009564 <Pin_Func_Init+0xfc>
        {
            if (pin_func_list[id].dir == OUTPUT)
 800948c:	79fa      	ldrb	r2, [r7, #7]
 800948e:	493b      	ldr	r1, [pc, #236]	; (800957c <Pin_Func_Init+0x114>)
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	440b      	add	r3, r1
 8009498:	3303      	adds	r3, #3
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d12e      	bne.n	80094fe <Pin_Func_Init+0x96>
            {
                GPIO_SetPinOut(pin_func_list[id].port_id, pin_func_list[id].pin_id);
 80094a0:	79fa      	ldrb	r2, [r7, #7]
 80094a2:	4936      	ldr	r1, [pc, #216]	; (800957c <Pin_Func_Init+0x114>)
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	440b      	add	r3, r1
 80094ac:	3301      	adds	r3, #1
 80094ae:	7818      	ldrb	r0, [r3, #0]
 80094b0:	79fa      	ldrb	r2, [r7, #7]
 80094b2:	4932      	ldr	r1, [pc, #200]	; (800957c <Pin_Func_Init+0x114>)
 80094b4:	4613      	mov	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	440b      	add	r3, r1
 80094bc:	3302      	adds	r3, #2
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	4619      	mov	r1, r3
 80094c2:	f000 fb1d 	bl	8009b00 <GPIO_SetPinOut>
                GPIO_WritePin(pin_func_list[id].port_id, pin_func_list[id].pin_id, pin_func_list[id].default_level);
 80094c6:	79fa      	ldrb	r2, [r7, #7]
 80094c8:	492c      	ldr	r1, [pc, #176]	; (800957c <Pin_Func_Init+0x114>)
 80094ca:	4613      	mov	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	440b      	add	r3, r1
 80094d2:	3301      	adds	r3, #1
 80094d4:	7818      	ldrb	r0, [r3, #0]
 80094d6:	79fa      	ldrb	r2, [r7, #7]
 80094d8:	4928      	ldr	r1, [pc, #160]	; (800957c <Pin_Func_Init+0x114>)
 80094da:	4613      	mov	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4413      	add	r3, r2
 80094e0:	440b      	add	r3, r1
 80094e2:	3302      	adds	r3, #2
 80094e4:	7819      	ldrb	r1, [r3, #0]
 80094e6:	79fa      	ldrb	r2, [r7, #7]
 80094e8:	4c24      	ldr	r4, [pc, #144]	; (800957c <Pin_Func_Init+0x114>)
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	4423      	add	r3, r4
 80094f2:	3304      	adds	r3, #4
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	f000 fb50 	bl	8009b9c <GPIO_WritePin>
 80094fc:	e032      	b.n	8009564 <Pin_Func_Init+0xfc>
            }
            else if (pin_func_list[id].dir == INPUT_PULLDOWN)
 80094fe:	79fa      	ldrb	r2, [r7, #7]
 8009500:	491e      	ldr	r1, [pc, #120]	; (800957c <Pin_Func_Init+0x114>)
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	440b      	add	r3, r1
 800950a:	3303      	adds	r3, #3
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2b02      	cmp	r3, #2
 8009510:	d114      	bne.n	800953c <Pin_Func_Init+0xd4>
            {
                GPIO_SetPinIn(pin_func_list[id].port_id, pin_func_list[id].pin_id, PULL_DOWN);
 8009512:	79fa      	ldrb	r2, [r7, #7]
 8009514:	4919      	ldr	r1, [pc, #100]	; (800957c <Pin_Func_Init+0x114>)
 8009516:	4613      	mov	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	440b      	add	r3, r1
 800951e:	3301      	adds	r3, #1
 8009520:	7818      	ldrb	r0, [r3, #0]
 8009522:	79fa      	ldrb	r2, [r7, #7]
 8009524:	4915      	ldr	r1, [pc, #84]	; (800957c <Pin_Func_Init+0x114>)
 8009526:	4613      	mov	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	440b      	add	r3, r1
 800952e:	3302      	adds	r3, #2
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2202      	movs	r2, #2
 8009534:	4619      	mov	r1, r3
 8009536:	f000 fb09 	bl	8009b4c <GPIO_SetPinIn>
 800953a:	e013      	b.n	8009564 <Pin_Func_Init+0xfc>
            }
            else
                GPIO_SetPinIn(pin_func_list[id].port_id, pin_func_list[id].pin_id, PULL_UP);
 800953c:	79fa      	ldrb	r2, [r7, #7]
 800953e:	490f      	ldr	r1, [pc, #60]	; (800957c <Pin_Func_Init+0x114>)
 8009540:	4613      	mov	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4413      	add	r3, r2
 8009546:	440b      	add	r3, r1
 8009548:	3301      	adds	r3, #1
 800954a:	7818      	ldrb	r0, [r3, #0]
 800954c:	79fa      	ldrb	r2, [r7, #7]
 800954e:	490b      	ldr	r1, [pc, #44]	; (800957c <Pin_Func_Init+0x114>)
 8009550:	4613      	mov	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	440b      	add	r3, r1
 8009558:	3302      	adds	r3, #2
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2201      	movs	r2, #1
 800955e:	4619      	mov	r1, r3
 8009560:	f000 faf4 	bl	8009b4c <GPIO_SetPinIn>
    for (id = 0; id < PIN_FUNC_MAX; id++)
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	3301      	adds	r3, #1
 8009568:	71fb      	strb	r3, [r7, #7]
 800956a:	79fb      	ldrb	r3, [r7, #7]
 800956c:	2b06      	cmp	r3, #6
 800956e:	d983      	bls.n	8009478 <Pin_Func_Init+0x10>
        }
    }
}
 8009570:	bf00      	nop
 8009572:	bf00      	nop
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	bd90      	pop	{r4, r7, pc}
 800957a:	bf00      	nop
 800957c:	2000000c 	.word	0x2000000c

08009580 <Pin_Func_TurnOn>:

void Pin_Func_TurnOn(pin_func_id_e id)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	4603      	mov	r3, r0
 8009588:	71fb      	strb	r3, [r7, #7]
    if (pin_func_list[id].port_id < PORT_MAX)
 800958a:	79fa      	ldrb	r2, [r7, #7]
 800958c:	4910      	ldr	r1, [pc, #64]	; (80095d0 <Pin_Func_TurnOn+0x50>)
 800958e:	4613      	mov	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4413      	add	r3, r2
 8009594:	440b      	add	r3, r1
 8009596:	3301      	adds	r3, #1
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b06      	cmp	r3, #6
 800959c:	d813      	bhi.n	80095c6 <Pin_Func_TurnOn+0x46>
    {
        GPIO_WritePin(pin_func_list[id].port_id, pin_func_list[id].pin_id, GPIO_HIGH);
 800959e:	79fa      	ldrb	r2, [r7, #7]
 80095a0:	490b      	ldr	r1, [pc, #44]	; (80095d0 <Pin_Func_TurnOn+0x50>)
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	440b      	add	r3, r1
 80095aa:	3301      	adds	r3, #1
 80095ac:	7818      	ldrb	r0, [r3, #0]
 80095ae:	79fa      	ldrb	r2, [r7, #7]
 80095b0:	4907      	ldr	r1, [pc, #28]	; (80095d0 <Pin_Func_TurnOn+0x50>)
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	440b      	add	r3, r1
 80095ba:	3302      	adds	r3, #2
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	2201      	movs	r2, #1
 80095c0:	4619      	mov	r1, r3
 80095c2:	f000 faeb 	bl	8009b9c <GPIO_WritePin>
    }
}
 80095c6:	bf00      	nop
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	2000000c 	.word	0x2000000c

080095d4 <Pin_Func_TurnOff>:

void Pin_Func_TurnOff(pin_func_id_e id)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	71fb      	strb	r3, [r7, #7]
    if (pin_func_list[id].port_id < PORT_MAX)
 80095de:	79fa      	ldrb	r2, [r7, #7]
 80095e0:	4910      	ldr	r1, [pc, #64]	; (8009624 <Pin_Func_TurnOff+0x50>)
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	440b      	add	r3, r1
 80095ea:	3301      	adds	r3, #1
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	2b06      	cmp	r3, #6
 80095f0:	d813      	bhi.n	800961a <Pin_Func_TurnOff+0x46>
    {
        GPIO_WritePin(pin_func_list[id].port_id, pin_func_list[id].pin_id, GPIO_LOW);
 80095f2:	79fa      	ldrb	r2, [r7, #7]
 80095f4:	490b      	ldr	r1, [pc, #44]	; (8009624 <Pin_Func_TurnOff+0x50>)
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	440b      	add	r3, r1
 80095fe:	3301      	adds	r3, #1
 8009600:	7818      	ldrb	r0, [r3, #0]
 8009602:	79fa      	ldrb	r2, [r7, #7]
 8009604:	4907      	ldr	r1, [pc, #28]	; (8009624 <Pin_Func_TurnOff+0x50>)
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	440b      	add	r3, r1
 800960e:	3302      	adds	r3, #2
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	2200      	movs	r2, #0
 8009614:	4619      	mov	r1, r3
 8009616:	f000 fac1 	bl	8009b9c <GPIO_WritePin>
    }
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	2000000c 	.word	0x2000000c

08009628 <Signal_Init>:

//static double Convert_ADC_To_Val(uint16_t adc_val){
//	return 1;
//}

void Signal_Init(void){
 8009628:	b590      	push	{r4, r7, lr}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	80fb      	strh	r3, [r7, #6]
	for(i = 0; i < ADC_ID_MAX; i++){
 8009632:	2300      	movs	r3, #0
 8009634:	80fb      	strh	r3, [r7, #6]
 8009636:	e00c      	b.n	8009652 <Signal_Init+0x2a>
		s_signal_obj[i] = ADC_DMA_CREATE(i);
 8009638:	88fb      	ldrh	r3, [r7, #6]
 800963a:	b2db      	uxtb	r3, r3
 800963c:	88fc      	ldrh	r4, [r7, #6]
 800963e:	4618      	mov	r0, r3
 8009640:	f000 f9d0 	bl	80099e4 <ADC_DMA_CREATE>
 8009644:	4603      	mov	r3, r0
 8009646:	4a07      	ldr	r2, [pc, #28]	; (8009664 <Signal_Init+0x3c>)
 8009648:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(i = 0; i < ADC_ID_MAX; i++){
 800964c:	88fb      	ldrh	r3, [r7, #6]
 800964e:	3301      	adds	r3, #1
 8009650:	80fb      	strh	r3, [r7, #6]
 8009652:	88fb      	ldrh	r3, [r7, #6]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d9ef      	bls.n	8009638 <Signal_Init+0x10>
	}
}
 8009658:	bf00      	nop
 800965a:	bf00      	nop
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	bd90      	pop	{r4, r7, pc}
 8009662:	bf00      	nop
 8009664:	20000874 	.word	0x20000874

08009668 <Signal_Update>:
		g_signal_value[i].val_control = (float)(Get_ADC_VAL_CH(s_signal_obj[g_signal_value[i].adc_id], g_signal_value[i].adc_ch) - g_signal_value[i].offset)/ADC_FULLSCALE_VALUE;
		*g_signal_value[i].real_value = g_signal_value[i].val_control*g_signal_value[i].gain;
	}
}

void Signal_Update(signal_type_e signal){
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	71fb      	strb	r3, [r7, #7]
	g_signal_value[signal].val_control = (float)(Get_ADC_VAL_CH(s_signal_obj[g_signal_value[signal].adc_id], g_signal_value[signal].adc_ch) - g_signal_value[signal].offset)/ADC_FULLSCALE_VALUE;
 8009672:	79fa      	ldrb	r2, [r7, #7]
 8009674:	492d      	ldr	r1, [pc, #180]	; (800972c <Signal_Update+0xc4>)
 8009676:	4613      	mov	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	440b      	add	r3, r1
 8009680:	3301      	adds	r3, #1
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	461a      	mov	r2, r3
 8009686:	4b2a      	ldr	r3, [pc, #168]	; (8009730 <Signal_Update+0xc8>)
 8009688:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800968c:	79fa      	ldrb	r2, [r7, #7]
 800968e:	4927      	ldr	r1, [pc, #156]	; (800972c <Signal_Update+0xc4>)
 8009690:	4613      	mov	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	440b      	add	r3, r1
 800969a:	3302      	adds	r3, #2
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	4619      	mov	r1, r3
 80096a0:	f000 f9ec 	bl	8009a7c <Get_ADC_VAL_CH>
 80096a4:	4603      	mov	r3, r0
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096ae:	79fa      	ldrb	r2, [r7, #7]
 80096b0:	491e      	ldr	r1, [pc, #120]	; (800972c <Signal_Update+0xc4>)
 80096b2:	4613      	mov	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	440b      	add	r3, r1
 80096bc:	330c      	adds	r3, #12
 80096be:	edd3 7a00 	vldr	s15, [r3]
 80096c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096c6:	79fa      	ldrb	r2, [r7, #7]
 80096c8:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8009734 <Signal_Update+0xcc>
 80096cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80096d0:	4916      	ldr	r1, [pc, #88]	; (800972c <Signal_Update+0xc4>)
 80096d2:	4613      	mov	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	440b      	add	r3, r1
 80096dc:	3304      	adds	r3, #4
 80096de:	edc3 7a00 	vstr	s15, [r3]
	*g_signal_value[signal].real_value = g_signal_value[signal].val_control*g_signal_value[signal].gain;
 80096e2:	79fa      	ldrb	r2, [r7, #7]
 80096e4:	4911      	ldr	r1, [pc, #68]	; (800972c <Signal_Update+0xc4>)
 80096e6:	4613      	mov	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	440b      	add	r3, r1
 80096f0:	3304      	adds	r3, #4
 80096f2:	ed93 7a00 	vldr	s14, [r3]
 80096f6:	79fa      	ldrb	r2, [r7, #7]
 80096f8:	490c      	ldr	r1, [pc, #48]	; (800972c <Signal_Update+0xc4>)
 80096fa:	4613      	mov	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	440b      	add	r3, r1
 8009704:	3310      	adds	r3, #16
 8009706:	edd3 7a00 	vldr	s15, [r3]
 800970a:	79fa      	ldrb	r2, [r7, #7]
 800970c:	4907      	ldr	r1, [pc, #28]	; (800972c <Signal_Update+0xc4>)
 800970e:	4613      	mov	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	440b      	add	r3, r1
 8009718:	3308      	adds	r3, #8
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009720:	edc3 7a00 	vstr	s15, [r3]
}
 8009724:	bf00      	nop
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	20000030 	.word	0x20000030
 8009730:	20000874 	.word	0x20000874
 8009734:	45800000 	.word	0x45800000

08009738 <EC200_Delayms>:
/* FTP application */
extern uint8_t FTP_Response_Command[COMMAND_SIZE];
extern FTP_received_data_type_t FTP_received_data_type;

void EC200_Delayms(uint32_t mili_sec) /* Abstract function */
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
    HAL_Delay(mili_sec);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7f8 fba3 	bl	8001e8c <HAL_Delay>
}
 8009746:	bf00      	nop
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <EC200_RESET>:

void EC200_RESET(void)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	af00      	add	r7, sp, #0
	EC200_UART_Init();
 8009752:	f000 f829 	bl	80097a8 <EC200_UART_Init>
    /* Turn on the Power */
    EC200_POWER_PIN_LOW();
 8009756:	2006      	movs	r0, #6
 8009758:	f7ff ff3c 	bl	80095d4 <Pin_Func_TurnOff>
    EC200_Delayms(1000U);
 800975c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009760:	f7ff ffea 	bl	8009738 <EC200_Delayms>
    /* RESET EC200 */
    EC200_RESET_PIN_HIGH();
 8009764:	2005      	movs	r0, #5
 8009766:	f7ff ff0b 	bl	8009580 <Pin_Func_TurnOn>
    /* Delay 1000 ms */
    EC200_Delayms(1000U);
 800976a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800976e:	f7ff ffe3 	bl	8009738 <EC200_Delayms>
    EC200_RESET_PIN_LOW();
 8009772:	2005      	movs	r0, #5
 8009774:	f7ff ff2e 	bl	80095d4 <Pin_Func_TurnOff>
}
 8009778:	bf00      	nop
 800977a:	bd80      	pop	{r7, pc}

0800977c <EC200_Init>:

void EC200_Init(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
    EC200_UART_Init();
 8009780:	f000 f812 	bl	80097a8 <EC200_UART_Init>
    /* Reset EC200 module */
    EC200_RESET();
 8009784:	f7ff ffe3 	bl	800974e <EC200_RESET>
}
 8009788:	bf00      	nop
 800978a:	bd80      	pop	{r7, pc}

0800978c <EC200_UART_InitPins>:
 * Variables
 ******************************************************************************/
EC200_preprocessing_data_t EC200_preprocessing_data = {0};

void EC200_UART_InitPins(void)
{
 800978c:	b480      	push	{r7}
 800978e:	af00      	add	r7, sp, #0
    ;
}
 8009790:	bf00      	nop
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <EC200_RESET_InitPins>:

void EC200_RESET_InitPins(void)
{
 800979a:	b480      	push	{r7}
 800979c:	af00      	add	r7, sp, #0
    ;
}
 800979e:	bf00      	nop
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <EC200_UART_Init>:

void EC200_UART_Init(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
    /* Configure UART Pins */
    EC200_UART_InitPins();
 80097ac:	f7ff ffee 	bl	800978c <EC200_UART_InitPins>
    /* Configure EC200-RESET Pins */
    EC200_RESET_InitPins();
 80097b0:	f7ff fff3 	bl	800979a <EC200_RESET_InitPins>
    serial_EC200 = create_serial(0, EC200_UART_BAUDRATE, 64, 64); /* Data size=64 can be modified later */
 80097b4:	2340      	movs	r3, #64	; 0x40
 80097b6:	2240      	movs	r2, #64	; 0x40
 80097b8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80097bc:	2000      	movs	r0, #0
 80097be:	f000 fb5f 	bl	8009e80 <create_serial>
 80097c2:	4603      	mov	r3, r0
 80097c4:	4a01      	ldr	r2, [pc, #4]	; (80097cc <EC200_UART_Init+0x24>)
 80097c6:	6013      	str	r3, [r2, #0]
}
 80097c8:	bf00      	nop
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20001460 	.word	0x20001460

080097d0 <EC200_UART_Handler>:
{
    SendStringUart2(dat);
}

void EC200_UART_Handler(uint8_t rx_char)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	71fb      	strb	r3, [r7, #7]
    /* Buffer save the data to check it's sent from Server or not */
    EC200_DataProcessing_Array[EC200_preprocessing_data.Upcoming_Data_Count] = rx_char;
 80097da:	4b73      	ldr	r3, [pc, #460]	; (80099a8 <EC200_UART_Handler+0x1d8>)
 80097dc:	881b      	ldrh	r3, [r3, #0]
 80097de:	4619      	mov	r1, r3
 80097e0:	4a72      	ldr	r2, [pc, #456]	; (80099ac <EC200_UART_Handler+0x1dc>)
 80097e2:	79fb      	ldrb	r3, [r7, #7]
 80097e4:	5453      	strb	r3, [r2, r1]
    EC200_preprocessing_data.Upcoming_Data_Count++;
 80097e6:	4b70      	ldr	r3, [pc, #448]	; (80099a8 <EC200_UART_Handler+0x1d8>)
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	3301      	adds	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	4b6e      	ldr	r3, [pc, #440]	; (80099a8 <EC200_UART_Handler+0x1d8>)
 80097f0:	801a      	strh	r2, [r3, #0]

    if (((EC200_preprocessing_data.Upcoming_Data_Count > 3) && ((rx_char == '\n') || ((strcmp((char *)EC200_DataProcessing_Array, "\r\n> ") == 0)))) || ((current_application_occur == FTP_APPLICATION_OCCUR) && (ftp_output_mode == FTP_DATA_MODE))) /* >3 to avoid the first end of line  */
 80097f2:	4b6d      	ldr	r3, [pc, #436]	; (80099a8 <EC200_UART_Handler+0x1d8>)
 80097f4:	881b      	ldrh	r3, [r3, #0]
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d909      	bls.n	800980e <EC200_UART_Handler+0x3e>
 80097fa:	79fb      	ldrb	r3, [r7, #7]
 80097fc:	2b0a      	cmp	r3, #10
 80097fe:	d010      	beq.n	8009822 <EC200_UART_Handler+0x52>
 8009800:	496b      	ldr	r1, [pc, #428]	; (80099b0 <EC200_UART_Handler+0x1e0>)
 8009802:	486a      	ldr	r0, [pc, #424]	; (80099ac <EC200_UART_Handler+0x1dc>)
 8009804:	f7f6 fd08 	bl	8000218 <strcmp>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d009      	beq.n	8009822 <EC200_UART_Handler+0x52>
 800980e:	4b69      	ldr	r3, [pc, #420]	; (80099b4 <EC200_UART_Handler+0x1e4>)
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b01      	cmp	r3, #1
 8009814:	f040 80c5 	bne.w	80099a2 <EC200_UART_Handler+0x1d2>
 8009818:	4b67      	ldr	r3, [pc, #412]	; (80099b8 <EC200_UART_Handler+0x1e8>)
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	2b01      	cmp	r3, #1
 800981e:	f040 80c0 	bne.w	80099a2 <EC200_UART_Handler+0x1d2>
    {
        /* Exception cases */
        if ((strcmp((char *)EC200_DataProcessing_Array, "ATE0\r\r\n") == 0))
 8009822:	4966      	ldr	r1, [pc, #408]	; (80099bc <EC200_UART_Handler+0x1ec>)
 8009824:	4861      	ldr	r0, [pc, #388]	; (80099ac <EC200_UART_Handler+0x1dc>)
 8009826:	f7f6 fcf7 	bl	8000218 <strcmp>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 80b7 	beq.w	80099a0 <EC200_UART_Handler+0x1d0>
        {
            return;
        }
        if (current_application_occur == MQTT_APPLICATION_OCCUR) /* MQTT occurs UART interrupt resource (Always running if FTP application not occur) */
 8009832:	4b60      	ldr	r3, [pc, #384]	; (80099b4 <EC200_UART_Handler+0x1e4>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d14a      	bne.n	80098d0 <EC200_UART_Handler+0x100>
        {
            /* Receive data from Server */
            if (strstr(EC200_DataProcessing_Array, "+QMTRECV:") != NULL)
 800983a:	4961      	ldr	r1, [pc, #388]	; (80099c0 <EC200_UART_Handler+0x1f0>)
 800983c:	485b      	ldr	r0, [pc, #364]	; (80099ac <EC200_UART_Handler+0x1dc>)
 800983e:	f001 fe4b 	bl	800b4d8 <strstr>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d021      	beq.n	800988c <EC200_UART_Handler+0xbc>
            {
                MQTT_received_data_type.Is_Data_From_Server = true;
 8009848:	4b5e      	ldr	r3, [pc, #376]	; (80099c4 <EC200_UART_Handler+0x1f4>)
 800984a:	2201      	movs	r2, #1
 800984c:	701a      	strb	r2, [r3, #0]

                memset(MQTT_Response_Server, 0, strlen(MQTT_Response_Server));
 800984e:	485e      	ldr	r0, [pc, #376]	; (80099c8 <EC200_UART_Handler+0x1f8>)
 8009850:	f7f6 fcec 	bl	800022c <strlen>
 8009854:	4603      	mov	r3, r0
 8009856:	461a      	mov	r2, r3
 8009858:	2100      	movs	r1, #0
 800985a:	485b      	ldr	r0, [pc, #364]	; (80099c8 <EC200_UART_Handler+0x1f8>)
 800985c:	f001 fe34 	bl	800b4c8 <memset>
                for (int i = 0; i < EC200_preprocessing_data.Upcoming_Data_Count; i++)
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
 8009864:	e00b      	b.n	800987e <EC200_UART_Handler+0xae>
                {
                    MQTT_Response_Server[i] = EC200_DataProcessing_Array[i];
 8009866:	4a51      	ldr	r2, [pc, #324]	; (80099ac <EC200_UART_Handler+0x1dc>)
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	4413      	add	r3, r2
 800986c:	7819      	ldrb	r1, [r3, #0]
 800986e:	4a56      	ldr	r2, [pc, #344]	; (80099c8 <EC200_UART_Handler+0x1f8>)
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	4413      	add	r3, r2
 8009874:	460a      	mov	r2, r1
 8009876:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < EC200_preprocessing_data.Upcoming_Data_Count; i++)
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	3301      	adds	r3, #1
 800987c:	617b      	str	r3, [r7, #20]
 800987e:	4b4a      	ldr	r3, [pc, #296]	; (80099a8 <EC200_UART_Handler+0x1d8>)
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	461a      	mov	r2, r3
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	4293      	cmp	r3, r2
 8009888:	dbed      	blt.n	8009866 <EC200_UART_Handler+0x96>
 800988a:	e07c      	b.n	8009986 <EC200_UART_Handler+0x1b6>
                }
            }
            else /* Receive data from Command response */
            {
                MQTT_received_data_type.Is_Data_From_Command = true;
 800988c:	4b4d      	ldr	r3, [pc, #308]	; (80099c4 <EC200_UART_Handler+0x1f4>)
 800988e:	2201      	movs	r2, #1
 8009890:	705a      	strb	r2, [r3, #1]

                memset(MQTT_Response_Command, 0, strlen(MQTT_Response_Command));
 8009892:	484e      	ldr	r0, [pc, #312]	; (80099cc <EC200_UART_Handler+0x1fc>)
 8009894:	f7f6 fcca 	bl	800022c <strlen>
 8009898:	4603      	mov	r3, r0
 800989a:	461a      	mov	r2, r3
 800989c:	2100      	movs	r1, #0
 800989e:	484b      	ldr	r0, [pc, #300]	; (80099cc <EC200_UART_Handler+0x1fc>)
 80098a0:	f001 fe12 	bl	800b4c8 <memset>
                for (int i = 0; i < EC200_preprocessing_data.Upcoming_Data_Count; i++)
 80098a4:	2300      	movs	r3, #0
 80098a6:	613b      	str	r3, [r7, #16]
 80098a8:	e00b      	b.n	80098c2 <EC200_UART_Handler+0xf2>
                {
                    MQTT_Response_Command[i] = EC200_DataProcessing_Array[i];
 80098aa:	4a40      	ldr	r2, [pc, #256]	; (80099ac <EC200_UART_Handler+0x1dc>)
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	4413      	add	r3, r2
 80098b0:	7819      	ldrb	r1, [r3, #0]
 80098b2:	4a46      	ldr	r2, [pc, #280]	; (80099cc <EC200_UART_Handler+0x1fc>)
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	4413      	add	r3, r2
 80098b8:	460a      	mov	r2, r1
 80098ba:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < EC200_preprocessing_data.Upcoming_Data_Count; i++)
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	3301      	adds	r3, #1
 80098c0:	613b      	str	r3, [r7, #16]
 80098c2:	4b39      	ldr	r3, [pc, #228]	; (80099a8 <EC200_UART_Handler+0x1d8>)
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	461a      	mov	r2, r3
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	4293      	cmp	r3, r2
 80098cc:	dbed      	blt.n	80098aa <EC200_UART_Handler+0xda>
 80098ce:	e05a      	b.n	8009986 <EC200_UART_Handler+0x1b6>
                }
            }
        }
        else if (current_application_occur == FTP_APPLICATION_OCCUR) /* FTP occurs UART interrupt resource */
 80098d0:	4b38      	ldr	r3, [pc, #224]	; (80099b4 <EC200_UART_Handler+0x1e4>)
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d156      	bne.n	8009986 <EC200_UART_Handler+0x1b6>
        {
            if (strstr(EC200_DataProcessing_Array, "\r\nCONNECT\r\n") != NULL)
 80098d8:	493d      	ldr	r1, [pc, #244]	; (80099d0 <EC200_UART_Handler+0x200>)
 80098da:	4834      	ldr	r0, [pc, #208]	; (80099ac <EC200_UART_Handler+0x1dc>)
 80098dc:	f001 fdfc 	bl	800b4d8 <strstr>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00f      	beq.n	8009906 <EC200_UART_Handler+0x136>
            {
                ftp_output_mode = FTP_DATA_MODE;
 80098e6:	4b34      	ldr	r3, [pc, #208]	; (80099b8 <EC200_UART_Handler+0x1e8>)
 80098e8:	2201      	movs	r2, #1
 80098ea:	701a      	strb	r2, [r3, #0]
                FTP_preprocessing_data.Upcoming_ServerData_Count = 0;
 80098ec:	4b39      	ldr	r3, [pc, #228]	; (80099d4 <EC200_UART_Handler+0x204>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	801a      	strh	r2, [r3, #0]
                memset(FTP_Response_Server, 0, strlen(FTP_Response_Server));
 80098f2:	4839      	ldr	r0, [pc, #228]	; (80099d8 <EC200_UART_Handler+0x208>)
 80098f4:	f7f6 fc9a 	bl	800022c <strlen>
 80098f8:	4603      	mov	r3, r0
 80098fa:	461a      	mov	r2, r3
 80098fc:	2100      	movs	r1, #0
 80098fe:	4836      	ldr	r0, [pc, #216]	; (80099d8 <EC200_UART_Handler+0x208>)
 8009900:	f001 fde2 	bl	800b4c8 <memset>
 8009904:	e03f      	b.n	8009986 <EC200_UART_Handler+0x1b6>
            }
            else if (ftp_output_mode == FTP_DATA_MODE) /* Receive data from Server */
 8009906:	4b2c      	ldr	r3, [pc, #176]	; (80099b8 <EC200_UART_Handler+0x1e8>)
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d116      	bne.n	800993c <EC200_UART_Handler+0x16c>
            {
                FTP_Response_Server[FTP_preprocessing_data.Upcoming_ServerData_Count] = rx_char;
 800990e:	4b31      	ldr	r3, [pc, #196]	; (80099d4 <EC200_UART_Handler+0x204>)
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	4619      	mov	r1, r3
 8009914:	4a30      	ldr	r2, [pc, #192]	; (80099d8 <EC200_UART_Handler+0x208>)
 8009916:	79fb      	ldrb	r3, [r7, #7]
 8009918:	5453      	strb	r3, [r2, r1]
                if (rx_char == '+') /* Significant character to detect end of stream */
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	2b2b      	cmp	r3, #43	; 0x2b
 800991e:	d106      	bne.n	800992e <EC200_UART_Handler+0x15e>
                {
                    FTP_preprocessing_data.EndOfStream_Position = FTP_preprocessing_data.Upcoming_ServerData_Count;
 8009920:	4b2c      	ldr	r3, [pc, #176]	; (80099d4 <EC200_UART_Handler+0x204>)
 8009922:	881a      	ldrh	r2, [r3, #0]
 8009924:	4b2b      	ldr	r3, [pc, #172]	; (80099d4 <EC200_UART_Handler+0x204>)
 8009926:	805a      	strh	r2, [r3, #2]
                    FTP_received_data_type.Is_Data_From_Server = true;
 8009928:	4b2c      	ldr	r3, [pc, #176]	; (80099dc <EC200_UART_Handler+0x20c>)
 800992a:	2201      	movs	r2, #1
 800992c:	701a      	strb	r2, [r3, #0]
                }

                FTP_preprocessing_data.Upcoming_ServerData_Count++;
 800992e:	4b29      	ldr	r3, [pc, #164]	; (80099d4 <EC200_UART_Handler+0x204>)
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	3301      	adds	r3, #1
 8009934:	b29a      	uxth	r2, r3
 8009936:	4b27      	ldr	r3, [pc, #156]	; (80099d4 <EC200_UART_Handler+0x204>)
 8009938:	801a      	strh	r2, [r3, #0]
 800993a:	e024      	b.n	8009986 <EC200_UART_Handler+0x1b6>
            }
            else if (ftp_output_mode == FTP_COMMAND_MODE) /* Receive data from Command response */
 800993c:	4b1e      	ldr	r3, [pc, #120]	; (80099b8 <EC200_UART_Handler+0x1e8>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d120      	bne.n	8009986 <EC200_UART_Handler+0x1b6>
            {
                FTP_received_data_type.Is_Data_From_Command = true;
 8009944:	4b25      	ldr	r3, [pc, #148]	; (80099dc <EC200_UART_Handler+0x20c>)
 8009946:	2201      	movs	r2, #1
 8009948:	705a      	strb	r2, [r3, #1]

                memset(FTP_Response_Command, 0, strlen(FTP_Response_Command));
 800994a:	4825      	ldr	r0, [pc, #148]	; (80099e0 <EC200_UART_Handler+0x210>)
 800994c:	f7f6 fc6e 	bl	800022c <strlen>
 8009950:	4603      	mov	r3, r0
 8009952:	461a      	mov	r2, r3
 8009954:	2100      	movs	r1, #0
 8009956:	4822      	ldr	r0, [pc, #136]	; (80099e0 <EC200_UART_Handler+0x210>)
 8009958:	f001 fdb6 	bl	800b4c8 <memset>
                for (int i = 0; i < EC200_preprocessing_data.Upcoming_Data_Count; i++)
 800995c:	2300      	movs	r3, #0
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	e00b      	b.n	800997a <EC200_UART_Handler+0x1aa>
                {
                    FTP_Response_Command[i] = EC200_DataProcessing_Array[i];
 8009962:	4a12      	ldr	r2, [pc, #72]	; (80099ac <EC200_UART_Handler+0x1dc>)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	4413      	add	r3, r2
 8009968:	7819      	ldrb	r1, [r3, #0]
 800996a:	4a1d      	ldr	r2, [pc, #116]	; (80099e0 <EC200_UART_Handler+0x210>)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	460a      	mov	r2, r1
 8009972:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < EC200_preprocessing_data.Upcoming_Data_Count; i++)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3301      	adds	r3, #1
 8009978:	60fb      	str	r3, [r7, #12]
 800997a:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <EC200_UART_Handler+0x1d8>)
 800997c:	881b      	ldrh	r3, [r3, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	4293      	cmp	r3, r2
 8009984:	dbed      	blt.n	8009962 <EC200_UART_Handler+0x192>
                }
            }
        }

        /* Clear unnecessary data in buffer */
        memset(EC200_DataProcessing_Array, 0, strlen(EC200_DataProcessing_Array));
 8009986:	4809      	ldr	r0, [pc, #36]	; (80099ac <EC200_UART_Handler+0x1dc>)
 8009988:	f7f6 fc50 	bl	800022c <strlen>
 800998c:	4603      	mov	r3, r0
 800998e:	461a      	mov	r2, r3
 8009990:	2100      	movs	r1, #0
 8009992:	4806      	ldr	r0, [pc, #24]	; (80099ac <EC200_UART_Handler+0x1dc>)
 8009994:	f001 fd98 	bl	800b4c8 <memset>
        /* Done of data receiving process */
        EC200_preprocessing_data.Upcoming_Data_Count = 0;
 8009998:	4b03      	ldr	r3, [pc, #12]	; (80099a8 <EC200_UART_Handler+0x1d8>)
 800999a:	2200      	movs	r2, #0
 800999c:	801a      	strh	r2, [r3, #0]
 800999e:	e000      	b.n	80099a2 <EC200_UART_Handler+0x1d2>
            return;
 80099a0:	bf00      	nop
    }
}
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	20001468 	.word	0x20001468
 80099ac:	2000089c 	.word	0x2000089c
 80099b0:	0800b648 	.word	0x0800b648
 80099b4:	20001454 	.word	0x20001454
 80099b8:	20001455 	.word	0x20001455
 80099bc:	0800b650 	.word	0x0800b650
 80099c0:	0800b658 	.word	0x0800b658
 80099c4:	2000145c 	.word	0x2000145c
 80099c8:	20000d4c 	.word	0x20000d4c
 80099cc:	20000af4 	.word	0x20000af4
 80099d0:	0800b664 	.word	0x0800b664
 80099d4:	20001464 	.word	0x20001464
 80099d8:	200011fc 	.word	0x200011fc
 80099dc:	20001458 	.word	0x20001458
 80099e0:	20000fa4 	.word	0x20000fa4

080099e4 <ADC_DMA_CREATE>:
static adc_id_inf_t adc_id_inf[2] = {
	{ADC_ID_1, &hadc1, 1, {{ ADC_CH_1, RANK_1}, { ADC_CH_2, RANK_2}, {ADC_CH_3}, {ADC_CH_4}, {ADC_CH_5, RANK_3}, {ADC_CH_6}, {ADC_CH_7}, {ADC_CH_8},{ADC_CH_9},{ADC_CH_10},{ADC_CH_11},{ADC_CH_12},{ADC_CH_13},{ADC_CH_14},{ADC_CH_15,RANK_4},{ADC_CH_16},{ADC_CH_17} }},
	{ADC_ID_2, &hadc2, 1, {{ ADC_CH_1}, { ADC_CH_2}, {ADC_CH_3, RANK_1}, {ADC_CH_4, RANK_2}, {ADC_CH_5}, {ADC_CH_6}, {ADC_CH_7}, {ADC_CH_8},{ADC_CH_9},{ADC_CH_10},{ADC_CH_11},{ADC_CH_12},{ADC_CH_13, RANK_3},{ADC_CH_14},{ADC_CH_15},{ADC_CH_16},{ADC_CH_17,RANK_4} }},
};

adc_obj_t* ADC_DMA_CREATE(ADC_ID_e id){
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	71fb      	strb	r3, [r7, #7]
	uint16_t num_adc_val = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	82fb      	strh	r3, [r7, #22]
	ADC_HandleTypeDef* hadc = adc_id_inf[id].hadc;
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	4a20      	ldr	r2, [pc, #128]	; (8009a78 <ADC_DMA_CREATE+0x94>)
 80099f6:	2194      	movs	r1, #148	; 0x94
 80099f8:	fb01 f303 	mul.w	r3, r1, r3
 80099fc:	4413      	add	r3, r2
 80099fe:	3304      	adds	r3, #4
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	613b      	str	r3, [r7, #16]

	adc_obj_t* adc_obj = malloc(sizeof(adc_obj_t));
 8009a04:	200e      	movs	r0, #14
 8009a06:	f001 fca3 	bl	800b350 <malloc>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	60fb      	str	r3, [r7, #12]
	memset(adc_obj, 0, sizeof(adc_obj_t));
 8009a0e:	220e      	movs	r2, #14
 8009a10:	2100      	movs	r1, #0
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f001 fd58 	bl	800b4c8 <memset>

	if(NULL == adc_obj){
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d104      	bne.n	8009a28 <ADC_DMA_CREATE+0x44>
		free(adc_obj);
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f001 fc9e 	bl	800b360 <free>
		return NULL;
 8009a24:	2300      	movs	r3, #0
 8009a26:	e023      	b.n	8009a70 <ADC_DMA_CREATE+0x8c>
	}

	adc_obj->adc_id = id;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	79fa      	ldrb	r2, [r7, #7]
 8009a2c:	721a      	strb	r2, [r3, #8]
	adc_obj->sample_num = adc_id_inf[id].sample_num;
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	4a11      	ldr	r2, [pc, #68]	; (8009a78 <ADC_DMA_CREATE+0x94>)
 8009a32:	2194      	movs	r1, #148	; 0x94
 8009a34:	fb01 f303 	mul.w	r3, r1, r3
 8009a38:	4413      	add	r3, r2
 8009a3a:	3308      	adds	r3, #8
 8009a3c:	881a      	ldrh	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	815a      	strh	r2, [r3, #10]
	adc_obj->ch_num = hadc->Init.NbrOfConversion;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	819a      	strh	r2, [r3, #12]
	num_adc_val = adc_obj->sample_num * adc_obj->ch_num;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	895a      	ldrh	r2, [r3, #10]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	899b      	ldrh	r3, [r3, #12]
 8009a54:	fb12 f303 	smulbb	r3, r2, r3
 8009a58:	82fb      	strh	r3, [r7, #22]

	HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED);
 8009a5a:	217f      	movs	r1, #127	; 0x7f
 8009a5c:	6938      	ldr	r0, [r7, #16]
 8009a5e:	f7f9 fcbf 	bl	80033e0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t *)&adc_obj->val, num_adc_val);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	8afa      	ldrh	r2, [r7, #22]
 8009a66:	4619      	mov	r1, r3
 8009a68:	6938      	ldr	r0, [r7, #16]
 8009a6a:	f7f8 fe4f 	bl	800270c <HAL_ADC_Start_DMA>
	return adc_obj;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3718      	adds	r7, #24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	200000d0 	.word	0x200000d0

08009a7c <Get_ADC_VAL_CH>:
uint16_t Get_ADC_VAL_CH(struct adc_obj_t* adc_obj, ADC_CH_e ch){
 8009a7c:	b490      	push	{r4, r7}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]
	uint32_t sum = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60fb      	str	r3, [r7, #12]
	uint16_t i = 0, val = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	817b      	strh	r3, [r7, #10]
 8009a90:	2300      	movs	r3, #0
 8009a92:	813b      	strh	r3, [r7, #8]
	for(i = 0; i < adc_obj->sample_num; i++){
 8009a94:	2300      	movs	r3, #0
 8009a96:	817b      	strh	r3, [r7, #10]
 8009a98:	e01e      	b.n	8009ad8 <Get_ADC_VAL_CH+0x5c>
		sum += adc_obj->val[i * adc_obj->ch_num + adc_id_inf[adc_obj->adc_id].ch_rank[ch].rank];
 8009a9a:	897b      	ldrh	r3, [r7, #10]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	8992      	ldrh	r2, [r2, #12]
 8009aa0:	fb02 f303 	mul.w	r3, r2, r3
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	7a1b      	ldrb	r3, [r3, #8]
 8009aaa:	461c      	mov	r4, r3
 8009aac:	78fb      	ldrb	r3, [r7, #3]
 8009aae:	4913      	ldr	r1, [pc, #76]	; (8009afc <Get_ADC_VAL_CH+0x80>)
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	00da      	lsls	r2, r3, #3
 8009ab4:	2394      	movs	r3, #148	; 0x94
 8009ab6:	fb04 f303 	mul.w	r3, r4, r3
 8009aba:	4413      	add	r3, r2
 8009abc:	440b      	add	r3, r1
 8009abe:	3308      	adds	r3, #8
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	18c2      	adds	r2, r0, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009aca:	461a      	mov	r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < adc_obj->sample_num; i++){
 8009ad2:	897b      	ldrh	r3, [r7, #10]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	817b      	strh	r3, [r7, #10]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	895b      	ldrh	r3, [r3, #10]
 8009adc:	897a      	ldrh	r2, [r7, #10]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d3db      	bcc.n	8009a9a <Get_ADC_VAL_CH+0x1e>
	}
	val = sum / adc_obj->sample_num;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	895b      	ldrh	r3, [r3, #10]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aee:	813b      	strh	r3, [r7, #8]
	return val;
 8009af0:	893b      	ldrh	r3, [r7, #8]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bc90      	pop	{r4, r7}
 8009afa:	4770      	bx	lr
 8009afc:	200000d0 	.word	0x200000d0

08009b00 <GPIO_SetPinOut>:
		{PORT_E, GPIOE},
		{PORT_F, GPIOF},
		{PORT_G, GPIOG},
};

void GPIO_SetPinOut(gpio_port_id port_id, gpio_pin_id pin_id){
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	460a      	mov	r2, r1
 8009b0a:	71fb      	strb	r3, [r7, #7]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;   /*!< Specifies the operating mode for the selected pins.
 8009b10:	2301      	movs	r3, #1
 8009b12:	613b      	str	r3, [r7, #16]
                           	   	   	   	   	   	   	   This parameter can be a value of @ref GPIO_mode */
	GPIO_InitStruct.Pin = s_gpio_pin[pin_id].pin; /*!< Specifies the GPIO pins to be configured.
 8009b14:	79bb      	ldrb	r3, [r7, #6]
 8009b16:	4a0b      	ldr	r2, [pc, #44]	; (8009b44 <GPIO_SetPinOut+0x44>)
 8009b18:	00db      	lsls	r3, r3, #3
 8009b1a:	4413      	add	r3, r2
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	60fb      	str	r3, [r7, #12]
                           	   	   	   	   	   	   	   This parameter can be any value of @ref GPIO_pins */
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; /*!< Specifies the speed for the selected pins.
 8009b20:	2302      	movs	r3, #2
 8009b22:	61bb      	str	r3, [r7, #24]
                           	   	   	   	   	   	   	   This parameter can be a value of @ref GPIO_speed */
	HAL_GPIO_Init(s_gpio_port[port_id].port, &GPIO_InitStruct);
 8009b24:	79fb      	ldrb	r3, [r7, #7]
 8009b26:	4a08      	ldr	r2, [pc, #32]	; (8009b48 <GPIO_SetPinOut+0x48>)
 8009b28:	00db      	lsls	r3, r3, #3
 8009b2a:	4413      	add	r3, r2
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	f107 020c 	add.w	r2, r7, #12
 8009b32:	4611      	mov	r1, r2
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fa f91f 	bl	8003d78 <HAL_GPIO_Init>
	return;
 8009b3a:	bf00      	nop
}
 8009b3c:	3720      	adds	r7, #32
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	200001f8 	.word	0x200001f8
 8009b48:	20000278 	.word	0x20000278

08009b4c <GPIO_SetPinIn>:

void GPIO_SetPinIn(gpio_port_id port_id, gpio_pin_id pin_id, uint32_t PULLUPDOWN){
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b088      	sub	sp, #32
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4603      	mov	r3, r0
 8009b54:	603a      	str	r2, [r7, #0]
 8009b56:	71fb      	strb	r3, [r7, #7]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	71bb      	strb	r3, [r7, #6]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;      	/*!< Input Floating Mode                   	*/
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull  = PULLUPDOWN;				/*!< Input state pull-up or pull-down		*/
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;	/*!< Specifies the speed for the selected pins.
 8009b64:	2302      	movs	r3, #2
 8009b66:	61bb      	str	r3, [r7, #24]
                           	   	   	   	   	   	   	   This parameter can be a value of @ref GPIO_speed */
	GPIO_InitStruct.Pin = s_gpio_pin[pin_id].pin;
 8009b68:	79bb      	ldrb	r3, [r7, #6]
 8009b6a:	4a0a      	ldr	r2, [pc, #40]	; (8009b94 <GPIO_SetPinIn+0x48>)
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	4413      	add	r3, r2
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(s_gpio_port[port_id].port, &GPIO_InitStruct);
 8009b74:	79fb      	ldrb	r3, [r7, #7]
 8009b76:	4a08      	ldr	r2, [pc, #32]	; (8009b98 <GPIO_SetPinIn+0x4c>)
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	4413      	add	r3, r2
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f107 020c 	add.w	r2, r7, #12
 8009b82:	4611      	mov	r1, r2
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fa f8f7 	bl	8003d78 <HAL_GPIO_Init>
	return;
 8009b8a:	bf00      	nop
}
 8009b8c:	3720      	adds	r7, #32
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	200001f8 	.word	0x200001f8
 8009b98:	20000278 	.word	0x20000278

08009b9c <GPIO_WritePin>:

void GPIO_WritePin(gpio_port_id port_id, gpio_pin_id pin_id, gpio_state state){
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	71fb      	strb	r3, [r7, #7]
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	71bb      	strb	r3, [r7, #6]
 8009baa:	4613      	mov	r3, r2
 8009bac:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(s_gpio_port[port_id].port, s_gpio_pin[pin_id].pin, state);
 8009bae:	79fb      	ldrb	r3, [r7, #7]
 8009bb0:	4a08      	ldr	r2, [pc, #32]	; (8009bd4 <GPIO_WritePin+0x38>)
 8009bb2:	00db      	lsls	r3, r3, #3
 8009bb4:	4413      	add	r3, r2
 8009bb6:	6858      	ldr	r0, [r3, #4]
 8009bb8:	79bb      	ldrb	r3, [r7, #6]
 8009bba:	4a07      	ldr	r2, [pc, #28]	; (8009bd8 <GPIO_WritePin+0x3c>)
 8009bbc:	00db      	lsls	r3, r3, #3
 8009bbe:	4413      	add	r3, r2
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	797a      	ldrb	r2, [r7, #5]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	f7fa fb3a 	bl	8004240 <HAL_GPIO_WritePin>
}
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20000278 	.word	0x20000278
 8009bd8:	200001f8 	.word	0x200001f8

08009bdc <OpenUart2>:
	{{1, 9600, 0, 0, 0}, 1, &OpenUart3, &SendByteUart3, &ReceiveByteUart3, null, null}};

/*=============================================================UART 2=====================================================================*/

static bool OpenUart2(int baudrate)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	huart2.Init.BaudRate = baudrate;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a0a      	ldr	r2, [pc, #40]	; (8009c10 <OpenUart2+0x34>)
 8009be8:	6053      	str	r3, [r2, #4]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8009bea:	4809      	ldr	r0, [pc, #36]	; (8009c10 <OpenUart2+0x34>)
 8009bec:	f7fb fc2e 	bl	800544c <HAL_UART_Init>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <OpenUart2+0x1e>
		return false;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	e005      	b.n	8009c06 <OpenUart2+0x2a>
	HAL_UART_Receive_IT(&huart2, uart2_data_rx_isr_buff, 1);
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	4905      	ldr	r1, [pc, #20]	; (8009c14 <OpenUart2+0x38>)
 8009bfe:	4804      	ldr	r0, [pc, #16]	; (8009c10 <OpenUart2+0x34>)
 8009c00:	f7fb fe1a 	bl	8005838 <HAL_UART_Receive_IT>

	return true;
 8009c04:	2301      	movs	r3, #1
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	200006c0 	.word	0x200006c0
 8009c14:	2000146c 	.word	0x2000146c

08009c18 <SendByteUart2>:

static bool SendByteUart2(uint8_t byte)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	ret = HAL_UART_Transmit(&huart2, &byte, 1, 10);
 8009c22:	1df9      	adds	r1, r7, #7
 8009c24:	230a      	movs	r3, #10
 8009c26:	2201      	movs	r2, #1
 8009c28:	4807      	ldr	r0, [pc, #28]	; (8009c48 <SendByteUart2+0x30>)
 8009c2a:	f7fb fc9b 	bl	8005564 <HAL_UART_Transmit>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73fb      	strb	r3, [r7, #15]
	if (ret == HAL_OK)
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <SendByteUart2+0x24>
		return true;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e000      	b.n	8009c3e <SendByteUart2+0x26>
	return false;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	200006c0 	.word	0x200006c0

08009c4c <ReceiveByteUart2>:
	}
}

// unuse funtion ReceiveByteUart1 to read, use HAL_UART_RxCpltCallback interrupt to receive and put to fifo
static bool ReceiveByteUart2(uint8_t *byte)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	ret = HAL_UART_Receive(&huart2, byte, 1, 0);
 8009c54:	2300      	movs	r3, #0
 8009c56:	2201      	movs	r2, #1
 8009c58:	6879      	ldr	r1, [r7, #4]
 8009c5a:	4807      	ldr	r0, [pc, #28]	; (8009c78 <ReceiveByteUart2+0x2c>)
 8009c5c:	f7fb fd18 	bl	8005690 <HAL_UART_Receive>
 8009c60:	4603      	mov	r3, r0
 8009c62:	73fb      	strb	r3, [r7, #15]
	if (ret == HAL_OK)
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <ReceiveByteUart2+0x22>
		return true;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e000      	b.n	8009c70 <ReceiveByteUart2+0x24>
	return false;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	200006c0 	.word	0x200006c0

08009c7c <OpenUart3>:

/*=============================================================UART 3=====================================================================*/

static bool OpenUart3(int baudrate)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
	huart3.Init.BaudRate = baudrate;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a15      	ldr	r2, [pc, #84]	; (8009cdc <OpenUart3+0x60>)
 8009c88:	6053      	str	r3, [r2, #4]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8009c8a:	4814      	ldr	r0, [pc, #80]	; (8009cdc <OpenUart3+0x60>)
 8009c8c:	f7fb fbde 	bl	800544c <HAL_UART_Init>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <OpenUart3+0x1e>
		return false;
 8009c96:	2300      	movs	r3, #0
 8009c98:	e01b      	b.n	8009cd2 <OpenUart3+0x56>
#ifdef USE_FIFO
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	480f      	ldr	r0, [pc, #60]	; (8009cdc <OpenUart3+0x60>)
 8009c9e:	f7fd fc91 	bl	80075c4 <HAL_UARTEx_SetTxFifoThreshold>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <OpenUart3+0x30>
	{
		Error_Handler();
 8009ca8:	f7f7 fd22 	bl	80016f0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8009cac:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8009cb0:	480a      	ldr	r0, [pc, #40]	; (8009cdc <OpenUart3+0x60>)
 8009cb2:	f7fd fcc5 	bl	8007640 <HAL_UARTEx_SetRxFifoThreshold>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <OpenUart3+0x44>
	{
		Error_Handler();
 8009cbc:	f7f7 fd18 	bl	80016f0 <Error_Handler>
	}
	if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8009cc0:	4806      	ldr	r0, [pc, #24]	; (8009cdc <OpenUart3+0x60>)
 8009cc2:	f7fd fc0b 	bl	80074dc <HAL_UARTEx_EnableFifoMode>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d001      	beq.n	8009cd0 <OpenUart3+0x54>
	{
		Error_Handler();
 8009ccc:	f7f7 fd10 	bl	80016f0 <Error_Handler>
	}
#else
	HAL_UART_Receive_IT(&huart3, uart3_data_rx_isr_buff, 1);
#endif
	return true;
 8009cd0:	2301      	movs	r3, #1
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20000750 	.word	0x20000750

08009ce0 <SendByteUart3>:

static bool SendByteUart3(uint8_t byte)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	ret = HAL_UART_Transmit(&huart3, &byte, 1, 10);
 8009cea:	1df9      	adds	r1, r7, #7
 8009cec:	230a      	movs	r3, #10
 8009cee:	2201      	movs	r2, #1
 8009cf0:	4807      	ldr	r0, [pc, #28]	; (8009d10 <SendByteUart3+0x30>)
 8009cf2:	f7fb fc37 	bl	8005564 <HAL_UART_Transmit>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]
	if (ret == HAL_OK)
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <SendByteUart3+0x24>
		return true;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e000      	b.n	8009d06 <SendByteUart3+0x26>
	return false;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	20000750 	.word	0x20000750

08009d14 <ReceiveByteUart3>:

// unuse funtion ReceiveByteUart1 to read, use HAL_UART_RxCpltCallback interrupt to receive and put to fifo
static bool ReceiveByteUart3(uint8_t *byte)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	if ((huart3.Instance->ISR & USART_ISR_RXNE_RXFNE) != 0)
 8009d1c:	4b0c      	ldr	r3, [pc, #48]	; (8009d50 <ReceiveByteUart3+0x3c>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	f003 0320 	and.w	r3, r3, #32
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00c      	beq.n	8009d44 <ReceiveByteUart3+0x30>
	{
		ret = HAL_UART_Receive(&huart3, byte, 1, 0);
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	4807      	ldr	r0, [pc, #28]	; (8009d50 <ReceiveByteUart3+0x3c>)
 8009d32:	f7fb fcad 	bl	8005690 <HAL_UART_Receive>
 8009d36:	4603      	mov	r3, r0
 8009d38:	73fb      	strb	r3, [r7, #15]
		if (ret == HAL_OK)
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <ReceiveByteUart3+0x30>
			return true;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e000      	b.n	8009d46 <ReceiveByteUart3+0x32>
	}
	return false;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	20000750 	.word	0x20000750

08009d54 <HAL_UART_RxCpltCallback>:

/*==================================================================================================================================*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
		uart_list[1].serial_port.length_received = rx->data_len;
		return;
	}
#endif

	if (huart == &huart2)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a08      	ldr	r2, [pc, #32]	; (8009d80 <HAL_UART_RxCpltCallback+0x2c>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d109      	bne.n	8009d78 <HAL_UART_RxCpltCallback+0x24>
	{
		EC200_UART_Handler(uart2_data_rx_isr_buff[0]);
 8009d64:	4b07      	ldr	r3, [pc, #28]	; (8009d84 <HAL_UART_RxCpltCallback+0x30>)
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7ff fd31 	bl	80097d0 <EC200_UART_Handler>
		HAL_UART_Receive_IT(huart, uart2_data_rx_isr_buff, 1);
 8009d6e:	2201      	movs	r2, #1
 8009d70:	4904      	ldr	r1, [pc, #16]	; (8009d84 <HAL_UART_RxCpltCallback+0x30>)
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7fb fd60 	bl	8005838 <HAL_UART_Receive_IT>
	}

}
 8009d78:	bf00      	nop
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	200006c0 	.word	0x200006c0
 8009d84:	2000146c 	.word	0x2000146c

08009d88 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
		HAL_UART_DeInit(&huart3);
		HAL_UART_Init(&huart3);
		HAL_UART_Receive_IT(&huart3, uart3_data_rx_isr_buff, 1);
	}
#endif
	if (huart == &huart2)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a06      	ldr	r2, [pc, #24]	; (8009dac <HAL_UART_ErrorCallback+0x24>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d105      	bne.n	8009da4 <HAL_UART_ErrorCallback+0x1c>
	{
		HAL_UART_DeInit(&huart2);
 8009d98:	4804      	ldr	r0, [pc, #16]	; (8009dac <HAL_UART_ErrorCallback+0x24>)
 8009d9a:	f7fb fba7 	bl	80054ec <HAL_UART_DeInit>
		HAL_UART_Init(&huart2);
 8009d9e:	4803      	ldr	r0, [pc, #12]	; (8009dac <HAL_UART_ErrorCallback+0x24>)
 8009da0:	f7fb fb54 	bl	800544c <HAL_UART_Init>
	}

}
 8009da4:	bf00      	nop
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	200006c0 	.word	0x200006c0

08009db0 <SerialHandle>:

void SerialHandle(serial_obj *serial)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
	uint8_t data;
	bool ret;
	fifo *tx = uart_list[serial->port].tx_buf;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4a2f      	ldr	r2, [pc, #188]	; (8009e7c <SerialHandle+0xcc>)
 8009dc0:	232c      	movs	r3, #44	; 0x2c
 8009dc2:	fb01 f303 	mul.w	r3, r1, r3
 8009dc6:	4413      	add	r3, r2
 8009dc8:	3324      	adds	r3, #36	; 0x24
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	617b      	str	r3, [r7, #20]
	fifo *rx = uart_list[serial->port].rx_buf;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	881b      	ldrh	r3, [r3, #0]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4a29      	ldr	r2, [pc, #164]	; (8009e7c <SerialHandle+0xcc>)
 8009dd6:	232c      	movs	r3, #44	; 0x2c
 8009dd8:	fb01 f303 	mul.w	r3, r1, r3
 8009ddc:	4413      	add	r3, r2
 8009dde:	3328      	adds	r3, #40	; 0x28
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	613b      	str	r3, [r7, #16]
send:
	if (tx->data_len > 0)
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	891b      	ldrh	r3, [r3, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d020      	beq.n	8009e2e <SerialHandle+0x7e>
	{
		tx->Peak(tx, &data);
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	f107 020e 	add.w	r2, r7, #14
 8009df4:	4611      	mov	r1, r2
 8009df6:	6978      	ldr	r0, [r7, #20]
 8009df8:	4798      	blx	r3
		ret = uart_list[serial->port].SendByte(data);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	881b      	ldrh	r3, [r3, #0]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4a1e      	ldr	r2, [pc, #120]	; (8009e7c <SerialHandle+0xcc>)
 8009e02:	232c      	movs	r3, #44	; 0x2c
 8009e04:	fb01 f303 	mul.w	r3, r1, r3
 8009e08:	4413      	add	r3, r2
 8009e0a:	331c      	adds	r3, #28
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	7bba      	ldrb	r2, [r7, #14]
 8009e10:	4610      	mov	r0, r2
 8009e12:	4798      	blx	r3
 8009e14:	4603      	mov	r3, r0
 8009e16:	73fb      	strb	r3, [r7, #15]
		if (ret == true)
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d007      	beq.n	8009e2e <SerialHandle+0x7e>
		{
			tx->Get(tx, &data);
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	f107 020e 	add.w	r2, r7, #14
 8009e26:	4611      	mov	r1, r2
 8009e28:	6978      	ldr	r0, [r7, #20]
 8009e2a:	4798      	blx	r3
			goto send;
 8009e2c:	e7da      	b.n	8009de4 <SerialHandle+0x34>
		}
	}
#ifdef USE_FIFO
read:
 8009e2e:	bf00      	nop
	if (uart_list[serial->port].ReceiveByte(&data) == true)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	881b      	ldrh	r3, [r3, #0]
 8009e34:	4619      	mov	r1, r3
 8009e36:	4a11      	ldr	r2, [pc, #68]	; (8009e7c <SerialHandle+0xcc>)
 8009e38:	232c      	movs	r3, #44	; 0x2c
 8009e3a:	fb01 f303 	mul.w	r3, r1, r3
 8009e3e:	4413      	add	r3, r2
 8009e40:	3320      	adds	r3, #32
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f107 020e 	add.w	r2, r7, #14
 8009e48:	4610      	mov	r0, r2
 8009e4a:	4798      	blx	r3
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d007      	beq.n	8009e62 <SerialHandle+0xb2>
	{
		rx->Put(rx, &data);
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	f107 020e 	add.w	r2, r7, #14
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	6938      	ldr	r0, [r7, #16]
 8009e5e:	4798      	blx	r3
		goto read;
 8009e60:	e7e6      	b.n	8009e30 <SerialHandle+0x80>
	}
	serial->length_received = rx->data_len;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	891a      	ldrh	r2, [r3, #8]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	821a      	strh	r2, [r3, #16]
	serial->length_send = tx->data_len;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	891a      	ldrh	r2, [r3, #8]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	825a      	strh	r2, [r3, #18]
#endif
}
 8009e72:	bf00      	nop
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	200002b0 	.word	0x200002b0

08009e80 <create_serial>:
// End porting hardware

serial_obj *create_serial(uint16_t port, uint32_t baudrate, uint16_t tx_size, uint16_t rx_size)
{
 8009e80:	b590      	push	{r4, r7, lr}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60b9      	str	r1, [r7, #8]
 8009e88:	4611      	mov	r1, r2
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	81fb      	strh	r3, [r7, #14]
 8009e90:	460b      	mov	r3, r1
 8009e92:	81bb      	strh	r3, [r7, #12]
 8009e94:	4613      	mov	r3, r2
 8009e96:	80fb      	strh	r3, [r7, #6]
	serial_obj *serial;
	serial = &(uart_list[port].serial_port);
 8009e98:	89fb      	ldrh	r3, [r7, #14]
 8009e9a:	222c      	movs	r2, #44	; 0x2c
 8009e9c:	fb02 f303 	mul.w	r3, r2, r3
 8009ea0:	4a27      	ldr	r2, [pc, #156]	; (8009f40 <create_serial+0xc0>)
 8009ea2:	4413      	add	r3, r2
 8009ea4:	617b      	str	r3, [r7, #20]
	serial->port = port;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	89fa      	ldrh	r2, [r7, #14]
 8009eaa:	801a      	strh	r2, [r3, #0]
	uart_list[port].tx_buf = create_fifo(tx_size, 1);
 8009eac:	89fc      	ldrh	r4, [r7, #14]
 8009eae:	89bb      	ldrh	r3, [r7, #12]
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fe fb28 	bl	8008508 <create_fifo>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	4921      	ldr	r1, [pc, #132]	; (8009f40 <create_serial+0xc0>)
 8009ebc:	232c      	movs	r3, #44	; 0x2c
 8009ebe:	fb04 f303 	mul.w	r3, r4, r3
 8009ec2:	440b      	add	r3, r1
 8009ec4:	3324      	adds	r3, #36	; 0x24
 8009ec6:	601a      	str	r2, [r3, #0]
	uart_list[port].rx_buf = create_fifo(rx_size, 1);
 8009ec8:	89fc      	ldrh	r4, [r7, #14]
 8009eca:	88fb      	ldrh	r3, [r7, #6]
 8009ecc:	2101      	movs	r1, #1
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe fb1a 	bl	8008508 <create_fifo>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	491a      	ldr	r1, [pc, #104]	; (8009f40 <create_serial+0xc0>)
 8009ed8:	232c      	movs	r3, #44	; 0x2c
 8009eda:	fb04 f303 	mul.w	r3, r4, r3
 8009ede:	440b      	add	r3, r1
 8009ee0:	3328      	adds	r3, #40	; 0x28
 8009ee2:	601a      	str	r2, [r3, #0]
	if (uart_list[port].tx_buf == null || uart_list[port].rx_buf == null)
 8009ee4:	89fb      	ldrh	r3, [r7, #14]
 8009ee6:	4a16      	ldr	r2, [pc, #88]	; (8009f40 <create_serial+0xc0>)
 8009ee8:	212c      	movs	r1, #44	; 0x2c
 8009eea:	fb01 f303 	mul.w	r3, r1, r3
 8009eee:	4413      	add	r3, r2
 8009ef0:	3324      	adds	r3, #36	; 0x24
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d009      	beq.n	8009f0c <create_serial+0x8c>
 8009ef8:	89fb      	ldrh	r3, [r7, #14]
 8009efa:	4a11      	ldr	r2, [pc, #68]	; (8009f40 <create_serial+0xc0>)
 8009efc:	212c      	movs	r1, #44	; 0x2c
 8009efe:	fb01 f303 	mul.w	r3, r1, r3
 8009f02:	4413      	add	r3, r2
 8009f04:	3328      	adds	r3, #40	; 0x28
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d100      	bne.n	8009f0e <create_serial+0x8e>
		while (1)
 8009f0c:	e7fe      	b.n	8009f0c <create_serial+0x8c>
			;

	serial->tx_size = tx_size;
 8009f0e:	89ba      	ldrh	r2, [r7, #12]
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	609a      	str	r2, [r3, #8]
	serial->rx_size = rx_size;
 8009f14:	88fa      	ldrh	r2, [r7, #6]
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	60da      	str	r2, [r3, #12]
	serial->baudrate = baudrate;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	605a      	str	r2, [r3, #4]
	uart_list[port].OpenUart(baudrate);
 8009f20:	89fb      	ldrh	r3, [r7, #14]
 8009f22:	4a07      	ldr	r2, [pc, #28]	; (8009f40 <create_serial+0xc0>)
 8009f24:	212c      	movs	r1, #44	; 0x2c
 8009f26:	fb01 f303 	mul.w	r3, r1, r3
 8009f2a:	4413      	add	r3, r2
 8009f2c:	3318      	adds	r3, #24
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	4610      	mov	r0, r2
 8009f34:	4798      	blx	r3
	return serial;
 8009f36:	697b      	ldr	r3, [r7, #20]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	371c      	adds	r7, #28
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd90      	pop	{r4, r7, pc}
 8009f40:	200002b0 	.word	0x200002b0

08009f44 <SerialSendBuf>:

bool SerialSendBuf(serial_obj *serial, uint8_t *data, uint16_t len)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	80fb      	strh	r3, [r7, #6]
	bool ret;
	fifo *tx = uart_list[serial->port].tx_buf;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	4619      	mov	r1, r3
 8009f58:	4a0c      	ldr	r2, [pc, #48]	; (8009f8c <SerialSendBuf+0x48>)
 8009f5a:	232c      	movs	r3, #44	; 0x2c
 8009f5c:	fb01 f303 	mul.w	r3, r1, r3
 8009f60:	4413      	add	r3, r2
 8009f62:	3324      	adds	r3, #36	; 0x24
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	617b      	str	r3, [r7, #20]
	ret = tx->Puts(tx, data, len);
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	88fa      	ldrh	r2, [r7, #6]
 8009f6e:	68b9      	ldr	r1, [r7, #8]
 8009f70:	6978      	ldr	r0, [r7, #20]
 8009f72:	4798      	blx	r3
 8009f74:	4603      	mov	r3, r0
 8009f76:	74fb      	strb	r3, [r7, #19]
	serial->length_send = tx->data_len;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	891a      	ldrh	r2, [r3, #8]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	825a      	strh	r2, [r3, #18]

	return ret;
 8009f80:	7cfb      	ldrb	r3, [r7, #19]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	200002b0 	.word	0x200002b0

08009f90 <SerialReadBuf>:

uint16_t SerialReadBuf(serial_obj *serial, uint8_t *data, uint16_t len)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	80fb      	strh	r3, [r7, #6]
	fifo *rx = uart_list[serial->port].rx_buf;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	881b      	ldrh	r3, [r3, #0]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	4a0d      	ldr	r2, [pc, #52]	; (8009fdc <SerialReadBuf+0x4c>)
 8009fa6:	232c      	movs	r3, #44	; 0x2c
 8009fa8:	fb01 f303 	mul.w	r3, r1, r3
 8009fac:	4413      	add	r3, r2
 8009fae:	3328      	adds	r3, #40	; 0x28
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	617b      	str	r3, [r7, #20]
	if (rx->Gets(rx, data, len) == true)
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb8:	88fa      	ldrh	r2, [r7, #6]
 8009fba:	68b9      	ldr	r1, [r7, #8]
 8009fbc:	6978      	ldr	r0, [r7, #20]
 8009fbe:	4798      	blx	r3
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d005      	beq.n	8009fd2 <SerialReadBuf+0x42>
	{
		serial->length_received = rx->data_len;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	891a      	ldrh	r2, [r3, #8]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	821a      	strh	r2, [r3, #16]
		return len;
 8009fce:	88fb      	ldrh	r3, [r7, #6]
 8009fd0:	e000      	b.n	8009fd4 <SerialReadBuf+0x44>
	}
	return 0;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	200002b0 	.word	0x200002b0

08009fe0 <Timer1kHzAddCallback>:


static int current_index_callback_1k_fn = 0;

bool Timer1kHzAddCallback(TimerfuncCb fn)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
	if(current_index_callback_1k_fn < MAX_TIMER_SERVICE)
 8009fe8:	4b0b      	ldr	r3, [pc, #44]	; (800a018 <Timer1kHzAddCallback+0x38>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b04      	cmp	r3, #4
 8009fee:	dc0c      	bgt.n	800a00a <Timer1kHzAddCallback+0x2a>
	{
		fnFunctionTimer1kHzISR[current_index_callback_1k_fn] = fn;
 8009ff0:	4b09      	ldr	r3, [pc, #36]	; (800a018 <Timer1kHzAddCallback+0x38>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4909      	ldr	r1, [pc, #36]	; (800a01c <Timer1kHzAddCallback+0x3c>)
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		current_index_callback_1k_fn++;
 8009ffc:	4b06      	ldr	r3, [pc, #24]	; (800a018 <Timer1kHzAddCallback+0x38>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3301      	adds	r3, #1
 800a002:	4a05      	ldr	r2, [pc, #20]	; (800a018 <Timer1kHzAddCallback+0x38>)
 800a004:	6013      	str	r3, [r2, #0]
		return true;
 800a006:	2301      	movs	r3, #1
 800a008:	e000      	b.n	800a00c <Timer1kHzAddCallback+0x2c>
	}
	return false;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	20001484 	.word	0x20001484
 800a01c:	20001470 	.word	0x20001470

0800a020 <TimerTick1kHz>:

void TimerTick1kHz()
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
	int i = 0;
 800a026:	2300      	movs	r3, #0
 800a028:	607b      	str	r3, [r7, #4]
	for (i=0; i < current_index_callback_1k_fn; i++)
 800a02a:	2300      	movs	r3, #0
 800a02c:	607b      	str	r3, [r7, #4]
 800a02e:	e00d      	b.n	800a04c <TimerTick1kHz+0x2c>
	{
		if (fnFunctionTimer1kHzISR[i] != NULL)
 800a030:	4a0b      	ldr	r2, [pc, #44]	; (800a060 <TimerTick1kHz+0x40>)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d004      	beq.n	800a046 <TimerTick1kHz+0x26>
		{
			fnFunctionTimer1kHzISR[i]();
 800a03c:	4a08      	ldr	r2, [pc, #32]	; (800a060 <TimerTick1kHz+0x40>)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a044:	4798      	blx	r3
	for (i=0; i < current_index_callback_1k_fn; i++)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	3301      	adds	r3, #1
 800a04a:	607b      	str	r3, [r7, #4]
 800a04c:	4b05      	ldr	r3, [pc, #20]	; (800a064 <TimerTick1kHz+0x44>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	429a      	cmp	r2, r3
 800a054:	dbec      	blt.n	800a030 <TimerTick1kHz+0x10>
		}
	}
}
 800a056:	bf00      	nop
 800a058:	bf00      	nop
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20001470 	.word	0x20001470
 800a064:	20001484 	.word	0x20001484

0800a068 <TIM_GetCounterMode>:
//{
//  WRITE_REG(advancetimerobjX->advtimer->SR, ~(TIM_SR_B2IF));
//}

__STATIC_INLINE uint32_t TIM_GetCounterMode(timer_advance_obj_t *advancetimerobjX)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  uint32_t counter_mode;

  counter_mode = (uint32_t)(READ_BIT(advancetimerobjX->advtimer->CR1, TIM_CR1_CMS));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a07a:	60fb      	str	r3, [r7, #12]
  return counter_mode;
 800a07c:	68fb      	ldr	r3, [r7, #12]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <TIM_SetAutoReload>:

__STATIC_INLINE void TIM_SetAutoReload(timer_advance_obj_t *advancetimerobjX, uint32_t AutoReload)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b083      	sub	sp, #12
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	6039      	str	r1, [r7, #0]
  WRITE_REG(advancetimerobjX->advtimer->ARR, AutoReload);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <create_advance_timer>:
static timeradvanceTable_t timeradvanceTable[2] = {
		{TIMER_ADVANCE_ID_1, (TIM_TypeDef*)TIM1},
		{TIMER_ADVANCE_ID_2, (TIM_TypeDef*)TIM15},
};

timer_advance_obj_t* create_advance_timer(TIMER_ADVANCE_ID_E id, uint32_t Frequency){
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	6039      	str	r1, [r7, #0]
 800a0b2:	71fb      	strb	r3, [r7, #7]
	timer_advance_obj_t* timer_advance_obj= malloc(sizeof(timer_advance_obj_t));
 800a0b4:	2008      	movs	r0, #8
 800a0b6:	f001 f94b 	bl	800b350 <malloc>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	60bb      	str	r3, [r7, #8]
	memset(timer_advance_obj, 0 ,sizeof(timer_advance_obj_t));
 800a0be:	2208      	movs	r2, #8
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	68b8      	ldr	r0, [r7, #8]
 800a0c4:	f001 fa00 	bl	800b4c8 <memset>

	if(id >= 0 && id <= 2){
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d80a      	bhi.n	800a0e4 <create_advance_timer+0x3c>
		timer_advance_obj->advtimer 		= timeradvanceTable[id].timeradvance;
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	4a35      	ldr	r2, [pc, #212]	; (800a1a8 <create_advance_timer+0x100>)
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	4413      	add	r3, r2
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	605a      	str	r2, [r3, #4]
		timer_advance_obj->advance_timer_id = (TIMER_ADVANCE_ID_E)id;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	79fa      	ldrb	r2, [r7, #7]
 800a0e0:	701a      	strb	r2, [r3, #0]
 800a0e2:	e005      	b.n	800a0f0 <create_advance_timer+0x48>
	}
	else{
		timer_advance_obj->advtimer 		= NULL;
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	605a      	str	r2, [r3, #4]
		timer_advance_obj->advance_timer_id = 0;
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	701a      	strb	r2, [r3, #0]
	}
	float PeriodTemp = 0;
 800a0f0:	f04f 0300 	mov.w	r3, #0
 800a0f4:	60fb      	str	r3, [r7, #12]
	if(TIM_GetCounterMode(timer_advance_obj) == 0){
 800a0f6:	68b8      	ldr	r0, [r7, #8]
 800a0f8:	f7ff ffb6 	bl	800a068 <TIM_GetCounterMode>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d11a      	bne.n	800a138 <create_advance_timer+0x90>
		PeriodTemp = ((float)TIMER_ADVANCE_TIMEBASE_CLOCK/(float)Frequency) + 0.7;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	ee07 3a90 	vmov	s15, r3
 800a108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a10c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800a1ac <create_advance_timer+0x104>
 800a110:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a114:	ee16 0a90 	vmov	r0, s13
 800a118:	f7f6 f9f4 	bl	8000504 <__aeabi_f2d>
 800a11c:	a320      	add	r3, pc, #128	; (adr r3, 800a1a0 <create_advance_timer+0xf8>)
 800a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a122:	f7f6 f891 	bl	8000248 <__adddf3>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	4610      	mov	r0, r2
 800a12c:	4619      	mov	r1, r3
 800a12e:	f7f6 fa41 	bl	80005b4 <__aeabi_d2f>
 800a132:	4603      	mov	r3, r0
 800a134:	60fb      	str	r3, [r7, #12]
 800a136:	e01a      	b.n	800a16e <create_advance_timer+0xc6>
	}
	else{
		PeriodTemp = (float)TIMER_ADVANCE_TIMEBASE_CLOCK/(float)(Frequency*2) + 0.7;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	ee07 3a90 	vmov	s15, r3
 800a140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a144:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a1ac <create_advance_timer+0x104>
 800a148:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a14c:	ee16 0a90 	vmov	r0, s13
 800a150:	f7f6 f9d8 	bl	8000504 <__aeabi_f2d>
 800a154:	a312      	add	r3, pc, #72	; (adr r3, 800a1a0 <create_advance_timer+0xf8>)
 800a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15a:	f7f6 f875 	bl	8000248 <__adddf3>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4610      	mov	r0, r2
 800a164:	4619      	mov	r1, r3
 800a166:	f7f6 fa25 	bl	80005b4 <__aeabi_d2f>
 800a16a:	4603      	mov	r3, r0
 800a16c:	60fb      	str	r3, [r7, #12]
	}
	TIM_SetAutoReload(timer_advance_obj , (uint32_t)PeriodTemp);
 800a16e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a176:	ee17 1a90 	vmov	r1, s15
 800a17a:	68b8      	ldr	r0, [r7, #8]
 800a17c:	f7ff ff85 	bl	800a08a <TIM_SetAutoReload>
	timer_advance_obj->TimerPeriod = (uint32_t)PeriodTemp;
 800a180:	edd7 7a03 	vldr	s15, [r7, #12]
 800a184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a188:	ee17 3a90 	vmov	r3, s15
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	805a      	strh	r2, [r3, #2]
	return timer_advance_obj;
 800a192:	68bb      	ldr	r3, [r7, #8]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	f3af 8000 	nop.w
 800a1a0:	66666666 	.word	0x66666666
 800a1a4:	3fe66666 	.word	0x3fe66666
 800a1a8:	20000308 	.word	0x20000308
 800a1ac:	4d221fe8 	.word	0x4d221fe8

0800a1b0 <AppMainInit>:
static BackgroundCb BackgroundTask[MAX_BACKGOUND_TASK] = {NULL};
static int current_index_background = 0;
static void MainAddBackgroundProcess(BackgroundCb fn);


void AppMainInit(){
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	af00      	add	r7, sp, #0

		serial_init();
 800a1b4:	f000 fc3c 	bl	800aa30 <serial_init>
//	  	serial_test_1 = create_serial(1, 115200, 512, 512);
		debug_modbus = create_modbus(118, serial_test_1);
 800a1b8:	4b0f      	ldr	r3, [pc, #60]	; (800a1f8 <AppMainInit+0x48>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4619      	mov	r1, r3
 800a1be:	2076      	movs	r0, #118	; 0x76
 800a1c0:	f7fe fe70 	bl	8008ea4 <create_modbus>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	4a0d      	ldr	r2, [pc, #52]	; (800a1fc <AppMainInit+0x4c>)
 800a1c8:	6013      	str	r3, [r2, #0]
		EC200_Init();
 800a1ca:	f7ff fad7 	bl	800977c <EC200_Init>
		initGlobalVariables();
 800a1ce:	f000 fc41 	bl	800aa54 <initGlobalVariables>
		MainAddBackgroundProcess(&ModbusBackground);
 800a1d2:	480b      	ldr	r0, [pc, #44]	; (800a200 <AppMainInit+0x50>)
 800a1d4:	f000 f838 	bl	800a248 <MainAddBackgroundProcess>
		MainAddBackgroundProcess(&UpdateAllVariable);
 800a1d8:	480a      	ldr	r0, [pc, #40]	; (800a204 <AppMainInit+0x54>)
 800a1da:	f000 f835 	bl	800a248 <MainAddBackgroundProcess>

//		MainAddBackgroundProcess(&TEST);
//		send_data();
//		MainAddBackgroundProcess(&receive_string_data);
		Timer1kHzAddCallback(&Modbus1kHz);
 800a1de:	480a      	ldr	r0, [pc, #40]	; (800a208 <AppMainInit+0x58>)
 800a1e0:	f7ff fefe 	bl	8009fe0 <Timer1kHzAddCallback>

		Pin_Func_Init();
 800a1e4:	f7ff f940 	bl	8009468 <Pin_Func_Init>
		Signal_Init();
 800a1e8:	f7ff fa1e 	bl	8009628 <Signal_Init>
		ControlDcDcBoostInit();
 800a1ec:	f000 f878 	bl	800a2e0 <ControlDcDcBoostInit>
//		ControlDcDcBuckInit();
//		ControlDcDcDumpInit();
		StateInit();
 800a1f0:	f000 fca2 	bl	800ab38 <StateInit>


}
 800a1f4:	bf00      	nop
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	20001494 	.word	0x20001494
 800a1fc:	20001490 	.word	0x20001490
 800a200:	08008f79 	.word	0x08008f79
 800a204:	0800aa7d 	.word	0x0800aa7d
 800a208:	08008f29 	.word	0x08008f29

0800a20c <AppMainProcess>:

void AppMainProcess(){
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < MAX_BACKGOUND_TASK; i++){
 800a212:	2300      	movs	r3, #0
 800a214:	607b      	str	r3, [r7, #4]
 800a216:	e00d      	b.n	800a234 <AppMainProcess+0x28>
		if(BackgroundTask[i] != NULL){
 800a218:	4a0a      	ldr	r2, [pc, #40]	; (800a244 <AppMainProcess+0x38>)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d004      	beq.n	800a22e <AppMainProcess+0x22>
			BackgroundTask[i]();
 800a224:	4a07      	ldr	r2, [pc, #28]	; (800a244 <AppMainProcess+0x38>)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a22c:	4798      	blx	r3
	for(i = 0; i < MAX_BACKGOUND_TASK; i++){
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3301      	adds	r3, #1
 800a232:	607b      	str	r3, [r7, #4]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b05      	cmp	r3, #5
 800a238:	ddee      	ble.n	800a218 <AppMainProcess+0xc>
		}
	}
}
 800a23a:	bf00      	nop
 800a23c:	bf00      	nop
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20001498 	.word	0x20001498

0800a248 <MainAddBackgroundProcess>:

static void MainAddBackgroundProcess(BackgroundCb fn){
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
	if(current_index_background < MAX_BACKGOUND_TASK){
 800a250:	4b0a      	ldr	r3, [pc, #40]	; (800a27c <MainAddBackgroundProcess+0x34>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2b05      	cmp	r3, #5
 800a256:	dc0a      	bgt.n	800a26e <MainAddBackgroundProcess+0x26>
		BackgroundTask[current_index_background] = fn;
 800a258:	4b08      	ldr	r3, [pc, #32]	; (800a27c <MainAddBackgroundProcess+0x34>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4908      	ldr	r1, [pc, #32]	; (800a280 <MainAddBackgroundProcess+0x38>)
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		current_index_background++;
 800a264:	4b05      	ldr	r3, [pc, #20]	; (800a27c <MainAddBackgroundProcess+0x34>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	3301      	adds	r3, #1
 800a26a:	4a04      	ldr	r2, [pc, #16]	; (800a27c <MainAddBackgroundProcess+0x34>)
 800a26c:	6013      	str	r3, [r2, #0]
	}
}
 800a26e:	bf00      	nop
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	200014b0 	.word	0x200014b0
 800a280:	20001498 	.word	0x20001498

0800a284 <SetCompareCH1>:
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR1, CompareValue);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a296:	bf00      	nop
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <SetCompareCH2>:
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR2, CompareValue);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	683a      	ldr	r2, [r7, #0]
 800a2b2:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <SetCompareCH4>:
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR4, CompareValue);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 800a2d2:	bf00      	nop
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
	...

0800a2e0 <ControlDcDcBoostInit>:
	s_ptimer_pwm = create_advance_timer(TIMER_ADVANCE_ID_1, FREQUENCY_SAMPLE_WIND_BUCK_BOOST);
	PwmWindBuckInit(s_ptimer_pwm, &DcDcProcess);
}

void ControlDcDcBoostInit(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
	s_ptimer_pwm = create_advance_timer(TIMER_ADVANCE_ID_1, FREQUENCY_SAMPLE_WIND_BUCK_BOOST);
 800a2e4:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	f7ff fedd 	bl	800a0a8 <create_advance_timer>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	4a04      	ldr	r2, [pc, #16]	; (800a304 <ControlDcDcBoostInit+0x24>)
 800a2f2:	6013      	str	r3, [r2, #0]
	PwmWindBoostInit(s_ptimer_pwm, &DcDcProcess);
 800a2f4:	4b03      	ldr	r3, [pc, #12]	; (800a304 <ControlDcDcBoostInit+0x24>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4903      	ldr	r1, [pc, #12]	; (800a308 <ControlDcDcBoostInit+0x28>)
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe ffe0 	bl	80092c0 <PwmWindBoostInit>
}
 800a300:	bf00      	nop
 800a302:	bd80      	pop	{r7, pc}
 800a304:	200014b8 	.word	0x200014b8
 800a308:	0800a30d 	.word	0x0800a30d

0800a30c <DcDcProcess>:



static void DcDcProcess(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	af00      	add	r7, sp, #0
	Signal_Update(VIN);
 800a310:	2000      	movs	r0, #0
 800a312:	f7ff f9a9 	bl	8009668 <Signal_Update>
	Signal_Update(ILOAD);
 800a316:	2002      	movs	r0, #2
 800a318:	f7ff f9a6 	bl	8009668 <Signal_Update>
	Signal_Update(VOUT);
 800a31c:	2001      	movs	r0, #1
 800a31e:	f7ff f9a3 	bl	8009668 <Signal_Update>
//	count++;
//	if(count >= 1000000)
//	{
//		count = 0;
//	}
	WindControlUpdate(&g_wind, g_iload, g_vin);
 800a322:	4b07      	ldr	r3, [pc, #28]	; (800a340 <DcDcProcess+0x34>)
 800a324:	edd3 7a00 	vldr	s15, [r3]
 800a328:	4b06      	ldr	r3, [pc, #24]	; (800a344 <DcDcProcess+0x38>)
 800a32a:	ed93 7a00 	vldr	s14, [r3]
 800a32e:	eef0 0a47 	vmov.f32	s1, s14
 800a332:	eeb0 0a67 	vmov.f32	s0, s15
 800a336:	4804      	ldr	r0, [pc, #16]	; (800a348 <DcDcProcess+0x3c>)
 800a338:	f000 feb3 	bl	800b0a2 <WindControlUpdate>
}
 800a33c:	bf00      	nop
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	20000884 	.word	0x20000884
 800a344:	2000087c 	.word	0x2000087c
 800a348:	2000156c 	.word	0x2000156c

0800a34c <DC_StopPWM_Boost>:
//static CNTL_2P2Z_F_C_Vars dc_no_mppt_pi_cur_var;



void DC_StopPWM_Boost(void)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
	PwmWindBoostDisable(s_ptimer_pwm);
 800a350:	4b03      	ldr	r3, [pc, #12]	; (800a360 <DC_StopPWM_Boost+0x14>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4618      	mov	r0, r3
 800a356:	f7ff f818 	bl	800938a <PwmWindBoostDisable>
}
 800a35a:	bf00      	nop
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	200014b8 	.word	0x200014b8

0800a364 <DC_StartPWM_Boost>:

void DC_StartPWM_Boost(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	af00      	add	r7, sp, #0
	if (g_wind.is_plugin == true)
 800a368:	4b05      	ldr	r3, [pc, #20]	; (800a380 <DC_StartPWM_Boost+0x1c>)
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d004      	beq.n	800a37a <DC_StartPWM_Boost+0x16>
	{
		 PwmWindBoostEnable(s_ptimer_pwm);
 800a370:	4b04      	ldr	r3, [pc, #16]	; (800a384 <DC_StartPWM_Boost+0x20>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4618      	mov	r0, r3
 800a376:	f7fe ffef 	bl	8009358 <PwmWindBoostEnable>
	}
}
 800a37a:	bf00      	nop
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	2000156c 	.word	0x2000156c
 800a384:	200014b8 	.word	0x200014b8

0800a388 <DC_StopPWM_Buck>:

void DC_StopPWM_Buck(void)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	af00      	add	r7, sp, #0
	PwmWindBuckDisable(s_ptimer_pwm);
 800a38c:	4b03      	ldr	r3, [pc, #12]	; (800a39c <DC_StopPWM_Buck+0x14>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4618      	mov	r0, r3
 800a392:	f7fe ffef 	bl	8009374 <PwmWindBuckDisable>
}
 800a396:	bf00      	nop
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	200014b8 	.word	0x200014b8

0800a3a0 <DC_StartPWM_Buck>:

void DC_StartPWM_Buck(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	af00      	add	r7, sp, #0
//	PwmWindBuckEnable(s_ptimer_pwm);
	if (g_wind.is_plugin == true)
 800a3a4:	4b05      	ldr	r3, [pc, #20]	; (800a3bc <DC_StartPWM_Buck+0x1c>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d004      	beq.n	800a3b6 <DC_StartPWM_Buck+0x16>
	{
		 PwmWindBuckEnable(s_ptimer_pwm);
 800a3ac:	4b04      	ldr	r3, [pc, #16]	; (800a3c0 <DC_StartPWM_Buck+0x20>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fe ffc3 	bl	800933c <PwmWindBuckEnable>
	}
}
 800a3b6:	bf00      	nop
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	2000156c 	.word	0x2000156c
 800a3c0:	200014b8 	.word	0x200014b8

0800a3c4 <DcDc_ControllerMppt>:
		PwmWindBoostSetDuty(s_ptimer_pwm, (i-1));
	}
}


void DcDc_ControllerMppt(void){
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
	flag = true;
 800a3ca:	4b4d      	ldr	r3, [pc, #308]	; (800a500 <DcDc_ControllerMppt+0x13c>)
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	701a      	strb	r2, [r3, #0]
	static float duty;

	TestMPPTUpdate(&g_wind.mppt, g_wind.iwt, g_wind.vwt);
 800a3d0:	4b4c      	ldr	r3, [pc, #304]	; (800a504 <DcDc_ControllerMppt+0x140>)
 800a3d2:	edd3 7a02 	vldr	s15, [r3, #8]
 800a3d6:	4b4b      	ldr	r3, [pc, #300]	; (800a504 <DcDc_ControllerMppt+0x140>)
 800a3d8:	ed93 7a01 	vldr	s14, [r3, #4]
 800a3dc:	eef0 0a47 	vmov.f32	s1, s14
 800a3e0:	eeb0 0a67 	vmov.f32	s0, s15
 800a3e4:	4848      	ldr	r0, [pc, #288]	; (800a508 <DcDc_ControllerMppt+0x144>)
 800a3e6:	f000 ff79 	bl	800b2dc <TestMPPTUpdate>
	WindControlMppt(&g_wind);
 800a3ea:	4846      	ldr	r0, [pc, #280]	; (800a504 <DcDc_ControllerMppt+0x140>)
 800a3ec:	f000 fe4c 	bl	800b088 <WindControlMppt>


	duty = g_wind.mppt.D_ref;
 800a3f0:	4b44      	ldr	r3, [pc, #272]	; (800a504 <DcDc_ControllerMppt+0x140>)
 800a3f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3f4:	4a45      	ldr	r2, [pc, #276]	; (800a50c <DcDc_ControllerMppt+0x148>)
 800a3f6:	6013      	str	r3, [r2, #0]
	if (duty >= 0 && duty <= 1){
 800a3f8:	4b44      	ldr	r3, [pc, #272]	; (800a50c <DcDc_ControllerMppt+0x148>)
 800a3fa:	edd3 7a00 	vldr	s15, [r3]
 800a3fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a406:	db3d      	blt.n	800a484 <DcDc_ControllerMppt+0xc0>
 800a408:	4b40      	ldr	r3, [pc, #256]	; (800a50c <DcDc_ControllerMppt+0x148>)
 800a40a:	edd3 7a00 	vldr	s15, [r3]
 800a40e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a412:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a41a:	d833      	bhi.n	800a484 <DcDc_ControllerMppt+0xc0>
		PwmWindBuckSetDuty(s_ptimer_pwm, duty);
 800a41c:	2300      	movs	r3, #0
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	4b3b      	ldr	r3, [pc, #236]	; (800a510 <DcDc_ControllerMppt+0x14c>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	885b      	ldrh	r3, [r3, #2]
 800a426:	ee07 3a90 	vmov	s15, r3
 800a42a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a42e:	4b37      	ldr	r3, [pc, #220]	; (800a50c <DcDc_ControllerMppt+0x148>)
 800a430:	edd3 7a00 	vldr	s15, [r3]
 800a434:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a43c:	ee17 3a90 	vmov	r3, s15
 800a440:	60fb      	str	r3, [r7, #12]
 800a442:	4b33      	ldr	r3, [pc, #204]	; (800a510 <DcDc_ControllerMppt+0x14c>)
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	085b      	lsrs	r3, r3, #1
 800a44a:	4619      	mov	r1, r3
 800a44c:	4610      	mov	r0, r2
 800a44e:	f7ff ff28 	bl	800a2a2 <SetCompareCH2>
 800a452:	4b2f      	ldr	r3, [pc, #188]	; (800a510 <DcDc_ControllerMppt+0x14c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68f9      	ldr	r1, [r7, #12]
 800a458:	4618      	mov	r0, r3
 800a45a:	f7ff ff13 	bl	800a284 <SetCompareCH1>
		PwmWindBoostSetDuty(s_ptimer_pwm, 0);
 800a45e:	2300      	movs	r3, #0
 800a460:	60bb      	str	r3, [r7, #8]
 800a462:	2300      	movs	r3, #0
 800a464:	60bb      	str	r3, [r7, #8]
 800a466:	4b2a      	ldr	r3, [pc, #168]	; (800a510 <DcDc_ControllerMppt+0x14c>)
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	085b      	lsrs	r3, r3, #1
 800a46e:	4619      	mov	r1, r3
 800a470:	4610      	mov	r0, r2
 800a472:	f7ff ff16 	bl	800a2a2 <SetCompareCH2>
 800a476:	4b26      	ldr	r3, [pc, #152]	; (800a510 <DcDc_ControllerMppt+0x14c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68b9      	ldr	r1, [r7, #8]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7ff ff1f 	bl	800a2c0 <SetCompareCH4>
	if (duty >= 0 && duty <= 1){
 800a482:	e039      	b.n	800a4f8 <DcDc_ControllerMppt+0x134>
	}
	else{
		PwmWindBuckSetDuty(s_ptimer_pwm, 1);
 800a484:	2300      	movs	r3, #0
 800a486:	607b      	str	r3, [r7, #4]
 800a488:	4b21      	ldr	r3, [pc, #132]	; (800a510 <DcDc_ControllerMppt+0x14c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	885b      	ldrh	r3, [r3, #2]
 800a48e:	607b      	str	r3, [r7, #4]
 800a490:	4b1f      	ldr	r3, [pc, #124]	; (800a510 <DcDc_ControllerMppt+0x14c>)
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	085b      	lsrs	r3, r3, #1
 800a498:	4619      	mov	r1, r3
 800a49a:	4610      	mov	r0, r2
 800a49c:	f7ff ff01 	bl	800a2a2 <SetCompareCH2>
 800a4a0:	4b1b      	ldr	r3, [pc, #108]	; (800a510 <DcDc_ControllerMppt+0x14c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6879      	ldr	r1, [r7, #4]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7ff feec 	bl	800a284 <SetCompareCH1>
		PwmWindBoostSetDuty(s_ptimer_pwm, (duty-1));
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	4b16      	ldr	r3, [pc, #88]	; (800a50c <DcDc_ControllerMppt+0x148>)
 800a4b2:	edd3 7a00 	vldr	s15, [r3]
 800a4b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4ba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a4be:	4b14      	ldr	r3, [pc, #80]	; (800a510 <DcDc_ControllerMppt+0x14c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	885b      	ldrh	r3, [r3, #2]
 800a4c4:	ee07 3a90 	vmov	s15, r3
 800a4c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4d4:	ee17 3a90 	vmov	r3, s15
 800a4d8:	603b      	str	r3, [r7, #0]
 800a4da:	4b0d      	ldr	r3, [pc, #52]	; (800a510 <DcDc_ControllerMppt+0x14c>)
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	085b      	lsrs	r3, r3, #1
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	f7ff fedc 	bl	800a2a2 <SetCompareCH2>
 800a4ea:	4b09      	ldr	r3, [pc, #36]	; (800a510 <DcDc_ControllerMppt+0x14c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff fee5 	bl	800a2c0 <SetCompareCH4>
	}
}
 800a4f6:	bf00      	nop
 800a4f8:	bf00      	nop
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	200014b4 	.word	0x200014b4
 800a504:	2000156c 	.word	0x2000156c
 800a508:	20001594 	.word	0x20001594
 800a50c:	200014bc 	.word	0x200014bc
 800a510:	200014b8 	.word	0x200014b8

0800a514 <SetCompareCH2>:
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR2, CompareValue);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a526:	bf00      	nop
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
	...

0800a534 <Start_PWM_Dumpload>:
	s_ptimer_pwm = create_advance_timer(TIMER_ADVANCE_ID_1, FREQUENCY_SAMPLE_WIND_DUMPLOAD);
	PwmWindDumpLoadInit(s_ptimer_pwm);
}

void Start_PWM_Dumpload(void)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	af00      	add	r7, sp, #0
	PwmWindDumpLoadEnableOutput(s_ptimer_pwm);
 800a538:	4b03      	ldr	r3, [pc, #12]	; (800a548 <Start_PWM_Dumpload+0x14>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fe ff77 	bl	8009430 <PwmWindDumpLoadEnableOutput>
}
 800a542:	bf00      	nop
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	200014c0 	.word	0x200014c0

0800a54c <Stop_PWM_Dumpload>:

void Stop_PWM_Dumpload(void)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	af00      	add	r7, sp, #0
	PwmWindDumpLoadDisableOutput(s_ptimer_pwm);
 800a550:	4b03      	ldr	r3, [pc, #12]	; (800a560 <Stop_PWM_Dumpload+0x14>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4618      	mov	r0, r3
 800a556:	f7fe ff79 	bl	800944c <PwmWindDumpLoadDisableOutput>
}
 800a55a:	bf00      	nop
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	200014c0 	.word	0x200014c0

0800a564 <Dumpload_controller>:

void Dumpload_controller(void)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
	if(g_vin > DC_MAX_INPUT)
 800a56a:	4b1f      	ldr	r3, [pc, #124]	; (800a5e8 <Dumpload_controller+0x84>)
 800a56c:	edd3 7a00 	vldr	s15, [r3]
 800a570:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800a5ec <Dumpload_controller+0x88>
 800a574:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a57c:	dd24      	ble.n	800a5c8 <Dumpload_controller+0x64>
	{
		PwmWindDumpLoadSetDuty(s_ptimer_pwm, (g_vin - MAX_VIN)/g_vin);
 800a57e:	2300      	movs	r3, #0
 800a580:	603b      	str	r3, [r7, #0]
 800a582:	4b19      	ldr	r3, [pc, #100]	; (800a5e8 <Dumpload_controller+0x84>)
 800a584:	edd3 7a00 	vldr	s15, [r3]
 800a588:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a5f0 <Dumpload_controller+0x8c>
 800a58c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a590:	4b15      	ldr	r3, [pc, #84]	; (800a5e8 <Dumpload_controller+0x84>)
 800a592:	edd3 7a00 	vldr	s15, [r3]
 800a596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a59a:	4b16      	ldr	r3, [pc, #88]	; (800a5f4 <Dumpload_controller+0x90>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	885b      	ldrh	r3, [r3, #2]
 800a5a0:	ee07 3a90 	vmov	s15, r3
 800a5a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5b0:	ee17 3a90 	vmov	r3, s15
 800a5b4:	603b      	str	r3, [r7, #0]
 800a5b6:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <Dumpload_controller+0x90>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6839      	ldr	r1, [r7, #0]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff ffa9 	bl	800a514 <SetCompareCH2>
		Start_PWM_Dumpload();
 800a5c2:	f7ff ffb7 	bl	800a534 <Start_PWM_Dumpload>
	else
	{
		PwmWindDumpLoadSetDuty(s_ptimer_pwm, 0);
		Stop_PWM_Dumpload();
	}
}
 800a5c6:	e00b      	b.n	800a5e0 <Dumpload_controller+0x7c>
		PwmWindDumpLoadSetDuty(s_ptimer_pwm, 0);
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	607b      	str	r3, [r7, #4]
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	607b      	str	r3, [r7, #4]
 800a5d0:	4b08      	ldr	r3, [pc, #32]	; (800a5f4 <Dumpload_controller+0x90>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6879      	ldr	r1, [r7, #4]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7ff ff9c 	bl	800a514 <SetCompareCH2>
		Stop_PWM_Dumpload();
 800a5dc:	f7ff ffb6 	bl	800a54c <Stop_PWM_Dumpload>
}
 800a5e0:	bf00      	nop
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	2000087c 	.word	0x2000087c
 800a5ec:	43160000 	.word	0x43160000
 800a5f0:	42400000 	.word	0x42400000
 800a5f4:	200014c0 	.word	0x200014c0

0800a5f8 <ErrorCheckInit>:
//		{ID_OIBAT_DCHAR,	CODE_OIBAT_CHAR,		STATE_ALL,				1,							TYPE_UP,				0,										0,									0,							&s_mError[ID_OIBAT_DCHAR],		NULL,			false,			ACTIVE},
//		{ID_UIBAT_DCHAR,	CODE_UIBAT_CHAR,		STATE_ALL,				1,							TYPE_UP,				0,										0,									0,							&s_mError[ID_UIBAT_DCHAR],		NULL,			false,			ACTIVE},

};

void ErrorCheckInit(void){
 800a5f8:	b480      	push	{r7}
 800a5fa:	af00      	add	r7, sp, #0
	for(countList = 0; countList < ID_MAX; countList++){
 800a5fc:	4b22      	ldr	r3, [pc, #136]	; (800a688 <ErrorCheckInit+0x90>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	e025      	b.n	800a650 <ErrorCheckInit+0x58>
		listError[countList].time_count 	= 0;
 800a604:	4b20      	ldr	r3, [pc, #128]	; (800a688 <ErrorCheckInit+0x90>)
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	4920      	ldr	r1, [pc, #128]	; (800a68c <ErrorCheckInit+0x94>)
 800a60a:	4613      	mov	r3, r2
 800a60c:	00db      	lsls	r3, r3, #3
 800a60e:	4413      	add	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	440b      	add	r3, r1
 800a614:	3310      	adds	r3, #16
 800a616:	2200      	movs	r2, #0
 800a618:	601a      	str	r2, [r3, #0]
		listError[countList].error_state 	= false;
 800a61a:	4b1b      	ldr	r3, [pc, #108]	; (800a688 <ErrorCheckInit+0x90>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	491b      	ldr	r1, [pc, #108]	; (800a68c <ErrorCheckInit+0x94>)
 800a620:	4613      	mov	r3, r2
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	4413      	add	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	440b      	add	r3, r1
 800a62a:	3320      	adds	r3, #32
 800a62c:	2200      	movs	r2, #0
 800a62e:	701a      	strb	r2, [r3, #0]
		listError[countList].active_err		= ACTIVE;
 800a630:	4b15      	ldr	r3, [pc, #84]	; (800a688 <ErrorCheckInit+0x90>)
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	4915      	ldr	r1, [pc, #84]	; (800a68c <ErrorCheckInit+0x94>)
 800a636:	4613      	mov	r3, r2
 800a638:	00db      	lsls	r3, r3, #3
 800a63a:	4413      	add	r3, r2
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	440b      	add	r3, r1
 800a640:	3321      	adds	r3, #33	; 0x21
 800a642:	2200      	movs	r2, #0
 800a644:	701a      	strb	r2, [r3, #0]
	for(countList = 0; countList < ID_MAX; countList++){
 800a646:	4b10      	ldr	r3, [pc, #64]	; (800a688 <ErrorCheckInit+0x90>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	3301      	adds	r3, #1
 800a64c:	4a0e      	ldr	r2, [pc, #56]	; (800a688 <ErrorCheckInit+0x90>)
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	4b0d      	ldr	r3, [pc, #52]	; (800a688 <ErrorCheckInit+0x90>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b06      	cmp	r3, #6
 800a656:	d9d5      	bls.n	800a604 <ErrorCheckInit+0xc>
	}
	listError[ID_OVDC1].active_err = DEACTIVE;
 800a658:	4b0c      	ldr	r3, [pc, #48]	; (800a68c <ErrorCheckInit+0x94>)
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	listError[ID_OVDC2].active_err = DEACTIVE;
 800a660:	4b0a      	ldr	r3, [pc, #40]	; (800a68c <ErrorCheckInit+0x94>)
 800a662:	2201      	movs	r2, #1
 800a664:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	listError[ID_OCDC1].active_err = DEACTIVE;
 800a668:	4b08      	ldr	r3, [pc, #32]	; (800a68c <ErrorCheckInit+0x94>)
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	listError[ID_OCDC2].active_err = DEACTIVE;
 800a670:	4b06      	ldr	r3, [pc, #24]	; (800a68c <ErrorCheckInit+0x94>)
 800a672:	2201      	movs	r2, #1
 800a674:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
	countList = 0;
 800a678:	4b03      	ldr	r3, [pc, #12]	; (800a688 <ErrorCheckInit+0x90>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
}
 800a67e:	bf00      	nop
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	200014c4 	.word	0x200014c4
 800a68c:	20000318 	.word	0x20000318

0800a690 <ErrorCheck_Running>:

void ErrorCheck_Running(void){
 800a690:	b580      	push	{r7, lr}
 800a692:	af00      	add	r7, sp, #0
	UpdateCalc();
 800a694:	f000 f96a 	bl	800a96c <UpdateCalc>
	for(countList = 1; countList < ID_MAX; countList++){
 800a698:	4ba7      	ldr	r3, [pc, #668]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a69a:	2201      	movs	r2, #1
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	e15b      	b.n	800a958 <ErrorCheck_Running+0x2c8>
		if(listError[countList].state_valid == STATE_MAX){
 800a6a0:	4ba5      	ldr	r3, [pc, #660]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	49a5      	ldr	r1, [pc, #660]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	00db      	lsls	r3, r3, #3
 800a6aa:	4413      	add	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	440b      	add	r3, r1
 800a6b0:	3302      	adds	r3, #2
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	2b05      	cmp	r3, #5
 800a6b6:	d117      	bne.n	800a6e8 <ErrorCheck_Running+0x58>
			if(listError[countList].func_check != NULL){
 800a6b8:	4b9f      	ldr	r3, [pc, #636]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	499f      	ldr	r1, [pc, #636]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a6be:	4613      	mov	r3, r2
 800a6c0:	00db      	lsls	r3, r3, #3
 800a6c2:	4413      	add	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	440b      	add	r3, r1
 800a6c8:	331c      	adds	r3, #28
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d032      	beq.n	800a736 <ErrorCheck_Running+0xa6>
				listError[countList].func_check();
 800a6d0:	4b99      	ldr	r3, [pc, #612]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	4999      	ldr	r1, [pc, #612]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	00db      	lsls	r3, r3, #3
 800a6da:	4413      	add	r3, r2
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	440b      	add	r3, r1
 800a6e0:	331c      	adds	r3, #28
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4798      	blx	r3
				}
				else
					goto run_all;
			}
		}
		continue;
 800a6e6:	e125      	b.n	800a934 <ErrorCheck_Running+0x2a4>
			if(listError[countList].state_valid == g_current_state){
 800a6e8:	4b93      	ldr	r3, [pc, #588]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	4993      	ldr	r1, [pc, #588]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	00db      	lsls	r3, r3, #3
 800a6f2:	4413      	add	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	440b      	add	r3, r1
 800a6f8:	3302      	adds	r3, #2
 800a6fa:	781a      	ldrb	r2, [r3, #0]
 800a6fc:	4b90      	ldr	r3, [pc, #576]	; (800a940 <ErrorCheck_Running+0x2b0>)
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	429a      	cmp	r2, r3
 800a702:	f040 8117 	bne.w	800a934 <ErrorCheck_Running+0x2a4>
				if(listError[countList].func_check != NULL){
 800a706:	4b8c      	ldr	r3, [pc, #560]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	498c      	ldr	r1, [pc, #560]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a70c:	4613      	mov	r3, r2
 800a70e:	00db      	lsls	r3, r3, #3
 800a710:	4413      	add	r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	440b      	add	r3, r1
 800a716:	331c      	adds	r3, #28
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00d      	beq.n	800a73a <ErrorCheck_Running+0xaa>
					listError[countList].func_check();
 800a71e:	4b86      	ldr	r3, [pc, #536]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	4986      	ldr	r1, [pc, #536]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a724:	4613      	mov	r3, r2
 800a726:	00db      	lsls	r3, r3, #3
 800a728:	4413      	add	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	440b      	add	r3, r1
 800a72e:	331c      	adds	r3, #28
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4798      	blx	r3
		continue;
 800a734:	e0fe      	b.n	800a934 <ErrorCheck_Running+0x2a4>
				goto run_all;
 800a736:	bf00      	nop
 800a738:	e000      	b.n	800a73c <ErrorCheck_Running+0xac>
					goto run_all;
 800a73a:	bf00      	nop
		run_all:
		switch(listError[countList].type_check){
 800a73c:	4b7e      	ldr	r3, [pc, #504]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	497e      	ldr	r1, [pc, #504]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a742:	4613      	mov	r3, r2
 800a744:	00db      	lsls	r3, r3, #3
 800a746:	4413      	add	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	440b      	add	r3, r1
 800a74c:	3308      	adds	r3, #8
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 808f 	beq.w	800a874 <ErrorCheck_Running+0x1e4>
 800a756:	2b01      	cmp	r3, #1
 800a758:	f040 80f8 	bne.w	800a94c <ErrorCheck_Running+0x2bc>
			case TYPE_DOWN:
				if(fabs(*listError[countList].value_addr) <= listError[countList].value_limit){
 800a75c:	4b76      	ldr	r3, [pc, #472]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	4976      	ldr	r1, [pc, #472]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a762:	4613      	mov	r3, r2
 800a764:	00db      	lsls	r3, r3, #3
 800a766:	4413      	add	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	440b      	add	r3, r1
 800a76c:	3318      	adds	r3, #24
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	edd3 7a00 	vldr	s15, [r3]
 800a774:	eeb0 7ae7 	vabs.f32	s14, s15
 800a778:	4b6f      	ldr	r3, [pc, #444]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	496f      	ldr	r1, [pc, #444]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a77e:	4613      	mov	r3, r2
 800a780:	00db      	lsls	r3, r3, #3
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	440b      	add	r3, r1
 800a788:	3304      	adds	r3, #4
 800a78a:	edd3 7a00 	vldr	s15, [r3]
 800a78e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a796:	d84b      	bhi.n	800a830 <ErrorCheck_Running+0x1a0>
					if(listError[countList].time_count < listError[countList].time_limit)
 800a798:	4b67      	ldr	r3, [pc, #412]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	4967      	ldr	r1, [pc, #412]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a79e:	4613      	mov	r3, r2
 800a7a0:	00db      	lsls	r3, r3, #3
 800a7a2:	4413      	add	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	440b      	add	r3, r1
 800a7a8:	3310      	adds	r3, #16
 800a7aa:	6819      	ldr	r1, [r3, #0]
 800a7ac:	4b62      	ldr	r3, [pc, #392]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	4862      	ldr	r0, [pc, #392]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	00db      	lsls	r3, r3, #3
 800a7b6:	4413      	add	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4403      	add	r3, r0
 800a7bc:	330c      	adds	r3, #12
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4299      	cmp	r1, r3
 800a7c2:	d213      	bcs.n	800a7ec <ErrorCheck_Running+0x15c>
					 {
							 listError[countList].time_count++;
 800a7c4:	4b5c      	ldr	r3, [pc, #368]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	495c      	ldr	r1, [pc, #368]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	00db      	lsls	r3, r3, #3
 800a7ce:	4413      	add	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	440b      	add	r3, r1
 800a7d4:	3310      	adds	r3, #16
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	1c59      	adds	r1, r3, #1
 800a7da:	4858      	ldr	r0, [pc, #352]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a7dc:	4613      	mov	r3, r2
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	4413      	add	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4403      	add	r3, r0
 800a7e6:	3310      	adds	r3, #16
 800a7e8:	6019      	str	r1, [r3, #0]
							 if(countList == ID_UVDC1) g_state_vin 	= true;
							 if(countList == ID_UVDC2) g_state_vout = true;
					 }
					 listError[countList].time_count = 0;
				}
				break;
 800a7ea:	e0b0      	b.n	800a94e <ErrorCheck_Running+0x2be>
							 if(countList == ID_UVDC1 || countList == ID_UVDC2)
 800a7ec:	4b52      	ldr	r3, [pc, #328]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2b03      	cmp	r3, #3
 800a7f2:	d003      	beq.n	800a7fc <ErrorCheck_Running+0x16c>
 800a7f4:	4b50      	ldr	r3, [pc, #320]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b04      	cmp	r3, #4
 800a7fa:	d10d      	bne.n	800a818 <ErrorCheck_Running+0x188>
									 if(countList == ID_UVDC1) g_state_vin 	= false;
 800a7fc:	4b4e      	ldr	r3, [pc, #312]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b03      	cmp	r3, #3
 800a802:	d102      	bne.n	800a80a <ErrorCheck_Running+0x17a>
 800a804:	4b4f      	ldr	r3, [pc, #316]	; (800a944 <ErrorCheck_Running+0x2b4>)
 800a806:	2200      	movs	r2, #0
 800a808:	701a      	strb	r2, [r3, #0]
									 if(countList == ID_UVDC2) g_state_vout = false;
 800a80a:	4b4b      	ldr	r3, [pc, #300]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b04      	cmp	r3, #4
 800a810:	d102      	bne.n	800a818 <ErrorCheck_Running+0x188>
 800a812:	4b4d      	ldr	r3, [pc, #308]	; (800a948 <ErrorCheck_Running+0x2b8>)
 800a814:	2200      	movs	r2, #0
 800a816:	701a      	strb	r2, [r3, #0]
							 listError[countList].error_state = true;
 800a818:	4b47      	ldr	r3, [pc, #284]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	4947      	ldr	r1, [pc, #284]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a81e:	4613      	mov	r3, r2
 800a820:	00db      	lsls	r3, r3, #3
 800a822:	4413      	add	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	440b      	add	r3, r1
 800a828:	3320      	adds	r3, #32
 800a82a:	2201      	movs	r2, #1
 800a82c:	701a      	strb	r2, [r3, #0]
				break;
 800a82e:	e08e      	b.n	800a94e <ErrorCheck_Running+0x2be>
					 if(countList == ID_UVDC1 || countList == ID_UVDC2)
 800a830:	4b41      	ldr	r3, [pc, #260]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2b03      	cmp	r3, #3
 800a836:	d003      	beq.n	800a840 <ErrorCheck_Running+0x1b0>
 800a838:	4b3f      	ldr	r3, [pc, #252]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	d10d      	bne.n	800a85c <ErrorCheck_Running+0x1cc>
							 if(countList == ID_UVDC1) g_state_vin 	= true;
 800a840:	4b3d      	ldr	r3, [pc, #244]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b03      	cmp	r3, #3
 800a846:	d102      	bne.n	800a84e <ErrorCheck_Running+0x1be>
 800a848:	4b3e      	ldr	r3, [pc, #248]	; (800a944 <ErrorCheck_Running+0x2b4>)
 800a84a:	2201      	movs	r2, #1
 800a84c:	701a      	strb	r2, [r3, #0]
							 if(countList == ID_UVDC2) g_state_vout = true;
 800a84e:	4b3a      	ldr	r3, [pc, #232]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2b04      	cmp	r3, #4
 800a854:	d102      	bne.n	800a85c <ErrorCheck_Running+0x1cc>
 800a856:	4b3c      	ldr	r3, [pc, #240]	; (800a948 <ErrorCheck_Running+0x2b8>)
 800a858:	2201      	movs	r2, #1
 800a85a:	701a      	strb	r2, [r3, #0]
					 listError[countList].time_count = 0;
 800a85c:	4b36      	ldr	r3, [pc, #216]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	4936      	ldr	r1, [pc, #216]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a862:	4613      	mov	r3, r2
 800a864:	00db      	lsls	r3, r3, #3
 800a866:	4413      	add	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	440b      	add	r3, r1
 800a86c:	3310      	adds	r3, #16
 800a86e:	2200      	movs	r2, #0
 800a870:	601a      	str	r2, [r3, #0]
				break;
 800a872:	e06c      	b.n	800a94e <ErrorCheck_Running+0x2be>

			case TYPE_UP:
				if(fabs(*listError[countList].value_addr) >= listError[countList].value_limit)
 800a874:	4b30      	ldr	r3, [pc, #192]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	4930      	ldr	r1, [pc, #192]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a87a:	4613      	mov	r3, r2
 800a87c:	00db      	lsls	r3, r3, #3
 800a87e:	4413      	add	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	440b      	add	r3, r1
 800a884:	3318      	adds	r3, #24
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	edd3 7a00 	vldr	s15, [r3]
 800a88c:	eeb0 7ae7 	vabs.f32	s14, s15
 800a890:	4b29      	ldr	r3, [pc, #164]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	4929      	ldr	r1, [pc, #164]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a896:	4613      	mov	r3, r2
 800a898:	00db      	lsls	r3, r3, #3
 800a89a:	4413      	add	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	440b      	add	r3, r1
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	edd3 7a00 	vldr	s15, [r3]
 800a8a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ae:	db35      	blt.n	800a91c <ErrorCheck_Running+0x28c>
				 {
						 if(listError[countList].time_count < listError[countList].time_limit)
 800a8b0:	4b21      	ldr	r3, [pc, #132]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	4921      	ldr	r1, [pc, #132]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	00db      	lsls	r3, r3, #3
 800a8ba:	4413      	add	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	440b      	add	r3, r1
 800a8c0:	3310      	adds	r3, #16
 800a8c2:	6819      	ldr	r1, [r3, #0]
 800a8c4:	4b1c      	ldr	r3, [pc, #112]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	481c      	ldr	r0, [pc, #112]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	00db      	lsls	r3, r3, #3
 800a8ce:	4413      	add	r3, r2
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4403      	add	r3, r0
 800a8d4:	330c      	adds	r3, #12
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4299      	cmp	r1, r3
 800a8da:	d213      	bcs.n	800a904 <ErrorCheck_Running+0x274>
						 {
								 listError[countList].time_count++;
 800a8dc:	4b16      	ldr	r3, [pc, #88]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	4916      	ldr	r1, [pc, #88]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	4413      	add	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	440b      	add	r3, r1
 800a8ec:	3310      	adds	r3, #16
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	1c59      	adds	r1, r3, #1
 800a8f2:	4812      	ldr	r0, [pc, #72]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	00db      	lsls	r3, r3, #3
 800a8f8:	4413      	add	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4403      	add	r3, r0
 800a8fe:	3310      	adds	r3, #16
 800a900:	6019      	str	r1, [r3, #0]
				 }
				 else
				 {
						 listError[countList].time_count = 0;
				 }
				 break;
 800a902:	e024      	b.n	800a94e <ErrorCheck_Running+0x2be>
								 listError[countList].error_state = true;
 800a904:	4b0c      	ldr	r3, [pc, #48]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	490c      	ldr	r1, [pc, #48]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a90a:	4613      	mov	r3, r2
 800a90c:	00db      	lsls	r3, r3, #3
 800a90e:	4413      	add	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	440b      	add	r3, r1
 800a914:	3320      	adds	r3, #32
 800a916:	2201      	movs	r2, #1
 800a918:	701a      	strb	r2, [r3, #0]
				 break;
 800a91a:	e018      	b.n	800a94e <ErrorCheck_Running+0x2be>
						 listError[countList].time_count = 0;
 800a91c:	4b06      	ldr	r3, [pc, #24]	; (800a938 <ErrorCheck_Running+0x2a8>)
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	4906      	ldr	r1, [pc, #24]	; (800a93c <ErrorCheck_Running+0x2ac>)
 800a922:	4613      	mov	r3, r2
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	4413      	add	r3, r2
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	440b      	add	r3, r1
 800a92c:	3310      	adds	r3, #16
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]
				 break;
 800a932:	e00c      	b.n	800a94e <ErrorCheck_Running+0x2be>
		continue;
 800a934:	bf00      	nop
 800a936:	e00a      	b.n	800a94e <ErrorCheck_Running+0x2be>
 800a938:	200014c4 	.word	0x200014c4
 800a93c:	20000318 	.word	0x20000318
 800a940:	20001554 	.word	0x20001554
 800a944:	20001557 	.word	0x20001557
 800a948:	20001558 	.word	0x20001558

		 default:
				 break;
 800a94c:	bf00      	nop
	for(countList = 1; countList < ID_MAX; countList++){
 800a94e:	4b06      	ldr	r3, [pc, #24]	; (800a968 <ErrorCheck_Running+0x2d8>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	4a04      	ldr	r2, [pc, #16]	; (800a968 <ErrorCheck_Running+0x2d8>)
 800a956:	6013      	str	r3, [r2, #0]
 800a958:	4b03      	ldr	r3, [pc, #12]	; (800a968 <ErrorCheck_Running+0x2d8>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b06      	cmp	r3, #6
 800a95e:	f67f ae9f 	bls.w	800a6a0 <ErrorCheck_Running+0x10>
		}
	}
}
 800a962:	bf00      	nop
 800a964:	bf00      	nop
 800a966:	bd80      	pop	{r7, pc}
 800a968:	200014c4 	.word	0x200014c4

0800a96c <UpdateCalc>:

static void UpdateCalc(void){
 800a96c:	b480      	push	{r7}
 800a96e:	af00      	add	r7, sp, #0
	s_mError[ID_OCDC1]	= g_iload;
 800a970:	4b0a      	ldr	r3, [pc, #40]	; (800a99c <UpdateCalc+0x30>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a0a      	ldr	r2, [pc, #40]	; (800a9a0 <UpdateCalc+0x34>)
 800a976:	6153      	str	r3, [r2, #20]
	s_mError[ID_OCDC2]	= g_idumpload;
 800a978:	4b0a      	ldr	r3, [pc, #40]	; (800a9a4 <UpdateCalc+0x38>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a08      	ldr	r2, [pc, #32]	; (800a9a0 <UpdateCalc+0x34>)
 800a97e:	6193      	str	r3, [r2, #24]
	s_mError[ID_OVDC1]	= g_vin;
 800a980:	4b09      	ldr	r3, [pc, #36]	; (800a9a8 <UpdateCalc+0x3c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a06      	ldr	r2, [pc, #24]	; (800a9a0 <UpdateCalc+0x34>)
 800a986:	6053      	str	r3, [r2, #4]
//	s_mError[ID_UVDC1]	= g_vin;
	s_mError[ID_OVDC2]	= g_vout;
 800a988:	4b08      	ldr	r3, [pc, #32]	; (800a9ac <UpdateCalc+0x40>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a04      	ldr	r2, [pc, #16]	; (800a9a0 <UpdateCalc+0x34>)
 800a98e:	6093      	str	r3, [r2, #8]
//	s_mError[ID_UVDC2]	= g_vout;

}
 800a990:	bf00      	nop
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	20000884 	.word	0x20000884
 800a9a0:	200014c8 	.word	0x200014c8
 800a9a4:	20000888 	.word	0x20000888
 800a9a8:	2000087c 	.word	0x2000087c
 800a9ac:	20000880 	.word	0x20000880

0800a9b0 <getFaultInfo>:

ERROR_CODE getFaultInfo(){
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < ID_MAX; i++){
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	607b      	str	r3, [r7, #4]
 800a9ba:	e02d      	b.n	800aa18 <getFaultInfo+0x68>
		if(listError[i].error_state == true && listError[i].active_err == ACTIVE){
 800a9bc:	491b      	ldr	r1, [pc, #108]	; (800aa2c <getFaultInfo+0x7c>)
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	00db      	lsls	r3, r3, #3
 800a9c4:	4413      	add	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	440b      	add	r3, r1
 800a9ca:	3320      	adds	r3, #32
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d01f      	beq.n	800aa12 <getFaultInfo+0x62>
 800a9d2:	4916      	ldr	r1, [pc, #88]	; (800aa2c <getFaultInfo+0x7c>)
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	00db      	lsls	r3, r3, #3
 800a9da:	4413      	add	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	440b      	add	r3, r1
 800a9e0:	3321      	adds	r3, #33	; 0x21
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d114      	bne.n	800aa12 <getFaultInfo+0x62>
			if(listError[i].code_err != CODE_OK){
 800a9e8:	4910      	ldr	r1, [pc, #64]	; (800aa2c <getFaultInfo+0x7c>)
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	4413      	add	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	440b      	add	r3, r1
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d009      	beq.n	800aa12 <getFaultInfo+0x62>
				return listError[i].code_err;
 800a9fe:	490b      	ldr	r1, [pc, #44]	; (800aa2c <getFaultInfo+0x7c>)
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	4613      	mov	r3, r2
 800aa04:	00db      	lsls	r3, r3, #3
 800aa06:	4413      	add	r3, r2
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	440b      	add	r3, r1
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	e006      	b.n	800aa20 <getFaultInfo+0x70>
	for(i = 0; i < ID_MAX; i++){
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	3301      	adds	r3, #1
 800aa16:	607b      	str	r3, [r7, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b06      	cmp	r3, #6
 800aa1c:	ddce      	ble.n	800a9bc <getFaultInfo+0xc>
			}
		}
	}
	return CODE_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	20000318 	.word	0x20000318

0800aa30 <serial_init>:

extern serial_obj *serial_test_1;
volatile ManagerVariable g_guiValue;
MPPT_PNO mppt_pno;

void serial_init(){
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
	serial_test_1 = create_serial(1, 9600, 512, 512);
 800aa34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa3c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800aa40:	2001      	movs	r0, #1
 800aa42:	f7ff fa1d 	bl	8009e80 <create_serial>
 800aa46:	4603      	mov	r3, r0
 800aa48:	4a01      	ldr	r2, [pc, #4]	; (800aa50 <serial_init+0x20>)
 800aa4a:	6013      	str	r3, [r2, #0]
}
 800aa4c:	bf00      	nop
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	20001494 	.word	0x20001494

0800aa54 <initGlobalVariables>:

void initGlobalVariables(void){
 800aa54:	b580      	push	{r7, lr}
 800aa56:	af00      	add	r7, sp, #0
	memset((void*)&g_guiValue, 0, sizeof(g_guiValue));
 800aa58:	2220      	movs	r2, #32
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	4805      	ldr	r0, [pc, #20]	; (800aa74 <initGlobalVariables+0x20>)
 800aa5e:	f000 fd33 	bl	800b4c8 <memset>
	ModbusAddVariable(debug_modbus, MONITOR_VAR_ADDR, (void*)&g_guiValue, sizeof(g_guiValue));
 800aa62:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <initGlobalVariables+0x24>)
 800aa64:	6818      	ldr	r0, [r3, #0]
 800aa66:	2320      	movs	r3, #32
 800aa68:	4a02      	ldr	r2, [pc, #8]	; (800aa74 <initGlobalVariables+0x20>)
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	f7fe fb1a 	bl	80090a4 <ModbusAddVariable>
}
 800aa70:	bf00      	nop
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	200014e4 	.word	0x200014e4
 800aa78:	20001490 	.word	0x20001490

0800aa7c <UpdateAllVariable>:

void UpdateAllVariable(void){
 800aa7c:	b480      	push	{r7}
 800aa7e:	af00      	add	r7, sp, #0
	g_guiValue.guiVin 	= g_signal_value[VIN].val_control 	* g_signal_value[VIN].gain;
 800aa80:	4b28      	ldr	r3, [pc, #160]	; (800ab24 <UpdateAllVariable+0xa8>)
 800aa82:	ed93 7a01 	vldr	s14, [r3, #4]
 800aa86:	4b27      	ldr	r3, [pc, #156]	; (800ab24 <UpdateAllVariable+0xa8>)
 800aa88:	edd3 7a04 	vldr	s15, [r3, #16]
 800aa8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa90:	4b25      	ldr	r3, [pc, #148]	; (800ab28 <UpdateAllVariable+0xac>)
 800aa92:	edc3 7a00 	vstr	s15, [r3]
	g_guiValue.guiVout	= g_signal_value[VOUT].val_control 	* g_signal_value[VOUT].gain;
 800aa96:	4b23      	ldr	r3, [pc, #140]	; (800ab24 <UpdateAllVariable+0xa8>)
 800aa98:	ed93 7a06 	vldr	s14, [r3, #24]
 800aa9c:	4b21      	ldr	r3, [pc, #132]	; (800ab24 <UpdateAllVariable+0xa8>)
 800aa9e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800aaa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa6:	4b20      	ldr	r3, [pc, #128]	; (800ab28 <UpdateAllVariable+0xac>)
 800aaa8:	edc3 7a01 	vstr	s15, [r3, #4]
	g_guiValue.guiIload	= g_signal_value[ILOAD].val_control * g_signal_value[ILOAD].gain;
 800aaac:	4b1d      	ldr	r3, [pc, #116]	; (800ab24 <UpdateAllVariable+0xa8>)
 800aaae:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800aab2:	4b1c      	ldr	r3, [pc, #112]	; (800ab24 <UpdateAllVariable+0xa8>)
 800aab4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800aab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aabc:	4b1a      	ldr	r3, [pc, #104]	; (800ab28 <UpdateAllVariable+0xac>)
 800aabe:	edc3 7a02 	vstr	s15, [r3, #8]
	g_guiValue.guiIdump	= g_signal_value[IDUMP].val_control * g_signal_value[IDUMP].gain;
 800aac2:	4b18      	ldr	r3, [pc, #96]	; (800ab24 <UpdateAllVariable+0xa8>)
 800aac4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800aac8:	4b16      	ldr	r3, [pc, #88]	; (800ab24 <UpdateAllVariable+0xa8>)
 800aaca:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800aace:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad2:	4b15      	ldr	r3, [pc, #84]	; (800ab28 <UpdateAllVariable+0xac>)
 800aad4:	edc3 7a03 	vstr	s15, [r3, #12]
	g_guiValue.guiPwind = g_guiValue.guiVin * g_guiValue.guiIload;
 800aad8:	4b13      	ldr	r3, [pc, #76]	; (800ab28 <UpdateAllVariable+0xac>)
 800aada:	ed93 7a00 	vldr	s14, [r3]
 800aade:	4b12      	ldr	r3, [pc, #72]	; (800ab28 <UpdateAllVariable+0xac>)
 800aae0:	edd3 7a02 	vldr	s15, [r3, #8]
 800aae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae8:	4b0f      	ldr	r3, [pc, #60]	; (800ab28 <UpdateAllVariable+0xac>)
 800aaea:	edc3 7a04 	vstr	s15, [r3, #16]
	g_guiValue.guiDref 	= mppt_pno.D_ref;
 800aaee:	4b0f      	ldr	r3, [pc, #60]	; (800ab2c <UpdateAllVariable+0xb0>)
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf2:	4a0d      	ldr	r2, [pc, #52]	; (800ab28 <UpdateAllVariable+0xac>)
 800aaf4:	6153      	str	r3, [r2, #20]
	g_guiValue.guiErrCode = faultInfo;
 800aaf6:	4b0e      	ldr	r3, [pc, #56]	; (800ab30 <UpdateAllVariable+0xb4>)
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	ee07 3a90 	vmov	s15, r3
 800aafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab02:	4b09      	ldr	r3, [pc, #36]	; (800ab28 <UpdateAllVariable+0xac>)
 800ab04:	edc3 7a06 	vstr	s15, [r3, #24]
	g_guiValue.guiStatus = g_current_state;
 800ab08:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <UpdateAllVariable+0xb8>)
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	ee07 3a90 	vmov	s15, r3
 800ab10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab14:	4b04      	ldr	r3, [pc, #16]	; (800ab28 <UpdateAllVariable+0xac>)
 800ab16:	edc3 7a07 	vstr	s15, [r3, #28]
//	g_guiValue.guiIdump = 22;
//	g_guiValue.guiPwind = 2;
//	g_guiValue.guiDref 	= 1;
//	g_guiValue.guiErrCode = 6;
//	g_guiValue.guiStatus = 7;
}
 800ab1a:	bf00      	nop
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	20000030 	.word	0x20000030
 800ab28:	200014e4 	.word	0x200014e4
 800ab2c:	20001504 	.word	0x20001504
 800ab30:	20001556 	.word	0x20001556
 800ab34:	20001554 	.word	0x20001554

0800ab38 <StateInit>:
        {STATE_CLOSE_LOOP,                      STATE_CLOSE_LOOP,                       STATE_RESET,                        100,               &CloseLoop,                 true,                   CODE_OK},
        {STATE_RESET,                           STATE_WIND_OFF,                         STATE_ERR,                          100,               &StateReset,                true,                   CODE_ERR},
        {STATE_ERR,                             STATE_ERR,                              STATE_ERR,                          100,               &ErrorFunction,             false,                  CODE_ERR}};

void StateInit(void)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	af00      	add	r7, sp, #0
    g_current_state = STATE_WIND_OFF;
 800ab3c:	4b03      	ldr	r3, [pc, #12]	; (800ab4c <StateInit+0x14>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	701a      	strb	r2, [r3, #0]
    Timer1kHzAddCallback(&StateMachineRunning);
 800ab42:	4803      	ldr	r0, [pc, #12]	; (800ab50 <StateInit+0x18>)
 800ab44:	f7ff fa4c 	bl	8009fe0 <Timer1kHzAddCallback>
//		Timer1kHzAddCallBack(&Run_Mode_Dumpload);
}
 800ab48:	bf00      	nop
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	20001554 	.word	0x20001554
 800ab50:	0800ab55 	.word	0x0800ab55

0800ab54 <StateMachineRunning>:

static void StateMachineRunning()
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
    static uint32_t tick = 0, loop_check_err = 0;
    static ERROR_CODE protect_ret;
    static FUNCTION_RETURN ret;
    int i;
    tick++;
 800ab5a:	4b74      	ldr	r3, [pc, #464]	; (800ad2c <StateMachineRunning+0x1d8>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	4a72      	ldr	r2, [pc, #456]	; (800ad2c <StateMachineRunning+0x1d8>)
 800ab62:	6013      	str	r3, [r2, #0]
    loop_check_err++;
 800ab64:	4b72      	ldr	r3, [pc, #456]	; (800ad30 <StateMachineRunning+0x1dc>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	4a71      	ldr	r2, [pc, #452]	; (800ad30 <StateMachineRunning+0x1dc>)
 800ab6c:	6013      	str	r3, [r2, #0]
    if (loop_check_err >= ERR_LOOP_DIV)
 800ab6e:	4b70      	ldr	r3, [pc, #448]	; (800ad30 <StateMachineRunning+0x1dc>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b04      	cmp	r3, #4
 800ab74:	d92b      	bls.n	800abce <StateMachineRunning+0x7a>
    {
        loop_check_err = 0;
 800ab76:	4b6e      	ldr	r3, [pc, #440]	; (800ad30 <StateMachineRunning+0x1dc>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]
        if (g_current_state != STATE_WIND_OFF && g_current_state != STATE_RESET)
 800ab7c:	4b6d      	ldr	r3, [pc, #436]	; (800ad34 <StateMachineRunning+0x1e0>)
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d024      	beq.n	800abce <StateMachineRunning+0x7a>
 800ab84:	4b6b      	ldr	r3, [pc, #428]	; (800ad34 <StateMachineRunning+0x1e0>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d020      	beq.n	800abce <StateMachineRunning+0x7a>
        {
            ErrorCheck_Running();
 800ab8c:	f7ff fd80 	bl	800a690 <ErrorCheck_Running>
            protect_ret = getFaultInfo();
 800ab90:	f7ff ff0e 	bl	800a9b0 <getFaultInfo>
 800ab94:	4603      	mov	r3, r0
 800ab96:	461a      	mov	r2, r3
 800ab98:	4b67      	ldr	r3, [pc, #412]	; (800ad38 <StateMachineRunning+0x1e4>)
 800ab9a:	701a      	strb	r2, [r3, #0]
            if (protect_ret != CODE_OK && faultInfo == CODE_OK)
 800ab9c:	4b66      	ldr	r3, [pc, #408]	; (800ad38 <StateMachineRunning+0x1e4>)
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d014      	beq.n	800abce <StateMachineRunning+0x7a>
 800aba4:	4b65      	ldr	r3, [pc, #404]	; (800ad3c <StateMachineRunning+0x1e8>)
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d110      	bne.n	800abce <StateMachineRunning+0x7a>
            {
                faultInfo = protect_ret;
 800abac:	4b62      	ldr	r3, [pc, #392]	; (800ad38 <StateMachineRunning+0x1e4>)
 800abae:	781a      	ldrb	r2, [r3, #0]
 800abb0:	4b62      	ldr	r3, [pc, #392]	; (800ad3c <StateMachineRunning+0x1e8>)
 800abb2:	701a      	strb	r2, [r3, #0]
                g_current_state = STATE_RESET;
 800abb4:	4b5f      	ldr	r3, [pc, #380]	; (800ad34 <StateMachineRunning+0x1e0>)
 800abb6:	2203      	movs	r2, #3
 800abb8:	701a      	strb	r2, [r3, #0]
                tick = 0;
 800abba:	4b5c      	ldr	r3, [pc, #368]	; (800ad2c <StateMachineRunning+0x1d8>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	601a      	str	r2, [r3, #0]
                prv_state = g_current_state;
 800abc0:	4b5c      	ldr	r3, [pc, #368]	; (800ad34 <StateMachineRunning+0x1e0>)
 800abc2:	781a      	ldrb	r2, [r3, #0]
 800abc4:	4b5e      	ldr	r3, [pc, #376]	; (800ad40 <StateMachineRunning+0x1ec>)
 800abc6:	701a      	strb	r2, [r3, #0]
                IsStartState = true;
 800abc8:	4b5e      	ldr	r3, [pc, #376]	; (800ad44 <StateMachineRunning+0x1f0>)
 800abca:	2201      	movs	r2, #1
 800abcc:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    for (i = 0; i < STATE_MAX; i++)
 800abce:	2300      	movs	r3, #0
 800abd0:	607b      	str	r3, [r7, #4]
 800abd2:	e090      	b.n	800acf6 <StateMachineRunning+0x1a2>
    {
        if (g_current_state == state_list[i].id)
 800abd4:	4a5c      	ldr	r2, [pc, #368]	; (800ad48 <StateMachineRunning+0x1f4>)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	011b      	lsls	r3, r3, #4
 800abda:	4413      	add	r3, r2
 800abdc:	781a      	ldrb	r2, [r3, #0]
 800abde:	4b55      	ldr	r3, [pc, #340]	; (800ad34 <StateMachineRunning+0x1e0>)
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	f040 8084 	bne.w	800acf0 <StateMachineRunning+0x19c>
        {
            if (tick < state_list[i].time_running)
 800abe8:	4a57      	ldr	r2, [pc, #348]	; (800ad48 <StateMachineRunning+0x1f4>)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	011b      	lsls	r3, r3, #4
 800abee:	4413      	add	r3, r2
 800abf0:	3304      	adds	r3, #4
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	4b4d      	ldr	r3, [pc, #308]	; (800ad2c <StateMachineRunning+0x1d8>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d94d      	bls.n	800ac98 <StateMachineRunning+0x144>
            {
                if (state_list[i].fn != NULL)
 800abfc:	4a52      	ldr	r2, [pc, #328]	; (800ad48 <StateMachineRunning+0x1f4>)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	011b      	lsls	r3, r3, #4
 800ac02:	4413      	add	r3, r2
 800ac04:	3308      	adds	r3, #8
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d079      	beq.n	800ad00 <StateMachineRunning+0x1ac>
                {
                    ret = state_list[i].fn();
 800ac0c:	4a4e      	ldr	r2, [pc, #312]	; (800ad48 <StateMachineRunning+0x1f4>)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	011b      	lsls	r3, r3, #4
 800ac12:	4413      	add	r3, r2
 800ac14:	3308      	adds	r3, #8
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4798      	blx	r3
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	4b4b      	ldr	r3, [pc, #300]	; (800ad4c <StateMachineRunning+0x1f8>)
 800ac20:	701a      	strb	r2, [r3, #0]
                    IsStartState = false;
 800ac22:	4b48      	ldr	r3, [pc, #288]	; (800ad44 <StateMachineRunning+0x1f0>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	701a      	strb	r2, [r3, #0]
                    if (state_list[i].is_always_true == true)
 800ac28:	4a47      	ldr	r2, [pc, #284]	; (800ad48 <StateMachineRunning+0x1f4>)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	011b      	lsls	r3, r3, #4
 800ac2e:	4413      	add	r3, r2
 800ac30:	330c      	adds	r3, #12
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d01f      	beq.n	800ac78 <StateMachineRunning+0x124>
                    {
                        if (ret == FUNCTION_FAIL)
 800ac38:	4b44      	ldr	r3, [pc, #272]	; (800ad4c <StateMachineRunning+0x1f8>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b03      	cmp	r3, #3
 800ac3e:	d15f      	bne.n	800ad00 <StateMachineRunning+0x1ac>
                        {
                            g_current_state = state_list[i].back;
 800ac40:	4a41      	ldr	r2, [pc, #260]	; (800ad48 <StateMachineRunning+0x1f4>)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	011b      	lsls	r3, r3, #4
 800ac46:	4413      	add	r3, r2
 800ac48:	3302      	adds	r3, #2
 800ac4a:	781a      	ldrb	r2, [r3, #0]
 800ac4c:	4b39      	ldr	r3, [pc, #228]	; (800ad34 <StateMachineRunning+0x1e0>)
 800ac4e:	701a      	strb	r2, [r3, #0]
                            tick = 0;
 800ac50:	4b36      	ldr	r3, [pc, #216]	; (800ad2c <StateMachineRunning+0x1d8>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	601a      	str	r2, [r3, #0]
                            if (state_list[i].code_fault != CODE_OK)
 800ac56:	4a3c      	ldr	r2, [pc, #240]	; (800ad48 <StateMachineRunning+0x1f4>)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	011b      	lsls	r3, r3, #4
 800ac5c:	4413      	add	r3, r2
 800ac5e:	330d      	adds	r3, #13
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d04c      	beq.n	800ad00 <StateMachineRunning+0x1ac>
                                faultInfo = state_list[i].code_fault;
 800ac66:	4a38      	ldr	r2, [pc, #224]	; (800ad48 <StateMachineRunning+0x1f4>)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	011b      	lsls	r3, r3, #4
 800ac6c:	4413      	add	r3, r2
 800ac6e:	330d      	adds	r3, #13
 800ac70:	781a      	ldrb	r2, [r3, #0]
 800ac72:	4b32      	ldr	r3, [pc, #200]	; (800ad3c <StateMachineRunning+0x1e8>)
 800ac74:	701a      	strb	r2, [r3, #0]
                    tick = 0;
                    if (state_list[i].code_fault != CODE_OK)
                        faultInfo = state_list[i].code_fault;
                }
            }
            break;
 800ac76:	e043      	b.n	800ad00 <StateMachineRunning+0x1ac>
                        if (ret == FUNCTION_DONE)
 800ac78:	4b34      	ldr	r3, [pc, #208]	; (800ad4c <StateMachineRunning+0x1f8>)
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d13f      	bne.n	800ad00 <StateMachineRunning+0x1ac>
                            g_current_state = state_list[i].next;
 800ac80:	4a31      	ldr	r2, [pc, #196]	; (800ad48 <StateMachineRunning+0x1f4>)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	011b      	lsls	r3, r3, #4
 800ac86:	4413      	add	r3, r2
 800ac88:	3301      	adds	r3, #1
 800ac8a:	781a      	ldrb	r2, [r3, #0]
 800ac8c:	4b29      	ldr	r3, [pc, #164]	; (800ad34 <StateMachineRunning+0x1e0>)
 800ac8e:	701a      	strb	r2, [r3, #0]
                            tick = 0;
 800ac90:	4b26      	ldr	r3, [pc, #152]	; (800ad2c <StateMachineRunning+0x1d8>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]
            break;
 800ac96:	e033      	b.n	800ad00 <StateMachineRunning+0x1ac>
                if (ret == FUNCTION_DONE)
 800ac98:	4b2c      	ldr	r3, [pc, #176]	; (800ad4c <StateMachineRunning+0x1f8>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	2b02      	cmp	r3, #2
 800ac9e:	d10b      	bne.n	800acb8 <StateMachineRunning+0x164>
                    g_current_state = state_list[i].next;
 800aca0:	4a29      	ldr	r2, [pc, #164]	; (800ad48 <StateMachineRunning+0x1f4>)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	011b      	lsls	r3, r3, #4
 800aca6:	4413      	add	r3, r2
 800aca8:	3301      	adds	r3, #1
 800acaa:	781a      	ldrb	r2, [r3, #0]
 800acac:	4b21      	ldr	r3, [pc, #132]	; (800ad34 <StateMachineRunning+0x1e0>)
 800acae:	701a      	strb	r2, [r3, #0]
                    tick = 0;
 800acb0:	4b1e      	ldr	r3, [pc, #120]	; (800ad2c <StateMachineRunning+0x1d8>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]
            break;
 800acb6:	e023      	b.n	800ad00 <StateMachineRunning+0x1ac>
                    g_current_state = state_list[i].back;
 800acb8:	4a23      	ldr	r2, [pc, #140]	; (800ad48 <StateMachineRunning+0x1f4>)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	011b      	lsls	r3, r3, #4
 800acbe:	4413      	add	r3, r2
 800acc0:	3302      	adds	r3, #2
 800acc2:	781a      	ldrb	r2, [r3, #0]
 800acc4:	4b1b      	ldr	r3, [pc, #108]	; (800ad34 <StateMachineRunning+0x1e0>)
 800acc6:	701a      	strb	r2, [r3, #0]
                    tick = 0;
 800acc8:	4b18      	ldr	r3, [pc, #96]	; (800ad2c <StateMachineRunning+0x1d8>)
 800acca:	2200      	movs	r2, #0
 800accc:	601a      	str	r2, [r3, #0]
                    if (state_list[i].code_fault != CODE_OK)
 800acce:	4a1e      	ldr	r2, [pc, #120]	; (800ad48 <StateMachineRunning+0x1f4>)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	011b      	lsls	r3, r3, #4
 800acd4:	4413      	add	r3, r2
 800acd6:	330d      	adds	r3, #13
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d010      	beq.n	800ad00 <StateMachineRunning+0x1ac>
                        faultInfo = state_list[i].code_fault;
 800acde:	4a1a      	ldr	r2, [pc, #104]	; (800ad48 <StateMachineRunning+0x1f4>)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	011b      	lsls	r3, r3, #4
 800ace4:	4413      	add	r3, r2
 800ace6:	330d      	adds	r3, #13
 800ace8:	781a      	ldrb	r2, [r3, #0]
 800acea:	4b14      	ldr	r3, [pc, #80]	; (800ad3c <StateMachineRunning+0x1e8>)
 800acec:	701a      	strb	r2, [r3, #0]
            break;
 800acee:	e007      	b.n	800ad00 <StateMachineRunning+0x1ac>
    for (i = 0; i < STATE_MAX; i++)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3301      	adds	r3, #1
 800acf4:	607b      	str	r3, [r7, #4]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2b04      	cmp	r3, #4
 800acfa:	f77f af6b 	ble.w	800abd4 <StateMachineRunning+0x80>
 800acfe:	e000      	b.n	800ad02 <StateMachineRunning+0x1ae>
            break;
 800ad00:	bf00      	nop
        }
    }

    if (prv_state != g_current_state)
 800ad02:	4b0f      	ldr	r3, [pc, #60]	; (800ad40 <StateMachineRunning+0x1ec>)
 800ad04:	781a      	ldrb	r2, [r3, #0]
 800ad06:	4b0b      	ldr	r3, [pc, #44]	; (800ad34 <StateMachineRunning+0x1e0>)
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d009      	beq.n	800ad22 <StateMachineRunning+0x1ce>
    {
        tick = 0;
 800ad0e:	4b07      	ldr	r3, [pc, #28]	; (800ad2c <StateMachineRunning+0x1d8>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	601a      	str	r2, [r3, #0]
        prv_state = g_current_state;
 800ad14:	4b07      	ldr	r3, [pc, #28]	; (800ad34 <StateMachineRunning+0x1e0>)
 800ad16:	781a      	ldrb	r2, [r3, #0]
 800ad18:	4b09      	ldr	r3, [pc, #36]	; (800ad40 <StateMachineRunning+0x1ec>)
 800ad1a:	701a      	strb	r2, [r3, #0]
        IsStartState = true;
 800ad1c:	4b09      	ldr	r3, [pc, #36]	; (800ad44 <StateMachineRunning+0x1f0>)
 800ad1e:	2201      	movs	r2, #1
 800ad20:	701a      	strb	r2, [r3, #0]
    }
}
 800ad22:	bf00      	nop
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	2000155c 	.word	0x2000155c
 800ad30:	20001560 	.word	0x20001560
 800ad34:	20001554 	.word	0x20001554
 800ad38:	20001564 	.word	0x20001564
 800ad3c:	20001556 	.word	0x20001556
 800ad40:	20001555 	.word	0x20001555
 800ad44:	20000414 	.word	0x20000414
 800ad48:	20000418 	.word	0x20000418
 800ad4c:	20001565 	.word	0x20001565

0800ad50 <WindOff>:

static FUNCTION_RETURN WindOff(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	af00      	add	r7, sp, #0
    if (IsStartState == true)
 800ad54:	4b05      	ldr	r3, [pc, #20]	; (800ad6c <WindOff+0x1c>)
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d004      	beq.n	800ad66 <WindOff+0x16>
    {
        ErrorCheckInit();
 800ad5c:	f7ff fc4c 	bl	800a5f8 <ErrorCheckInit>
        faultInfo = CODE_OK;
 800ad60:	4b03      	ldr	r3, [pc, #12]	; (800ad70 <WindOff+0x20>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	701a      	strb	r2, [r3, #0]
    }
    return FUNCTION_DONE;
 800ad66:	2302      	movs	r3, #2
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	20000414 	.word	0x20000414
 800ad70:	20001556 	.word	0x20001556

0800ad74 <CheckWind>:

static FUNCTION_RETURN CheckWind(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	af00      	add	r7, sp, #0
    if (g_wind.vwt > DC_MIN_INPUT && g_wind.vwt < DC_MAX_INPUT)
 800ad78:	4b33      	ldr	r3, [pc, #204]	; (800ae48 <CheckWind+0xd4>)
 800ad7a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ad82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad86:	dd0c      	ble.n	800ada2 <CheckWind+0x2e>
 800ad88:	4b2f      	ldr	r3, [pc, #188]	; (800ae48 <CheckWind+0xd4>)
 800ad8a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad8e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ae4c <CheckWind+0xd8>
 800ad92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9a:	d502      	bpl.n	800ada2 <CheckWind+0x2e>
    {
        WindControlInit(&g_wind);
 800ad9c:	482a      	ldr	r0, [pc, #168]	; (800ae48 <CheckWind+0xd4>)
 800ad9e:	f000 f963 	bl	800b068 <WindControlInit>
    }

    if (g_wind.is_plugin == true)
 800ada2:	4b29      	ldr	r3, [pc, #164]	; (800ae48 <CheckWind+0xd4>)
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <CheckWind+0x3a>
    {
        return FUNCTION_DONE;
 800adaa:	2302      	movs	r3, #2
 800adac:	e049      	b.n	800ae42 <CheckWind+0xce>
    }
    else
    {
        if(g_wind.vwt > DC_MAX_INPUT)
 800adae:	4b26      	ldr	r3, [pc, #152]	; (800ae48 <CheckWind+0xd4>)
 800adb0:	edd3 7a01 	vldr	s15, [r3, #4]
 800adb4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800ae4c <CheckWind+0xd8>
 800adb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc0:	dd06      	ble.n	800add0 <CheckWind+0x5c>
        {
            faultInfo = CODE_OVDC1;
 800adc2:	4b23      	ldr	r3, [pc, #140]	; (800ae50 <CheckWind+0xdc>)
 800adc4:	2208      	movs	r2, #8
 800adc6:	701a      	strb	r2, [r3, #0]
            Pin_Func_TurnOff(LED1);
 800adc8:	2000      	movs	r0, #0
 800adca:	f7fe fc03 	bl	80095d4 <Pin_Func_TurnOff>
 800adce:	e013      	b.n	800adf8 <CheckWind+0x84>
        }
        else if(g_wind.vwt <= DC_MIN_INPUT)
 800add0:	4b1d      	ldr	r3, [pc, #116]	; (800ae48 <CheckWind+0xd4>)
 800add2:	edd3 7a01 	vldr	s15, [r3, #4]
 800add6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800adda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adde:	d80b      	bhi.n	800adf8 <CheckWind+0x84>
        {
            faultInfo = NoWindInput;
 800ade0:	4b1b      	ldr	r3, [pc, #108]	; (800ae50 <CheckWind+0xdc>)
 800ade2:	2202      	movs	r2, #2
 800ade4:	701a      	strb	r2, [r3, #0]
            Pin_Func_TurnOff(LED1);
 800ade6:	2000      	movs	r0, #0
 800ade8:	f7fe fbf4 	bl	80095d4 <Pin_Func_TurnOff>
            Pin_Func_TurnOff(LED2);
 800adec:	2001      	movs	r0, #1
 800adee:	f7fe fbf1 	bl	80095d4 <Pin_Func_TurnOff>
            Pin_Func_TurnOff(LED3);
 800adf2:	2002      	movs	r0, #2
 800adf4:	f7fe fbee 	bl	80095d4 <Pin_Func_TurnOff>
        }
    }
		if(g_vout > BAT_MIN_INPUT && g_vout < BAT_MAX_INPUT )
 800adf8:	4b16      	ldr	r3, [pc, #88]	; (800ae54 <CheckWind+0xe0>)
 800adfa:	edd3 7a00 	vldr	s15, [r3]
 800adfe:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800ae58 <CheckWind+0xe4>
 800ae02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae0a:	dd0d      	ble.n	800ae28 <CheckWind+0xb4>
 800ae0c:	4b11      	ldr	r3, [pc, #68]	; (800ae54 <CheckWind+0xe0>)
 800ae0e:	edd3 7a00 	vldr	s15, [r3]
 800ae12:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800ae5c <CheckWind+0xe8>
 800ae16:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae1e:	d503      	bpl.n	800ae28 <CheckWind+0xb4>
		{
				g_state_bat = true;
 800ae20:	4b0f      	ldr	r3, [pc, #60]	; (800ae60 <CheckWind+0xec>)
 800ae22:	2201      	movs	r2, #1
 800ae24:	701a      	strb	r2, [r3, #0]
 800ae26:	e002      	b.n	800ae2e <CheckWind+0xba>
		}
		else
		{
				g_state_bat = false;
 800ae28:	4b0d      	ldr	r3, [pc, #52]	; (800ae60 <CheckWind+0xec>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	701a      	strb	r2, [r3, #0]
		}
		if(g_state_bat == true)
 800ae2e:	4b0c      	ldr	r3, [pc, #48]	; (800ae60 <CheckWind+0xec>)
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d001      	beq.n	800ae3a <CheckWind+0xc6>
		{
				return FUNCTION_DONE;
 800ae36:	2302      	movs	r3, #2
 800ae38:	e003      	b.n	800ae42 <CheckWind+0xce>
		}
		else
		{
				faultInfo = NoBatInput;
 800ae3a:	4b05      	ldr	r3, [pc, #20]	; (800ae50 <CheckWind+0xdc>)
 800ae3c:	2203      	movs	r2, #3
 800ae3e:	701a      	strb	r2, [r3, #0]
		}
    return FUNCTION_FAIL;
 800ae40:	2303      	movs	r3, #3
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	2000156c 	.word	0x2000156c
 800ae4c:	43160000 	.word	0x43160000
 800ae50:	20001556 	.word	0x20001556
 800ae54:	20000880 	.word	0x20000880
 800ae58:	42140000 	.word	0x42140000
 800ae5c:	42700000 	.word	0x42700000
 800ae60:	20001559 	.word	0x20001559

0800ae64 <CloseLoop>:

static FUNCTION_RETURN CloseLoop(void)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	af00      	add	r7, sp, #0
    static uint32_t count_wind = 0;
    if(g_wind.vwt > DC_MIN_INPUT && g_wind.vwt < DC_MAX_INPUT && g_state_bat == true)
 800ae68:	4b5c      	ldr	r3, [pc, #368]	; (800afdc <CloseLoop+0x178>)
 800ae6a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ae6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ae72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae76:	dd14      	ble.n	800aea2 <CloseLoop+0x3e>
 800ae78:	4b58      	ldr	r3, [pc, #352]	; (800afdc <CloseLoop+0x178>)
 800ae7a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ae7e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800afe0 <CloseLoop+0x17c>
 800ae82:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae8a:	d50a      	bpl.n	800aea2 <CloseLoop+0x3e>
 800ae8c:	4b55      	ldr	r3, [pc, #340]	; (800afe4 <CloseLoop+0x180>)
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d006      	beq.n	800aea2 <CloseLoop+0x3e>
    {
        g_wind.is_plugin = true;
 800ae94:	4b51      	ldr	r3, [pc, #324]	; (800afdc <CloseLoop+0x178>)
 800ae96:	2201      	movs	r2, #1
 800ae98:	701a      	strb	r2, [r3, #0]
        faultInfo = CODE_OK;
 800ae9a:	4b53      	ldr	r3, [pc, #332]	; (800afe8 <CloseLoop+0x184>)
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	701a      	strb	r2, [r3, #0]
 800aea0:	e002      	b.n	800aea8 <CloseLoop+0x44>
    }
    else{
        g_wind.is_plugin = false;
 800aea2:	4b4e      	ldr	r3, [pc, #312]	; (800afdc <CloseLoop+0x178>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	701a      	strb	r2, [r3, #0]
    }

    if(g_wind.is_plugin == true)
 800aea8:	4b4c      	ldr	r3, [pc, #304]	; (800afdc <CloseLoop+0x178>)
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d049      	beq.n	800af44 <CloseLoop+0xe0>
    {
        if(g_vout < MAX_VOUT && g_iload < MAX_ILOAD)
 800aeb0:	4b4e      	ldr	r3, [pc, #312]	; (800afec <CloseLoop+0x188>)
 800aeb2:	edd3 7a00 	vldr	s15, [r3]
 800aeb6:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800aff0 <CloseLoop+0x18c>
 800aeba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec2:	d514      	bpl.n	800aeee <CloseLoop+0x8a>
 800aec4:	4b4b      	ldr	r3, [pc, #300]	; (800aff4 <CloseLoop+0x190>)
 800aec6:	edd3 7a00 	vldr	s15, [r3]
 800aeca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800aece:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed6:	d50a      	bpl.n	800aeee <CloseLoop+0x8a>
        {
            faultInfo = CODE_OK;
 800aed8:	4b43      	ldr	r3, [pc, #268]	; (800afe8 <CloseLoop+0x184>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	701a      	strb	r2, [r3, #0]
            DcDc_ControllerMppt();
 800aede:	f7ff fa71 	bl	800a3c4 <DcDc_ControllerMppt>
			DC_StartPWM_Boost();
 800aee2:	f7ff fa3f 	bl	800a364 <DC_StartPWM_Boost>
			DC_StartPWM_Buck();
 800aee6:	f7ff fa5b 	bl	800a3a0 <DC_StartPWM_Buck>
		{
			faultInfo = CODE_OCDC1;
		}
        return FUNCTION_FAIL;
    }
    return FUNCTION_DONE;
 800aeea:	2302      	movs	r3, #2
 800aeec:	e073      	b.n	800afd6 <CloseLoop+0x172>
            if(g_vout > MAX_VOUT)
 800aeee:	4b3f      	ldr	r3, [pc, #252]	; (800afec <CloseLoop+0x188>)
 800aef0:	edd3 7a00 	vldr	s15, [r3]
 800aef4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800aff0 <CloseLoop+0x18c>
 800aef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af00:	dd0a      	ble.n	800af18 <CloseLoop+0xb4>
                faultInfo = CODE_OVDC2;
 800af02:	4b39      	ldr	r3, [pc, #228]	; (800afe8 <CloseLoop+0x184>)
 800af04:	2209      	movs	r2, #9
 800af06:	701a      	strb	r2, [r3, #0]
                DC_StopPWM_Buck();
 800af08:	f7ff fa3e 	bl	800a388 <DC_StopPWM_Buck>
                DC_StopPWM_Boost();
 800af0c:	f7ff fa1e 	bl	800a34c <DC_StopPWM_Boost>
                Pin_Func_TurnOn(LED2);
 800af10:	2001      	movs	r0, #1
 800af12:	f7fe fb35 	bl	8009580 <Pin_Func_TurnOn>
 800af16:	e013      	b.n	800af40 <CloseLoop+0xdc>
            else if(g_iload > MAX_ILOAD)
 800af18:	4b36      	ldr	r3, [pc, #216]	; (800aff4 <CloseLoop+0x190>)
 800af1a:	edd3 7a00 	vldr	s15, [r3]
 800af1e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800af22:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af2a:	dd09      	ble.n	800af40 <CloseLoop+0xdc>
                faultInfo = CODE_OCDC1;
 800af2c:	4b2e      	ldr	r3, [pc, #184]	; (800afe8 <CloseLoop+0x184>)
 800af2e:	220c      	movs	r2, #12
 800af30:	701a      	strb	r2, [r3, #0]
                DC_StopPWM_Buck();
 800af32:	f7ff fa29 	bl	800a388 <DC_StopPWM_Buck>
                DC_StopPWM_Boost();
 800af36:	f7ff fa09 	bl	800a34c <DC_StopPWM_Boost>
                Pin_Func_TurnOn(LED3);
 800af3a:	2002      	movs	r0, #2
 800af3c:	f7fe fb20 	bl	8009580 <Pin_Func_TurnOn>
            return FUNCTION_FAIL;
 800af40:	2303      	movs	r3, #3
 800af42:	e048      	b.n	800afd6 <CloseLoop+0x172>
        if(g_wind.vwt > DC_MAX_INPUT)
 800af44:	4b25      	ldr	r3, [pc, #148]	; (800afdc <CloseLoop+0x178>)
 800af46:	edd3 7a01 	vldr	s15, [r3, #4]
 800af4a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800afe0 <CloseLoop+0x17c>
 800af4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af56:	dd17      	ble.n	800af88 <CloseLoop+0x124>
			count_wind++;
 800af58:	4b27      	ldr	r3, [pc, #156]	; (800aff8 <CloseLoop+0x194>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	3301      	adds	r3, #1
 800af5e:	4a26      	ldr	r2, [pc, #152]	; (800aff8 <CloseLoop+0x194>)
 800af60:	6013      	str	r3, [r2, #0]
			if(count_wind > 300)
 800af62:	4b25      	ldr	r3, [pc, #148]	; (800aff8 <CloseLoop+0x194>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800af6a:	d90a      	bls.n	800af82 <CloseLoop+0x11e>
				faultInfo = CODE_OVDC1;
 800af6c:	4b1e      	ldr	r3, [pc, #120]	; (800afe8 <CloseLoop+0x184>)
 800af6e:	2208      	movs	r2, #8
 800af70:	701a      	strb	r2, [r3, #0]
				DC_StopPWM_Buck();
 800af72:	f7ff fa09 	bl	800a388 <DC_StopPWM_Buck>
				DC_StopPWM_Boost();
 800af76:	f7ff f9e9 	bl	800a34c <DC_StopPWM_Boost>
				Pin_Func_TurnOn(LED1);
 800af7a:	2000      	movs	r0, #0
 800af7c:	f7fe fb00 	bl	8009580 <Pin_Func_TurnOn>
 800af80:	e028      	b.n	800afd4 <CloseLoop+0x170>
				Dumpload_controller();
 800af82:	f7ff faef 	bl	800a564 <Dumpload_controller>
 800af86:	e025      	b.n	800afd4 <CloseLoop+0x170>
        else if(g_wind.vwt <= DC_MIN_INPUT)
 800af88:	4b14      	ldr	r3, [pc, #80]	; (800afdc <CloseLoop+0x178>)
 800af8a:	edd3 7a01 	vldr	s15, [r3, #4]
 800af8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800af92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af96:	d810      	bhi.n	800afba <CloseLoop+0x156>
            faultInfo = NoWindInput;
 800af98:	4b13      	ldr	r3, [pc, #76]	; (800afe8 <CloseLoop+0x184>)
 800af9a:	2202      	movs	r2, #2
 800af9c:	701a      	strb	r2, [r3, #0]
            DC_StopPWM_Buck();
 800af9e:	f7ff f9f3 	bl	800a388 <DC_StopPWM_Buck>
            DC_StopPWM_Boost();
 800afa2:	f7ff f9d3 	bl	800a34c <DC_StopPWM_Boost>
            Pin_Func_TurnOn(LED1);
 800afa6:	2000      	movs	r0, #0
 800afa8:	f7fe faea 	bl	8009580 <Pin_Func_TurnOn>
            Pin_Func_TurnOn(LED2);
 800afac:	2001      	movs	r0, #1
 800afae:	f7fe fae7 	bl	8009580 <Pin_Func_TurnOn>
            Pin_Func_TurnOn(LED3);
 800afb2:	2002      	movs	r0, #2
 800afb4:	f7fe fae4 	bl	8009580 <Pin_Func_TurnOn>
 800afb8:	e00c      	b.n	800afd4 <CloseLoop+0x170>
		else if(g_wind.iwt > MAX_ILOAD)
 800afba:	4b08      	ldr	r3, [pc, #32]	; (800afdc <CloseLoop+0x178>)
 800afbc:	edd3 7a02 	vldr	s15, [r3, #8]
 800afc0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800afc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afcc:	dd02      	ble.n	800afd4 <CloseLoop+0x170>
			faultInfo = CODE_OCDC1;
 800afce:	4b06      	ldr	r3, [pc, #24]	; (800afe8 <CloseLoop+0x184>)
 800afd0:	220c      	movs	r2, #12
 800afd2:	701a      	strb	r2, [r3, #0]
        return FUNCTION_FAIL;
 800afd4:	2303      	movs	r3, #3
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	2000156c 	.word	0x2000156c
 800afe0:	43160000 	.word	0x43160000
 800afe4:	20001559 	.word	0x20001559
 800afe8:	20001556 	.word	0x20001556
 800afec:	20000880 	.word	0x20000880
 800aff0:	42480000 	.word	0x42480000
 800aff4:	20000884 	.word	0x20000884
 800aff8:	20001568 	.word	0x20001568

0800affc <ErrorFunction>:

static FUNCTION_RETURN ErrorFunction(void)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	af00      	add	r7, sp, #0
    if (IsStartState == true)
 800b000:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <ErrorFunction+0x44>)
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d003      	beq.n	800b010 <ErrorFunction+0x14>
    {
        DC_StopPWM_Buck();
 800b008:	f7ff f9be 	bl	800a388 <DC_StopPWM_Buck>
        DC_StopPWM_Boost();
 800b00c:	f7ff f99e 	bl	800a34c <DC_StopPWM_Boost>
    }
    if (faultInfo == CODE_OVDC1)
 800b010:	4b0c      	ldr	r3, [pc, #48]	; (800b044 <ErrorFunction+0x48>)
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2b08      	cmp	r3, #8
 800b016:	d102      	bne.n	800b01e <ErrorFunction+0x22>
    {
    	Pin_Func_TurnOn(LED1);
 800b018:	2000      	movs	r0, #0
 800b01a:	f7fe fab1 	bl	8009580 <Pin_Func_TurnOn>
    }
    if (faultInfo == CODE_OVDC2)
 800b01e:	4b09      	ldr	r3, [pc, #36]	; (800b044 <ErrorFunction+0x48>)
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	2b09      	cmp	r3, #9
 800b024:	d102      	bne.n	800b02c <ErrorFunction+0x30>
    {
    	Pin_Func_TurnOn(LED2);
 800b026:	2001      	movs	r0, #1
 800b028:	f7fe faaa 	bl	8009580 <Pin_Func_TurnOn>
    }
    if (faultInfo == CODE_OCDC1)
 800b02c:	4b05      	ldr	r3, [pc, #20]	; (800b044 <ErrorFunction+0x48>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	2b0c      	cmp	r3, #12
 800b032:	d102      	bne.n	800b03a <ErrorFunction+0x3e>
    {
    	Pin_Func_TurnOn(LED3);
 800b034:	2002      	movs	r0, #2
 800b036:	f7fe faa3 	bl	8009580 <Pin_Func_TurnOn>
    }
    return FUNCTION_FAIL;
 800b03a:	2303      	movs	r3, #3
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	20000414 	.word	0x20000414
 800b044:	20001556 	.word	0x20001556

0800b048 <StateReset>:

static FUNCTION_RETURN StateReset(void)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	af00      	add	r7, sp, #0
    if (IsStartState == true)
 800b04c:	4b05      	ldr	r3, [pc, #20]	; (800b064 <StateReset+0x1c>)
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d003      	beq.n	800b05c <StateReset+0x14>
    {
        DC_StopPWM_Buck();
 800b054:	f7ff f998 	bl	800a388 <DC_StopPWM_Buck>
        DC_StopPWM_Boost();
 800b058:	f7ff f978 	bl	800a34c <DC_StopPWM_Boost>
    }
    return FUNCTION_DONE;
 800b05c:	2302      	movs	r3, #2
}
 800b05e:	4618      	mov	r0, r3
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	20000414 	.word	0x20000414

0800b068 <WindControlInit>:

WIND g_wind;



void WindControlInit(WIND *wind){
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
	wind->is_plugin 			= true;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	701a      	strb	r2, [r3, #0]
//	wind->boost_state 			= false;
//	wind->is_dumpload 			= false;
//	wind->vwt_oc 				= wind->vwt;
	TestMPPTInit(&wind->mppt);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	3328      	adds	r3, #40	; 0x28
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 f826 	bl	800b0cc <TestMPPTInit>
//	wind->mppt.mppt_enable 		= 1;
//	wind->mppt.VmppOut 			= wind->vwt_oc - 5;
//	wind->mppt.MinVolt 			= wind->vwt_oc * 0.5f;
}
 800b080:	bf00      	nop
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <WindControlMppt>:

void WindControlMppt(WIND *wind){
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
	TestMPPTProcess(&wind->mppt);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	3328      	adds	r3, #40	; 0x28
 800b094:	4618      	mov	r0, r3
 800b096:	f000 f86b 	bl	800b170 <TestMPPTProcess>
//
////		if(fabs(wind->mppt.Vwt - wind->mppt.VmppOut) > 5.0){
////			wind->mppt.VmppOut = wind->mppt.Vwt - 1.0;
////		}
//	}
}
 800b09a:	bf00      	nop
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <WindControlUpdate>:

void WindControlUpdate(WIND *wind, float wind_cur, float wind_vol){
 800b0a2:	b480      	push	{r7}
 800b0a4:	b085      	sub	sp, #20
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	60f8      	str	r0, [r7, #12]
 800b0aa:	ed87 0a02 	vstr	s0, [r7, #8]
 800b0ae:	edc7 0a01 	vstr	s1, [r7, #4]

	wind->vwt = wind_vol;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	605a      	str	r2, [r3, #4]
	wind->iwt = wind_cur;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	609a      	str	r2, [r3, #8]
}
 800b0be:	bf00      	nop
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
	...

0800b0cc <TestMPPTInit>:

bool flag_check_mppt = false;

//static timer_advance_obj_t *s_ptimer_pwm;

void TestMPPTInit(MPPT_PNO *v){
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
	v->Iwt = 0;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f04f 0200 	mov.w	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
	v->Iwt_prev = 0;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f04f 0200 	mov.w	r2, #0
 800b0e2:	605a      	str	r2, [r3, #4]
	v->Vwt = 0;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f04f 0200 	mov.w	r2, #0
 800b0ea:	609a      	str	r2, [r3, #8]
	v->Vwt_prev = 0;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f04f 0200 	mov.w	r2, #0
 800b0f2:	60da      	str	r2, [r3, #12]
	v->Delta_V = 0;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f04f 0200 	mov.w	r2, #0
 800b0fa:	611a      	str	r2, [r3, #16]
	v->Delta_P = 0;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f04f 0200 	mov.w	r2, #0
 800b102:	615a      	str	r2, [r3, #20]
	v->Stepsize = 0;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f04f 0200 	mov.w	r2, #0
 800b10a:	619a      	str	r2, [r3, #24]
	v->K_factor = 1;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b112:	61da      	str	r2, [r3, #28]
	v->Power_wind = 0.1;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a12      	ldr	r2, [pc, #72]	; (800b160 <TestMPPTInit+0x94>)
 800b118:	621a      	str	r2, [r3, #32]
	v->Power_wind_prev = 0;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f04f 0200 	mov.w	r2, #0
 800b120:	625a      	str	r2, [r3, #36]	; 0x24
//	v->VmppOut = 0;
//	v->VmppOut_prev = 0;
//	v->VmppOutMax	= 2;
//	v->VmppOutMin = 0.005;
	v-> D_ref = 0 ;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f04f 0200 	mov.w	r2, #0
 800b128:	639a      	str	r2, [r3, #56]	; 0x38
	v-> D_prev  = 0.01 ;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a0d      	ldr	r2, [pc, #52]	; (800b164 <TestMPPTInit+0x98>)
 800b12e:	63da      	str	r2, [r3, #60]	; 0x3c
	v-> Delta_D = 0.001;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a0d      	ldr	r2, [pc, #52]	; (800b168 <TestMPPTInit+0x9c>)
 800b134:	641a      	str	r2, [r3, #64]	; 0x40
	v->	D_refMin = 0.005 ;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a0c      	ldr	r2, [pc, #48]	; (800b16c <TestMPPTInit+0xa0>)
 800b13a:	649a      	str	r2, [r3, #72]	; 0x48
	v->	D_refMax = 1.5 ;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800b142:	645a      	str	r2, [r3, #68]	; 0x44
	v->mppt_enable = 1;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	v->mppt_first = 1;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr
 800b160:	3dcccccd 	.word	0x3dcccccd
 800b164:	3c23d70a 	.word	0x3c23d70a
 800b168:	3a83126f 	.word	0x3a83126f
 800b16c:	3ba3d70a 	.word	0x3ba3d70a

0800b170 <TestMPPTProcess>:

void TestMPPTProcess(MPPT_PNO *v){
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]

//	flag_check_mppt = true;
	v->Delta_V 		= v->Vwt - v->Vwt_prev;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	ed93 7a02 	vldr	s14, [r3, #8]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	edd3 7a03 	vldr	s15, [r3, #12]
 800b184:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	edc3 7a04 	vstr	s15, [r3, #16]
	v->Power_wind 	= v->Vwt * v->Iwt;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	ed93 7a02 	vldr	s14, [r3, #8]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	edd3 7a00 	vldr	s15, [r3]
 800b19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	edc3 7a08 	vstr	s15, [r3, #32]
	v->Delta_P 		= v->Power_wind - v->Power_wind_prev;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	ed93 7a08 	vldr	s14, [r3, #32]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b1b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	edc3 7a05 	vstr	s15, [r3, #20]
	v->K_factor		= 1;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b1c0:	61da      	str	r2, [r3, #28]

	if ( v->mppt_enable == 1){
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d15a      	bne.n	800b282 <TestMPPTProcess+0x112>
		if (v->Delta_P > 0){
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	edd3 7a05 	vldr	s15, [r3, #20]
 800b1d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1da:	dd29      	ble.n	800b230 <TestMPPTProcess+0xc0>
			if(v->Delta_V >0){
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	edd3 7a04 	vldr	s15, [r3, #16]
 800b1e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ea:	dd10      	ble.n	800b20e <TestMPPTProcess+0x9e>
				v->D_ref = v->D_prev - v->Delta_D	*	v->K_factor;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	edd3 7a07 	vldr	s15, [r3, #28]
 800b1fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b202:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 800b20c:	e039      	b.n	800b282 <TestMPPTProcess+0x112>
			}
			else{
				v->D_ref = v->D_prev + v->Delta_D	*	v->K_factor;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	edd3 7a07 	vldr	s15, [r3, #28]
 800b220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b224:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 800b22e:	e028      	b.n	800b282 <TestMPPTProcess+0x112>
			}
		}
		else{
			if(v->Delta_V >0){
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	edd3 7a04 	vldr	s15, [r3, #16]
 800b236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23e:	dd10      	ble.n	800b262 <TestMPPTProcess+0xf2>
				v->D_ref = v->D_prev + v->Delta_D	*	v->K_factor;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	edd3 7a07 	vldr	s15, [r3, #28]
 800b252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 800b260:	e00f      	b.n	800b282 <TestMPPTProcess+0x112>
			}
			else{
				v->D_ref = v->D_prev - v->Delta_D	*	v->K_factor;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	edd3 7a07 	vldr	s15, [r3, #28]
 800b274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			}
		}
	}

	if (v->D_ref > v->D_refMax || v->D_ref < v->D_refMin ){
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b28e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b296:	dc0a      	bgt.n	800b2ae <TestMPPTProcess+0x13e>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800b2a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ac:	d503      	bpl.n	800b2b6 <TestMPPTProcess+0x146>
		v->D_ref = v->D_prev;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	639a      	str	r2, [r3, #56]	; 0x38
	}

	v->Power_wind_prev = v->Power_wind;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a1a      	ldr	r2, [r3, #32]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	625a      	str	r2, [r3, #36]	; 0x24
	v->Vwt_prev = v->Vwt;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	689a      	ldr	r2, [r3, #8]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	60da      	str	r2, [r3, #12]
	v->D_prev = v->D_ref;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800b2ce:	bf00      	nop
 800b2d0:	370c      	adds	r7, #12
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
	...

0800b2dc <TestMPPTUpdate>:

void TestMPPTUpdate(MPPT_PNO *mppt, float cur, float vol){
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2e8:	edc7 0a01 	vstr	s1, [r7, #4]

	static float vwt_avg_multiplier = 0.002f;
	static float iwt_avg_multiplier = 0.002f;
	mppt ->Vwt = ((vol - mppt->Vwt)*vwt_avg_multiplier) + mppt->Vwt;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	edd3 7a02 	vldr	s15, [r3, #8]
 800b2f2:	ed97 7a01 	vldr	s14, [r7, #4]
 800b2f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b2fa:	4b13      	ldr	r3, [pc, #76]	; (800b348 <TestMPPTUpdate+0x6c>)
 800b2fc:	edd3 7a00 	vldr	s15, [r3]
 800b300:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	edd3 7a02 	vldr	s15, [r3, #8]
 800b30a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	edc3 7a02 	vstr	s15, [r3, #8]
	mppt ->Iwt = ((cur - mppt->Iwt)*iwt_avg_multiplier) + mppt->Iwt;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	edd3 7a00 	vldr	s15, [r3]
 800b31a:	ed97 7a02 	vldr	s14, [r7, #8]
 800b31e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b322:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <TestMPPTUpdate+0x70>)
 800b324:	edd3 7a00 	vldr	s15, [r3]
 800b328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	edd3 7a00 	vldr	s15, [r3]
 800b332:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	edc3 7a00 	vstr	s15, [r3]

}
 800b33c:	bf00      	nop
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	20000468 	.word	0x20000468
 800b34c:	2000046c 	.word	0x2000046c

0800b350 <malloc>:
 800b350:	4b02      	ldr	r3, [pc, #8]	; (800b35c <malloc+0xc>)
 800b352:	4601      	mov	r1, r0
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	f000 b82b 	b.w	800b3b0 <_malloc_r>
 800b35a:	bf00      	nop
 800b35c:	200004bc 	.word	0x200004bc

0800b360 <free>:
 800b360:	4b02      	ldr	r3, [pc, #8]	; (800b36c <free+0xc>)
 800b362:	4601      	mov	r1, r0
 800b364:	6818      	ldr	r0, [r3, #0]
 800b366:	f000 b917 	b.w	800b598 <_free_r>
 800b36a:	bf00      	nop
 800b36c:	200004bc 	.word	0x200004bc

0800b370 <sbrk_aligned>:
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	4e0e      	ldr	r6, [pc, #56]	; (800b3ac <sbrk_aligned+0x3c>)
 800b374:	460c      	mov	r4, r1
 800b376:	6831      	ldr	r1, [r6, #0]
 800b378:	4605      	mov	r5, r0
 800b37a:	b911      	cbnz	r1, 800b382 <sbrk_aligned+0x12>
 800b37c:	f000 f8c2 	bl	800b504 <_sbrk_r>
 800b380:	6030      	str	r0, [r6, #0]
 800b382:	4621      	mov	r1, r4
 800b384:	4628      	mov	r0, r5
 800b386:	f000 f8bd 	bl	800b504 <_sbrk_r>
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	d00a      	beq.n	800b3a4 <sbrk_aligned+0x34>
 800b38e:	1cc4      	adds	r4, r0, #3
 800b390:	f024 0403 	bic.w	r4, r4, #3
 800b394:	42a0      	cmp	r0, r4
 800b396:	d007      	beq.n	800b3a8 <sbrk_aligned+0x38>
 800b398:	1a21      	subs	r1, r4, r0
 800b39a:	4628      	mov	r0, r5
 800b39c:	f000 f8b2 	bl	800b504 <_sbrk_r>
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d101      	bne.n	800b3a8 <sbrk_aligned+0x38>
 800b3a4:	f04f 34ff 	mov.w	r4, #4294967295
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	bd70      	pop	{r4, r5, r6, pc}
 800b3ac:	200015e8 	.word	0x200015e8

0800b3b0 <_malloc_r>:
 800b3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b4:	1ccd      	adds	r5, r1, #3
 800b3b6:	f025 0503 	bic.w	r5, r5, #3
 800b3ba:	3508      	adds	r5, #8
 800b3bc:	2d0c      	cmp	r5, #12
 800b3be:	bf38      	it	cc
 800b3c0:	250c      	movcc	r5, #12
 800b3c2:	2d00      	cmp	r5, #0
 800b3c4:	4607      	mov	r7, r0
 800b3c6:	db01      	blt.n	800b3cc <_malloc_r+0x1c>
 800b3c8:	42a9      	cmp	r1, r5
 800b3ca:	d905      	bls.n	800b3d8 <_malloc_r+0x28>
 800b3cc:	230c      	movs	r3, #12
 800b3ce:	603b      	str	r3, [r7, #0]
 800b3d0:	2600      	movs	r6, #0
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b4ac <_malloc_r+0xfc>
 800b3dc:	f000 f868 	bl	800b4b0 <__malloc_lock>
 800b3e0:	f8d8 3000 	ldr.w	r3, [r8]
 800b3e4:	461c      	mov	r4, r3
 800b3e6:	bb5c      	cbnz	r4, 800b440 <_malloc_r+0x90>
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	f7ff ffc0 	bl	800b370 <sbrk_aligned>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	d155      	bne.n	800b4a2 <_malloc_r+0xf2>
 800b3f6:	f8d8 4000 	ldr.w	r4, [r8]
 800b3fa:	4626      	mov	r6, r4
 800b3fc:	2e00      	cmp	r6, #0
 800b3fe:	d145      	bne.n	800b48c <_malloc_r+0xdc>
 800b400:	2c00      	cmp	r4, #0
 800b402:	d048      	beq.n	800b496 <_malloc_r+0xe6>
 800b404:	6823      	ldr	r3, [r4, #0]
 800b406:	4631      	mov	r1, r6
 800b408:	4638      	mov	r0, r7
 800b40a:	eb04 0903 	add.w	r9, r4, r3
 800b40e:	f000 f879 	bl	800b504 <_sbrk_r>
 800b412:	4581      	cmp	r9, r0
 800b414:	d13f      	bne.n	800b496 <_malloc_r+0xe6>
 800b416:	6821      	ldr	r1, [r4, #0]
 800b418:	1a6d      	subs	r5, r5, r1
 800b41a:	4629      	mov	r1, r5
 800b41c:	4638      	mov	r0, r7
 800b41e:	f7ff ffa7 	bl	800b370 <sbrk_aligned>
 800b422:	3001      	adds	r0, #1
 800b424:	d037      	beq.n	800b496 <_malloc_r+0xe6>
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	442b      	add	r3, r5
 800b42a:	6023      	str	r3, [r4, #0]
 800b42c:	f8d8 3000 	ldr.w	r3, [r8]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d038      	beq.n	800b4a6 <_malloc_r+0xf6>
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	42a2      	cmp	r2, r4
 800b438:	d12b      	bne.n	800b492 <_malloc_r+0xe2>
 800b43a:	2200      	movs	r2, #0
 800b43c:	605a      	str	r2, [r3, #4]
 800b43e:	e00f      	b.n	800b460 <_malloc_r+0xb0>
 800b440:	6822      	ldr	r2, [r4, #0]
 800b442:	1b52      	subs	r2, r2, r5
 800b444:	d41f      	bmi.n	800b486 <_malloc_r+0xd6>
 800b446:	2a0b      	cmp	r2, #11
 800b448:	d917      	bls.n	800b47a <_malloc_r+0xca>
 800b44a:	1961      	adds	r1, r4, r5
 800b44c:	42a3      	cmp	r3, r4
 800b44e:	6025      	str	r5, [r4, #0]
 800b450:	bf18      	it	ne
 800b452:	6059      	strne	r1, [r3, #4]
 800b454:	6863      	ldr	r3, [r4, #4]
 800b456:	bf08      	it	eq
 800b458:	f8c8 1000 	streq.w	r1, [r8]
 800b45c:	5162      	str	r2, [r4, r5]
 800b45e:	604b      	str	r3, [r1, #4]
 800b460:	4638      	mov	r0, r7
 800b462:	f104 060b 	add.w	r6, r4, #11
 800b466:	f000 f829 	bl	800b4bc <__malloc_unlock>
 800b46a:	f026 0607 	bic.w	r6, r6, #7
 800b46e:	1d23      	adds	r3, r4, #4
 800b470:	1af2      	subs	r2, r6, r3
 800b472:	d0ae      	beq.n	800b3d2 <_malloc_r+0x22>
 800b474:	1b9b      	subs	r3, r3, r6
 800b476:	50a3      	str	r3, [r4, r2]
 800b478:	e7ab      	b.n	800b3d2 <_malloc_r+0x22>
 800b47a:	42a3      	cmp	r3, r4
 800b47c:	6862      	ldr	r2, [r4, #4]
 800b47e:	d1dd      	bne.n	800b43c <_malloc_r+0x8c>
 800b480:	f8c8 2000 	str.w	r2, [r8]
 800b484:	e7ec      	b.n	800b460 <_malloc_r+0xb0>
 800b486:	4623      	mov	r3, r4
 800b488:	6864      	ldr	r4, [r4, #4]
 800b48a:	e7ac      	b.n	800b3e6 <_malloc_r+0x36>
 800b48c:	4634      	mov	r4, r6
 800b48e:	6876      	ldr	r6, [r6, #4]
 800b490:	e7b4      	b.n	800b3fc <_malloc_r+0x4c>
 800b492:	4613      	mov	r3, r2
 800b494:	e7cc      	b.n	800b430 <_malloc_r+0x80>
 800b496:	230c      	movs	r3, #12
 800b498:	603b      	str	r3, [r7, #0]
 800b49a:	4638      	mov	r0, r7
 800b49c:	f000 f80e 	bl	800b4bc <__malloc_unlock>
 800b4a0:	e797      	b.n	800b3d2 <_malloc_r+0x22>
 800b4a2:	6025      	str	r5, [r4, #0]
 800b4a4:	e7dc      	b.n	800b460 <_malloc_r+0xb0>
 800b4a6:	605b      	str	r3, [r3, #4]
 800b4a8:	deff      	udf	#255	; 0xff
 800b4aa:	bf00      	nop
 800b4ac:	200015e4 	.word	0x200015e4

0800b4b0 <__malloc_lock>:
 800b4b0:	4801      	ldr	r0, [pc, #4]	; (800b4b8 <__malloc_lock+0x8>)
 800b4b2:	f000 b861 	b.w	800b578 <__retarget_lock_acquire_recursive>
 800b4b6:	bf00      	nop
 800b4b8:	20001728 	.word	0x20001728

0800b4bc <__malloc_unlock>:
 800b4bc:	4801      	ldr	r0, [pc, #4]	; (800b4c4 <__malloc_unlock+0x8>)
 800b4be:	f000 b85c 	b.w	800b57a <__retarget_lock_release_recursive>
 800b4c2:	bf00      	nop
 800b4c4:	20001728 	.word	0x20001728

0800b4c8 <memset>:
 800b4c8:	4402      	add	r2, r0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d100      	bne.n	800b4d2 <memset+0xa>
 800b4d0:	4770      	bx	lr
 800b4d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4d6:	e7f9      	b.n	800b4cc <memset+0x4>

0800b4d8 <strstr>:
 800b4d8:	780a      	ldrb	r2, [r1, #0]
 800b4da:	b570      	push	{r4, r5, r6, lr}
 800b4dc:	b96a      	cbnz	r2, 800b4fa <strstr+0x22>
 800b4de:	bd70      	pop	{r4, r5, r6, pc}
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d109      	bne.n	800b4f8 <strstr+0x20>
 800b4e4:	460c      	mov	r4, r1
 800b4e6:	4605      	mov	r5, r0
 800b4e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d0f6      	beq.n	800b4de <strstr+0x6>
 800b4f0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b4f4:	429e      	cmp	r6, r3
 800b4f6:	d0f7      	beq.n	800b4e8 <strstr+0x10>
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	7803      	ldrb	r3, [r0, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1ef      	bne.n	800b4e0 <strstr+0x8>
 800b500:	4618      	mov	r0, r3
 800b502:	e7ec      	b.n	800b4de <strstr+0x6>

0800b504 <_sbrk_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4d06      	ldr	r5, [pc, #24]	; (800b520 <_sbrk_r+0x1c>)
 800b508:	2300      	movs	r3, #0
 800b50a:	4604      	mov	r4, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	602b      	str	r3, [r5, #0]
 800b510:	f7f6 fbda 	bl	8001cc8 <_sbrk>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_sbrk_r+0x1a>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_sbrk_r+0x1a>
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	20001724 	.word	0x20001724

0800b524 <__errno>:
 800b524:	4b01      	ldr	r3, [pc, #4]	; (800b52c <__errno+0x8>)
 800b526:	6818      	ldr	r0, [r3, #0]
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	200004bc 	.word	0x200004bc

0800b530 <__libc_init_array>:
 800b530:	b570      	push	{r4, r5, r6, lr}
 800b532:	4d0d      	ldr	r5, [pc, #52]	; (800b568 <__libc_init_array+0x38>)
 800b534:	4c0d      	ldr	r4, [pc, #52]	; (800b56c <__libc_init_array+0x3c>)
 800b536:	1b64      	subs	r4, r4, r5
 800b538:	10a4      	asrs	r4, r4, #2
 800b53a:	2600      	movs	r6, #0
 800b53c:	42a6      	cmp	r6, r4
 800b53e:	d109      	bne.n	800b554 <__libc_init_array+0x24>
 800b540:	4d0b      	ldr	r5, [pc, #44]	; (800b570 <__libc_init_array+0x40>)
 800b542:	4c0c      	ldr	r4, [pc, #48]	; (800b574 <__libc_init_array+0x44>)
 800b544:	f000 f874 	bl	800b630 <_init>
 800b548:	1b64      	subs	r4, r4, r5
 800b54a:	10a4      	asrs	r4, r4, #2
 800b54c:	2600      	movs	r6, #0
 800b54e:	42a6      	cmp	r6, r4
 800b550:	d105      	bne.n	800b55e <__libc_init_array+0x2e>
 800b552:	bd70      	pop	{r4, r5, r6, pc}
 800b554:	f855 3b04 	ldr.w	r3, [r5], #4
 800b558:	4798      	blx	r3
 800b55a:	3601      	adds	r6, #1
 800b55c:	e7ee      	b.n	800b53c <__libc_init_array+0xc>
 800b55e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b562:	4798      	blx	r3
 800b564:	3601      	adds	r6, #1
 800b566:	e7f2      	b.n	800b54e <__libc_init_array+0x1e>
 800b568:	0800b6d0 	.word	0x0800b6d0
 800b56c:	0800b6d0 	.word	0x0800b6d0
 800b570:	0800b6d0 	.word	0x0800b6d0
 800b574:	0800b6d4 	.word	0x0800b6d4

0800b578 <__retarget_lock_acquire_recursive>:
 800b578:	4770      	bx	lr

0800b57a <__retarget_lock_release_recursive>:
 800b57a:	4770      	bx	lr

0800b57c <memcpy>:
 800b57c:	440a      	add	r2, r1
 800b57e:	4291      	cmp	r1, r2
 800b580:	f100 33ff 	add.w	r3, r0, #4294967295
 800b584:	d100      	bne.n	800b588 <memcpy+0xc>
 800b586:	4770      	bx	lr
 800b588:	b510      	push	{r4, lr}
 800b58a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b58e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b592:	4291      	cmp	r1, r2
 800b594:	d1f9      	bne.n	800b58a <memcpy+0xe>
 800b596:	bd10      	pop	{r4, pc}

0800b598 <_free_r>:
 800b598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b59a:	2900      	cmp	r1, #0
 800b59c:	d044      	beq.n	800b628 <_free_r+0x90>
 800b59e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5a2:	9001      	str	r0, [sp, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f1a1 0404 	sub.w	r4, r1, #4
 800b5aa:	bfb8      	it	lt
 800b5ac:	18e4      	addlt	r4, r4, r3
 800b5ae:	f7ff ff7f 	bl	800b4b0 <__malloc_lock>
 800b5b2:	4a1e      	ldr	r2, [pc, #120]	; (800b62c <_free_r+0x94>)
 800b5b4:	9801      	ldr	r0, [sp, #4]
 800b5b6:	6813      	ldr	r3, [r2, #0]
 800b5b8:	b933      	cbnz	r3, 800b5c8 <_free_r+0x30>
 800b5ba:	6063      	str	r3, [r4, #4]
 800b5bc:	6014      	str	r4, [r2, #0]
 800b5be:	b003      	add	sp, #12
 800b5c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5c4:	f7ff bf7a 	b.w	800b4bc <__malloc_unlock>
 800b5c8:	42a3      	cmp	r3, r4
 800b5ca:	d908      	bls.n	800b5de <_free_r+0x46>
 800b5cc:	6825      	ldr	r5, [r4, #0]
 800b5ce:	1961      	adds	r1, r4, r5
 800b5d0:	428b      	cmp	r3, r1
 800b5d2:	bf01      	itttt	eq
 800b5d4:	6819      	ldreq	r1, [r3, #0]
 800b5d6:	685b      	ldreq	r3, [r3, #4]
 800b5d8:	1949      	addeq	r1, r1, r5
 800b5da:	6021      	streq	r1, [r4, #0]
 800b5dc:	e7ed      	b.n	800b5ba <_free_r+0x22>
 800b5de:	461a      	mov	r2, r3
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	b10b      	cbz	r3, 800b5e8 <_free_r+0x50>
 800b5e4:	42a3      	cmp	r3, r4
 800b5e6:	d9fa      	bls.n	800b5de <_free_r+0x46>
 800b5e8:	6811      	ldr	r1, [r2, #0]
 800b5ea:	1855      	adds	r5, r2, r1
 800b5ec:	42a5      	cmp	r5, r4
 800b5ee:	d10b      	bne.n	800b608 <_free_r+0x70>
 800b5f0:	6824      	ldr	r4, [r4, #0]
 800b5f2:	4421      	add	r1, r4
 800b5f4:	1854      	adds	r4, r2, r1
 800b5f6:	42a3      	cmp	r3, r4
 800b5f8:	6011      	str	r1, [r2, #0]
 800b5fa:	d1e0      	bne.n	800b5be <_free_r+0x26>
 800b5fc:	681c      	ldr	r4, [r3, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	6053      	str	r3, [r2, #4]
 800b602:	440c      	add	r4, r1
 800b604:	6014      	str	r4, [r2, #0]
 800b606:	e7da      	b.n	800b5be <_free_r+0x26>
 800b608:	d902      	bls.n	800b610 <_free_r+0x78>
 800b60a:	230c      	movs	r3, #12
 800b60c:	6003      	str	r3, [r0, #0]
 800b60e:	e7d6      	b.n	800b5be <_free_r+0x26>
 800b610:	6825      	ldr	r5, [r4, #0]
 800b612:	1961      	adds	r1, r4, r5
 800b614:	428b      	cmp	r3, r1
 800b616:	bf04      	itt	eq
 800b618:	6819      	ldreq	r1, [r3, #0]
 800b61a:	685b      	ldreq	r3, [r3, #4]
 800b61c:	6063      	str	r3, [r4, #4]
 800b61e:	bf04      	itt	eq
 800b620:	1949      	addeq	r1, r1, r5
 800b622:	6021      	streq	r1, [r4, #0]
 800b624:	6054      	str	r4, [r2, #4]
 800b626:	e7ca      	b.n	800b5be <_free_r+0x26>
 800b628:	b003      	add	sp, #12
 800b62a:	bd30      	pop	{r4, r5, pc}
 800b62c:	200015e4 	.word	0x200015e4

0800b630 <_init>:
 800b630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b632:	bf00      	nop
 800b634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b636:	bc08      	pop	{r3}
 800b638:	469e      	mov	lr, r3
 800b63a:	4770      	bx	lr

0800b63c <_fini>:
 800b63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63e:	bf00      	nop
 800b640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b642:	bc08      	pop	{r3}
 800b644:	469e      	mov	lr, r3
 800b646:	4770      	bx	lr
