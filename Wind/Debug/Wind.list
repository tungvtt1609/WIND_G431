
Wind.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f38  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009110  08009110  00019110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009168  08009168  000204a8  2**0
                  CONTENTS
  4 .ARM          00000008  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009170  08009170  000204a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009174  08009174  00019174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a8  20000000  08009178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  200004a8  08009620  000204a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b0c  08009620  00020b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000204d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001def1  00000000  00000000  0002051b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ea4  00000000  00000000  0003e40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  000432b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000132c  00000000  00000000  00044bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027739  00000000  00000000  00045f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000234a3  00000000  00000000  0006d63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e58a6  00000000  00000000  00090ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006944  00000000  00000000  00176388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0017cccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200004a8 	.word	0x200004a8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080090f8 	.word	0x080090f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200004ac 	.word	0x200004ac
 8000214:	080090f8 	.word	0x080090f8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <__NVIC_GetPriorityGrouping+0x18>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	0a1b      	lsrs	r3, r3, #8
 800051e:	f003 0307 	and.w	r3, r3, #7
}
 8000522:	4618      	mov	r0, r3
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800053a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053e:	2b00      	cmp	r3, #0
 8000540:	db0b      	blt.n	800055a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	f003 021f 	and.w	r2, r3, #31
 8000548:	4907      	ldr	r1, [pc, #28]	; (8000568 <__NVIC_EnableIRQ+0x38>)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	095b      	lsrs	r3, r3, #5
 8000550:	2001      	movs	r0, #1
 8000552:	fa00 f202 	lsl.w	r2, r0, r2
 8000556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000e100 	.word	0xe000e100

0800056c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	db0a      	blt.n	8000596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	b2da      	uxtb	r2, r3
 8000584:	490c      	ldr	r1, [pc, #48]	; (80005b8 <__NVIC_SetPriority+0x4c>)
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	0112      	lsls	r2, r2, #4
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	440b      	add	r3, r1
 8000590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000594:	e00a      	b.n	80005ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4908      	ldr	r1, [pc, #32]	; (80005bc <__NVIC_SetPriority+0x50>)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	f003 030f 	and.w	r3, r3, #15
 80005a2:	3b04      	subs	r3, #4
 80005a4:	0112      	lsls	r2, r2, #4
 80005a6:	b2d2      	uxtb	r2, r2
 80005a8:	440b      	add	r3, r1
 80005aa:	761a      	strb	r2, [r3, #24]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	e000e100 	.word	0xe000e100
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b089      	sub	sp, #36	; 0x24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	f1c3 0307 	rsb	r3, r3, #7
 80005da:	2b04      	cmp	r3, #4
 80005dc:	bf28      	it	cs
 80005de:	2304      	movcs	r3, #4
 80005e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	3304      	adds	r3, #4
 80005e6:	2b06      	cmp	r3, #6
 80005e8:	d902      	bls.n	80005f0 <NVIC_EncodePriority+0x30>
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	3b03      	subs	r3, #3
 80005ee:	e000      	b.n	80005f2 <NVIC_EncodePriority+0x32>
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f4:	f04f 32ff 	mov.w	r2, #4294967295
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	43da      	mvns	r2, r3
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	401a      	ands	r2, r3
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000608:	f04f 31ff 	mov.w	r1, #4294967295
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	43d9      	mvns	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	4313      	orrs	r3, r2
         );
}
 800061a:	4618      	mov	r0, r3
 800061c:	3724      	adds	r7, #36	; 0x24
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	601a      	str	r2, [r3, #0]
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
	...

08000668 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d02e      	beq.n	80006d6 <LL_TIM_OC_DisableFast+0x6e>
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	2b04      	cmp	r3, #4
 800067c:	d029      	beq.n	80006d2 <LL_TIM_OC_DisableFast+0x6a>
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b10      	cmp	r3, #16
 8000682:	d024      	beq.n	80006ce <LL_TIM_OC_DisableFast+0x66>
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	2b40      	cmp	r3, #64	; 0x40
 8000688:	d01f      	beq.n	80006ca <LL_TIM_OC_DisableFast+0x62>
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000690:	d019      	beq.n	80006c6 <LL_TIM_OC_DisableFast+0x5e>
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000698:	d013      	beq.n	80006c2 <LL_TIM_OC_DisableFast+0x5a>
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006a0:	d00d      	beq.n	80006be <LL_TIM_OC_DisableFast+0x56>
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80006a8:	d007      	beq.n	80006ba <LL_TIM_OC_DisableFast+0x52>
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006b0:	d101      	bne.n	80006b6 <LL_TIM_OC_DisableFast+0x4e>
 80006b2:	2308      	movs	r3, #8
 80006b4:	e010      	b.n	80006d8 <LL_TIM_OC_DisableFast+0x70>
 80006b6:	2309      	movs	r3, #9
 80006b8:	e00e      	b.n	80006d8 <LL_TIM_OC_DisableFast+0x70>
 80006ba:	2307      	movs	r3, #7
 80006bc:	e00c      	b.n	80006d8 <LL_TIM_OC_DisableFast+0x70>
 80006be:	2306      	movs	r3, #6
 80006c0:	e00a      	b.n	80006d8 <LL_TIM_OC_DisableFast+0x70>
 80006c2:	2305      	movs	r3, #5
 80006c4:	e008      	b.n	80006d8 <LL_TIM_OC_DisableFast+0x70>
 80006c6:	2304      	movs	r3, #4
 80006c8:	e006      	b.n	80006d8 <LL_TIM_OC_DisableFast+0x70>
 80006ca:	2303      	movs	r3, #3
 80006cc:	e004      	b.n	80006d8 <LL_TIM_OC_DisableFast+0x70>
 80006ce:	2302      	movs	r3, #2
 80006d0:	e002      	b.n	80006d8 <LL_TIM_OC_DisableFast+0x70>
 80006d2:	2301      	movs	r3, #1
 80006d4:	e000      	b.n	80006d8 <LL_TIM_OC_DisableFast+0x70>
 80006d6:	2300      	movs	r3, #0
 80006d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3318      	adds	r3, #24
 80006de:	4619      	mov	r1, r3
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <LL_TIM_OC_DisableFast+0xa8>)
 80006e4:	5cd3      	ldrb	r3, [r2, r3]
 80006e6:	440b      	add	r3, r1
 80006e8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	4908      	ldr	r1, [pc, #32]	; (8000714 <LL_TIM_OC_DisableFast+0xac>)
 80006f2:	5ccb      	ldrb	r3, [r1, r3]
 80006f4:	4619      	mov	r1, r3
 80006f6:	2304      	movs	r3, #4
 80006f8:	408b      	lsls	r3, r1
 80006fa:	43db      	mvns	r3, r3
 80006fc:	401a      	ands	r2, r3
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	601a      	str	r2, [r3, #0]

}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	08009110 	.word	0x08009110
 8000714:	0800911c 	.word	0x0800911c

08000718 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d02e      	beq.n	8000786 <LL_TIM_OC_EnablePreload+0x6e>
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2b04      	cmp	r3, #4
 800072c:	d029      	beq.n	8000782 <LL_TIM_OC_EnablePreload+0x6a>
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	2b10      	cmp	r3, #16
 8000732:	d024      	beq.n	800077e <LL_TIM_OC_EnablePreload+0x66>
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	2b40      	cmp	r3, #64	; 0x40
 8000738:	d01f      	beq.n	800077a <LL_TIM_OC_EnablePreload+0x62>
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000740:	d019      	beq.n	8000776 <LL_TIM_OC_EnablePreload+0x5e>
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000748:	d013      	beq.n	8000772 <LL_TIM_OC_EnablePreload+0x5a>
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000750:	d00d      	beq.n	800076e <LL_TIM_OC_EnablePreload+0x56>
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000758:	d007      	beq.n	800076a <LL_TIM_OC_EnablePreload+0x52>
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000760:	d101      	bne.n	8000766 <LL_TIM_OC_EnablePreload+0x4e>
 8000762:	2308      	movs	r3, #8
 8000764:	e010      	b.n	8000788 <LL_TIM_OC_EnablePreload+0x70>
 8000766:	2309      	movs	r3, #9
 8000768:	e00e      	b.n	8000788 <LL_TIM_OC_EnablePreload+0x70>
 800076a:	2307      	movs	r3, #7
 800076c:	e00c      	b.n	8000788 <LL_TIM_OC_EnablePreload+0x70>
 800076e:	2306      	movs	r3, #6
 8000770:	e00a      	b.n	8000788 <LL_TIM_OC_EnablePreload+0x70>
 8000772:	2305      	movs	r3, #5
 8000774:	e008      	b.n	8000788 <LL_TIM_OC_EnablePreload+0x70>
 8000776:	2304      	movs	r3, #4
 8000778:	e006      	b.n	8000788 <LL_TIM_OC_EnablePreload+0x70>
 800077a:	2303      	movs	r3, #3
 800077c:	e004      	b.n	8000788 <LL_TIM_OC_EnablePreload+0x70>
 800077e:	2302      	movs	r3, #2
 8000780:	e002      	b.n	8000788 <LL_TIM_OC_EnablePreload+0x70>
 8000782:	2301      	movs	r3, #1
 8000784:	e000      	b.n	8000788 <LL_TIM_OC_EnablePreload+0x70>
 8000786:	2300      	movs	r3, #0
 8000788:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3318      	adds	r3, #24
 800078e:	4619      	mov	r1, r3
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LL_TIM_OC_EnablePreload+0xa4>)
 8000794:	5cd3      	ldrb	r3, [r2, r3]
 8000796:	440b      	add	r3, r1
 8000798:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	4907      	ldr	r1, [pc, #28]	; (80007c0 <LL_TIM_OC_EnablePreload+0xa8>)
 80007a2:	5ccb      	ldrb	r3, [r1, r3]
 80007a4:	4619      	mov	r1, r3
 80007a6:	2308      	movs	r3, #8
 80007a8:	408b      	lsls	r3, r1
 80007aa:	431a      	orrs	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	601a      	str	r2, [r3, #0]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	08009110 	.word	0x08009110
 80007c0:	0800911c 	.word	0x0800911c

080007c4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80007d6:	f023 0307 	bic.w	r3, r3, #7
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	431a      	orrs	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	609a      	str	r2, [r3, #8]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000804:	683a      	ldr	r2, [r7, #0]
 8000806:	431a      	orrs	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	605a      	str	r2, [r3, #4]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	431a      	orrs	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	605a      	str	r2, [r3, #4]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	609a      	str	r2, [r3, #8]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800086a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800086c:	4907      	ldr	r1, [pc, #28]	; (800088c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4313      	orrs	r3, r2
 8000872:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4013      	ands	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800087e:	68fb      	ldr	r3, [r7, #12]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	40021000 	.word	0x40021000

08000890 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800089a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800089c:	4907      	ldr	r1, [pc, #28]	; (80008bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <LL_APB2_GRP1_EnableClock+0x2c>)
 80008a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4013      	ands	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	40021000 	.word	0x40021000

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f001 f80f 	bl	80018e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f817 	bl	80008fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f000 fc66 	bl	800119c <MX_GPIO_Init>
  MX_DMA_Init();
 80008d0:	f000 fc40 	bl	8001154 <MX_DMA_Init>
  MX_ADC1_Init();
 80008d4:	f000 f85a 	bl	800098c <MX_ADC1_Init>
  MX_ADC2_Init();
 80008d8:	f000 f902 	bl	8000ae0 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 80008dc:	f000 fb9e 	bl	800101c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80008e0:	f000 f996 	bl	8000c10 <MX_I2C2_Init>
  MX_TIM1_Init();
 80008e4:	f000 f9d4 	bl	8000c90 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80008e8:	f000 fbe6 	bl	80010b8 <MX_USART3_UART_Init>
  MX_TIM15_Init();
 80008ec:	f000 fae0 	bl	8000eb0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  AppMainInit();
 80008f0:	f007 fa26 	bl	8007d40 <AppMainInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	AppMainProcess();
 80008f4:	f007 fa4e 	bl	8007d94 <AppMainProcess>
 80008f8:	e7fc      	b.n	80008f4 <main+0x34>

080008fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b094      	sub	sp, #80	; 0x50
 80008fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	2238      	movs	r2, #56	; 0x38
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f008 fb57 	bl	8008fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800091c:	2000      	movs	r0, #0
 800091e:	f003 f949 	bl	8003bb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092c:	2302      	movs	r3, #2
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000930:	2303      	movs	r3, #3
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000938:	2355      	movs	r3, #85	; 0x55
 800093a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000944:	2302      	movs	r3, #2
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	4618      	mov	r0, r3
 800094e:	f003 f9d5 	bl	8003cfc <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000958:	f000 fcae 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2303      	movs	r3, #3
 8000962:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2104      	movs	r1, #4
 8000974:	4618      	mov	r0, r3
 8000976:	f003 fcd9 	bl	800432c <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000980:	f000 fc9a 	bl	80012b8 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3750      	adds	r7, #80	; 0x50
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2220      	movs	r2, #32
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f008 fb09 	bl	8008fbc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009aa:	4b48      	ldr	r3, [pc, #288]	; (8000acc <MX_ADC1_Init+0x140>)
 80009ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009b2:	4b46      	ldr	r3, [pc, #280]	; (8000acc <MX_ADC1_Init+0x140>)
 80009b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ba:	4b44      	ldr	r3, [pc, #272]	; (8000acc <MX_ADC1_Init+0x140>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c0:	4b42      	ldr	r3, [pc, #264]	; (8000acc <MX_ADC1_Init+0x140>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80009c6:	4b41      	ldr	r3, [pc, #260]	; (8000acc <MX_ADC1_Init+0x140>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009cc:	4b3f      	ldr	r3, [pc, #252]	; (8000acc <MX_ADC1_Init+0x140>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d2:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <MX_ADC1_Init+0x140>)
 80009d4:	2204      	movs	r2, #4
 80009d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009d8:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <MX_ADC1_Init+0x140>)
 80009da:	2200      	movs	r2, #0
 80009dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <MX_ADC1_Init+0x140>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80009e4:	4b39      	ldr	r3, [pc, #228]	; (8000acc <MX_ADC1_Init+0x140>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ea:	4b38      	ldr	r3, [pc, #224]	; (8000acc <MX_ADC1_Init+0x140>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80009f2:	4b36      	ldr	r3, [pc, #216]	; (8000acc <MX_ADC1_Init+0x140>)
 80009f4:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009fa:	4b34      	ldr	r3, [pc, #208]	; (8000acc <MX_ADC1_Init+0x140>)
 80009fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a02:	4b32      	ldr	r3, [pc, #200]	; (8000acc <MX_ADC1_Init+0x140>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <MX_ADC1_Init+0x140>)
 8000a0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a10:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a12:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <MX_ADC1_Init+0x140>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a1a:	482c      	ldr	r0, [pc, #176]	; (8000acc <MX_ADC1_Init+0x140>)
 8000a1c:	f001 fa68 	bl	8001ef0 <HAL_ADC_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000a26:	f000 fc47 	bl	80012b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	4825      	ldr	r0, [pc, #148]	; (8000acc <MX_ADC1_Init+0x140>)
 8000a36:	f002 fab1 	bl	8002f9c <HAL_ADCEx_MultiModeConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000a40:	f000 fc3a 	bl	80012b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <MX_ADC1_Init+0x144>)
 8000a46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a48:	2306      	movs	r3, #6
 8000a4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000a4c:	2305      	movs	r3, #5
 8000a4e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a50:	237f      	movs	r3, #127	; 0x7f
 8000a52:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a54:	2304      	movs	r3, #4
 8000a56:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481a      	ldr	r0, [pc, #104]	; (8000acc <MX_ADC1_Init+0x140>)
 8000a62:	f001 fca1 	bl	80023a8 <HAL_ADC_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a6c:	f000 fc24 	bl	80012b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_ADC1_Init+0x148>)
 8000a72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a74:	230c      	movs	r3, #12
 8000a76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <MX_ADC1_Init+0x140>)
 8000a7e:	f001 fc93 	bl	80023a8 <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000a88:	f000 fc16 	bl	80012b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_ADC1_Init+0x14c>)
 8000a8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a90:	2312      	movs	r3, #18
 8000a92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <MX_ADC1_Init+0x140>)
 8000a9a:	f001 fc85 	bl	80023a8 <HAL_ADC_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000aa4:	f000 fc08 	bl	80012b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_ADC1_Init+0x150>)
 8000aaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000aac:	2318      	movs	r3, #24
 8000aae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_ADC1_Init+0x140>)
 8000ab6:	f001 fc77 	bl	80023a8 <HAL_ADC_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000ac0:	f000 fbfa 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	; 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200004c4 	.word	0x200004c4
 8000ad0:	04300002 	.word	0x04300002
 8000ad4:	08600004 	.word	0x08600004
 8000ad8:	14f00020 	.word	0x14f00020
 8000adc:	3ef08000 	.word	0x3ef08000

08000ae0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2220      	movs	r2, #32
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f008 fa65 	bl	8008fbc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000af2:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000af4:	4a41      	ldr	r2, [pc, #260]	; (8000bfc <MX_ADC2_Init+0x11c>)
 8000af6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000af8:	4b3f      	ldr	r3, [pc, #252]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000afa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000afe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b00:	4b3d      	ldr	r3, [pc, #244]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b06:	4b3c      	ldr	r3, [pc, #240]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b12:	4b39      	ldr	r3, [pc, #228]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b18:	4b37      	ldr	r3, [pc, #220]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b1e:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b24:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 8000b2a:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b30:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000b38:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b3a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b46:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000b48:	4b2b      	ldr	r3, [pc, #172]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b56:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b60:	4825      	ldr	r0, [pc, #148]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b62:	f001 f9c5 	bl	8001ef0 <HAL_ADC_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000b6c:	f000 fba4 	bl	80012b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b70:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <MX_ADC2_Init+0x120>)
 8000b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b74:	2306      	movs	r3, #6
 8000b76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000b78:	2305      	movs	r3, #5
 8000b7a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b7c:	237f      	movs	r3, #127	; 0x7f
 8000b7e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b80:	2304      	movs	r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481a      	ldr	r0, [pc, #104]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000b8e:	f001 fc0b 	bl	80023a8 <HAL_ADC_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000b98:	f000 fb8e 	bl	80012b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_ADC2_Init+0x124>)
 8000b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ba0:	230c      	movs	r3, #12
 8000ba2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000baa:	f001 fbfd 	bl	80023a8 <HAL_ADC_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 8000bb4:	f000 fb80 	bl	80012b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_ADC2_Init+0x128>)
 8000bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bbc:	2312      	movs	r3, #18
 8000bbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000bc6:	f001 fbef 	bl	80023a8 <HAL_ADC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 8000bd0:	f000 fb72 	bl	80012b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <MX_ADC2_Init+0x12c>)
 8000bd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bd8:	2318      	movs	r3, #24
 8000bda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_ADC2_Init+0x118>)
 8000be2:	f001 fbe1 	bl	80023a8 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC2_Init+0x110>
  {
    Error_Handler();
 8000bec:	f000 fb64 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3720      	adds	r7, #32
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000530 	.word	0x20000530
 8000bfc:	50000100 	.word	0x50000100
 8000c00:	0c900008 	.word	0x0c900008
 8000c04:	10c00010 	.word	0x10c00010
 8000c08:	36902000 	.word	0x36902000
 8000c0c:	47520000 	.word	0x47520000

08000c10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_I2C2_Init+0x74>)
 8000c16:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <MX_I2C2_Init+0x78>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_I2C2_Init+0x74>)
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <MX_I2C2_Init+0x7c>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_I2C2_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_I2C2_Init+0x74>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_I2C2_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_I2C2_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_I2C2_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_I2C2_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_I2C2_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c4a:	480e      	ldr	r0, [pc, #56]	; (8000c84 <MX_I2C2_Init+0x74>)
 8000c4c:	f002 fe8c 	bl	8003968 <HAL_I2C_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c56:	f000 fb2f 	bl	80012b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <MX_I2C2_Init+0x74>)
 8000c5e:	f002 ff12 	bl	8003a86 <HAL_I2CEx_ConfigAnalogFilter>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f000 fb26 	bl	80012b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_I2C2_Init+0x74>)
 8000c70:	f002 ff54 	bl	8003b1c <HAL_I2CEx_ConfigDigitalFilter>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f000 fb1d 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000065c 	.word	0x2000065c
 8000c88:	40005800 	.word	0x40005800
 8000c8c:	30a0a7fb 	.word	0x30a0a7fb

08000c90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0a0      	sub	sp, #128	; 0x80
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000c96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000ca6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000caa:	2220      	movs	r2, #32
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f008 f984 	bl	8008fbc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	2230      	movs	r2, #48	; 0x30
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f008 f97d 	bl	8008fbc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
 8000cd0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000cd2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000cd6:	f7ff fddb 	bl	8000890 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cda:	f7ff fc1b 	bl	8000514 <__NVIC_GetPriorityGrouping>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fc6b 	bl	80005c0 <NVIC_EncodePriority>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4619      	mov	r1, r3
 8000cee:	2018      	movs	r0, #24
 8000cf0:	f7ff fc3c 	bl	800056c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000cf4:	2018      	movs	r0, #24
 8000cf6:	f7ff fc1b 	bl	8000530 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cfa:	f7ff fc0b 	bl	8000514 <__NVIC_GetPriorityGrouping>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fc5b 	bl	80005c0 <NVIC_EncodePriority>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	201b      	movs	r0, #27
 8000d10:	f7ff fc2c 	bl	800056c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d14:	201b      	movs	r0, #27
 8000d16:	f7ff fc0b 	bl	8000530 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000d20:	2300      	movs	r3, #0
 8000d22:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 3399;
 8000d24:	f640 5347 	movw	r3, #3399	; 0xd47
 8000d28:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000d32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d36:	4619      	mov	r1, r3
 8000d38:	485c      	ldr	r0, [pc, #368]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000d3a:	f005 f88d 	bl	8005e58 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 8000d3e:	485b      	ldr	r0, [pc, #364]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000d40:	f7ff fc71 	bl	8000626 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000d44:	2100      	movs	r1, #0
 8000d46:	4859      	ldr	r0, [pc, #356]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000d48:	f7ff fd3c 	bl	80007c4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4857      	ldr	r0, [pc, #348]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000d50:	f7ff fce2 	bl	8000718 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000d54:	2360      	movs	r3, #96	; 0x60
 8000d56:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000d64:	2300      	movs	r3, #0
 8000d66:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000d74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	484b      	ldr	r0, [pc, #300]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000d7e:	f005 f8f5 	bl	8005f6c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8000d82:	2101      	movs	r1, #1
 8000d84:	4849      	ldr	r0, [pc, #292]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000d86:	f7ff fc6f 	bl	8000668 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	4847      	ldr	r0, [pc, #284]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000d8e:	f7ff fcc3 	bl	8000718 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000d92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d96:	461a      	mov	r2, r3
 8000d98:	2110      	movs	r1, #16
 8000d9a:	4844      	ldr	r0, [pc, #272]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000d9c:	f005 f8e6 	bl	8005f6c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8000da0:	2110      	movs	r1, #16
 8000da2:	4842      	ldr	r0, [pc, #264]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000da4:	f7ff fc60 	bl	8000668 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8000da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dac:	483f      	ldr	r0, [pc, #252]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000dae:	f7ff fcb3 	bl	8000718 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8000db2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000db6:	461a      	mov	r2, r3
 8000db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbc:	483b      	ldr	r0, [pc, #236]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000dbe:	f005 f8d5 	bl	8005f6c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8000dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc6:	4839      	ldr	r0, [pc, #228]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000dc8:	f7ff fc4e 	bl	8000668 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 8000dcc:	2330      	movs	r3, #48	; 0x30
 8000dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8000dd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dda:	4834      	ldr	r0, [pc, #208]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000ddc:	f005 f8c6 	bl	8005f6c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8000de0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de4:	4831      	ldr	r0, [pc, #196]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000de6:	f7ff fc3f 	bl	8000668 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
 8000dea:	2170      	movs	r1, #112	; 0x70
 8000dec:	482f      	ldr	r0, [pc, #188]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000dee:	f7ff fcfe 	bl	80007ee <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000df2:	2100      	movs	r1, #0
 8000df4:	482d      	ldr	r0, [pc, #180]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000df6:	f7ff fd0f 	bl	8000818 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000dfa:	482c      	ldr	r0, [pc, #176]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000dfc:	f7ff fd1f 	bl	800083e <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8000e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e04:	4829      	ldr	r0, [pc, #164]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000e06:	f7ff fc87 	bl	8000718 <LL_TIM_OC_EnablePreload>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8000e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4818      	ldr	r0, [pc, #96]	; (8000eac <MX_TIM1_Init+0x21c>)
 8000e4c:	f005 f8ee 	bl	800602c <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff fd05 	bl	8000860 <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA11   ------> TIM1_CH1N
  PA12   ------> TIM1_CH2N
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000e56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000e6c:	2306      	movs	r3, #6
 8000e6e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e78:	f004 feef 	bl	8005c5a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e82:	2302      	movs	r3, #2
 8000e84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000e92:	2306      	movs	r3, #6
 8000e94:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9e:	f004 fedc 	bl	8005c5a <LL_GPIO_Init>

}
 8000ea2:	bf00      	nop
 8000ea4:	3780      	adds	r7, #128	; 0x80
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40012c00 	.word	0x40012c00

08000eb0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0a0      	sub	sp, #128	; 0x80
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000eb6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000ec6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000eca:	2220      	movs	r2, #32
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f008 f874 	bl	8008fbc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	2230      	movs	r2, #48	; 0x30
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f008 f86d 	bl	8008fbc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM15);
 8000ef2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000ef6:	f7ff fccb 	bl	8000890 <LL_APB2_GRP1_EnableClock>

  /* TIM15 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000efa:	f7ff fb0b 	bl	8000514 <__NVIC_GetPriorityGrouping>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fb5b 	bl	80005c0 <NVIC_EncodePriority>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2018      	movs	r0, #24
 8000f10:	f7ff fb2c 	bl	800056c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000f14:	2018      	movs	r0, #24
 8000f16:	f7ff fb0b 	bl	8000530 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f20:	2300      	movs	r3, #0
 8000f22:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 65535;
 8000f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f28:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM15, &TIM_InitStruct);
 8000f32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f36:	4619      	mov	r1, r3
 8000f38:	4836      	ldr	r0, [pc, #216]	; (8001014 <MX_TIM15_Init+0x164>)
 8000f3a:	f004 ff8d 	bl	8005e58 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM15);
 8000f3e:	4835      	ldr	r0, [pc, #212]	; (8001014 <MX_TIM15_Init+0x164>)
 8000f40:	f7ff fb81 	bl	8000646 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 8000f44:	2330      	movs	r3, #48	; 0x30
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000f54:	2300      	movs	r3, #0
 8000f56:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM15, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000f64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4829      	ldr	r0, [pc, #164]	; (8001014 <MX_TIM15_Init+0x164>)
 8000f6e:	f004 fffd 	bl	8005f6c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM15, LL_TIM_CHANNEL_CH1);
 8000f72:	2101      	movs	r1, #1
 8000f74:	4827      	ldr	r0, [pc, #156]	; (8001014 <MX_TIM15_Init+0x164>)
 8000f76:	f7ff fb77 	bl	8000668 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM15, LL_TIM_CHANNEL_CH2);
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4825      	ldr	r0, [pc, #148]	; (8001014 <MX_TIM15_Init+0x164>)
 8000f7e:	f7ff fbcb 	bl	8000718 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000f82:	2360      	movs	r3, #96	; 0x60
 8000f84:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_TIM_OC_Init(TIM15, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000f86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2110      	movs	r1, #16
 8000f8e:	4821      	ldr	r0, [pc, #132]	; (8001014 <MX_TIM15_Init+0x164>)
 8000f90:	f004 ffec 	bl	8005f6c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM15, LL_TIM_CHANNEL_CH2);
 8000f94:	2110      	movs	r1, #16
 8000f96:	481f      	ldr	r0, [pc, #124]	; (8001014 <MX_TIM15_Init+0x164>)
 8000f98:	f7ff fb66 	bl	8000668 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM15, LL_TIM_TRGO_OC1REF);
 8000f9c:	2140      	movs	r1, #64	; 0x40
 8000f9e:	481d      	ldr	r0, [pc, #116]	; (8001014 <MX_TIM15_Init+0x164>)
 8000fa0:	f7ff fc25 	bl	80007ee <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM15);
 8000fa4:	481b      	ldr	r0, [pc, #108]	; (8001014 <MX_TIM15_Init+0x164>)
 8000fa6:	f7ff fc4a 	bl	800083e <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_EnablePreload(TIM15, LL_TIM_CHANNEL_CH1);
 8000faa:	2101      	movs	r1, #1
 8000fac:	4819      	ldr	r0, [pc, #100]	; (8001014 <MX_TIM15_Init+0x164>)
 8000fae:	f7ff fbb3 	bl	8000718 <LL_TIM_OC_EnablePreload>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM15, &TIM_BDTRInitStruct);
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <MX_TIM15_Init+0x164>)
 8000fde:	f005 f825 	bl	800602c <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f7ff fc3c 	bl	8000860 <LL_AHB2_GRP1_EnableClock>
  /**TIM15 GPIO Configuration
  PB15   ------> TIM15_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4619      	mov	r1, r3
 8001006:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_TIM15_Init+0x168>)
 8001008:	f004 fe27 	bl	8005c5a <LL_GPIO_Init>

}
 800100c:	bf00      	nop
 800100e:	3780      	adds	r7, #128	; 0x80
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40014000 	.word	0x40014000
 8001018:	48000400 	.word	0x48000400

0800101c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 8001022:	4a24      	ldr	r2, [pc, #144]	; (80010b4 <MX_USART2_UART_Init+0x98>)
 8001024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 8001066:	f003 fd6d 	bl	8004b44 <HAL_UART_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001070:	f000 f922 	bl	80012b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 8001078:	f004 fbda 	bl	8005830 <HAL_UARTEx_SetTxFifoThreshold>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001082:	f000 f919 	bl	80012b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001086:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800108a:	4809      	ldr	r0, [pc, #36]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 800108c:	f004 fc0e 	bl	80058ac <HAL_UARTEx_SetRxFifoThreshold>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001096:	f000 f90f 	bl	80012b8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 800109c:	f004 fb8d 	bl	80057ba <HAL_UARTEx_EnableFifoMode>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80010a6:	f000 f907 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200006a8 	.word	0x200006a8
 80010b4:	40004400 	.word	0x40004400

080010b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <MX_USART3_UART_Init+0x94>)
 80010be:	4a24      	ldr	r2, [pc, #144]	; (8001150 <MX_USART3_UART_Init+0x98>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_USART3_UART_Init+0x94>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <MX_USART3_UART_Init+0x94>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <MX_USART3_UART_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_USART3_UART_Init+0x94>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_USART3_UART_Init+0x94>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_USART3_UART_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_USART3_UART_Init+0x94>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_USART3_UART_Init+0x94>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_USART3_UART_Init+0x94>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_USART3_UART_Init+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <MX_USART3_UART_Init+0x94>)
 8001102:	f003 fd1f 	bl	8004b44 <HAL_UART_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800110c:	f000 f8d4 	bl	80012b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	480e      	ldr	r0, [pc, #56]	; (800114c <MX_USART3_UART_Init+0x94>)
 8001114:	f004 fb8c 	bl	8005830 <HAL_UARTEx_SetTxFifoThreshold>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800111e:	f000 f8cb 	bl	80012b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001122:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001126:	4809      	ldr	r0, [pc, #36]	; (800114c <MX_USART3_UART_Init+0x94>)
 8001128:	f004 fbc0 	bl	80058ac <HAL_UARTEx_SetRxFifoThreshold>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8001132:	f000 f8c1 	bl	80012b8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_USART3_UART_Init+0x94>)
 8001138:	f004 fb3f 	bl	80057ba <HAL_UARTEx_EnableFifoMode>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8001142:	f000 f8b9 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000738 	.word	0x20000738
 8001150:	40004800 	.word	0x40004800

08001154 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_DMA_Init+0x44>)
 800115c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <MX_DMA_Init+0x44>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6493      	str	r3, [r2, #72]	; 0x48
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_DMA_Init+0x44>)
 8001168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_DMA_Init+0x44>)
 8001174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <MX_DMA_Init+0x44>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6493      	str	r3, [r2, #72]	; 0x48
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_DMA_Init+0x44>)
 8001180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]

}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <MX_GPIO_Init+0x110>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a3d      	ldr	r2, [pc, #244]	; (80012ac <MX_GPIO_Init+0x110>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <MX_GPIO_Init+0x110>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ca:	4b38      	ldr	r3, [pc, #224]	; (80012ac <MX_GPIO_Init+0x110>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a37      	ldr	r2, [pc, #220]	; (80012ac <MX_GPIO_Init+0x110>)
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b35      	ldr	r3, [pc, #212]	; (80012ac <MX_GPIO_Init+0x110>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b32      	ldr	r3, [pc, #200]	; (80012ac <MX_GPIO_Init+0x110>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a31      	ldr	r2, [pc, #196]	; (80012ac <MX_GPIO_Init+0x110>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <MX_GPIO_Init+0x110>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <MX_GPIO_Init+0x110>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a2b      	ldr	r2, [pc, #172]	; (80012ac <MX_GPIO_Init+0x110>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b29      	ldr	r3, [pc, #164]	; (80012ac <MX_GPIO_Init+0x110>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001218:	4825      	ldr	r0, [pc, #148]	; (80012b0 <MX_GPIO_Init+0x114>)
 800121a:	f002 fb8d 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Control_485_Pin|Reset_3g_Pin
 800121e:	2200      	movs	r2, #0
 8001220:	f243 2186 	movw	r1, #12934	; 0x3286
 8001224:	4823      	ldr	r0, [pc, #140]	; (80012b4 <MX_GPIO_Init+0x118>)
 8001226:	f002 fb87 	bl	8003938 <HAL_GPIO_WritePin>
                          |BUZZ_Pin|Power_on_off_3g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800122a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001234:	2301      	movs	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	481b      	ldr	r0, [pc, #108]	; (80012b0 <MX_GPIO_Init+0x114>)
 8001244:	f002 f9f6 	bl	8003634 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8001248:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4813      	ldr	r0, [pc, #76]	; (80012b0 <MX_GPIO_Init+0x114>)
 8001262:	f002 f9e7 	bl	8003634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Reset_3g_Pin BUZZ_Pin
                           Power_on_off_3g_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Reset_3g_Pin|BUZZ_Pin
 8001266:	f242 2386 	movw	r3, #8838	; 0x2286
 800126a:	617b      	str	r3, [r7, #20]
                          |Power_on_off_3g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	480d      	ldr	r0, [pc, #52]	; (80012b4 <MX_GPIO_Init+0x118>)
 8001280:	f002 f9d8 	bl	8003634 <HAL_GPIO_Init>

  /*Configure GPIO pin : Control_485_Pin */
  GPIO_InitStruct.Pin = Control_485_Pin;
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001292:	2302      	movs	r3, #2
 8001294:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Control_485_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_GPIO_Init+0x118>)
 800129e:	f002 f9c9 	bl	8003634 <HAL_GPIO_Init>

}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	48000800 	.word	0x48000800
 80012b4:	48000400 	.word	0x48000400

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <Error_Handler+0x8>
	...

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_MspInit+0x50>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ce:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_MspInit+0x50>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6613      	str	r3, [r2, #96]	; 0x60
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_MspInit+0x50>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <HAL_MspInit+0x50>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <HAL_MspInit+0x50>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6593      	str	r3, [r2, #88]	; 0x58
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_MspInit+0x50>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 80012fa:	2020      	movs	r0, #32
 80012fc:	f000 fb64 	bl	80019c8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001300:	f000 fb8a 	bl	8001a18 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001304:	2000      	movs	r0, #0
 8001306:	f000 fb73 	bl	80019f0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000

08001318 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b09e      	sub	sp, #120	; 0x78
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	2244      	movs	r2, #68	; 0x44
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f007 fe3f 	bl	8008fbc <memset>
  if(hadc->Instance==ADC1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001346:	f040 8084 	bne.w	8001452 <HAL_ADC_MspInit+0x13a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800134a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800134e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001350:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001354:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fa02 	bl	8004764 <HAL_RCCEx_PeriphCLKConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001366:	f7ff ffa7 	bl	80012b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800136a:	4b73      	ldr	r3, [pc, #460]	; (8001538 <HAL_ADC_MspInit+0x220>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	4a71      	ldr	r2, [pc, #452]	; (8001538 <HAL_ADC_MspInit+0x220>)
 8001372:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001374:	4b70      	ldr	r3, [pc, #448]	; (8001538 <HAL_ADC_MspInit+0x220>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d10b      	bne.n	8001394 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800137c:	4b6f      	ldr	r3, [pc, #444]	; (800153c <HAL_ADC_MspInit+0x224>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	4a6e      	ldr	r2, [pc, #440]	; (800153c <HAL_ADC_MspInit+0x224>)
 8001382:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001388:	4b6c      	ldr	r3, [pc, #432]	; (800153c <HAL_ADC_MspInit+0x224>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001390:	61fb      	str	r3, [r7, #28]
 8001392:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b69      	ldr	r3, [pc, #420]	; (800153c <HAL_ADC_MspInit+0x224>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	4a68      	ldr	r2, [pc, #416]	; (800153c <HAL_ADC_MspInit+0x224>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a0:	4b66      	ldr	r3, [pc, #408]	; (800153c <HAL_ADC_MspInit+0x224>)
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	61bb      	str	r3, [r7, #24]
 80013aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ac:	4b63      	ldr	r3, [pc, #396]	; (800153c <HAL_ADC_MspInit+0x224>)
 80013ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b0:	4a62      	ldr	r2, [pc, #392]	; (800153c <HAL_ADC_MspInit+0x224>)
 80013b2:	f043 0302 	orr.w	r3, r3, #2
 80013b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b8:	4b60      	ldr	r3, [pc, #384]	; (800153c <HAL_ADC_MspInit+0x224>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC1_IN1_VOUT_Pin|ADC1_IN2_TEMP2_Pin;
 80013c4:	2303      	movs	r3, #3
 80013c6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c8:	2303      	movs	r3, #3
 80013ca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013d4:	4619      	mov	r1, r3
 80013d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013da:	f002 f92b 	bl	8003634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN15_WIND_Pin|ADC1_IN5_FREQ_Pin;
 80013de:	f244 0301 	movw	r3, #16385	; 0x4001
 80013e2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e4:	2303      	movs	r3, #3
 80013e6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013f0:	4619      	mov	r1, r3
 80013f2:	4853      	ldr	r0, [pc, #332]	; (8001540 <HAL_ADC_MspInit+0x228>)
 80013f4:	f002 f91e 	bl	8003634 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013f8:	4b52      	ldr	r3, [pc, #328]	; (8001544 <HAL_ADC_MspInit+0x22c>)
 80013fa:	4a53      	ldr	r2, [pc, #332]	; (8001548 <HAL_ADC_MspInit+0x230>)
 80013fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013fe:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_ADC_MspInit+0x22c>)
 8001400:	2205      	movs	r2, #5
 8001402:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001404:	4b4f      	ldr	r3, [pc, #316]	; (8001544 <HAL_ADC_MspInit+0x22c>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800140a:	4b4e      	ldr	r3, [pc, #312]	; (8001544 <HAL_ADC_MspInit+0x22c>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001410:	4b4c      	ldr	r3, [pc, #304]	; (8001544 <HAL_ADC_MspInit+0x22c>)
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001416:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <HAL_ADC_MspInit+0x22c>)
 8001418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800141e:	4b49      	ldr	r3, [pc, #292]	; (8001544 <HAL_ADC_MspInit+0x22c>)
 8001420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001424:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_ADC_MspInit+0x22c>)
 8001428:	2220      	movs	r2, #32
 800142a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800142c:	4b45      	ldr	r3, [pc, #276]	; (8001544 <HAL_ADC_MspInit+0x22c>)
 800142e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001432:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001434:	4843      	ldr	r0, [pc, #268]	; (8001544 <HAL_ADC_MspInit+0x22c>)
 8001436:	f001 ff39 	bl	80032ac <HAL_DMA_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8001440:	f7ff ff3a 	bl	80012b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a3f      	ldr	r2, [pc, #252]	; (8001544 <HAL_ADC_MspInit+0x22c>)
 8001448:	655a      	str	r2, [r3, #84]	; 0x54
 800144a:	4a3e      	ldr	r2, [pc, #248]	; (8001544 <HAL_ADC_MspInit+0x22c>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001450:	e06e      	b.n	8001530 <HAL_ADC_MspInit+0x218>
  else if(hadc->Instance==ADC2)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a3d      	ldr	r2, [pc, #244]	; (800154c <HAL_ADC_MspInit+0x234>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d169      	bne.n	8001530 <HAL_ADC_MspInit+0x218>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800145c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001460:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001462:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001466:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4618      	mov	r0, r3
 800146e:	f003 f979 	bl	8004764 <HAL_RCCEx_PeriphCLKConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_ADC_MspInit+0x164>
      Error_Handler();
 8001478:	f7ff ff1e 	bl	80012b8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800147c:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <HAL_ADC_MspInit+0x220>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	4a2d      	ldr	r2, [pc, #180]	; (8001538 <HAL_ADC_MspInit+0x220>)
 8001484:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001486:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <HAL_ADC_MspInit+0x220>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10b      	bne.n	80014a6 <HAL_ADC_MspInit+0x18e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <HAL_ADC_MspInit+0x224>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a2a      	ldr	r2, [pc, #168]	; (800153c <HAL_ADC_MspInit+0x224>)
 8001494:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_ADC_MspInit+0x224>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b25      	ldr	r3, [pc, #148]	; (800153c <HAL_ADC_MspInit+0x224>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4a24      	ldr	r2, [pc, #144]	; (800153c <HAL_ADC_MspInit+0x224>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4b22      	ldr	r3, [pc, #136]	; (800153c <HAL_ADC_MspInit+0x224>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|ADC2_IN13_IDUMP_Pin|ADC2_IN3_VIN_Pin|ADC2_IN4_TEMP1_Pin;
 80014be:	23f0      	movs	r3, #240	; 0xf0
 80014c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c2:	2303      	movs	r3, #3
 80014c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f002 f8ae 	bl	8003634 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_ADC_MspInit+0x238>)
 80014da:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <HAL_ADC_MspInit+0x23c>)
 80014dc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_ADC_MspInit+0x238>)
 80014e0:	2224      	movs	r2, #36	; 0x24
 80014e2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_ADC_MspInit+0x238>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_ADC_MspInit+0x238>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_ADC_MspInit+0x238>)
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_ADC_MspInit+0x238>)
 80014f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014fc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_ADC_MspInit+0x238>)
 8001500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001504:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_ADC_MspInit+0x238>)
 8001508:	2220      	movs	r2, #32
 800150a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_ADC_MspInit+0x238>)
 800150e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001512:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001514:	480e      	ldr	r0, [pc, #56]	; (8001550 <HAL_ADC_MspInit+0x238>)
 8001516:	f001 fec9 	bl	80032ac <HAL_DMA_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_ADC_MspInit+0x20c>
      Error_Handler();
 8001520:	f7ff feca 	bl	80012b8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_ADC_MspInit+0x238>)
 8001528:	655a      	str	r2, [r3, #84]	; 0x54
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <HAL_ADC_MspInit+0x238>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001530:	bf00      	nop
 8001532:	3778      	adds	r7, #120	; 0x78
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200007c8 	.word	0x200007c8
 800153c:	40021000 	.word	0x40021000
 8001540:	48000400 	.word	0x48000400
 8001544:	2000059c 	.word	0x2000059c
 8001548:	40020008 	.word	0x40020008
 800154c:	50000100 	.word	0x50000100
 8001550:	200005fc 	.word	0x200005fc
 8001554:	40020030 	.word	0x40020030

08001558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b09a      	sub	sp, #104	; 0x68
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	2244      	movs	r2, #68	; 0x44
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f007 fd1f 	bl	8008fbc <memset>
  if(hi2c->Instance==I2C2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1f      	ldr	r2, [pc, #124]	; (8001600 <HAL_I2C_MspInit+0xa8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d137      	bne.n	80015f8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4618      	mov	r0, r3
 8001596:	f003 f8e5 	bl	8004764 <HAL_RCCEx_PeriphCLKConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015a0:	f7ff fe8a 	bl	80012b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <HAL_I2C_MspInit+0xac>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	4a16      	ldr	r2, [pc, #88]	; (8001604 <HAL_I2C_MspInit+0xac>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_I2C_MspInit+0xac>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015c0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c2:	2312      	movs	r3, #18
 80015c4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015ce:	2304      	movs	r3, #4
 80015d0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015dc:	f002 f82a 	bl	8003634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_I2C_MspInit+0xac>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_I2C_MspInit+0xac>)
 80015e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015ea:	6593      	str	r3, [r2, #88]	; 0x58
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_I2C_MspInit+0xac>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3768      	adds	r7, #104	; 0x68
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40005800 	.word	0x40005800
 8001604:	40021000 	.word	0x40021000

08001608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b09c      	sub	sp, #112	; 0x70
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001620:	f107 0318 	add.w	r3, r7, #24
 8001624:	2244      	movs	r2, #68	; 0x44
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f007 fcc7 	bl	8008fbc <memset>
  if(huart->Instance==USART2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a3d      	ldr	r2, [pc, #244]	; (8001728 <HAL_UART_MspInit+0x120>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d137      	bne.n	80016a8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001640:	f107 0318 	add.w	r3, r7, #24
 8001644:	4618      	mov	r0, r3
 8001646:	f003 f88d 	bl	8004764 <HAL_RCCEx_PeriphCLKConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001650:	f7ff fe32 	bl	80012b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001654:	4b35      	ldr	r3, [pc, #212]	; (800172c <HAL_UART_MspInit+0x124>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001658:	4a34      	ldr	r2, [pc, #208]	; (800172c <HAL_UART_MspInit+0x124>)
 800165a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165e:	6593      	str	r3, [r2, #88]	; 0x58
 8001660:	4b32      	ldr	r3, [pc, #200]	; (800172c <HAL_UART_MspInit+0x124>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <HAL_UART_MspInit+0x124>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	4a2e      	ldr	r2, [pc, #184]	; (800172c <HAL_UART_MspInit+0x124>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001678:	4b2c      	ldr	r3, [pc, #176]	; (800172c <HAL_UART_MspInit+0x124>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_LCD_Pin|RX_LCD_Pin;
 8001684:	230c      	movs	r3, #12
 8001686:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001694:	2307      	movs	r3, #7
 8001696:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f001 ffc7 	bl	8003634 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016a6:	e03b      	b.n	8001720 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART3)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a20      	ldr	r2, [pc, #128]	; (8001730 <HAL_UART_MspInit+0x128>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d136      	bne.n	8001720 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016b2:	2304      	movs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ba:	f107 0318 	add.w	r3, r7, #24
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 f850 	bl	8004764 <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80016ca:	f7ff fdf5 	bl	80012b8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <HAL_UART_MspInit+0x124>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	4a16      	ldr	r2, [pc, #88]	; (800172c <HAL_UART_MspInit+0x124>)
 80016d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d8:	6593      	str	r3, [r2, #88]	; 0x58
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_UART_MspInit+0x124>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_UART_MspInit+0x124>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <HAL_UART_MspInit+0x124>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_UART_MspInit+0x124>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX_485_Pin|RX_485_Pin;
 80016fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001702:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001710:	2307      	movs	r3, #7
 8001712:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <HAL_UART_MspInit+0x12c>)
 800171c:	f001 ff8a 	bl	8003634 <HAL_GPIO_Init>
}
 8001720:	bf00      	nop
 8001722:	3770      	adds	r7, #112	; 0x70
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40004400 	.word	0x40004400
 800172c:	40021000 	.word	0x40021000
 8001730:	40004800 	.word	0x40004800
 8001734:	48000400 	.word	0x48000400

08001738 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f06f 0208 	mvn.w	r2, #8
 8001746:	611a      	str	r2, [r3, #16]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_TIM_ClearFlag_CC3OVR>:
  * @rmtoll SR           CC3OF         LL_TIM_ClearFlag_CC3OVR
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3OVR(TIM_TypeDef *TIMx)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3OF));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001762:	611a      	str	r2, [r3, #16]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  TimerTick1kHz();
 80017bc:	f006 fa9c 	bl	8007cf8 <TimerTick1kHz>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c0:	f000 f8e4 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
	LL_TIM_ClearFlag_CC3(TIM1);
 80017dc:	4807      	ldr	r0, [pc, #28]	; (80017fc <TIM1_CC_IRQHandler+0x24>)
 80017de:	f7ff ffab 	bl	8001738 <LL_TIM_ClearFlag_CC3>
	LL_TIM_ClearFlag_CC3OVR(TIM1);
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <TIM1_CC_IRQHandler+0x24>)
 80017e4:	f7ff ffb6 	bl	8001754 <LL_TIM_ClearFlag_CC3OVR>
	if(Tim1CCIsr != NULL)
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <TIM1_CC_IRQHandler+0x28>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d002      	beq.n	80017f6 <TIM1_CC_IRQHandler+0x1e>
		Tim1CCIsr();
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <TIM1_CC_IRQHandler+0x28>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4798      	blx	r3
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40012c00 	.word	0x40012c00
 8001800:	2000086c 	.word	0x2000086c

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f007 fbda 	bl	8008fec <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20008000 	.word	0x20008000
 8001864:	00000400 	.word	0x00000400
 8001868:	200007cc 	.word	0x200007cc
 800186c:	20000b10 	.word	0x20000b10

08001870 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <SystemInit+0x20>)
 8001876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <SystemInit+0x20>)
 800187c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001896:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001898:	480d      	ldr	r0, [pc, #52]	; (80018d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800189a:	490e      	ldr	r1, [pc, #56]	; (80018d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <LoopForever+0xe>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018a0:	e002      	b.n	80018a8 <LoopCopyDataInit>

080018a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a6:	3304      	adds	r3, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ac:	d3f9      	bcc.n	80018a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ae:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80018b0:	4c0b      	ldr	r4, [pc, #44]	; (80018e0 <LoopForever+0x16>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b4:	e001      	b.n	80018ba <LoopFillZerobss>

080018b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b8:	3204      	adds	r2, #4

080018ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018bc:	d3fb      	bcc.n	80018b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018be:	f7ff ffd7 	bl	8001870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c2:	f007 fb99 	bl	8008ff8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018c6:	f7fe fffb 	bl	80008c0 <main>

080018ca <LoopForever>:

LoopForever:
    b LoopForever
 80018ca:	e7fe      	b.n	80018ca <LoopForever>
  ldr   r0, =_estack
 80018cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 80018d8:	08009178 	.word	0x08009178
  ldr r2, =_sbss
 80018dc:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 80018e0:	20000b0c 	.word	0x20000b0c

080018e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC1_2_IRQHandler>

080018e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f0:	2003      	movs	r0, #3
 80018f2:	f001 fca9 	bl	8003248 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018f6:	200f      	movs	r0, #15
 80018f8:	f000 f80e 	bl	8001918 <HAL_InitTick>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	71fb      	strb	r3, [r7, #7]
 8001906:	e001      	b.n	800190c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001908:	f7ff fcdc 	bl	80012c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800190c:	79fb      	ldrb	r3, [r7, #7]

}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <HAL_InitTick+0x68>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d022      	beq.n	8001972 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <HAL_InitTick+0x6c>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_InitTick+0x68>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001938:	fbb1 f3f3 	udiv	r3, r1, r3
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f001 fca6 	bl	8003292 <HAL_SYSTICK_Config>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10f      	bne.n	800196c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b0f      	cmp	r3, #15
 8001950:	d809      	bhi.n	8001966 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001952:	2200      	movs	r2, #0
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	f04f 30ff 	mov.w	r0, #4294967295
 800195a:	f001 fc80 	bl	800325e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_InitTick+0x70>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	e007      	b.n	8001976 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	73fb      	strb	r3, [r7, #15]
 800196a:	e004      	b.n	8001976 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	e001      	b.n	8001976 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000008 	.word	0x20000008
 8001984:	20000000 	.word	0x20000000
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_IncTick+0x1c>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_IncTick+0x20>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4413      	add	r3, r2
 800199a:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <HAL_IncTick+0x1c>)
 800199c:	6013      	str	r3, [r2, #0]
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	200007d0 	.word	0x200007d0
 80019ac:	20000008 	.word	0x20000008

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200007d0 	.word	0x200007d0

080019c8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80019d8:	4904      	ldr	r1, [pc, #16]	; (80019ec <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	40010030 	.word	0x40010030

080019f0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f023 0202 	bic.w	r2, r3, #2
 8001a00:	4904      	ldr	r1, [pc, #16]	; (8001a14 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40010030 	.word	0x40010030

08001a18 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001a2a:	f7ff ffc1 	bl	80019b0 <HAL_GetTick>
 8001a2e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001a30:	e008      	b.n	8001a44 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001a32:	f7ff ffbd 	bl	80019b0 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b0a      	cmp	r3, #10
 8001a3e:	d901      	bls.n	8001a44 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e006      	b.n	8001a52 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40010030 	.word	0x40010030

08001a60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	609a      	str	r2, [r3, #8]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3360      	adds	r3, #96	; 0x60
 8001ada:	461a      	mov	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <LL_ADC_SetOffset+0x44>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b00:	bf00      	nop
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	03fff000 	.word	0x03fff000

08001b10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3360      	adds	r3, #96	; 0x60
 8001b1e:	461a      	mov	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3360      	adds	r3, #96	; 0x60
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	431a      	orrs	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b66:	bf00      	nop
 8001b68:	371c      	adds	r7, #28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b087      	sub	sp, #28
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3360      	adds	r3, #96	; 0x60
 8001b82:	461a      	mov	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b9c:	bf00      	nop
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3360      	adds	r3, #96	; 0x60
 8001bb8:	461a      	mov	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001bd2:	bf00      	nop
 8001bd4:	371c      	adds	r7, #28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	615a      	str	r2, [r3, #20]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b087      	sub	sp, #28
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	3330      	adds	r3, #48	; 0x30
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	4413      	add	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	211f      	movs	r1, #31
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0e9b      	lsrs	r3, r3, #26
 8001c62:	f003 011f 	and.w	r1, r3, #31
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	431a      	orrs	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c76:	bf00      	nop
 8001c78:	371c      	adds	r7, #28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b087      	sub	sp, #28
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3314      	adds	r3, #20
 8001c92:	461a      	mov	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	0e5b      	lsrs	r3, r3, #25
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	4413      	add	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	0d1b      	lsrs	r3, r3, #20
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2107      	movs	r1, #7
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	0d1b      	lsrs	r3, r3, #20
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ccc:	bf00      	nop
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d10a      	bne.n	8001d02 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001d00:	e00a      	b.n	8001d18 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	401a      	ands	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	407f0000 	.word	0x407f0000

08001d28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 031f 	and.w	r3, r3, #31
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6093      	str	r3, [r2, #8]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d7c:	d101      	bne.n	8001d82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001da0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001da4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dcc:	d101      	bne.n	8001dd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e1c:	f043 0202 	orr.w	r2, r3, #2
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <LL_ADC_IsEnabled+0x18>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <LL_ADC_IsEnabled+0x1a>
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d101      	bne.n	8001e6e <LL_ADC_IsDisableOngoing+0x18>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_ADC_IsDisableOngoing+0x1a>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e90:	f043 0204 	orr.w	r2, r3, #4
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d101      	bne.n	8001ebc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d101      	bne.n	8001ee2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e177      	b.n	80021fa <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff f9fd 	bl	8001318 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff19 	bl	8001d68 <LL_ADC_IsDeepPowerDownEnabled>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff feff 	bl	8001d44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff34 	bl	8001db8 <LL_ADC_IsInternalRegulatorEnabled>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d115      	bne.n	8001f82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff18 	bl	8001d90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f60:	4b9c      	ldr	r3, [pc, #624]	; (80021d4 <HAL_ADC_Init+0x2e4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	4a9c      	ldr	r2, [pc, #624]	; (80021d8 <HAL_ADC_Init+0x2e8>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	099b      	lsrs	r3, r3, #6
 8001f6e:	3301      	adds	r3, #1
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f74:	e002      	b.n	8001f7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f9      	bne.n	8001f76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff16 	bl	8001db8 <LL_ADC_IsInternalRegulatorEnabled>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10d      	bne.n	8001fae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f96:	f043 0210 	orr.w	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff76 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8001fb8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 8110 	bne.w	80021e8 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 810c 	bne.w	80021e8 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fd8:	f043 0202 	orr.w	r2, r3, #2
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff23 	bl	8001e30 <LL_ADC_IsEnabled>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d111      	bne.n	8002014 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ff0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ff4:	f7ff ff1c 	bl	8001e30 <LL_ADC_IsEnabled>
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	4878      	ldr	r0, [pc, #480]	; (80021dc <HAL_ADC_Init+0x2ec>)
 8001ffc:	f7ff ff18 	bl	8001e30 <LL_ADC_IsEnabled>
 8002000:	4603      	mov	r3, r0
 8002002:	4323      	orrs	r3, r4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4619      	mov	r1, r3
 800200e:	4874      	ldr	r0, [pc, #464]	; (80021e0 <HAL_ADC_Init+0x2f0>)
 8002010:	f7ff fd26 	bl	8001a60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7f5b      	ldrb	r3, [r3, #29]
 8002018:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800201e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002024:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800202a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002032:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800203e:	2b01      	cmp	r3, #1
 8002040:	d106      	bne.n	8002050 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	3b01      	subs	r3, #1
 8002048:	045b      	lsls	r3, r3, #17
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d009      	beq.n	800206c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	4b5c      	ldr	r3, [pc, #368]	; (80021e4 <HAL_ADC_Init+0x2f4>)
 8002074:	4013      	ands	r3, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	430b      	orrs	r3, r1
 800207e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff02 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 80020a0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ff0f 	bl	8001eca <LL_ADC_INJ_IsConversionOngoing>
 80020ac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d16d      	bne.n	8002190 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d16a      	bne.n	8002190 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020be:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020c6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020d6:	f023 0302 	bic.w	r3, r3, #2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	69b9      	ldr	r1, [r7, #24]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d017      	beq.n	800211c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002104:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6911      	ldr	r1, [r2, #16]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	430b      	orrs	r3, r1
 8002116:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800211a:	e013      	b.n	8002144 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800212a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800213c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002140:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800214a:	2b01      	cmp	r3, #1
 800214c:	d118      	bne.n	8002180 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002158:	f023 0304 	bic.w	r3, r3, #4
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002164:	4311      	orrs	r1, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002170:	430a      	orrs	r2, r1
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	611a      	str	r2, [r3, #16]
 800217e:	e007      	b.n	8002190 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d10c      	bne.n	80021b2 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f023 010f 	bic.w	r1, r3, #15
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	1e5a      	subs	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
 80021b0:	e007      	b.n	80021c2 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 020f 	bic.w	r2, r2, #15
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	f023 0303 	bic.w	r3, r3, #3
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80021d2:	e011      	b.n	80021f8 <HAL_ADC_Init+0x308>
 80021d4:	20000000 	.word	0x20000000
 80021d8:	053e2d63 	.word	0x053e2d63
 80021dc:	50000100 	.word	0x50000100
 80021e0:	50000300 	.word	0x50000300
 80021e4:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ec:	f043 0210 	orr.w	r2, r3, #16
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}
 8002202:	bf00      	nop

08002204 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002210:	4851      	ldr	r0, [pc, #324]	; (8002358 <HAL_ADC_Start_DMA+0x154>)
 8002212:	f7ff fd89 	bl	8001d28 <LL_ADC_GetMultimode>
 8002216:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fe41 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 808f 	bne.w	8002348 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_ADC_Start_DMA+0x34>
 8002234:	2302      	movs	r3, #2
 8002236:	e08a      	b.n	800234e <HAL_ADC_Start_DMA+0x14a>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d002      	beq.n	8002252 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b09      	cmp	r3, #9
 8002250:	d173      	bne.n	800233a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fc98 	bl	8002b88 <ADC_Enable>
 8002258:	4603      	mov	r3, r0
 800225a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800225c:	7dfb      	ldrb	r3, [r7, #23]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d166      	bne.n	8002330 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002266:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a38      	ldr	r2, [pc, #224]	; (800235c <HAL_ADC_Start_DMA+0x158>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d002      	beq.n	8002286 <HAL_ADC_Start_DMA+0x82>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	e001      	b.n	800228a <HAL_ADC_Start_DMA+0x86>
 8002286:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	4293      	cmp	r3, r2
 8002290:	d002      	beq.n	8002298 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b4:	f023 0206 	bic.w	r2, r3, #6
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	661a      	str	r2, [r3, #96]	; 0x60
 80022bc:	e002      	b.n	80022c4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	4a25      	ldr	r2, [pc, #148]	; (8002360 <HAL_ADC_Start_DMA+0x15c>)
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	4a24      	ldr	r2, [pc, #144]	; (8002364 <HAL_ADC_Start_DMA+0x160>)
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	4a23      	ldr	r2, [pc, #140]	; (8002368 <HAL_ADC_Start_DMA+0x164>)
 80022da:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	221c      	movs	r2, #28
 80022e2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0210 	orr.w	r2, r2, #16
 80022fa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3340      	adds	r3, #64	; 0x40
 8002316:	4619      	mov	r1, r3
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f001 f86e 	bl	80033fc <HAL_DMA_Start_IT>
 8002320:	4603      	mov	r3, r0
 8002322:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fda7 	bl	8001e7c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800232e:	e00d      	b.n	800234c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002338:	e008      	b.n	800234c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002346:	e001      	b.n	800234c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002348:	2302      	movs	r3, #2
 800234a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800234c:	7dfb      	ldrb	r3, [r7, #23]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	50000300 	.word	0x50000300
 800235c:	50000100 	.word	0x50000100
 8002360:	08002d0b 	.word	0x08002d0b
 8002364:	08002de3 	.word	0x08002de3
 8002368:	08002dff 	.word	0x08002dff

0800236c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0b6      	sub	sp, #216	; 0xd8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x22>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e3c8      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x7b4>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fd64 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 83ad 	bne.w	8002b3e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	f7ff fc1a 	bl	8001c2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fd52 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002400:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fd5e 	bl	8001eca <LL_ADC_INJ_IsConversionOngoing>
 800240e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002412:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002416:	2b00      	cmp	r3, #0
 8002418:	f040 81d9 	bne.w	80027ce <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800241c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002420:	2b00      	cmp	r3, #0
 8002422:	f040 81d4 	bne.w	80027ce <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800242e:	d10f      	bne.n	8002450 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2200      	movs	r2, #0
 800243a:	4619      	mov	r1, r3
 800243c:	f7ff fc21 	bl	8001c82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fbc8 	bl	8001bde <LL_ADC_SetSamplingTimeCommonConfig>
 800244e:	e00e      	b.n	800246e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6819      	ldr	r1, [r3, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	461a      	mov	r2, r3
 800245e:	f7ff fc10 	bl	8001c82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fbb8 	bl	8001bde <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	08db      	lsrs	r3, r3, #3
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b04      	cmp	r3, #4
 800248e:	d022      	beq.n	80024d6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6919      	ldr	r1, [r3, #16]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024a0:	f7ff fb12 	bl	8001ac8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6919      	ldr	r1, [r3, #16]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	461a      	mov	r2, r3
 80024b2:	f7ff fb5e 	bl	8001b72 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6919      	ldr	r1, [r3, #16]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	7f1b      	ldrb	r3, [r3, #28]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x124>
 80024c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ca:	e000      	b.n	80024ce <HAL_ADC_ConfigChannel+0x126>
 80024cc:	2300      	movs	r3, #0
 80024ce:	461a      	mov	r2, r3
 80024d0:	f7ff fb6a 	bl	8001ba8 <LL_ADC_SetOffsetSaturation>
 80024d4:	e17b      	b.n	80027ce <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fb17 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x15a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fb0c 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	0e9b      	lsrs	r3, r3, #26
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	e01e      	b.n	8002540 <HAL_ADC_ConfigChannel+0x198>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fb01 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002520:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002524:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002530:	2320      	movs	r3, #32
 8002532:	e004      	b.n	800253e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002534:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x1b0>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0e9b      	lsrs	r3, r3, #26
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	e018      	b.n	800258a <HAL_ADC_ConfigChannel+0x1e2>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800256c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002574:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800257c:	2320      	movs	r3, #32
 800257e:	e004      	b.n	800258a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002580:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800258a:	429a      	cmp	r2, r3
 800258c:	d106      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fad0 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2101      	movs	r1, #1
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fab4 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10a      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x220>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2101      	movs	r1, #1
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff faa9 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	f003 021f 	and.w	r2, r3, #31
 80025c6:	e01e      	b.n	8002606 <HAL_ADC_ConfigChannel+0x25e>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2101      	movs	r1, #1
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fa9e 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80025e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80025ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80025f6:	2320      	movs	r3, #32
 80025f8:	e004      	b.n	8002604 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80025fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260e:	2b00      	cmp	r3, #0
 8002610:	d105      	bne.n	800261e <HAL_ADC_ConfigChannel+0x276>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0e9b      	lsrs	r3, r3, #26
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	e018      	b.n	8002650 <HAL_ADC_ConfigChannel+0x2a8>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002632:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800263a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002642:	2320      	movs	r3, #32
 8002644:	e004      	b.n	8002650 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002646:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002650:	429a      	cmp	r2, r3
 8002652:	d106      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	2101      	movs	r1, #1
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fa6d 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2102      	movs	r1, #2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fa51 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10a      	bne.n	800268e <HAL_ADC_ConfigChannel+0x2e6>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2102      	movs	r1, #2
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fa46 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	0e9b      	lsrs	r3, r3, #26
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	e01e      	b.n	80026cc <HAL_ADC_ConfigChannel+0x324>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2102      	movs	r1, #2
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fa3b 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80026ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80026b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80026bc:	2320      	movs	r3, #32
 80026be:	e004      	b.n	80026ca <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80026c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026c4:	fab3 f383 	clz	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x33c>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0e9b      	lsrs	r3, r3, #26
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	e016      	b.n	8002712 <HAL_ADC_ConfigChannel+0x36a>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80026f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80026fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002704:	2320      	movs	r3, #32
 8002706:	e004      	b.n	8002712 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002712:	429a      	cmp	r2, r3
 8002714:	d106      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2200      	movs	r2, #0
 800271c:	2102      	movs	r1, #2
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fa0c 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2103      	movs	r1, #3
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff f9f0 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10a      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x3a8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2103      	movs	r1, #3
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff f9e5 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002746:	4603      	mov	r3, r0
 8002748:	0e9b      	lsrs	r3, r3, #26
 800274a:	f003 021f 	and.w	r2, r3, #31
 800274e:	e017      	b.n	8002780 <HAL_ADC_ConfigChannel+0x3d8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2103      	movs	r1, #3
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff f9da 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 800275c:	4603      	mov	r3, r0
 800275e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002768:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800276a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800276c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002772:	2320      	movs	r3, #32
 8002774:	e003      	b.n	800277e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002778:	fab3 f383 	clz	r3, r3
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x3f0>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0e9b      	lsrs	r3, r3, #26
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	e011      	b.n	80027bc <HAL_ADC_ConfigChannel+0x414>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80027a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80027aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80027b0:	2320      	movs	r3, #32
 80027b2:	e003      	b.n	80027bc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80027b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027bc:	429a      	cmp	r2, r3
 80027be:	d106      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2103      	movs	r1, #3
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff f9b7 	bl	8001b3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fb2c 	bl	8001e30 <LL_ADC_IsEnabled>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 8140 	bne.w	8002a60 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6819      	ldr	r1, [r3, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	461a      	mov	r2, r3
 80027ee:	f7ff fa73 	bl	8001cd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4a8f      	ldr	r2, [pc, #572]	; (8002a34 <HAL_ADC_ConfigChannel+0x68c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	f040 8131 	bne.w	8002a60 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10b      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x47e>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	0e9b      	lsrs	r3, r3, #26
 8002814:	3301      	adds	r3, #1
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	2b09      	cmp	r3, #9
 800281c:	bf94      	ite	ls
 800281e:	2301      	movls	r3, #1
 8002820:	2300      	movhi	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	e019      	b.n	800285a <HAL_ADC_ConfigChannel+0x4b2>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002836:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800283e:	2320      	movs	r3, #32
 8002840:	e003      	b.n	800284a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3301      	adds	r3, #1
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2b09      	cmp	r3, #9
 8002852:	bf94      	ite	ls
 8002854:	2301      	movls	r3, #1
 8002856:	2300      	movhi	r3, #0
 8002858:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800285a:	2b00      	cmp	r3, #0
 800285c:	d079      	beq.n	8002952 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <HAL_ADC_ConfigChannel+0x4d2>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	3301      	adds	r3, #1
 8002872:	069b      	lsls	r3, r3, #26
 8002874:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002878:	e015      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x4fe>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800288a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800288c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002892:	2320      	movs	r3, #32
 8002894:	e003      	b.n	800289e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	069b      	lsls	r3, r3, #26
 80028a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x51e>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	0e9b      	lsrs	r3, r3, #26
 80028b8:	3301      	adds	r3, #1
 80028ba:	f003 031f 	and.w	r3, r3, #31
 80028be:	2101      	movs	r1, #1
 80028c0:	fa01 f303 	lsl.w	r3, r1, r3
 80028c4:	e017      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x54e>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80028d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80028d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80028de:	2320      	movs	r3, #32
 80028e0:	e003      	b.n	80028ea <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80028e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	3301      	adds	r3, #1
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	ea42 0103 	orr.w	r1, r2, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <HAL_ADC_ConfigChannel+0x574>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	3301      	adds	r3, #1
 800290e:	f003 021f 	and.w	r2, r3, #31
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	051b      	lsls	r3, r3, #20
 800291a:	e018      	b.n	800294e <HAL_ADC_ConfigChannel+0x5a6>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800292e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002934:	2320      	movs	r3, #32
 8002936:	e003      	b.n	8002940 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	3301      	adds	r3, #1
 8002942:	f003 021f 	and.w	r2, r3, #31
 8002946:	4613      	mov	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800294e:	430b      	orrs	r3, r1
 8002950:	e081      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	2b00      	cmp	r3, #0
 800295c:	d107      	bne.n	800296e <HAL_ADC_ConfigChannel+0x5c6>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	3301      	adds	r3, #1
 8002966:	069b      	lsls	r3, r3, #26
 8002968:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800296c:	e015      	b.n	800299a <HAL_ADC_ConfigChannel+0x5f2>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002986:	2320      	movs	r3, #32
 8002988:	e003      	b.n	8002992 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	3301      	adds	r3, #1
 8002994:	069b      	lsls	r3, r3, #26
 8002996:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x612>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	0e9b      	lsrs	r3, r3, #26
 80029ac:	3301      	adds	r3, #1
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	e017      	b.n	80029ea <HAL_ADC_ConfigChannel+0x642>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	61fb      	str	r3, [r7, #28]
  return result;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80029d2:	2320      	movs	r3, #32
 80029d4:	e003      	b.n	80029de <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	ea42 0103 	orr.w	r1, r2, r3
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10d      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x66e>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	0e9b      	lsrs	r3, r3, #26
 8002a00:	3301      	adds	r3, #1
 8002a02:	f003 021f 	and.w	r2, r3, #31
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3b1e      	subs	r3, #30
 8002a0e:	051b      	lsls	r3, r3, #20
 8002a10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a14:	e01e      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x6ac>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	613b      	str	r3, [r7, #16]
  return result;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d104      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e006      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x698>
 8002a32:	bf00      	nop
 8002a34:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 021f 	and.w	r2, r3, #31
 8002a46:	4613      	mov	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3b1e      	subs	r3, #30
 8002a4e:	051b      	lsls	r3, r3, #20
 8002a50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a54:	430b      	orrs	r3, r1
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	6892      	ldr	r2, [r2, #8]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f7ff f911 	bl	8001c82 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b3f      	ldr	r3, [pc, #252]	; (8002b64 <HAL_ADC_ConfigChannel+0x7bc>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d071      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a6c:	483e      	ldr	r0, [pc, #248]	; (8002b68 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a6e:	f7ff f81d 	bl	8001aac <LL_ADC_GetCommonPathInternalCh>
 8002a72:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a3c      	ldr	r2, [pc, #240]	; (8002b6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_ADC_ConfigChannel+0x6e2>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a3a      	ldr	r2, [pc, #232]	; (8002b70 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d127      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d121      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a9e:	d157      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	482f      	ldr	r0, [pc, #188]	; (8002b68 <HAL_ADC_ConfigChannel+0x7c0>)
 8002aac:	f7fe ffeb 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ab0:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	4a30      	ldr	r2, [pc, #192]	; (8002b78 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002aca:	e002      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f9      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ad8:	e03a      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a27      	ldr	r2, [pc, #156]	; (8002b7c <HAL_ADC_ConfigChannel+0x7d4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d113      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x764>
 8002ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10d      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <HAL_ADC_ConfigChannel+0x7d8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d02a      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002afa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b02:	4619      	mov	r1, r3
 8002b04:	4818      	ldr	r0, [pc, #96]	; (8002b68 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b06:	f7fe ffbe 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b0a:	e021      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1c      	ldr	r2, [pc, #112]	; (8002b84 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d11c      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d116      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d011      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b34:	4619      	mov	r1, r3
 8002b36:	480c      	ldr	r0, [pc, #48]	; (8002b68 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b38:	f7fe ffa5 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
 8002b3c:	e008      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	f043 0220 	orr.w	r2, r3, #32
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b58:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	37d8      	adds	r7, #216	; 0xd8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	80080000 	.word	0x80080000
 8002b68:	50000300 	.word	0x50000300
 8002b6c:	c3210000 	.word	0xc3210000
 8002b70:	90c00010 	.word	0x90c00010
 8002b74:	20000000 	.word	0x20000000
 8002b78:	053e2d63 	.word	0x053e2d63
 8002b7c:	c7520000 	.word	0xc7520000
 8002b80:	50000100 	.word	0x50000100
 8002b84:	cb840000 	.word	0xcb840000

08002b88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff f94b 	bl	8001e30 <LL_ADC_IsEnabled>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d14d      	bne.n	8002c3c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <ADC_Enable+0xc0>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	f043 0210 	orr.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e039      	b.n	8002c3e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f906 	bl	8001de0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bd4:	f7fe feec 	bl	80019b0 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bda:	e028      	b.n	8002c2e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f925 	bl	8001e30 <LL_ADC_IsEnabled>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff f8f5 	bl	8001de0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bf6:	f7fe fedb 	bl	80019b0 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d914      	bls.n	8002c2e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d00d      	beq.n	8002c2e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	f043 0210 	orr.w	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e007      	b.n	8002c3e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d1cf      	bne.n	8002bdc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	8000003f 	.word	0x8000003f

08002c4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff f8fc 	bl	8001e56 <LL_ADC_IsDisableOngoing>
 8002c5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff f8e3 	bl	8001e30 <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d047      	beq.n	8002d00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d144      	bne.n	8002d00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030d 	and.w	r3, r3, #13
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10c      	bne.n	8002c9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff f8bd 	bl	8001e08 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2203      	movs	r2, #3
 8002c94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c96:	f7fe fe8b 	bl	80019b0 <HAL_GetTick>
 8002c9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c9c:	e029      	b.n	8002cf2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	f043 0210 	orr.w	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e023      	b.n	8002d02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cba:	f7fe fe79 	bl	80019b0 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d914      	bls.n	8002cf2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	f043 0210 	orr.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e007      	b.n	8002d02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1dc      	bne.n	8002cba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d14b      	bne.n	8002dbc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d021      	beq.n	8002d82 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe ff5e 	bl	8001c04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d032      	beq.n	8002db4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d12b      	bne.n	8002db4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d11f      	bne.n	8002db4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d80:	e018      	b.n	8002db4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d111      	bne.n	8002db4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	f043 0201 	orr.w	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7ff fad9 	bl	800236c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dba:	e00e      	b.n	8002dda <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f7ff fae3 	bl	8002394 <HAL_ADC_ErrorCallback>
}
 8002dce:	e004      	b.n	8002dda <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff fac5 	bl	8002380 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1c:	f043 0204 	orr.w	r2, r3, #4
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff fab5 	bl	8002394 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <LL_ADC_IsEnabled>:
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <LL_ADC_IsEnabled+0x18>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <LL_ADC_IsEnabled+0x1a>
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_StartCalibration>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002e6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_ADC_IsCalibrationOnGoing>:
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e9e:	d101      	bne.n	8002ea4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d101      	bne.n	8002eca <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADCEx_Calibration_Start+0x1c>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e04d      	b.n	8002f90 <HAL_ADCEx_Calibration_Start+0xb8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff fea5 	bl	8002c4c <ADC_Disable>
 8002f02:	4603      	mov	r3, r0
 8002f04:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d136      	bne.n	8002f7a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f14:	f023 0302 	bic.w	r3, r3, #2
 8002f18:	f043 0202 	orr.w	r2, r3, #2
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6839      	ldr	r1, [r7, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff96 	bl	8002e58 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f2c:	e014      	b.n	8002f58 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3301      	adds	r3, #1
 8002f32:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d90d      	bls.n	8002f58 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	f023 0312 	bic.w	r3, r3, #18
 8002f44:	f043 0210 	orr.w	r2, r3, #16
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e01b      	b.n	8002f90 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff94 	bl	8002e8a <LL_ADC_IsCalibrationOnGoing>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e2      	bne.n	8002f2e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6c:	f023 0303 	bic.w	r3, r3, #3
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f78:	e005      	b.n	8002f86 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	f043 0210 	orr.w	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	0004de01 	.word	0x0004de01

08002f9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b0a1      	sub	sp, #132	; 0x84
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e08b      	b.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd2:	d102      	bne.n	8002fda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fd4:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	e001      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e06a      	b.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff57 	bl	8002eb2 <LL_ADC_REG_IsConversionOngoing>
 8003004:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff ff51 	bl	8002eb2 <LL_ADC_REG_IsConversionOngoing>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d14c      	bne.n	80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003018:	2b00      	cmp	r3, #0
 800301a:	d149      	bne.n	80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800301c:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800301e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d028      	beq.n	800307a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800303a:	035b      	lsls	r3, r3, #13
 800303c:	430b      	orrs	r3, r1
 800303e:	431a      	orrs	r2, r3
 8003040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003042:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003044:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003048:	f7ff fef3 	bl	8002e32 <LL_ADC_IsEnabled>
 800304c:	4604      	mov	r4, r0
 800304e:	4823      	ldr	r0, [pc, #140]	; (80030dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003050:	f7ff feef 	bl	8002e32 <LL_ADC_IsEnabled>
 8003054:	4603      	mov	r3, r0
 8003056:	4323      	orrs	r3, r4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d133      	bne.n	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800305c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003064:	f023 030f 	bic.w	r3, r3, #15
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	6811      	ldr	r1, [r2, #0]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	6892      	ldr	r2, [r2, #8]
 8003070:	430a      	orrs	r2, r1
 8003072:	431a      	orrs	r2, r3
 8003074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003076:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003078:	e024      	b.n	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800307a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003084:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003086:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800308a:	f7ff fed2 	bl	8002e32 <LL_ADC_IsEnabled>
 800308e:	4604      	mov	r4, r0
 8003090:	4812      	ldr	r0, [pc, #72]	; (80030dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003092:	f7ff fece 	bl	8002e32 <LL_ADC_IsEnabled>
 8003096:	4603      	mov	r3, r0
 8003098:	4323      	orrs	r3, r4
 800309a:	2b00      	cmp	r3, #0
 800309c:	d112      	bne.n	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800309e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030a6:	f023 030f 	bic.w	r3, r3, #15
 80030aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80030ac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030ae:	e009      	b.n	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030c2:	e000      	b.n	80030c6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80030ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3784      	adds	r7, #132	; 0x84
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd90      	pop	{r4, r7, pc}
 80030da:	bf00      	nop
 80030dc:	50000100 	.word	0x50000100
 80030e0:	50000300 	.word	0x50000300

080030e4 <__NVIC_SetPriorityGrouping>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800310c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003116:	4a04      	ldr	r2, [pc, #16]	; (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	60d3      	str	r3, [r2, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_GetPriorityGrouping>:
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <__NVIC_GetPriorityGrouping+0x18>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	f003 0307 	and.w	r3, r3, #7
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_SetPriority>:
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	6039      	str	r1, [r7, #0]
 8003152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	db0a      	blt.n	8003172 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	490c      	ldr	r1, [pc, #48]	; (8003194 <__NVIC_SetPriority+0x4c>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	440b      	add	r3, r1
 800316c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003170:	e00a      	b.n	8003188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4908      	ldr	r1, [pc, #32]	; (8003198 <__NVIC_SetPriority+0x50>)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3b04      	subs	r3, #4
 8003180:	0112      	lsls	r2, r2, #4
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	440b      	add	r3, r1
 8003186:	761a      	strb	r2, [r3, #24]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000e100 	.word	0xe000e100
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <NVIC_EncodePriority>:
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f1c3 0307 	rsb	r3, r3, #7
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	bf28      	it	cs
 80031ba:	2304      	movcs	r3, #4
 80031bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d902      	bls.n	80031cc <NVIC_EncodePriority+0x30>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3b03      	subs	r3, #3
 80031ca:	e000      	b.n	80031ce <NVIC_EncodePriority+0x32>
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	f04f 32ff 	mov.w	r2, #4294967295
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e4:	f04f 31ff 	mov.w	r1, #4294967295
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43d9      	mvns	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	4313      	orrs	r3, r2
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003214:	d301      	bcc.n	800321a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003216:	2301      	movs	r3, #1
 8003218:	e00f      	b.n	800323a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <SysTick_Config+0x40>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003222:	210f      	movs	r1, #15
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	f7ff ff8e 	bl	8003148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <SysTick_Config+0x40>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003232:	4b04      	ldr	r3, [pc, #16]	; (8003244 <SysTick_Config+0x40>)
 8003234:	2207      	movs	r2, #7
 8003236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	e000e010 	.word	0xe000e010

08003248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff47 	bl	80030e4 <__NVIC_SetPriorityGrouping>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800326c:	f7ff ff5e 	bl	800312c <__NVIC_GetPriorityGrouping>
 8003270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	6978      	ldr	r0, [r7, #20]
 8003278:	f7ff ff90 	bl	800319c <NVIC_EncodePriority>
 800327c:	4602      	mov	r2, r0
 800327e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff5f 	bl	8003148 <__NVIC_SetPriority>
}
 800328a:	bf00      	nop
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ffb2 	bl	8003204 <SysTick_Config>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e08d      	b.n	80033da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <HAL_DMA_Init+0x138>)
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d80f      	bhi.n	80032ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	4b45      	ldr	r3, [pc, #276]	; (80033e8 <HAL_DMA_Init+0x13c>)
 80032d2:	4413      	add	r3, r2
 80032d4:	4a45      	ldr	r2, [pc, #276]	; (80033ec <HAL_DMA_Init+0x140>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	009a      	lsls	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a42      	ldr	r2, [pc, #264]	; (80033f0 <HAL_DMA_Init+0x144>)
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
 80032e8:	e00e      	b.n	8003308 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <HAL_DMA_Init+0x148>)
 80032f2:	4413      	add	r3, r2
 80032f4:	4a3d      	ldr	r2, [pc, #244]	; (80033ec <HAL_DMA_Init+0x140>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	009a      	lsls	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a3c      	ldr	r2, [pc, #240]	; (80033f8 <HAL_DMA_Init+0x14c>)
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800331e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003322:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800332c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f908 	bl	8003570 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003368:	d102      	bne.n	8003370 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003384:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d010      	beq.n	80033b0 <HAL_DMA_Init+0x104>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b04      	cmp	r3, #4
 8003394:	d80c      	bhi.n	80033b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f928 	bl	80035ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	e008      	b.n	80033c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40020407 	.word	0x40020407
 80033e8:	bffdfff8 	.word	0xbffdfff8
 80033ec:	cccccccd 	.word	0xcccccccd
 80033f0:	40020000 	.word	0x40020000
 80033f4:	bffdfbf8 	.word	0xbffdfbf8
 80033f8:	40020400 	.word	0x40020400

080033fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_DMA_Start_IT+0x20>
 8003418:	2302      	movs	r3, #2
 800341a:	e066      	b.n	80034ea <HAL_DMA_Start_IT+0xee>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d155      	bne.n	80034dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f84c 	bl	80034f2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 020e 	orr.w	r2, r2, #14
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e00f      	b.n	8003494 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0204 	bic.w	r2, r2, #4
 8003482:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 020a 	orr.w	r2, r2, #10
 8003492:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e005      	b.n	80034e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
 80034e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003508:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	2b00      	cmp	r3, #0
 8003510:	d004      	beq.n	800351c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800351a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f202 	lsl.w	r2, r1, r2
 800352e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b10      	cmp	r3, #16
 800353e:	d108      	bne.n	8003552 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003550:	e007      	b.n	8003562 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	60da      	str	r2, [r3, #12]
}
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003580:	429a      	cmp	r2, r3
 8003582:	d802      	bhi.n	800358a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003584:	4b15      	ldr	r3, [pc, #84]	; (80035dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	e001      	b.n	800358e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800358a:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800358c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	3b08      	subs	r3, #8
 800359a:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	009a      	lsls	r2, r3, #2
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80035ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	2201      	movs	r2, #1
 80035c4:	409a      	lsls	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40020407 	.word	0x40020407
 80035dc:	40020800 	.word	0x40020800
 80035e0:	40020820 	.word	0x40020820
 80035e4:	cccccccd 	.word	0xcccccccd
 80035e8:	40020880 	.word	0x40020880

080035ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	461a      	mov	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a08      	ldr	r2, [pc, #32]	; (8003630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800360e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3b01      	subs	r3, #1
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	2201      	movs	r2, #1
 800361a:	409a      	lsls	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	1000823f 	.word	0x1000823f
 8003630:	40020940 	.word	0x40020940

08003634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003642:	e15a      	b.n	80038fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2101      	movs	r1, #1
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	4013      	ands	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 814c 	beq.w	80038f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b01      	cmp	r3, #1
 8003666:	d005      	beq.n	8003674 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003670:	2b02      	cmp	r3, #2
 8003672:	d130      	bne.n	80036d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	2203      	movs	r2, #3
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4013      	ands	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036aa:	2201      	movs	r2, #1
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	f003 0201 	and.w	r2, r3, #1
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d017      	beq.n	8003712 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2203      	movs	r2, #3
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d123      	bne.n	8003766 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	08da      	lsrs	r2, r3, #3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3208      	adds	r2, #8
 8003726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	220f      	movs	r2, #15
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	08da      	lsrs	r2, r3, #3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3208      	adds	r2, #8
 8003760:	6939      	ldr	r1, [r7, #16]
 8003762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	2203      	movs	r2, #3
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4013      	ands	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0203 	and.w	r2, r3, #3
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80a6 	beq.w	80038f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a8:	4b5b      	ldr	r3, [pc, #364]	; (8003918 <HAL_GPIO_Init+0x2e4>)
 80037aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ac:	4a5a      	ldr	r2, [pc, #360]	; (8003918 <HAL_GPIO_Init+0x2e4>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6613      	str	r3, [r2, #96]	; 0x60
 80037b4:	4b58      	ldr	r3, [pc, #352]	; (8003918 <HAL_GPIO_Init+0x2e4>)
 80037b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c0:	4a56      	ldr	r2, [pc, #344]	; (800391c <HAL_GPIO_Init+0x2e8>)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	3302      	adds	r3, #2
 80037c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	220f      	movs	r2, #15
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4013      	ands	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037ea:	d01f      	beq.n	800382c <HAL_GPIO_Init+0x1f8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a4c      	ldr	r2, [pc, #304]	; (8003920 <HAL_GPIO_Init+0x2ec>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d019      	beq.n	8003828 <HAL_GPIO_Init+0x1f4>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a4b      	ldr	r2, [pc, #300]	; (8003924 <HAL_GPIO_Init+0x2f0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d013      	beq.n	8003824 <HAL_GPIO_Init+0x1f0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a4a      	ldr	r2, [pc, #296]	; (8003928 <HAL_GPIO_Init+0x2f4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00d      	beq.n	8003820 <HAL_GPIO_Init+0x1ec>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a49      	ldr	r2, [pc, #292]	; (800392c <HAL_GPIO_Init+0x2f8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d007      	beq.n	800381c <HAL_GPIO_Init+0x1e8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a48      	ldr	r2, [pc, #288]	; (8003930 <HAL_GPIO_Init+0x2fc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d101      	bne.n	8003818 <HAL_GPIO_Init+0x1e4>
 8003814:	2305      	movs	r3, #5
 8003816:	e00a      	b.n	800382e <HAL_GPIO_Init+0x1fa>
 8003818:	2306      	movs	r3, #6
 800381a:	e008      	b.n	800382e <HAL_GPIO_Init+0x1fa>
 800381c:	2304      	movs	r3, #4
 800381e:	e006      	b.n	800382e <HAL_GPIO_Init+0x1fa>
 8003820:	2303      	movs	r3, #3
 8003822:	e004      	b.n	800382e <HAL_GPIO_Init+0x1fa>
 8003824:	2302      	movs	r3, #2
 8003826:	e002      	b.n	800382e <HAL_GPIO_Init+0x1fa>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <HAL_GPIO_Init+0x1fa>
 800382c:	2300      	movs	r3, #0
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	f002 0203 	and.w	r2, r2, #3
 8003834:	0092      	lsls	r2, r2, #2
 8003836:	4093      	lsls	r3, r2
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800383e:	4937      	ldr	r1, [pc, #220]	; (800391c <HAL_GPIO_Init+0x2e8>)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	089b      	lsrs	r3, r3, #2
 8003844:	3302      	adds	r3, #2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800384c:	4b39      	ldr	r3, [pc, #228]	; (8003934 <HAL_GPIO_Init+0x300>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003870:	4a30      	ldr	r2, [pc, #192]	; (8003934 <HAL_GPIO_Init+0x300>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003876:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <HAL_GPIO_Init+0x300>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800389a:	4a26      	ldr	r2, [pc, #152]	; (8003934 <HAL_GPIO_Init+0x300>)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80038a0:	4b24      	ldr	r3, [pc, #144]	; (8003934 <HAL_GPIO_Init+0x300>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038c4:	4a1b      	ldr	r2, [pc, #108]	; (8003934 <HAL_GPIO_Init+0x300>)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038ca:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_GPIO_Init+0x300>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038ee:	4a11      	ldr	r2, [pc, #68]	; (8003934 <HAL_GPIO_Init+0x300>)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3301      	adds	r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	f47f ae9d 	bne.w	8003644 <HAL_GPIO_Init+0x10>
  }
}
 800390a:	bf00      	nop
 800390c:	bf00      	nop
 800390e:	371c      	adds	r7, #28
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	40021000 	.word	0x40021000
 800391c:	40010000 	.word	0x40010000
 8003920:	48000400 	.word	0x48000400
 8003924:	48000800 	.word	0x48000800
 8003928:	48000c00 	.word	0x48000c00
 800392c:	48001000 	.word	0x48001000
 8003930:	48001400 	.word	0x48001400
 8003934:	40010400 	.word	0x40010400

08003938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	807b      	strh	r3, [r7, #2]
 8003944:	4613      	mov	r3, r2
 8003946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003948:	787b      	ldrb	r3, [r7, #1]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800394e:	887a      	ldrh	r2, [r7, #2]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003954:	e002      	b.n	800395c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e081      	b.n	8003a7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd fde2 	bl	8001558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	; 0x24
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d107      	bne.n	80039e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	e006      	b.n	80039f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d104      	bne.n	8003a02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69d9      	ldr	r1, [r3, #28]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d138      	bne.n	8003b0e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e032      	b.n	8003b10 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2224      	movs	r2, #36	; 0x24
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ad8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e000      	b.n	8003b10 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	d139      	bne.n	8003ba6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e033      	b.n	8003ba8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2224      	movs	r2, #36	; 0x24
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e000      	b.n	8003ba8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
  }
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d141      	bne.n	8003c46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bc2:	4b4b      	ldr	r3, [pc, #300]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bce:	d131      	bne.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bd0:	4b47      	ldr	r3, [pc, #284]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd6:	4a46      	ldr	r2, [pc, #280]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003be0:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003be8:	4a41      	ldr	r2, [pc, #260]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bf0:	4b40      	ldr	r3, [pc, #256]	; (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2232      	movs	r2, #50	; 0x32
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	4a3f      	ldr	r2, [pc, #252]	; (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	0c9b      	lsrs	r3, r3, #18
 8003c02:	3301      	adds	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c06:	e002      	b.n	8003c0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c0e:	4b38      	ldr	r3, [pc, #224]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1a:	d102      	bne.n	8003c22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f2      	bne.n	8003c08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c22:	4b33      	ldr	r3, [pc, #204]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2e:	d158      	bne.n	8003ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e057      	b.n	8003ce4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c34:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3a:	4a2d      	ldr	r2, [pc, #180]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c44:	e04d      	b.n	8003ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c4c:	d141      	bne.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c4e:	4b28      	ldr	r3, [pc, #160]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5a:	d131      	bne.n	8003cc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c5c:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c62:	4a23      	ldr	r2, [pc, #140]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c6c:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c74:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c7c:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2232      	movs	r2, #50	; 0x32
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	0c9b      	lsrs	r3, r3, #18
 8003c8e:	3301      	adds	r3, #1
 8003c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c92:	e002      	b.n	8003c9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c9a:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca6:	d102      	bne.n	8003cae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f2      	bne.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cba:	d112      	bne.n	8003ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e011      	b.n	8003ce4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc6:	4a0a      	ldr	r2, [pc, #40]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ccc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cd0:	e007      	b.n	8003ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cd2:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ce0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	40007000 	.word	0x40007000
 8003cf4:	20000000 	.word	0x20000000
 8003cf8:	431bde83 	.word	0x431bde83

08003cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e306      	b.n	800431c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d075      	beq.n	8003e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d1a:	4b97      	ldr	r3, [pc, #604]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d24:	4b94      	ldr	r3, [pc, #592]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	2b0c      	cmp	r3, #12
 8003d32:	d102      	bne.n	8003d3a <HAL_RCC_OscConfig+0x3e>
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d002      	beq.n	8003d40 <HAL_RCC_OscConfig+0x44>
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d10b      	bne.n	8003d58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	4b8d      	ldr	r3, [pc, #564]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d05b      	beq.n	8003e04 <HAL_RCC_OscConfig+0x108>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d157      	bne.n	8003e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e2e1      	b.n	800431c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d106      	bne.n	8003d70 <HAL_RCC_OscConfig+0x74>
 8003d62:	4b85      	ldr	r3, [pc, #532]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a84      	ldr	r2, [pc, #528]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e01d      	b.n	8003dac <HAL_RCC_OscConfig+0xb0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x98>
 8003d7a:	4b7f      	ldr	r3, [pc, #508]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7e      	ldr	r2, [pc, #504]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b7c      	ldr	r3, [pc, #496]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a7b      	ldr	r2, [pc, #492]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0xb0>
 8003d94:	4b78      	ldr	r3, [pc, #480]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a77      	ldr	r2, [pc, #476]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	4b75      	ldr	r3, [pc, #468]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a74      	ldr	r2, [pc, #464]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d013      	beq.n	8003ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fd fdfc 	bl	80019b0 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fd fdf8 	bl	80019b0 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	; 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e2a6      	b.n	800431c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dce:	4b6a      	ldr	r3, [pc, #424]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0xc0>
 8003dda:	e014      	b.n	8003e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fde8 	bl	80019b0 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fd fde4 	bl	80019b0 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e292      	b.n	800431c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df6:	4b60      	ldr	r3, [pc, #384]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0xe8>
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d075      	beq.n	8003efe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e12:	4b59      	ldr	r3, [pc, #356]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1c:	4b56      	ldr	r3, [pc, #344]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b0c      	cmp	r3, #12
 8003e2a:	d102      	bne.n	8003e32 <HAL_RCC_OscConfig+0x136>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d002      	beq.n	8003e38 <HAL_RCC_OscConfig+0x13c>
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d11f      	bne.n	8003e78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e38:	4b4f      	ldr	r3, [pc, #316]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_OscConfig+0x154>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e265      	b.n	800431c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e50:	4b49      	ldr	r3, [pc, #292]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	061b      	lsls	r3, r3, #24
 8003e5e:	4946      	ldr	r1, [pc, #280]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e64:	4b45      	ldr	r3, [pc, #276]	; (8003f7c <HAL_RCC_OscConfig+0x280>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fd fd55 	bl	8001918 <HAL_InitTick>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d043      	beq.n	8003efc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e251      	b.n	800431c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d023      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e80:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a3c      	ldr	r2, [pc, #240]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fd fd90 	bl	80019b0 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e94:	f7fd fd8c 	bl	80019b0 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e23a      	b.n	800431c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ea6:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	061b      	lsls	r3, r3, #24
 8003ec0:	492d      	ldr	r1, [pc, #180]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]
 8003ec6:	e01a      	b.n	8003efe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ec8:	4b2b      	ldr	r3, [pc, #172]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2a      	ldr	r2, [pc, #168]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003ece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fd fd6c 	bl	80019b0 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003edc:	f7fd fd68 	bl	80019b0 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e216      	b.n	800431c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eee:	4b22      	ldr	r3, [pc, #136]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x1e0>
 8003efa:	e000      	b.n	8003efe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003efc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d041      	beq.n	8003f8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01c      	beq.n	8003f4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f12:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f18:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f22:	f7fd fd45 	bl	80019b0 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2a:	f7fd fd41 	bl	80019b0 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e1ef      	b.n	800431c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0ef      	beq.n	8003f2a <HAL_RCC_OscConfig+0x22e>
 8003f4a:	e020      	b.n	8003f8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f52:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fd fd28 	bl	80019b0 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f62:	e00d      	b.n	8003f80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fd fd24 	bl	80019b0 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d906      	bls.n	8003f80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e1d2      	b.n	800431c <HAL_RCC_OscConfig+0x620>
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f80:	4b8c      	ldr	r3, [pc, #560]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8003f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1ea      	bne.n	8003f64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80a6 	beq.w	80040e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fa0:	4b84      	ldr	r3, [pc, #528]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x2b4>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <HAL_RCC_OscConfig+0x2b6>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb6:	4b7f      	ldr	r3, [pc, #508]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	4a7e      	ldr	r2, [pc, #504]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc2:	4b7c      	ldr	r3, [pc, #496]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd2:	4b79      	ldr	r3, [pc, #484]	; (80041b8 <HAL_RCC_OscConfig+0x4bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d118      	bne.n	8004010 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fde:	4b76      	ldr	r3, [pc, #472]	; (80041b8 <HAL_RCC_OscConfig+0x4bc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a75      	ldr	r2, [pc, #468]	; (80041b8 <HAL_RCC_OscConfig+0x4bc>)
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fea:	f7fd fce1 	bl	80019b0 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff2:	f7fd fcdd 	bl	80019b0 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e18b      	b.n	800431c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004004:	4b6c      	ldr	r3, [pc, #432]	; (80041b8 <HAL_RCC_OscConfig+0x4bc>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d108      	bne.n	800402a <HAL_RCC_OscConfig+0x32e>
 8004018:	4b66      	ldr	r3, [pc, #408]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	4a65      	ldr	r2, [pc, #404]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004028:	e024      	b.n	8004074 <HAL_RCC_OscConfig+0x378>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b05      	cmp	r3, #5
 8004030:	d110      	bne.n	8004054 <HAL_RCC_OscConfig+0x358>
 8004032:	4b60      	ldr	r3, [pc, #384]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	4a5e      	ldr	r2, [pc, #376]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800403a:	f043 0304 	orr.w	r3, r3, #4
 800403e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004042:	4b5c      	ldr	r3, [pc, #368]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004048:	4a5a      	ldr	r2, [pc, #360]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004052:	e00f      	b.n	8004074 <HAL_RCC_OscConfig+0x378>
 8004054:	4b57      	ldr	r3, [pc, #348]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	4a56      	ldr	r2, [pc, #344]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004064:	4b53      	ldr	r3, [pc, #332]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	4a52      	ldr	r2, [pc, #328]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800406c:	f023 0304 	bic.w	r3, r3, #4
 8004070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d016      	beq.n	80040aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407c:	f7fd fc98 	bl	80019b0 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004082:	e00a      	b.n	800409a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004084:	f7fd fc94 	bl	80019b0 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e140      	b.n	800431c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409a:	4b46      	ldr	r3, [pc, #280]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0ed      	beq.n	8004084 <HAL_RCC_OscConfig+0x388>
 80040a8:	e015      	b.n	80040d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040aa:	f7fd fc81 	bl	80019b0 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040b0:	e00a      	b.n	80040c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b2:	f7fd fc7d 	bl	80019b0 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e129      	b.n	800431c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040c8:	4b3a      	ldr	r3, [pc, #232]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1ed      	bne.n	80040b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040d6:	7ffb      	ldrb	r3, [r7, #31]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d105      	bne.n	80040e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040dc:	4b35      	ldr	r3, [pc, #212]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e0:	4a34      	ldr	r2, [pc, #208]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 80040e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d03c      	beq.n	800416e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01c      	beq.n	8004136 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040fc:	4b2d      	ldr	r3, [pc, #180]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 80040fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004102:	4a2c      	ldr	r2, [pc, #176]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fd fc50 	bl	80019b0 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004114:	f7fd fc4c 	bl	80019b0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0fa      	b.n	800431c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004126:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004128:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0ef      	beq.n	8004114 <HAL_RCC_OscConfig+0x418>
 8004134:	e01b      	b.n	800416e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004136:	4b1f      	ldr	r3, [pc, #124]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800413c:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004146:	f7fd fc33 	bl	80019b0 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800414e:	f7fd fc2f 	bl	80019b0 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e0dd      	b.n	800431c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004160:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004162:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1ef      	bne.n	800414e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80d1 	beq.w	800431a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004178:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b0c      	cmp	r3, #12
 8004182:	f000 808b 	beq.w	800429c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d15e      	bne.n	800424c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418e:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a08      	ldr	r2, [pc, #32]	; (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004194:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fd fc09 	bl	80019b0 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a0:	e00c      	b.n	80041bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a2:	f7fd fc05 	bl	80019b0 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d905      	bls.n	80041bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e0b3      	b.n	800431c <HAL_RCC_OscConfig+0x620>
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041bc:	4b59      	ldr	r3, [pc, #356]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ec      	bne.n	80041a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041c8:	4b56      	ldr	r3, [pc, #344]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	4b56      	ldr	r3, [pc, #344]	; (8004328 <HAL_RCC_OscConfig+0x62c>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6a11      	ldr	r1, [r2, #32]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041d8:	3a01      	subs	r2, #1
 80041da:	0112      	lsls	r2, r2, #4
 80041dc:	4311      	orrs	r1, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041e2:	0212      	lsls	r2, r2, #8
 80041e4:	4311      	orrs	r1, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041ea:	0852      	lsrs	r2, r2, #1
 80041ec:	3a01      	subs	r2, #1
 80041ee:	0552      	lsls	r2, r2, #21
 80041f0:	4311      	orrs	r1, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041f6:	0852      	lsrs	r2, r2, #1
 80041f8:	3a01      	subs	r2, #1
 80041fa:	0652      	lsls	r2, r2, #25
 80041fc:	4311      	orrs	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004202:	06d2      	lsls	r2, r2, #27
 8004204:	430a      	orrs	r2, r1
 8004206:	4947      	ldr	r1, [pc, #284]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 8004208:	4313      	orrs	r3, r2
 800420a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800420c:	4b45      	ldr	r3, [pc, #276]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a44      	ldr	r2, [pc, #272]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 8004212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004216:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004218:	4b42      	ldr	r3, [pc, #264]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4a41      	ldr	r2, [pc, #260]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 800421e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004222:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd fbc4 	bl	80019b0 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422c:	f7fd fbc0 	bl	80019b0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e06e      	b.n	800431c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423e:	4b39      	ldr	r3, [pc, #228]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0x530>
 800424a:	e066      	b.n	800431a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424c:	4b35      	ldr	r3, [pc, #212]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a34      	ldr	r2, [pc, #208]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 8004252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004256:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004258:	4b32      	ldr	r3, [pc, #200]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a31      	ldr	r2, [pc, #196]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 800425e:	f023 0303 	bic.w	r3, r3, #3
 8004262:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004264:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4a2e      	ldr	r2, [pc, #184]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 800426a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800426e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004272:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd fb9c 	bl	80019b0 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800427c:	f7fd fb98 	bl	80019b0 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e046      	b.n	800431c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800428e:	4b25      	ldr	r3, [pc, #148]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x580>
 800429a:	e03e      	b.n	800431a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e039      	b.n	800431c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042a8:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <HAL_RCC_OscConfig+0x628>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f003 0203 	and.w	r2, r3, #3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d12c      	bne.n	8004316 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	3b01      	subs	r3, #1
 80042c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d123      	bne.n	8004316 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042da:	429a      	cmp	r2, r3
 80042dc:	d11b      	bne.n	8004316 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d113      	bne.n	8004316 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	3b01      	subs	r3, #1
 80042fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042fe:	429a      	cmp	r2, r3
 8004300:	d109      	bne.n	8004316 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	3b01      	subs	r3, #1
 8004310:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004312:	429a      	cmp	r2, r3
 8004314:	d001      	beq.n	800431a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3720      	adds	r7, #32
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40021000 	.word	0x40021000
 8004328:	019f800c 	.word	0x019f800c

0800432c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e11e      	b.n	8004582 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004344:	4b91      	ldr	r3, [pc, #580]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d910      	bls.n	8004374 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b8e      	ldr	r3, [pc, #568]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 020f 	bic.w	r2, r3, #15
 800435a:	498c      	ldr	r1, [pc, #560]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b8a      	ldr	r3, [pc, #552]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e106      	b.n	8004582 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d073      	beq.n	8004468 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d129      	bne.n	80043dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004388:	4b81      	ldr	r3, [pc, #516]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0f4      	b.n	8004582 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004398:	f000 f99e 	bl	80046d8 <RCC_GetSysClockFreqFromPLLSource>
 800439c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4a7c      	ldr	r2, [pc, #496]	; (8004594 <HAL_RCC_ClockConfig+0x268>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d93f      	bls.n	8004426 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043a6:	4b7a      	ldr	r3, [pc, #488]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d033      	beq.n	8004426 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d12f      	bne.n	8004426 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043c6:	4b72      	ldr	r3, [pc, #456]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ce:	4a70      	ldr	r2, [pc, #448]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 80043d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043d6:	2380      	movs	r3, #128	; 0x80
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	e024      	b.n	8004426 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d107      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043e4:	4b6a      	ldr	r3, [pc, #424]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0c6      	b.n	8004582 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f4:	4b66      	ldr	r3, [pc, #408]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0be      	b.n	8004582 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004404:	f000 f8ce 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8004408:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4a61      	ldr	r2, [pc, #388]	; (8004594 <HAL_RCC_ClockConfig+0x268>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d909      	bls.n	8004426 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004412:	4b5f      	ldr	r3, [pc, #380]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800441a:	4a5d      	ldr	r2, [pc, #372]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 800441c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004420:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004422:	2380      	movs	r3, #128	; 0x80
 8004424:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004426:	4b5a      	ldr	r3, [pc, #360]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f023 0203 	bic.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4957      	ldr	r1, [pc, #348]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 8004434:	4313      	orrs	r3, r2
 8004436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fd faba 	bl	80019b0 <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443e:	e00a      	b.n	8004456 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004440:	f7fd fab6 	bl	80019b0 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	f241 3288 	movw	r2, #5000	; 0x1388
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e095      	b.n	8004582 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	4b4e      	ldr	r3, [pc, #312]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 020c 	and.w	r2, r3, #12
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	429a      	cmp	r2, r3
 8004466:	d1eb      	bne.n	8004440 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d023      	beq.n	80044bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004480:	4b43      	ldr	r3, [pc, #268]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4a42      	ldr	r2, [pc, #264]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 8004486:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800448a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004498:	4b3d      	ldr	r3, [pc, #244]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044a0:	4a3b      	ldr	r2, [pc, #236]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 80044a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a8:	4b39      	ldr	r3, [pc, #228]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4936      	ldr	r1, [pc, #216]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	608b      	str	r3, [r1, #8]
 80044ba:	e008      	b.n	80044ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2b80      	cmp	r3, #128	; 0x80
 80044c0:	d105      	bne.n	80044ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044c2:	4b33      	ldr	r3, [pc, #204]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	4a32      	ldr	r2, [pc, #200]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 80044c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ce:	4b2f      	ldr	r3, [pc, #188]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d21d      	bcs.n	8004518 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044dc:	4b2b      	ldr	r3, [pc, #172]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 020f 	bic.w	r2, r3, #15
 80044e4:	4929      	ldr	r1, [pc, #164]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044ec:	f7fd fa60 	bl	80019b0 <HAL_GetTick>
 80044f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f2:	e00a      	b.n	800450a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f4:	f7fd fa5c 	bl	80019b0 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e03b      	b.n	8004582 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450a:	4b20      	ldr	r3, [pc, #128]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d1ed      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004524:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4917      	ldr	r1, [pc, #92]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	490f      	ldr	r1, [pc, #60]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004556:	f000 f825 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 800455a:	4602      	mov	r2, r0
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <HAL_RCC_ClockConfig+0x264>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	490c      	ldr	r1, [pc, #48]	; (8004598 <HAL_RCC_ClockConfig+0x26c>)
 8004568:	5ccb      	ldrb	r3, [r1, r3]
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	fa22 f303 	lsr.w	r3, r2, r3
 8004572:	4a0a      	ldr	r2, [pc, #40]	; (800459c <HAL_RCC_ClockConfig+0x270>)
 8004574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <HAL_RCC_ClockConfig+0x274>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f7fd f9cc 	bl	8001918 <HAL_InitTick>
 8004580:	4603      	mov	r3, r0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40022000 	.word	0x40022000
 8004590:	40021000 	.word	0x40021000
 8004594:	04c4b400 	.word	0x04c4b400
 8004598:	08009128 	.word	0x08009128
 800459c:	20000000 	.word	0x20000000
 80045a0:	20000004 	.word	0x20000004

080045a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045aa:	4b2c      	ldr	r3, [pc, #176]	; (800465c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d102      	bne.n	80045bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045b6:	4b2a      	ldr	r3, [pc, #168]	; (8004660 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	e047      	b.n	800464c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045bc:	4b27      	ldr	r3, [pc, #156]	; (800465c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 030c 	and.w	r3, r3, #12
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d102      	bne.n	80045ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045c8:	4b26      	ldr	r3, [pc, #152]	; (8004664 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	e03e      	b.n	800464c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045ce:	4b23      	ldr	r3, [pc, #140]	; (800465c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d136      	bne.n	8004648 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045da:	4b20      	ldr	r3, [pc, #128]	; (800465c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045e4:	4b1d      	ldr	r3, [pc, #116]	; (800465c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	3301      	adds	r3, #1
 80045f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d10c      	bne.n	8004612 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045f8:	4a1a      	ldr	r2, [pc, #104]	; (8004664 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004600:	4a16      	ldr	r2, [pc, #88]	; (800465c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004602:	68d2      	ldr	r2, [r2, #12]
 8004604:	0a12      	lsrs	r2, r2, #8
 8004606:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	617b      	str	r3, [r7, #20]
      break;
 8004610:	e00c      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004612:	4a13      	ldr	r2, [pc, #76]	; (8004660 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	fbb2 f3f3 	udiv	r3, r2, r3
 800461a:	4a10      	ldr	r2, [pc, #64]	; (800465c <HAL_RCC_GetSysClockFreq+0xb8>)
 800461c:	68d2      	ldr	r2, [r2, #12]
 800461e:	0a12      	lsrs	r2, r2, #8
 8004620:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004624:	fb02 f303 	mul.w	r3, r2, r3
 8004628:	617b      	str	r3, [r7, #20]
      break;
 800462a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_GetSysClockFreq+0xb8>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	0e5b      	lsrs	r3, r3, #25
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	3301      	adds	r3, #1
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	e001      	b.n	800464c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800464c:	693b      	ldr	r3, [r7, #16]
}
 800464e:	4618      	mov	r0, r3
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40021000 	.word	0x40021000
 8004660:	00f42400 	.word	0x00f42400
 8004664:	007a1200 	.word	0x007a1200

08004668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800466c:	4b03      	ldr	r3, [pc, #12]	; (800467c <HAL_RCC_GetHCLKFreq+0x14>)
 800466e:	681b      	ldr	r3, [r3, #0]
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20000000 	.word	0x20000000

08004680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004684:	f7ff fff0 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4904      	ldr	r1, [pc, #16]	; (80046a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000
 80046a8:	08009138 	.word	0x08009138

080046ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046b0:	f7ff ffda 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	0adb      	lsrs	r3, r3, #11
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	4904      	ldr	r1, [pc, #16]	; (80046d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046c2:	5ccb      	ldrb	r3, [r1, r3]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40021000 	.word	0x40021000
 80046d4:	08009138 	.word	0x08009138

080046d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046de:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e8:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	3301      	adds	r3, #1
 80046f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d10c      	bne.n	8004716 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046fc:	4a17      	ldr	r2, [pc, #92]	; (800475c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004706:	68d2      	ldr	r2, [r2, #12]
 8004708:	0a12      	lsrs	r2, r2, #8
 800470a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	617b      	str	r3, [r7, #20]
    break;
 8004714:	e00c      	b.n	8004730 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004716:	4a12      	ldr	r2, [pc, #72]	; (8004760 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	4a0e      	ldr	r2, [pc, #56]	; (8004758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004720:	68d2      	ldr	r2, [r2, #12]
 8004722:	0a12      	lsrs	r2, r2, #8
 8004724:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004728:	fb02 f303 	mul.w	r3, r2, r3
 800472c:	617b      	str	r3, [r7, #20]
    break;
 800472e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	0e5b      	lsrs	r3, r3, #25
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	3301      	adds	r3, #1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800474a:	687b      	ldr	r3, [r7, #4]
}
 800474c:	4618      	mov	r0, r3
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	40021000 	.word	0x40021000
 800475c:	007a1200 	.word	0x007a1200
 8004760:	00f42400 	.word	0x00f42400

08004764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800476c:	2300      	movs	r3, #0
 800476e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004770:	2300      	movs	r3, #0
 8004772:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8098 	beq.w	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004782:	2300      	movs	r3, #0
 8004784:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004786:	4b43      	ldr	r3, [pc, #268]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10d      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004792:	4b40      	ldr	r3, [pc, #256]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004796:	4a3f      	ldr	r2, [pc, #252]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479c:	6593      	str	r3, [r2, #88]	; 0x58
 800479e:	4b3d      	ldr	r3, [pc, #244]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047aa:	2301      	movs	r3, #1
 80047ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047ae:	4b3a      	ldr	r3, [pc, #232]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a39      	ldr	r2, [pc, #228]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047ba:	f7fd f8f9 	bl	80019b0 <HAL_GetTick>
 80047be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047c0:	e009      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c2:	f7fd f8f5 	bl	80019b0 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d902      	bls.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	74fb      	strb	r3, [r7, #19]
        break;
 80047d4:	e005      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047d6:	4b30      	ldr	r3, [pc, #192]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0ef      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80047e2:	7cfb      	ldrb	r3, [r7, #19]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d159      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047e8:	4b2a      	ldr	r3, [pc, #168]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01e      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	429a      	cmp	r2, r3
 8004802:	d019      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004804:	4b23      	ldr	r3, [pc, #140]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004810:	4b20      	ldr	r3, [pc, #128]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004816:	4a1f      	ldr	r2, [pc, #124]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004820:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800482c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004830:	4a18      	ldr	r2, [pc, #96]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d016      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004842:	f7fd f8b5 	bl	80019b0 <HAL_GetTick>
 8004846:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004848:	e00b      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484a:	f7fd f8b1 	bl	80019b0 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	f241 3288 	movw	r2, #5000	; 0x1388
 8004858:	4293      	cmp	r3, r2
 800485a:	d902      	bls.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	74fb      	strb	r3, [r7, #19]
            break;
 8004860:	e006      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004862:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0ec      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004876:	4b07      	ldr	r3, [pc, #28]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	4903      	ldr	r1, [pc, #12]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800488c:	e008      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800488e:	7cfb      	ldrb	r3, [r7, #19]
 8004890:	74bb      	strb	r3, [r7, #18]
 8004892:	e005      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004894:	40021000 	.word	0x40021000
 8004898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048a0:	7c7b      	ldrb	r3, [r7, #17]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d105      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a6:	4ba6      	ldr	r3, [pc, #664]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	4aa5      	ldr	r2, [pc, #660]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048be:	4ba0      	ldr	r3, [pc, #640]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	f023 0203 	bic.w	r2, r3, #3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	499c      	ldr	r1, [pc, #624]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048e0:	4b97      	ldr	r3, [pc, #604]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e6:	f023 020c 	bic.w	r2, r3, #12
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	4994      	ldr	r1, [pc, #592]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004902:	4b8f      	ldr	r3, [pc, #572]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004908:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	498b      	ldr	r1, [pc, #556]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004924:	4b86      	ldr	r3, [pc, #536]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	4983      	ldr	r1, [pc, #524]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004946:	4b7e      	ldr	r3, [pc, #504]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	497a      	ldr	r1, [pc, #488]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004968:	4b75      	ldr	r3, [pc, #468]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	4972      	ldr	r1, [pc, #456]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800498a:	4b6d      	ldr	r3, [pc, #436]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004990:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	4969      	ldr	r1, [pc, #420]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ac:	4b64      	ldr	r3, [pc, #400]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4961      	ldr	r1, [pc, #388]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ce:	4b5c      	ldr	r3, [pc, #368]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	4958      	ldr	r1, [pc, #352]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d015      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049f0:	4b53      	ldr	r3, [pc, #332]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	4950      	ldr	r1, [pc, #320]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a0e:	d105      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a10:	4b4b      	ldr	r3, [pc, #300]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a4a      	ldr	r2, [pc, #296]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d015      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a28:	4b45      	ldr	r3, [pc, #276]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	4942      	ldr	r1, [pc, #264]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a46:	d105      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a48:	4b3d      	ldr	r3, [pc, #244]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a3c      	ldr	r2, [pc, #240]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d015      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a60:	4b37      	ldr	r3, [pc, #220]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	4934      	ldr	r1, [pc, #208]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a7e:	d105      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a80:	4b2f      	ldr	r3, [pc, #188]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a2e      	ldr	r2, [pc, #184]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d015      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a98:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa6:	4926      	ldr	r1, [pc, #152]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ab6:	d105      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab8:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4a20      	ldr	r2, [pc, #128]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ac2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d015      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ad0:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	4918      	ldr	r1, [pc, #96]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aee:	d105      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af0:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4a12      	ldr	r2, [pc, #72]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004afa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d015      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	490a      	ldr	r1, [pc, #40]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b26:	d105      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b34:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40021000 	.word	0x40021000

08004b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e042      	b.n	8004bdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7fc fd4d 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2224      	movs	r2, #36	; 0x24
 8004b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f996 	bl	8004eb8 <UART_SetConfig>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e022      	b.n	8004bdc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fc56 	bl	8005450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fcdd 	bl	8005594 <UART_CheckIdleState>
 8004bda:	4603      	mov	r3, r0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	; 0x28
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	f040 8083 	bne.w	8004d06 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_UART_Transmit+0x28>
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e07b      	b.n	8004d08 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_UART_Transmit+0x3a>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e074      	b.n	8004d08 <HAL_UART_Transmit+0x124>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2221      	movs	r2, #33	; 0x21
 8004c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c36:	f7fc febb 	bl	80019b0 <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	88fa      	ldrh	r2, [r7, #6]
 8004c48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c54:	d108      	bne.n	8004c68 <HAL_UART_Transmit+0x84>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d104      	bne.n	8004c68 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	e003      	b.n	8004c70 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004c78:	e02c      	b.n	8004cd4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	2180      	movs	r1, #128	; 0x80
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fcd0 	bl	800562a <UART_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e039      	b.n	8004d08 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10b      	bne.n	8004cb2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	3302      	adds	r3, #2
 8004cae:	61bb      	str	r3, [r7, #24]
 8004cb0:	e007      	b.n	8004cc2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	781a      	ldrb	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1cc      	bne.n	8004c7a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2140      	movs	r1, #64	; 0x40
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fc9d 	bl	800562a <UART_WaitOnFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e006      	b.n	8004d08 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e000      	b.n	8004d08 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004d06:	2302      	movs	r3, #2
  }
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	; 0x28
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	f040 80c0 	bne.w	8004eac <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Receive+0x28>
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0b8      	b.n	8004eae <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_UART_Receive+0x3a>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e0b1      	b.n	8004eae <HAL_UART_Receive+0x19e>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2222      	movs	r2, #34	; 0x22
 8004d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d68:	f7fc fe22 	bl	80019b0 <HAL_GetTick>
 8004d6c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	88fa      	ldrh	r2, [r7, #6]
 8004d72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	88fa      	ldrh	r2, [r7, #6]
 8004d7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d86:	d10e      	bne.n	8004da6 <HAL_UART_Receive+0x96>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d105      	bne.n	8004d9c <HAL_UART_Receive+0x8c>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d9a:	e02d      	b.n	8004df8 <HAL_UART_Receive+0xe8>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	22ff      	movs	r2, #255	; 0xff
 8004da0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004da4:	e028      	b.n	8004df8 <HAL_UART_Receive+0xe8>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10d      	bne.n	8004dca <HAL_UART_Receive+0xba>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d104      	bne.n	8004dc0 <HAL_UART_Receive+0xb0>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	22ff      	movs	r2, #255	; 0xff
 8004dba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004dbe:	e01b      	b.n	8004df8 <HAL_UART_Receive+0xe8>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	227f      	movs	r2, #127	; 0x7f
 8004dc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004dc8:	e016      	b.n	8004df8 <HAL_UART_Receive+0xe8>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dd2:	d10d      	bne.n	8004df0 <HAL_UART_Receive+0xe0>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_UART_Receive+0xd6>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	227f      	movs	r2, #127	; 0x7f
 8004de0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004de4:	e008      	b.n	8004df8 <HAL_UART_Receive+0xe8>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	223f      	movs	r2, #63	; 0x3f
 8004dea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004dee:	e003      	b.n	8004df8 <HAL_UART_Receive+0xe8>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004dfe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e08:	d108      	bne.n	8004e1c <HAL_UART_Receive+0x10c>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d104      	bne.n	8004e1c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	e003      	b.n	8004e24 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e2c:	e032      	b.n	8004e94 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2200      	movs	r2, #0
 8004e36:	2120      	movs	r1, #32
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fbf6 	bl	800562a <UART_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e032      	b.n	8004eae <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10c      	bne.n	8004e68 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	8a7b      	ldrh	r3, [r7, #18]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	3302      	adds	r3, #2
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	e00c      	b.n	8004e82 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	8a7b      	ldrh	r3, [r7, #18]
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	4013      	ands	r3, r2
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1c6      	bne.n	8004e2e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e000      	b.n	8004eae <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8004eac:	2302      	movs	r3, #2
  }
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ebc:	b08c      	sub	sp, #48	; 0x30
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4bab      	ldr	r3, [pc, #684]	; (8005194 <UART_SetConfig+0x2dc>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4aa0      	ldr	r2, [pc, #640]	; (8005198 <UART_SetConfig+0x2e0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f20:	4313      	orrs	r3, r2
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	f023 010f 	bic.w	r1, r3, #15
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a91      	ldr	r2, [pc, #580]	; (800519c <UART_SetConfig+0x2e4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d125      	bne.n	8004fa8 <UART_SetConfig+0xf0>
 8004f5c:	4b90      	ldr	r3, [pc, #576]	; (80051a0 <UART_SetConfig+0x2e8>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d81a      	bhi.n	8004fa0 <UART_SetConfig+0xe8>
 8004f6a:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <UART_SetConfig+0xb8>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	08004f89 	.word	0x08004f89
 8004f7c:	08004f99 	.word	0x08004f99
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f86:	e0d6      	b.n	8005136 <UART_SetConfig+0x27e>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f8e:	e0d2      	b.n	8005136 <UART_SetConfig+0x27e>
 8004f90:	2304      	movs	r3, #4
 8004f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f96:	e0ce      	b.n	8005136 <UART_SetConfig+0x27e>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f9e:	e0ca      	b.n	8005136 <UART_SetConfig+0x27e>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa6:	e0c6      	b.n	8005136 <UART_SetConfig+0x27e>
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a7d      	ldr	r2, [pc, #500]	; (80051a4 <UART_SetConfig+0x2ec>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d138      	bne.n	8005024 <UART_SetConfig+0x16c>
 8004fb2:	4b7b      	ldr	r3, [pc, #492]	; (80051a0 <UART_SetConfig+0x2e8>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f003 030c 	and.w	r3, r3, #12
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	d82d      	bhi.n	800501c <UART_SetConfig+0x164>
 8004fc0:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <UART_SetConfig+0x110>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004ffd 	.word	0x08004ffd
 8004fcc:	0800501d 	.word	0x0800501d
 8004fd0:	0800501d 	.word	0x0800501d
 8004fd4:	0800501d 	.word	0x0800501d
 8004fd8:	0800500d 	.word	0x0800500d
 8004fdc:	0800501d 	.word	0x0800501d
 8004fe0:	0800501d 	.word	0x0800501d
 8004fe4:	0800501d 	.word	0x0800501d
 8004fe8:	08005005 	.word	0x08005005
 8004fec:	0800501d 	.word	0x0800501d
 8004ff0:	0800501d 	.word	0x0800501d
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	08005015 	.word	0x08005015
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005002:	e098      	b.n	8005136 <UART_SetConfig+0x27e>
 8005004:	2302      	movs	r3, #2
 8005006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800500a:	e094      	b.n	8005136 <UART_SetConfig+0x27e>
 800500c:	2304      	movs	r3, #4
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005012:	e090      	b.n	8005136 <UART_SetConfig+0x27e>
 8005014:	2308      	movs	r3, #8
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800501a:	e08c      	b.n	8005136 <UART_SetConfig+0x27e>
 800501c:	2310      	movs	r3, #16
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005022:	e088      	b.n	8005136 <UART_SetConfig+0x27e>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a5f      	ldr	r2, [pc, #380]	; (80051a8 <UART_SetConfig+0x2f0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d125      	bne.n	800507a <UART_SetConfig+0x1c2>
 800502e:	4b5c      	ldr	r3, [pc, #368]	; (80051a0 <UART_SetConfig+0x2e8>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005034:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005038:	2b30      	cmp	r3, #48	; 0x30
 800503a:	d016      	beq.n	800506a <UART_SetConfig+0x1b2>
 800503c:	2b30      	cmp	r3, #48	; 0x30
 800503e:	d818      	bhi.n	8005072 <UART_SetConfig+0x1ba>
 8005040:	2b20      	cmp	r3, #32
 8005042:	d00a      	beq.n	800505a <UART_SetConfig+0x1a2>
 8005044:	2b20      	cmp	r3, #32
 8005046:	d814      	bhi.n	8005072 <UART_SetConfig+0x1ba>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <UART_SetConfig+0x19a>
 800504c:	2b10      	cmp	r3, #16
 800504e:	d008      	beq.n	8005062 <UART_SetConfig+0x1aa>
 8005050:	e00f      	b.n	8005072 <UART_SetConfig+0x1ba>
 8005052:	2300      	movs	r3, #0
 8005054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005058:	e06d      	b.n	8005136 <UART_SetConfig+0x27e>
 800505a:	2302      	movs	r3, #2
 800505c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005060:	e069      	b.n	8005136 <UART_SetConfig+0x27e>
 8005062:	2304      	movs	r3, #4
 8005064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005068:	e065      	b.n	8005136 <UART_SetConfig+0x27e>
 800506a:	2308      	movs	r3, #8
 800506c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005070:	e061      	b.n	8005136 <UART_SetConfig+0x27e>
 8005072:	2310      	movs	r3, #16
 8005074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005078:	e05d      	b.n	8005136 <UART_SetConfig+0x27e>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a4b      	ldr	r2, [pc, #300]	; (80051ac <UART_SetConfig+0x2f4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d125      	bne.n	80050d0 <UART_SetConfig+0x218>
 8005084:	4b46      	ldr	r3, [pc, #280]	; (80051a0 <UART_SetConfig+0x2e8>)
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800508e:	2bc0      	cmp	r3, #192	; 0xc0
 8005090:	d016      	beq.n	80050c0 <UART_SetConfig+0x208>
 8005092:	2bc0      	cmp	r3, #192	; 0xc0
 8005094:	d818      	bhi.n	80050c8 <UART_SetConfig+0x210>
 8005096:	2b80      	cmp	r3, #128	; 0x80
 8005098:	d00a      	beq.n	80050b0 <UART_SetConfig+0x1f8>
 800509a:	2b80      	cmp	r3, #128	; 0x80
 800509c:	d814      	bhi.n	80050c8 <UART_SetConfig+0x210>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <UART_SetConfig+0x1f0>
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d008      	beq.n	80050b8 <UART_SetConfig+0x200>
 80050a6:	e00f      	b.n	80050c8 <UART_SetConfig+0x210>
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ae:	e042      	b.n	8005136 <UART_SetConfig+0x27e>
 80050b0:	2302      	movs	r3, #2
 80050b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050b6:	e03e      	b.n	8005136 <UART_SetConfig+0x27e>
 80050b8:	2304      	movs	r3, #4
 80050ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050be:	e03a      	b.n	8005136 <UART_SetConfig+0x27e>
 80050c0:	2308      	movs	r3, #8
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c6:	e036      	b.n	8005136 <UART_SetConfig+0x27e>
 80050c8:	2310      	movs	r3, #16
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ce:	e032      	b.n	8005136 <UART_SetConfig+0x27e>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a30      	ldr	r2, [pc, #192]	; (8005198 <UART_SetConfig+0x2e0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d12a      	bne.n	8005130 <UART_SetConfig+0x278>
 80050da:	4b31      	ldr	r3, [pc, #196]	; (80051a0 <UART_SetConfig+0x2e8>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050e8:	d01a      	beq.n	8005120 <UART_SetConfig+0x268>
 80050ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050ee:	d81b      	bhi.n	8005128 <UART_SetConfig+0x270>
 80050f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f4:	d00c      	beq.n	8005110 <UART_SetConfig+0x258>
 80050f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050fa:	d815      	bhi.n	8005128 <UART_SetConfig+0x270>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <UART_SetConfig+0x250>
 8005100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005104:	d008      	beq.n	8005118 <UART_SetConfig+0x260>
 8005106:	e00f      	b.n	8005128 <UART_SetConfig+0x270>
 8005108:	2300      	movs	r3, #0
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800510e:	e012      	b.n	8005136 <UART_SetConfig+0x27e>
 8005110:	2302      	movs	r3, #2
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005116:	e00e      	b.n	8005136 <UART_SetConfig+0x27e>
 8005118:	2304      	movs	r3, #4
 800511a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800511e:	e00a      	b.n	8005136 <UART_SetConfig+0x27e>
 8005120:	2308      	movs	r3, #8
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005126:	e006      	b.n	8005136 <UART_SetConfig+0x27e>
 8005128:	2310      	movs	r3, #16
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512e:	e002      	b.n	8005136 <UART_SetConfig+0x27e>
 8005130:	2310      	movs	r3, #16
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a17      	ldr	r2, [pc, #92]	; (8005198 <UART_SetConfig+0x2e0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	f040 80a8 	bne.w	8005292 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005142:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005146:	2b08      	cmp	r3, #8
 8005148:	d834      	bhi.n	80051b4 <UART_SetConfig+0x2fc>
 800514a:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <UART_SetConfig+0x298>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005175 	.word	0x08005175
 8005154:	080051b5 	.word	0x080051b5
 8005158:	0800517d 	.word	0x0800517d
 800515c:	080051b5 	.word	0x080051b5
 8005160:	08005183 	.word	0x08005183
 8005164:	080051b5 	.word	0x080051b5
 8005168:	080051b5 	.word	0x080051b5
 800516c:	080051b5 	.word	0x080051b5
 8005170:	0800518b 	.word	0x0800518b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005174:	f7ff fa84 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 8005178:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800517a:	e021      	b.n	80051c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800517c:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <UART_SetConfig+0x2f8>)
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005180:	e01e      	b.n	80051c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005182:	f7ff fa0f 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8005186:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005188:	e01a      	b.n	80051c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800518a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005190:	e016      	b.n	80051c0 <UART_SetConfig+0x308>
 8005192:	bf00      	nop
 8005194:	cfff69f3 	.word	0xcfff69f3
 8005198:	40008000 	.word	0x40008000
 800519c:	40013800 	.word	0x40013800
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40004400 	.word	0x40004400
 80051a8:	40004800 	.word	0x40004800
 80051ac:	40004c00 	.word	0x40004c00
 80051b0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 812a 	beq.w	800541c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	4a9e      	ldr	r2, [pc, #632]	; (8005448 <UART_SetConfig+0x590>)
 80051ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051d2:	461a      	mov	r2, r3
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80051da:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d305      	bcc.n	80051f8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d903      	bls.n	8005200 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051fe:	e10d      	b.n	800541c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	2200      	movs	r2, #0
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	60fa      	str	r2, [r7, #12]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	4a8e      	ldr	r2, [pc, #568]	; (8005448 <UART_SetConfig+0x590>)
 800520e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005212:	b29b      	uxth	r3, r3
 8005214:	2200      	movs	r2, #0
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800521e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005222:	f7fa fff9 	bl	8000218 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4610      	mov	r0, r2
 800522c:	4619      	mov	r1, r3
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	020b      	lsls	r3, r1, #8
 8005238:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800523c:	0202      	lsls	r2, r0, #8
 800523e:	6979      	ldr	r1, [r7, #20]
 8005240:	6849      	ldr	r1, [r1, #4]
 8005242:	0849      	lsrs	r1, r1, #1
 8005244:	2000      	movs	r0, #0
 8005246:	460c      	mov	r4, r1
 8005248:	4605      	mov	r5, r0
 800524a:	eb12 0804 	adds.w	r8, r2, r4
 800524e:	eb43 0905 	adc.w	r9, r3, r5
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	469a      	mov	sl, r3
 800525a:	4693      	mov	fp, r2
 800525c:	4652      	mov	r2, sl
 800525e:	465b      	mov	r3, fp
 8005260:	4640      	mov	r0, r8
 8005262:	4649      	mov	r1, r9
 8005264:	f7fa ffd8 	bl	8000218 <__aeabi_uldivmod>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4613      	mov	r3, r2
 800526e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005276:	d308      	bcc.n	800528a <UART_SetConfig+0x3d2>
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800527e:	d204      	bcs.n	800528a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6a3a      	ldr	r2, [r7, #32]
 8005286:	60da      	str	r2, [r3, #12]
 8005288:	e0c8      	b.n	800541c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005290:	e0c4      	b.n	800541c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529a:	d167      	bne.n	800536c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800529c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d828      	bhi.n	80052f6 <UART_SetConfig+0x43e>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0x3f4>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052f7 	.word	0x080052f7
 80052bc:	080052e7 	.word	0x080052e7
 80052c0:	080052f7 	.word	0x080052f7
 80052c4:	080052f7 	.word	0x080052f7
 80052c8:	080052f7 	.word	0x080052f7
 80052cc:	080052ef 	.word	0x080052ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d0:	f7ff f9d6 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 80052d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052d6:	e014      	b.n	8005302 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d8:	f7ff f9e8 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 80052dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052de:	e010      	b.n	8005302 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e0:	4b5a      	ldr	r3, [pc, #360]	; (800544c <UART_SetConfig+0x594>)
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052e4:	e00d      	b.n	8005302 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e6:	f7ff f95d 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 80052ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052ec:	e009      	b.n	8005302 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052f4:	e005      	b.n	8005302 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005300:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8089 	beq.w	800541c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	4a4e      	ldr	r2, [pc, #312]	; (8005448 <UART_SetConfig+0x590>)
 8005310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005314:	461a      	mov	r2, r3
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	fbb3 f3f2 	udiv	r3, r3, r2
 800531c:	005a      	lsls	r2, r3, #1
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	441a      	add	r2, r3
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	2b0f      	cmp	r3, #15
 8005334:	d916      	bls.n	8005364 <UART_SetConfig+0x4ac>
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533c:	d212      	bcs.n	8005364 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f023 030f 	bic.w	r3, r3, #15
 8005346:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	b29b      	uxth	r3, r3
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	b29a      	uxth	r2, r3
 8005354:	8bfb      	ldrh	r3, [r7, #30]
 8005356:	4313      	orrs	r3, r2
 8005358:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	8bfa      	ldrh	r2, [r7, #30]
 8005360:	60da      	str	r2, [r3, #12]
 8005362:	e05b      	b.n	800541c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800536a:	e057      	b.n	800541c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800536c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005370:	2b08      	cmp	r3, #8
 8005372:	d828      	bhi.n	80053c6 <UART_SetConfig+0x50e>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <UART_SetConfig+0x4c4>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	080053a1 	.word	0x080053a1
 8005380:	080053a9 	.word	0x080053a9
 8005384:	080053b1 	.word	0x080053b1
 8005388:	080053c7 	.word	0x080053c7
 800538c:	080053b7 	.word	0x080053b7
 8005390:	080053c7 	.word	0x080053c7
 8005394:	080053c7 	.word	0x080053c7
 8005398:	080053c7 	.word	0x080053c7
 800539c:	080053bf 	.word	0x080053bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a0:	f7ff f96e 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 80053a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053a6:	e014      	b.n	80053d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a8:	f7ff f980 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 80053ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053ae:	e010      	b.n	80053d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b0:	4b26      	ldr	r3, [pc, #152]	; (800544c <UART_SetConfig+0x594>)
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053b4:	e00d      	b.n	80053d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b6:	f7ff f8f5 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 80053ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053bc:	e009      	b.n	80053d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053c4:	e005      	b.n	80053d2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80053d0:	bf00      	nop
    }

    if (pclk != 0U)
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d021      	beq.n	800541c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	4a1a      	ldr	r2, [pc, #104]	; (8005448 <UART_SetConfig+0x590>)
 80053de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053e2:	461a      	mov	r2, r3
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	085b      	lsrs	r3, r3, #1
 80053f0:	441a      	add	r2, r3
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	d909      	bls.n	8005416 <UART_SetConfig+0x55e>
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005408:	d205      	bcs.n	8005416 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	b29a      	uxth	r2, r3
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60da      	str	r2, [r3, #12]
 8005414:	e002      	b.n	800541c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2201      	movs	r2, #1
 8005420:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2201      	movs	r2, #1
 8005428:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2200      	movs	r2, #0
 8005430:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2200      	movs	r2, #0
 8005436:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005438:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800543c:	4618      	mov	r0, r3
 800543e:	3730      	adds	r7, #48	; 0x30
 8005440:	46bd      	mov	sp, r7
 8005442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005446:	bf00      	nop
 8005448:	08009140 	.word	0x08009140
 800544c:	00f42400 	.word	0x00f42400

08005450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01a      	beq.n	8005566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800554e:	d10a      	bne.n	8005566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
  }
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af02      	add	r7, sp, #8
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055a4:	f7fc fa04 	bl	80019b0 <HAL_GetTick>
 80055a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d10e      	bne.n	80055d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f82f 	bl	800562a <UART_WaitOnFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e025      	b.n	8005622 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d10e      	bne.n	8005602 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f819 	bl	800562a <UART_WaitOnFlagUntilTimeout>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e00f      	b.n	8005622 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b09c      	sub	sp, #112	; 0x70
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	603b      	str	r3, [r7, #0]
 8005636:	4613      	mov	r3, r2
 8005638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563a:	e0a9      	b.n	8005790 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	f000 80a5 	beq.w	8005790 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005646:	f7fc f9b3 	bl	80019b0 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005652:	429a      	cmp	r2, r3
 8005654:	d302      	bcc.n	800565c <UART_WaitOnFlagUntilTimeout+0x32>
 8005656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005658:	2b00      	cmp	r3, #0
 800565a:	d140      	bne.n	80056de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800566a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005670:	667b      	str	r3, [r7, #100]	; 0x64
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800567a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800567c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005680:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e6      	bne.n	800565c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3308      	adds	r3, #8
 8005694:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	f023 0301 	bic.w	r3, r3, #1
 80056a4:	663b      	str	r3, [r7, #96]	; 0x60
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3308      	adds	r3, #8
 80056ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80056b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e5      	bne.n	800568e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e069      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d051      	beq.n	8005790 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fa:	d149      	bne.n	8005790 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005704:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800571a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005724:	637b      	str	r3, [r7, #52]	; 0x34
 8005726:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800572a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e6      	bne.n	8005706 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3308      	adds	r3, #8
 800573e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	613b      	str	r3, [r7, #16]
   return(result);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f023 0301 	bic.w	r3, r3, #1
 800574e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005758:	623a      	str	r2, [r7, #32]
 800575a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	69f9      	ldr	r1, [r7, #28]
 800575e:	6a3a      	ldr	r2, [r7, #32]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	61bb      	str	r3, [r7, #24]
   return(result);
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e5      	bne.n	8005738 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2220      	movs	r2, #32
 8005770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e010      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69da      	ldr	r2, [r3, #28]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	4013      	ands	r3, r2
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	429a      	cmp	r2, r3
 800579e:	bf0c      	ite	eq
 80057a0:	2301      	moveq	r3, #1
 80057a2:	2300      	movne	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	f43f af46 	beq.w	800563c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3770      	adds	r7, #112	; 0x70
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_UARTEx_EnableFifoMode+0x16>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e02b      	b.n	8005828 <HAL_UARTEx_EnableFifoMode+0x6e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2224      	movs	r2, #36	; 0x24
 80057dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0201 	bic.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005806:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f889 	bl	8005928 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005844:	2302      	movs	r3, #2
 8005846:	e02d      	b.n	80058a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2224      	movs	r2, #36	; 0x24
 8005854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0201 	bic.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f84f 	bl	8005928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2220      	movs	r2, #32
 8005896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e02d      	b.n	8005920 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2224      	movs	r2, #36	; 0x24
 80058d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0201 	bic.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f811 	bl	8005928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005934:	2b00      	cmp	r3, #0
 8005936:	d108      	bne.n	800594a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005948:	e031      	b.n	80059ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800594a:	2308      	movs	r3, #8
 800594c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800594e:	2308      	movs	r3, #8
 8005950:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	0e5b      	lsrs	r3, r3, #25
 800595a:	b2db      	uxtb	r3, r3
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	0f5b      	lsrs	r3, r3, #29
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005972:	7bbb      	ldrb	r3, [r7, #14]
 8005974:	7b3a      	ldrb	r2, [r7, #12]
 8005976:	4911      	ldr	r1, [pc, #68]	; (80059bc <UARTEx_SetNbDataToProcess+0x94>)
 8005978:	5c8a      	ldrb	r2, [r1, r2]
 800597a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800597e:	7b3a      	ldrb	r2, [r7, #12]
 8005980:	490f      	ldr	r1, [pc, #60]	; (80059c0 <UARTEx_SetNbDataToProcess+0x98>)
 8005982:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005984:	fb93 f3f2 	sdiv	r3, r3, r2
 8005988:	b29a      	uxth	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	7b7a      	ldrb	r2, [r7, #13]
 8005994:	4909      	ldr	r1, [pc, #36]	; (80059bc <UARTEx_SetNbDataToProcess+0x94>)
 8005996:	5c8a      	ldrb	r2, [r1, r2]
 8005998:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800599c:	7b7a      	ldrb	r2, [r7, #13]
 800599e:	4908      	ldr	r1, [pc, #32]	; (80059c0 <UARTEx_SetNbDataToProcess+0x98>)
 80059a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	08009158 	.word	0x08009158
 80059c0:	08009160 	.word	0x08009160

080059c4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b08b      	sub	sp, #44	; 0x2c
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	fa93 f3a3 	rbit	r3, r3
 80059de:	613b      	str	r3, [r7, #16]
  return result;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80059ea:	2320      	movs	r3, #32
 80059ec:	e003      	b.n	80059f6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	fab3 f383 	clz	r3, r3
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	2103      	movs	r1, #3
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	401a      	ands	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	fa93 f3a3 	rbit	r3, r3
 8005a0c:	61fb      	str	r3, [r7, #28]
  return result;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005a18:	2320      	movs	r3, #32
 8005a1a:	e003      	b.n	8005a24 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	fab3 f383 	clz	r3, r3
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	601a      	str	r2, [r3, #0]
}
 8005a32:	bf00      	nop
 8005a34:	372c      	adds	r7, #44	; 0x2c
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b085      	sub	sp, #20
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	43db      	mvns	r3, r3
 8005a52:	401a      	ands	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	fb01 f303 	mul.w	r3, r1, r3
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	605a      	str	r2, [r3, #4]
}
 8005a62:	bf00      	nop
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b08b      	sub	sp, #44	; 0x2c
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	fa93 f3a3 	rbit	r3, r3
 8005a88:	613b      	str	r3, [r7, #16]
  return result;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005a94:	2320      	movs	r3, #32
 8005a96:	e003      	b.n	8005aa0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	fab3 f383 	clz	r3, r3
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	2103      	movs	r1, #3
 8005aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	401a      	ands	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	fa93 f3a3 	rbit	r3, r3
 8005ab6:	61fb      	str	r3, [r7, #28]
  return result;
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005ac2:	2320      	movs	r3, #32
 8005ac4:	e003      	b.n	8005ace <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	fab3 f383 	clz	r3, r3
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005adc:	bf00      	nop
 8005ade:	372c      	adds	r7, #44	; 0x2c
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b08b      	sub	sp, #44	; 0x2c
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	fa93 f3a3 	rbit	r3, r3
 8005b02:	613b      	str	r3, [r7, #16]
  return result;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005b0e:	2320      	movs	r3, #32
 8005b10:	e003      	b.n	8005b1a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	fab3 f383 	clz	r3, r3
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	2103      	movs	r1, #3
 8005b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b22:	43db      	mvns	r3, r3
 8005b24:	401a      	ands	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	fa93 f3a3 	rbit	r3, r3
 8005b30:	61fb      	str	r3, [r7, #28]
  return result;
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005b3c:	2320      	movs	r3, #32
 8005b3e:	e003      	b.n	8005b48 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	fab3 f383 	clz	r3, r3
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b50:	431a      	orrs	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	60da      	str	r2, [r3, #12]
}
 8005b56:	bf00      	nop
 8005b58:	372c      	adds	r7, #44	; 0x2c
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b08b      	sub	sp, #44	; 0x2c
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a1a      	ldr	r2, [r3, #32]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	fa93 f3a3 	rbit	r3, r3
 8005b7c:	613b      	str	r3, [r7, #16]
  return result;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005b88:	2320      	movs	r3, #32
 8005b8a:	e003      	b.n	8005b94 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	fab3 f383 	clz	r3, r3
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	210f      	movs	r1, #15
 8005b98:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	401a      	ands	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	fa93 f3a3 	rbit	r3, r3
 8005baa:	61fb      	str	r3, [r7, #28]
  return result;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005bb6:	2320      	movs	r3, #32
 8005bb8:	e003      	b.n	8005bc2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	fab3 f383 	clz	r3, r3
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005bd0:	bf00      	nop
 8005bd2:	372c      	adds	r7, #44	; 0x2c
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b08b      	sub	sp, #44	; 0x2c
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	0a1b      	lsrs	r3, r3, #8
 8005bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	fa93 f3a3 	rbit	r3, r3
 8005bf8:	613b      	str	r3, [r7, #16]
  return result;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005c04:	2320      	movs	r3, #32
 8005c06:	e003      	b.n	8005c10 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	fab3 f383 	clz	r3, r3
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	210f      	movs	r1, #15
 8005c14:	fa01 f303 	lsl.w	r3, r1, r3
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	401a      	ands	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	fa93 f3a3 	rbit	r3, r3
 8005c28:	61fb      	str	r3, [r7, #28]
  return result;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005c34:	2320      	movs	r3, #32
 8005c36:	e003      	b.n	8005c40 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	fab3 f383 	clz	r3, r3
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	fa01 f303 	lsl.w	r3, r1, r3
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005c4e:	bf00      	nop
 8005c50:	372c      	adds	r7, #44	; 0x2c
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b088      	sub	sp, #32
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	fa93 f3a3 	rbit	r3, r3
 8005c70:	60fb      	str	r3, [r7, #12]
  return result;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <LL_GPIO_Init+0x26>
    return 32U;
 8005c7c:	2320      	movs	r3, #32
 8005c7e:	e003      	b.n	8005c88 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	fab3 f383 	clz	r3, r3
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005c8a:	e048      	b.n	8005d1e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	2101      	movs	r1, #1
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	fa01 f303 	lsl.w	r3, r1, r3
 8005c98:	4013      	ands	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d03a      	beq.n	8005d18 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d003      	beq.n	8005cb2 <LL_GPIO_Init+0x58>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d10e      	bne.n	8005cd0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	69b9      	ldr	r1, [r7, #24]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7ff fed7 	bl	8005a6e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	6819      	ldr	r1, [r3, #0]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff feb7 	bl	8005a3e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	69b9      	ldr	r1, [r7, #24]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff ff05 	bl	8005ae8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d111      	bne.n	8005d0a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2bff      	cmp	r3, #255	; 0xff
 8005cea:	d807      	bhi.n	8005cfc <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	69b9      	ldr	r1, [r7, #24]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff ff34 	bl	8005b62 <LL_GPIO_SetAFPin_0_7>
 8005cfa:	e006      	b.n	8005d0a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	461a      	mov	r2, r3
 8005d02:	69b9      	ldr	r1, [r7, #24]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff ff69 	bl	8005bdc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	69b9      	ldr	r1, [r7, #24]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff fe56 	bl	80059c4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1af      	bne.n	8005c8c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3720      	adds	r7, #32
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <LL_TIM_SetPrescaler>:
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <LL_TIM_SetAutoReload>:
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <LL_TIM_SetRepetitionCounter>:
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <LL_TIM_OC_SetCompareCH1>:
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <LL_TIM_OC_SetCompareCH2>:
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <LL_TIM_OC_SetCompareCH3>:
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <LL_TIM_OC_SetCompareCH4>:
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <LL_TIM_OC_SetCompareCH5>:
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <LL_TIM_OC_SetCompareCH6>:
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f043 0201 	orr.w	r2, r3, #1
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	615a      	str	r2, [r3, #20]
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a39      	ldr	r2, [pc, #228]	; (8005f50 <LL_TIM_Init+0xf8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00f      	beq.n	8005e90 <LL_TIM_Init+0x38>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e76:	d00b      	beq.n	8005e90 <LL_TIM_Init+0x38>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a36      	ldr	r2, [pc, #216]	; (8005f54 <LL_TIM_Init+0xfc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <LL_TIM_Init+0x38>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a35      	ldr	r2, [pc, #212]	; (8005f58 <LL_TIM_Init+0x100>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <LL_TIM_Init+0x38>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a34      	ldr	r2, [pc, #208]	; (8005f5c <LL_TIM_Init+0x104>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d106      	bne.n	8005e9e <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a2b      	ldr	r2, [pc, #172]	; (8005f50 <LL_TIM_Init+0xf8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d01b      	beq.n	8005ede <LL_TIM_Init+0x86>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eac:	d017      	beq.n	8005ede <LL_TIM_Init+0x86>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a28      	ldr	r2, [pc, #160]	; (8005f54 <LL_TIM_Init+0xfc>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d013      	beq.n	8005ede <LL_TIM_Init+0x86>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a27      	ldr	r2, [pc, #156]	; (8005f58 <LL_TIM_Init+0x100>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00f      	beq.n	8005ede <LL_TIM_Init+0x86>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a26      	ldr	r2, [pc, #152]	; (8005f5c <LL_TIM_Init+0x104>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00b      	beq.n	8005ede <LL_TIM_Init+0x86>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a25      	ldr	r2, [pc, #148]	; (8005f60 <LL_TIM_Init+0x108>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d007      	beq.n	8005ede <LL_TIM_Init+0x86>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a24      	ldr	r2, [pc, #144]	; (8005f64 <LL_TIM_Init+0x10c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d003      	beq.n	8005ede <LL_TIM_Init+0x86>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a23      	ldr	r2, [pc, #140]	; (8005f68 <LL_TIM_Init+0x110>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d106      	bne.n	8005eec <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff ff2a 	bl	8005d52 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7ff ff16 	bl	8005d36 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a10      	ldr	r2, [pc, #64]	; (8005f50 <LL_TIM_Init+0xf8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00f      	beq.n	8005f32 <LL_TIM_Init+0xda>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a11      	ldr	r2, [pc, #68]	; (8005f5c <LL_TIM_Init+0x104>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00b      	beq.n	8005f32 <LL_TIM_Init+0xda>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a10      	ldr	r2, [pc, #64]	; (8005f60 <LL_TIM_Init+0x108>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <LL_TIM_Init+0xda>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a0f      	ldr	r2, [pc, #60]	; (8005f64 <LL_TIM_Init+0x10c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <LL_TIM_Init+0xda>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a0e      	ldr	r2, [pc, #56]	; (8005f68 <LL_TIM_Init+0x110>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d105      	bne.n	8005f3e <LL_TIM_Init+0xe6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff ff18 	bl	8005d6e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff ff79 	bl	8005e36 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40012c00 	.word	0x40012c00
 8005f54:	40000400 	.word	0x40000400
 8005f58:	40000800 	.word	0x40000800
 8005f5c:	40013400 	.word	0x40013400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40014400 	.word	0x40014400
 8005f68:	40014800 	.word	0x40014800

08005f6c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f82:	d045      	beq.n	8006010 <LL_TIM_OC_Init+0xa4>
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f8a:	d848      	bhi.n	800601e <LL_TIM_OC_Init+0xb2>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f92:	d036      	beq.n	8006002 <LL_TIM_OC_Init+0x96>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f9a:	d840      	bhi.n	800601e <LL_TIM_OC_Init+0xb2>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa2:	d027      	beq.n	8005ff4 <LL_TIM_OC_Init+0x88>
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005faa:	d838      	bhi.n	800601e <LL_TIM_OC_Init+0xb2>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb2:	d018      	beq.n	8005fe6 <LL_TIM_OC_Init+0x7a>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fba:	d830      	bhi.n	800601e <LL_TIM_OC_Init+0xb2>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d003      	beq.n	8005fca <LL_TIM_OC_Init+0x5e>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d007      	beq.n	8005fd8 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8005fc8:	e029      	b.n	800601e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f8b5 	bl	800613c <OC1Config>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd6:	e023      	b.n	8006020 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f92e 	bl	800623c <OC2Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe4:	e01c      	b.n	8006020 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 f9ab 	bl	8006344 <OC3Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff2:	e015      	b.n	8006020 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 fa28 	bl	800644c <OC4Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8006000:	e00e      	b.n	8006020 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 faa5 	bl	8006554 <OC5Config>
 800600a:	4603      	mov	r3, r0
 800600c:	75fb      	strb	r3, [r7, #23]
      break;
 800600e:	e007      	b.n	8006020 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 fb02 	bl	800661c <OC6Config>
 8006018:	4603      	mov	r3, r0
 800601a:	75fb      	strb	r3, [r7, #23]
      break;
 800601c:	e000      	b.n	8006020 <LL_TIM_OC_Init+0xb4>
      break;
 800601e:	bf00      	nop
  }

  return result;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	7b12      	ldrb	r2, [r2, #12]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	89d2      	ldrh	r2, [r2, #14]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a21      	ldr	r2, [pc, #132]	; (8006134 <LL_TIM_BDTR_Init+0x108>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d003      	beq.n	80060ba <LL_TIM_BDTR_Init+0x8e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a20      	ldr	r2, [pc, #128]	; (8006138 <LL_TIM_BDTR_Init+0x10c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d10d      	bne.n	80060d6 <LL_TIM_BDTR_Init+0xaa>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a16      	ldr	r2, [pc, #88]	; (8006134 <LL_TIM_BDTR_Init+0x108>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d003      	beq.n	80060e6 <LL_TIM_BDTR_Init+0xba>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a15      	ldr	r2, [pc, #84]	; (8006138 <LL_TIM_BDTR_Init+0x10c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d11b      	bne.n	800611e <LL_TIM_BDTR_Init+0xf2>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	40012c00 	.word	0x40012c00
 8006138:	40013400 	.word	0x40013400

0800613c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f023 0201 	bic.w	r2, r3, #1
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	6812      	ldr	r2, [r2, #0]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f023 0202 	bic.w	r2, r3, #2
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 0201 	bic.w	r2, r3, #1
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a22      	ldr	r2, [pc, #136]	; (8006228 <OC1Config+0xec>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00f      	beq.n	80061c2 <OC1Config+0x86>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a21      	ldr	r2, [pc, #132]	; (800622c <OC1Config+0xf0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00b      	beq.n	80061c2 <OC1Config+0x86>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a20      	ldr	r2, [pc, #128]	; (8006230 <OC1Config+0xf4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d007      	beq.n	80061c2 <OC1Config+0x86>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1f      	ldr	r2, [pc, #124]	; (8006234 <OC1Config+0xf8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <OC1Config+0x86>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a1e      	ldr	r2, [pc, #120]	; (8006238 <OC1Config+0xfc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d11e      	bne.n	8006200 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f023 0208 	bic.w	r2, r3, #8
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4313      	orrs	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f023 0204 	bic.w	r2, r3, #4
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff fdb9 	bl	8005d8a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40012c00 	.word	0x40012c00
 800622c:	40013400 	.word	0x40013400
 8006230:	40014000 	.word	0x40014000
 8006234:	40014400 	.word	0x40014400
 8006238:	40014800 	.word	0x40014800

0800623c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f023 0210 	bic.w	r2, r3, #16
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	6812      	ldr	r2, [r2, #0]
 800627a:	0212      	lsls	r2, r2, #8
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 0220 	bic.w	r2, r3, #32
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f023 0210 	bic.w	r2, r3, #16
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a23      	ldr	r2, [pc, #140]	; (8006330 <OC2Config+0xf4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00f      	beq.n	80062c8 <OC2Config+0x8c>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a22      	ldr	r2, [pc, #136]	; (8006334 <OC2Config+0xf8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00b      	beq.n	80062c8 <OC2Config+0x8c>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a21      	ldr	r2, [pc, #132]	; (8006338 <OC2Config+0xfc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d007      	beq.n	80062c8 <OC2Config+0x8c>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a20      	ldr	r2, [pc, #128]	; (800633c <OC2Config+0x100>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <OC2Config+0x8c>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a1f      	ldr	r2, [pc, #124]	; (8006340 <OC2Config+0x104>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d11f      	bne.n	8006308 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	019b      	lsls	r3, r3, #6
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	019b      	lsls	r3, r3, #6
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	4313      	orrs	r3, r2
 8006306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff fd43 	bl	8005da6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40012c00 	.word	0x40012c00
 8006334:	40013400 	.word	0x40013400
 8006338:	40014000 	.word	0x40014000
 800633c:	40014400 	.word	0x40014400
 8006340:	40014800 	.word	0x40014800

08006344 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	021b      	lsls	r3, r3, #8
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a23      	ldr	r2, [pc, #140]	; (8006438 <OC3Config+0xf4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00f      	beq.n	80063ce <OC3Config+0x8a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a22      	ldr	r2, [pc, #136]	; (800643c <OC3Config+0xf8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00b      	beq.n	80063ce <OC3Config+0x8a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a21      	ldr	r2, [pc, #132]	; (8006440 <OC3Config+0xfc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d007      	beq.n	80063ce <OC3Config+0x8a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a20      	ldr	r2, [pc, #128]	; (8006444 <OC3Config+0x100>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d003      	beq.n	80063ce <OC3Config+0x8a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a1f      	ldr	r2, [pc, #124]	; (8006448 <OC3Config+0x104>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d11f      	bne.n	800640e <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	029b      	lsls	r3, r3, #10
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	029b      	lsls	r3, r3, #10
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	015b      	lsls	r3, r3, #5
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff fcce 	bl	8005dc2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40013400 	.word	0x40013400
 8006440:	40014000 	.word	0x40014000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800

0800644c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	0212      	lsls	r2, r2, #8
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	031b      	lsls	r3, r3, #12
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	031b      	lsls	r3, r3, #12
 80064ac:	4313      	orrs	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a23      	ldr	r2, [pc, #140]	; (8006540 <OC4Config+0xf4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00f      	beq.n	80064d8 <OC4Config+0x8c>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a22      	ldr	r2, [pc, #136]	; (8006544 <OC4Config+0xf8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00b      	beq.n	80064d8 <OC4Config+0x8c>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a21      	ldr	r2, [pc, #132]	; (8006548 <OC4Config+0xfc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d007      	beq.n	80064d8 <OC4Config+0x8c>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a20      	ldr	r2, [pc, #128]	; (800654c <OC4Config+0x100>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d003      	beq.n	80064d8 <OC4Config+0x8c>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a1f      	ldr	r2, [pc, #124]	; (8006550 <OC4Config+0x104>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d11f      	bne.n	8006518 <OC4Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	039b      	lsls	r3, r3, #14
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	039b      	lsls	r3, r3, #14
 80064f4:	4313      	orrs	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	019b      	lsls	r3, r3, #6
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	01db      	lsls	r3, r3, #7
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff fc57 	bl	8005dde <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40012c00 	.word	0x40012c00
 8006544:	40013400 	.word	0x40013400
 8006548:	40014000 	.word	0x40014000
 800654c:	40014400 	.word	0x40014400
 8006550:	40014800 	.word	0x40014800

08006554 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006574:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800657c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	4313      	orrs	r3, r2
 8006586:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	041b      	lsls	r3, r3, #16
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	041b      	lsls	r3, r3, #16
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a17      	ldr	r2, [pc, #92]	; (8006608 <OC5Config+0xb4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00f      	beq.n	80065d0 <OC5Config+0x7c>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a16      	ldr	r2, [pc, #88]	; (800660c <OC5Config+0xb8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00b      	beq.n	80065d0 <OC5Config+0x7c>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a15      	ldr	r2, [pc, #84]	; (8006610 <OC5Config+0xbc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d007      	beq.n	80065d0 <OC5Config+0x7c>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a14      	ldr	r2, [pc, #80]	; (8006614 <OC5Config+0xc0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <OC5Config+0x7c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a13      	ldr	r2, [pc, #76]	; (8006618 <OC5Config+0xc4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d109      	bne.n	80065e4 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fc02 	bl	8005dfa <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40013400 	.word	0x40013400
 8006610:	40014000 	.word	0x40014000
 8006614:	40014400 	.word	0x40014400
 8006618:	40014800 	.word	0x40014800

0800661c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	0212      	lsls	r2, r2, #8
 800664e:	4313      	orrs	r3, r2
 8006650:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	051b      	lsls	r3, r3, #20
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	051b      	lsls	r3, r3, #20
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a16      	ldr	r2, [pc, #88]	; (80066d0 <OC6Config+0xb4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00f      	beq.n	800669a <OC6Config+0x7e>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a15      	ldr	r2, [pc, #84]	; (80066d4 <OC6Config+0xb8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00b      	beq.n	800669a <OC6Config+0x7e>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a14      	ldr	r2, [pc, #80]	; (80066d8 <OC6Config+0xbc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d007      	beq.n	800669a <OC6Config+0x7e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a13      	ldr	r2, [pc, #76]	; (80066dc <OC6Config+0xc0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d003      	beq.n	800669a <OC6Config+0x7e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a12      	ldr	r2, [pc, #72]	; (80066e0 <OC6Config+0xc4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d109      	bne.n	80066ae <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	029b      	lsls	r3, r3, #10
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff fbad 	bl	8005e1a <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40012c00 	.word	0x40012c00
 80066d4:	40013400 	.word	0x40013400
 80066d8:	40014000 	.word	0x40014000
 80066dc:	40014400 	.word	0x40014400
 80066e0:	40014800 	.word	0x40014800

080066e4 <calcCRC>:
#include "common.h"
#include <stdio.h>
#include <stdint.h>

uint16_t calcCRC(uint8_t *buf, uint16_t len)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b089      	sub	sp, #36	; 0x24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	807b      	strh	r3, [r7, #2]
    int i, j;
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 80066f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066f4:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++)
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
 80066fa:	e023      	b.n	8006744 <calcCRC+0x60>
    {
        temp = temp ^ buf[i];
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4413      	add	r3, r2
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	4053      	eors	r3, r2
 800670a:	617b      	str	r3, [r7, #20]
        for (j = 1; j <= 8; j++)
 800670c:	2301      	movs	r3, #1
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	e012      	b.n	8006738 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	60fb      	str	r3, [r7, #12]
            temp >>=1;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	617b      	str	r3, [r7, #20]
            if (flag)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <calcCRC+0x4e>
                temp ^= 0xA001;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800672c:	f083 0301 	eor.w	r3, r3, #1
 8006730:	617b      	str	r3, [r7, #20]
        for (j = 1; j <= 8; j++)
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	3301      	adds	r3, #1
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	2b08      	cmp	r3, #8
 800673c:	dde9      	ble.n	8006712 <calcCRC+0x2e>
    for (i = 0; i < len; i++)
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	3301      	adds	r3, #1
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	887b      	ldrh	r3, [r7, #2]
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	429a      	cmp	r2, r3
 800674a:	dbd7      	blt.n	80066fc <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	0a1b      	lsrs	r3, r3, #8
 8006750:	613b      	str	r3, [r7, #16]
    temp = (temp << 8) | temp2;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	b29b      	uxth	r3, r3
 8006760:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	b29b      	uxth	r3, r3
}
 8006766:	4618      	mov	r0, r3
 8006768:	3724      	adds	r7, #36	; 0x24
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
	...

08006774 <create_fifo>:
static uint16_t FIFO_Get(fifo* fifo, void* byte);
static bool FIFO_Gets(fifo* fifo, void* buffer, uint16_t length);
static bool FIFO_Clear(fifo* fifo);

fifo* create_fifo(uint16_t size, uint16_t element_size)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	4603      	mov	r3, r0
 800677c:	460a      	mov	r2, r1
 800677e:	80fb      	strh	r3, [r7, #6]
 8006780:	4613      	mov	r3, r2
 8006782:	80bb      	strh	r3, [r7, #4]
	fifo* ff;
	ff = (fifo*)malloc(sizeof(fifo));
 8006784:	2030      	movs	r0, #48	; 0x30
 8006786:	f002 fb5d 	bl	8008e44 <malloc>
 800678a:	4603      	mov	r3, r0
 800678c:	60fb      	str	r3, [r7, #12]
	if(ff != NULL)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d036      	beq.n	8006802 <create_fifo+0x8e>
	{
		memset(ff, 0, sizeof(fifo));
 8006794:	2230      	movs	r2, #48	; 0x30
 8006796:	2100      	movs	r1, #0
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f002 fc0f 	bl	8008fbc <memset>
		ff->size = size;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	88fa      	ldrh	r2, [r7, #6]
 80067a2:	815a      	strh	r2, [r3, #10]
		ff->size_element = element_size;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	88ba      	ldrh	r2, [r7, #4]
 80067a8:	819a      	strh	r2, [r3, #12]
		ff->Put = FIFO_Put;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4a17      	ldr	r2, [pc, #92]	; (800680c <create_fifo+0x98>)
 80067ae:	611a      	str	r2, [r3, #16]
		ff->Puts = FIFO_Puts;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4a17      	ldr	r2, [pc, #92]	; (8006810 <create_fifo+0x9c>)
 80067b4:	615a      	str	r2, [r3, #20]
		ff->Peak = FIFO_Peak;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4a16      	ldr	r2, [pc, #88]	; (8006814 <create_fifo+0xa0>)
 80067ba:	619a      	str	r2, [r3, #24]
		ff->Peaks = FIFO_Peaks;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4a16      	ldr	r2, [pc, #88]	; (8006818 <create_fifo+0xa4>)
 80067c0:	61da      	str	r2, [r3, #28]
		ff->Get = FIFO_Get;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4a15      	ldr	r2, [pc, #84]	; (800681c <create_fifo+0xa8>)
 80067c6:	621a      	str	r2, [r3, #32]
		ff->Gets = FIFO_Gets;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4a15      	ldr	r2, [pc, #84]	; (8006820 <create_fifo+0xac>)
 80067cc:	625a      	str	r2, [r3, #36]	; 0x24
		ff->Clear = FIFO_Clear;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4a14      	ldr	r2, [pc, #80]	; (8006824 <create_fifo+0xb0>)
 80067d2:	629a      	str	r2, [r3, #40]	; 0x28
		ff->GetAvaiableSpace = FIFO_GetAvaiableSpace;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4a14      	ldr	r2, [pc, #80]	; (8006828 <create_fifo+0xb4>)
 80067d8:	62da      	str	r2, [r3, #44]	; 0x2c
		ff->buffer = malloc(size * element_size);
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	88ba      	ldrh	r2, [r7, #4]
 80067de:	fb02 f303 	mul.w	r3, r2, r3
 80067e2:	4618      	mov	r0, r3
 80067e4:	f002 fb2e 	bl	8008e44 <malloc>
 80067e8:	4603      	mov	r3, r0
 80067ea:	461a      	mov	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	605a      	str	r2, [r3, #4]
		if(ff->buffer != NULL) return ff;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <create_fifo+0x88>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	e003      	b.n	8006804 <create_fifo+0x90>
		else
			free(ff);
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f002 fb29 	bl	8008e54 <free>
	}
	return NULL;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	08006857 	.word	0x08006857
 8006810:	080068cf 	.word	0x080068cf
 8006814:	08006947 	.word	0x08006947
 8006818:	08006991 	.word	0x08006991
 800681c:	08006a0b 	.word	0x08006a0b
 8006820:	08006a8f 	.word	0x08006a8f
 8006824:	08006aeb 	.word	0x08006aeb
 8006828:	0800682d 	.word	0x0800682d

0800682c <FIFO_GetAvaiableSpace>:

uint16_t FIFO_GetAvaiableSpace(fifo* fifo)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
	if(fifo == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <FIFO_GetAvaiableSpace+0x12>
		return 0;
 800683a:	2300      	movs	r3, #0
 800683c:	e005      	b.n	800684a <FIFO_GetAvaiableSpace+0x1e>
    return (fifo->size - fifo->data_len);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	895a      	ldrh	r2, [r3, #10]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	891b      	ldrh	r3, [r3, #8]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	b29b      	uxth	r3, r3
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <FIFO_Put>:

static bool FIFO_Put(fifo* fifo, void* byte)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
	if(fifo == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <FIFO_Put+0x14>
		return false;
 8006866:	2300      	movs	r3, #0
 8006868:	e02d      	b.n	80068c6 <FIFO_Put+0x70>
    if(fifo->data_len < fifo->size)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	891a      	ldrh	r2, [r3, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	895b      	ldrh	r3, [r3, #10]
 8006872:	429a      	cmp	r2, r3
 8006874:	d226      	bcs.n	80068c4 <FIFO_Put+0x6e>
    {
      memcpy(&(fifo->buffer[fifo->write_idx*fifo->size_element]), byte, fifo->size_element);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	8852      	ldrh	r2, [r2, #2]
 800687e:	4611      	mov	r1, r2
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	8992      	ldrh	r2, [r2, #12]
 8006884:	fb01 f202 	mul.w	r2, r1, r2
 8006888:	1898      	adds	r0, r3, r2
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	899b      	ldrh	r3, [r3, #12]
 800688e:	461a      	mov	r2, r3
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	f002 fbd7 	bl	8009044 <memcpy>
      fifo->write_idx++;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	885b      	ldrh	r3, [r3, #2]
 800689a:	3301      	adds	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	805a      	strh	r2, [r3, #2]
      fifo->data_len++;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	891b      	ldrh	r3, [r3, #8]
 80068a6:	3301      	adds	r3, #1
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	811a      	strh	r2, [r3, #8]
      if(fifo->write_idx == fifo->size)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	885a      	ldrh	r2, [r3, #2]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	895b      	ldrh	r3, [r3, #10]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d102      	bne.n	80068c0 <FIFO_Put+0x6a>
        fifo->write_idx = 0;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	805a      	strh	r2, [r3, #2]
      return true;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e000      	b.n	80068c6 <FIFO_Put+0x70>
    }
    return false;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <FIFO_Puts>:

bool FIFO_Puts(fifo* fifo, void* buffer, uint16_t length   )
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b086      	sub	sp, #24
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	4613      	mov	r3, r2
 80068da:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint8_t* ptr = (uint8_t*)buffer;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	613b      	str	r3, [r7, #16]
	if(fifo == NULL)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <FIFO_Puts+0x1c>
		return false;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e029      	b.n	800693e <FIFO_Puts+0x70>
    if( length <= FIFO_GetAvaiableSpace(fifo))
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff ff9e 	bl	800682c <FIFO_GetAvaiableSpace>
 80068f0:	4603      	mov	r3, r0
 80068f2:	461a      	mov	r2, r3
 80068f4:	88fb      	ldrh	r3, [r7, #6]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d81e      	bhi.n	8006938 <FIFO_Puts+0x6a>
    {
        for(i = 0; i < length; i++)
 80068fa:	2300      	movs	r3, #0
 80068fc:	82fb      	strh	r3, [r7, #22]
 80068fe:	e016      	b.n	800692e <FIFO_Puts+0x60>
        if(FIFO_Put(fifo, ptr + i*fifo->size_element) == 0)
 8006900:	8afb      	ldrh	r3, [r7, #22]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	8992      	ldrh	r2, [r2, #12]
 8006906:	fb02 f303 	mul.w	r3, r2, r3
 800690a:	461a      	mov	r2, r3
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	4413      	add	r3, r2
 8006910:	4619      	mov	r1, r3
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff ff9f 	bl	8006856 <FIFO_Put>
 8006918:	4603      	mov	r3, r0
 800691a:	f083 0301 	eor.w	r3, r3, #1
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <FIFO_Puts+0x5a>
            return false;
 8006924:	2300      	movs	r3, #0
 8006926:	e00a      	b.n	800693e <FIFO_Puts+0x70>
        for(i = 0; i < length; i++)
 8006928:	8afb      	ldrh	r3, [r7, #22]
 800692a:	3301      	adds	r3, #1
 800692c:	82fb      	strh	r3, [r7, #22]
 800692e:	8afa      	ldrh	r2, [r7, #22]
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	429a      	cmp	r2, r3
 8006934:	d3e4      	bcc.n	8006900 <FIFO_Puts+0x32>
 8006936:	e001      	b.n	800693c <FIFO_Puts+0x6e>
    }
    else
        return false;
 8006938:	2300      	movs	r3, #0
 800693a:	e000      	b.n	800693e <FIFO_Puts+0x70>
    return true;
 800693c:	2301      	movs	r3, #1
}
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <FIFO_Peak>:

bool FIFO_Peak(fifo* fifo, void* data)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	6039      	str	r1, [r7, #0]
	if(fifo == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <FIFO_Peak+0x14>
		return false;
 8006956:	2300      	movs	r3, #0
 8006958:	e016      	b.n	8006988 <FIFO_Peak+0x42>
    if(fifo->data_len > 0)       // it empty
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	891b      	ldrh	r3, [r3, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d011      	beq.n	8006986 <FIFO_Peak+0x40>
    {
    	memcpy(data, &(fifo->buffer[fifo->read_idx*fifo->size_element]), fifo->size_element);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	8812      	ldrh	r2, [r2, #0]
 800696a:	4611      	mov	r1, r2
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	8992      	ldrh	r2, [r2, #12]
 8006970:	fb01 f202 	mul.w	r2, r1, r2
 8006974:	1899      	adds	r1, r3, r2
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	899b      	ldrh	r3, [r3, #12]
 800697a:	461a      	mov	r2, r3
 800697c:	6838      	ldr	r0, [r7, #0]
 800697e:	f002 fb61 	bl	8009044 <memcpy>
      return true;
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <FIFO_Peak+0x42>
    }
    else
        return false;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <FIFO_Peaks>:

bool FIFO_Peaks(fifo* fifo, void* data, uint16_t len)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	4613      	mov	r3, r2
 800699c:	80fb      	strh	r3, [r7, #6]
	uint16_t index;
	uint8_t* ptr_data = (uint8_t*)data;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	613b      	str	r3, [r7, #16]
	if(fifo == NULL)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <FIFO_Peaks+0x1c>
		return false;
 80069a8:	2300      	movs	r3, #0
 80069aa:	e02a      	b.n	8006a02 <FIFO_Peaks+0x72>
    if(fifo->data_len >= len)       // it empty
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	891b      	ldrh	r3, [r3, #8]
 80069b0:	88fa      	ldrh	r2, [r7, #6]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d824      	bhi.n	8006a00 <FIFO_Peaks+0x70>
    {
    	for(index = 0; index < len; index++)
 80069b6:	2300      	movs	r3, #0
 80069b8:	82fb      	strh	r3, [r7, #22]
 80069ba:	e01b      	b.n	80069f4 <FIFO_Peaks+0x64>
    		memcpy(ptr_data + index*fifo->size_element, &(fifo->buffer[(fifo->read_idx + index)*fifo->size_element]), fifo->size_element);
 80069bc:	8afb      	ldrh	r3, [r7, #22]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	8992      	ldrh	r2, [r2, #12]
 80069c2:	fb02 f303 	mul.w	r3, r2, r3
 80069c6:	461a      	mov	r2, r3
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1898      	adds	r0, r3, r2
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	8812      	ldrh	r2, [r2, #0]
 80069d4:	4611      	mov	r1, r2
 80069d6:	8afa      	ldrh	r2, [r7, #22]
 80069d8:	440a      	add	r2, r1
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	8989      	ldrh	r1, [r1, #12]
 80069de:	fb01 f202 	mul.w	r2, r1, r2
 80069e2:	1899      	adds	r1, r3, r2
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	899b      	ldrh	r3, [r3, #12]
 80069e8:	461a      	mov	r2, r3
 80069ea:	f002 fb2b 	bl	8009044 <memcpy>
    	for(index = 0; index < len; index++)
 80069ee:	8afb      	ldrh	r3, [r7, #22]
 80069f0:	3301      	adds	r3, #1
 80069f2:	82fb      	strh	r3, [r7, #22]
 80069f4:	8afa      	ldrh	r2, [r7, #22]
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d3df      	bcc.n	80069bc <FIFO_Peaks+0x2c>
      return true;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e000      	b.n	8006a02 <FIFO_Peaks+0x72>
    }
    else
        return false;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <FIFO_Get>:

uint16_t FIFO_Get(fifo* fifo, void* byte)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]
	if(fifo == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <FIFO_Get+0x14>
		return 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e033      	b.n	8006a86 <FIFO_Get+0x7c>
    if(fifo->data_len > 0)       // it empty
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	891b      	ldrh	r3, [r3, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d02e      	beq.n	8006a84 <FIFO_Get+0x7a>
    {
    	memcpy(byte, &(fifo->buffer[fifo->read_idx*fifo->size_element]), fifo->size_element);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	8812      	ldrh	r2, [r2, #0]
 8006a2e:	4611      	mov	r1, r2
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	8992      	ldrh	r2, [r2, #12]
 8006a34:	fb01 f202 	mul.w	r2, r1, r2
 8006a38:	1899      	adds	r1, r3, r2
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	899b      	ldrh	r3, [r3, #12]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	6838      	ldr	r0, [r7, #0]
 8006a42:	f002 faff 	bl	8009044 <memcpy>
      fifo->read_idx++;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	801a      	strh	r2, [r3, #0]
      fifo->data_len--;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	891b      	ldrh	r3, [r3, #8]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	811a      	strh	r2, [r3, #8]
      if(fifo->read_idx == fifo->size)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	881a      	ldrh	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	895b      	ldrh	r3, [r3, #10]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d102      	bne.n	8006a70 <FIFO_Get+0x66>
        fifo->read_idx = 0;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	801a      	strh	r2, [r3, #0]
      if(fifo->data_len == 0) fifo->write_idx = fifo->read_idx;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	891b      	ldrh	r3, [r3, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d103      	bne.n	8006a80 <FIFO_Get+0x76>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	881a      	ldrh	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	805a      	strh	r2, [r3, #2]
      return 1;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e000      	b.n	8006a86 <FIFO_Get+0x7c>
    }
    return 0;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <FIFO_Gets>:

bool FIFO_Gets(fifo* fifo, void* buffer, uint16_t length)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b086      	sub	sp, #24
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	if(fifo == NULL)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <FIFO_Gets+0x18>
		return false;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e01d      	b.n	8006ae2 <FIFO_Gets+0x54>
    if(length <= fifo->data_len)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	891b      	ldrh	r3, [r3, #8]
 8006aaa:	88fa      	ldrh	r2, [r7, #6]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d817      	bhi.n	8006ae0 <FIFO_Gets+0x52>
    {
        for(i = 0; i < length; i++)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	82fb      	strh	r3, [r7, #22]
 8006ab4:	e00e      	b.n	8006ad4 <FIFO_Gets+0x46>
          FIFO_Get(fifo, (buffer + i*fifo->size_element));
 8006ab6:	8afb      	ldrh	r3, [r7, #22]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	8992      	ldrh	r2, [r2, #12]
 8006abc:	fb02 f303 	mul.w	r3, r2, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f7ff ff9e 	bl	8006a0a <FIFO_Get>
        for(i = 0; i < length; i++)
 8006ace:	8afb      	ldrh	r3, [r7, #22]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	82fb      	strh	r3, [r7, #22]
 8006ad4:	8afa      	ldrh	r2, [r7, #22]
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d3ec      	bcc.n	8006ab6 <FIFO_Gets+0x28>
        return true;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e000      	b.n	8006ae2 <FIFO_Gets+0x54>
    }
    return false;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <FIFO_Clear>:

bool FIFO_Clear(fifo* fifo)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
	if(fifo == NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <FIFO_Clear+0x12>
		return false;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e007      	b.n	8006b0c <FIFO_Clear+0x22>
	fifo->data_len = 0;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	811a      	strh	r2, [r3, #8]
	fifo->read_idx = fifo->write_idx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	885a      	ldrh	r2, [r3, #2]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	801a      	strh	r2, [r3, #0]
	return true;
 8006b0a:	2301      	movs	r3, #1
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <ModbusResetValue>:
static void ModbusResetValue(volatile m_modbus_obj *mb_obj);
static void ModbusGetData(m_modbus_obj *mb_obj);


static void ModbusResetValue(volatile m_modbus_obj *mb_obj)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
    int i;
    for(i = 0; i < RXSIZE; i++)
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e008      	b.n	8006b38 <ModbusResetValue+0x20>
    {
        mb_obj->rdata[i] = 0;
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	330c      	adds	r3, #12
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < RXSIZE; i++)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3301      	adds	r3, #1
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2b95      	cmp	r3, #149	; 0x95
 8006b3c:	ddf3      	ble.n	8006b26 <ModbusResetValue+0xe>
    }

    for(i = 0; i < TXSIZE; i++)
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e008      	b.n	8006b56 <ModbusResetValue+0x3e>
    {
        mb_obj->sdata[i] = 0;
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4413      	add	r3, r2
 8006b4a:	33a2      	adds	r3, #162	; 0xa2
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < TXSIZE; i++)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3301      	adds	r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b95      	cmp	r3, #149	; 0x95
 8006b5a:	ddf3      	ble.n	8006b44 <ModbusResetValue+0x2c>
    }

    mb_obj->rcount = 0;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    mb_obj->scount = 0;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    mb_obj->tick = 0;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8006b74:	bf00      	nop
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <ModbusGetData>:

static void ModbusGetData(m_modbus_obj *mb_obj) // Get Function
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
    uint16_t crc;
    if(mb_obj->tick >= RXTIMEOUT)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8006b8e:	2b09      	cmp	r3, #9
 8006b90:	dd7e      	ble.n	8006c90 <ModbusGetData+0x110>
    {
        mb_obj->tick = 0;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        if(mb_obj->rcount >= 8)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006ba0:	2b07      	cmp	r3, #7
 8006ba2:	dd71      	ble.n	8006c88 <ModbusGetData+0x108>
        {
            if( mb_obj->rdata[0] == mb_obj->modbus.id)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	7b1b      	ldrb	r3, [r3, #12]
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d166      	bne.n	8006c80 <ModbusGetData+0x100>
            {
                switch(mb_obj->rdata[1])
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	7b5b      	ldrb	r3, [r3, #13]
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d002      	beq.n	8006bc0 <ModbusGetData+0x40>
 8006bba:	2b10      	cmp	r3, #16
 8006bbc:	d026      	beq.n	8006c0c <ModbusGetData+0x8c>
 8006bbe:	e057      	b.n	8006c70 <ModbusGetData+0xf0>
                {
                case 0x03:
                    if(mb_obj->rcount >= 8)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006bc6:	2b07      	cmp	r3, #7
 8006bc8:	dd57      	ble.n	8006c7a <ModbusGetData+0xfa>
                    {
                        crc = calcCRC(mb_obj->rdata, 6);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	2106      	movs	r1, #6
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff fd87 	bl	80066e4 <calcCRC>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	81fb      	strh	r3, [r7, #14]
                        if((mb_obj->rdata[6] == (crc >> 8 & 0xFF)) && (mb_obj->rdata[7] == (crc & 0xFF)))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	7c9b      	ldrb	r3, [r3, #18]
 8006bde:	461a      	mov	r2, r3
 8006be0:	89fb      	ldrh	r3, [r7, #14]
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d146      	bne.n	8006c7a <ModbusGetData+0xfa>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	7cdb      	ldrb	r3, [r3, #19]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	89fb      	ldrh	r3, [r7, #14]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d13f      	bne.n	8006c7a <ModbusGetData+0xfa>
                        {
                            mb_obj->RcvTask = &ModbusCreateData;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a26      	ldr	r2, [pc, #152]	; (8006c98 <ModbusGetData+0x118>)
 8006bfe:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                            mb_obj->tick = 0;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
                        }
                    }
                    break;
 8006c0a:	e036      	b.n	8006c7a <ModbusGetData+0xfa>
                case 0x10:
                    crc = calcCRC(mb_obj->rdata, mb_obj->rcount - 2);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f103 020c 	add.w	r2, r3, #12
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b02      	subs	r3, #2
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4610      	mov	r0, r2
 8006c22:	f7ff fd5f 	bl	80066e4 <calcCRC>
 8006c26:	4603      	mov	r3, r0
 8006c28:	81fb      	strh	r3, [r7, #14]
                    if((mb_obj->rdata[mb_obj->rcount - 2] == (crc >> 8 & 0xFF)) && (mb_obj->rdata[mb_obj->rcount - 1] == (crc & 0xFF)))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006c30:	3b02      	subs	r3, #2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	4413      	add	r3, r2
 8006c36:	7b1b      	ldrb	r3, [r3, #12]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	89fb      	ldrh	r3, [r7, #14]
 8006c3c:	0a1b      	lsrs	r3, r3, #8
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d11b      	bne.n	8006c7e <ModbusGetData+0xfe>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	4413      	add	r3, r2
 8006c52:	7b1b      	ldrb	r3, [r3, #12]
 8006c54:	461a      	mov	r2, r3
 8006c56:	89fb      	ldrh	r3, [r7, #14]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d10f      	bne.n	8006c7e <ModbusGetData+0xfe>
                    {
                        mb_obj->RcvTask = &ModbusSetData;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a0e      	ldr	r2, [pc, #56]	; (8006c9c <ModbusGetData+0x11c>)
 8006c62:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                        mb_obj->tick = 0;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
                    }
                    break;
 8006c6e:	e006      	b.n	8006c7e <ModbusGetData+0xfe>
                default:
                    mb_obj->tick = 0;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8006c78:	e002      	b.n	8006c80 <ModbusGetData+0x100>
                    break;
 8006c7a:	bf00      	nop
 8006c7c:	e000      	b.n	8006c80 <ModbusGetData+0x100>
                    break;
 8006c7e:	bf00      	nop
                }
            }
            mb_obj->rcount = 0;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
        }
        mb_obj->rcount = 0;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    }
}
 8006c90:	bf00      	nop
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	08006e89 	.word	0x08006e89
 8006c9c:	08006ca1 	.word	0x08006ca1

08006ca0 <ModbusSetData>:
static void ModbusSetData(m_modbus_obj *mb_obj)
{
 8006ca0:	b590      	push	{r4, r7, lr}
 8006ca2:	b089      	sub	sp, #36	; 0x24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
    int i, j, k;
    uint16_t crc;
    uint16_t addrData;
    uint16_t sizeData;
    uint16_t *ptr_data = NULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < 6; i++)
 8006cac:	2300      	movs	r3, #0
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	e00d      	b.n	8006cce <ModbusSetData+0x2e>
    {
        mb_obj->sdata[i] = mb_obj->rdata[i];
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	330c      	adds	r3, #12
 8006cba:	7819      	ldrb	r1, [r3, #0]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	33a2      	adds	r3, #162	; 0xa2
 8006cc4:	460a      	mov	r2, r1
 8006cc6:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < 6; i++)
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	2b05      	cmp	r3, #5
 8006cd2:	ddee      	ble.n	8006cb2 <ModbusSetData+0x12>
    }

    addrData = mb_obj->rdata[2] << 8 | mb_obj->rdata[3];
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	7b9b      	ldrb	r3, [r3, #14]
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	b21a      	sxth	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	7bdb      	ldrb	r3, [r3, #15]
 8006ce0:	b21b      	sxth	r3, r3
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	b21b      	sxth	r3, r3
 8006ce6:	827b      	strh	r3, [r7, #18]
    sizeData = mb_obj->rdata[4] << 8 | mb_obj->rdata[5];
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	7c1b      	ldrb	r3, [r3, #16]
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	b21a      	sxth	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	7c5b      	ldrb	r3, [r3, #17]
 8006cf4:	b21b      	sxth	r3, r3
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	b21b      	sxth	r3, r3
 8006cfa:	817b      	strh	r3, [r7, #10]
    if(sizeData > (TXSIZE - 6))
 8006cfc:	897b      	ldrh	r3, [r7, #10]
 8006cfe:	2b90      	cmp	r3, #144	; 0x90
 8006d00:	d907      	bls.n	8006d12 <ModbusSetData+0x72>
    {
        mb_obj->RcvTask = &ModbusGetData;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a5d      	ldr	r2, [pc, #372]	; (8006e7c <ModbusSetData+0x1dc>)
 8006d06:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        mb_obj->tick = 0;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    }
    for(j = 0; j < MAX_VAR_SHOW; j++)
 8006d12:	2300      	movs	r3, #0
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	e044      	b.n	8006da2 <ModbusSetData+0x102>
    {
        if(data_list[j].data != NULL)
 8006d18:	4959      	ldr	r1, [pc, #356]	; (8006e80 <ModbusSetData+0x1e0>)
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	440b      	add	r3, r1
 8006d26:	3304      	adds	r3, #4
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d036      	beq.n	8006d9c <ModbusSetData+0xfc>
        {
            if(addrData >= data_list[j].start_addr && addrData <= data_list[j].start_addr + data_list[j].len)
 8006d2e:	4954      	ldr	r1, [pc, #336]	; (8006e80 <ModbusSetData+0x1e0>)
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	4613      	mov	r3, r2
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	440b      	add	r3, r1
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	8a7a      	ldrh	r2, [r7, #18]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d32b      	bcc.n	8006d9c <ModbusSetData+0xfc>
 8006d44:	8a79      	ldrh	r1, [r7, #18]
 8006d46:	484e      	ldr	r0, [pc, #312]	; (8006e80 <ModbusSetData+0x1e0>)
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4403      	add	r3, r0
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	461c      	mov	r4, r3
 8006d58:	4849      	ldr	r0, [pc, #292]	; (8006e80 <ModbusSetData+0x1e0>)
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4403      	add	r3, r0
 8006d66:	3308      	adds	r3, #8
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	4423      	add	r3, r4
 8006d6c:	4299      	cmp	r1, r3
 8006d6e:	dc15      	bgt.n	8006d9c <ModbusSetData+0xfc>
            {
                ptr_data = (uint16_t *)data_list[j].data;
 8006d70:	4943      	ldr	r1, [pc, #268]	; (8006e80 <ModbusSetData+0x1e0>)
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	4613      	mov	r3, r2
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	4413      	add	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	440b      	add	r3, r1
 8006d7e:	3304      	adds	r3, #4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60fb      	str	r3, [r7, #12]
                addrData = addrData - data_list[j].start_addr;
 8006d84:	493e      	ldr	r1, [pc, #248]	; (8006e80 <ModbusSetData+0x1e0>)
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	440b      	add	r3, r1
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	8a7a      	ldrh	r2, [r7, #18]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	827b      	strh	r3, [r7, #18]
                break;
 8006d9a:	e005      	b.n	8006da8 <ModbusSetData+0x108>
    for(j = 0; j < MAX_VAR_SHOW; j++)
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	61bb      	str	r3, [r7, #24]
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	2b05      	cmp	r3, #5
 8006da6:	ddb7      	ble.n	8006d18 <ModbusSetData+0x78>
            }
        }
    }
    if(ptr_data == NULL)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <ModbusSetData+0x118>
    {
        mb_obj->RcvTask = &ModbusGetData;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a32      	ldr	r2, [pc, #200]	; (8006e7c <ModbusSetData+0x1dc>)
 8006db2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        return;
 8006db6:	e05e      	b.n	8006e76 <ModbusSetData+0x1d6>
    }

    k = 7;
 8006db8:	2307      	movs	r3, #7
 8006dba:	617b      	str	r3, [r7, #20]
//        *(ptr_data + addrData + 1) = (mb_obj->rdata[k+2] << 8) + mb_obj->rdata[k+3];
//        addrData += 2;
//        k += 4;
//    }

    for(j = 0; j < sizeData; j++)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	e01d      	b.n	8006dfe <ModbusSetData+0x15e>
    {
        *((uint16_t*)ptr_data + addrData) = (uint16_t)(((uint16_t)mb_obj->rdata[k] << 8) + (uint16_t)mb_obj->rdata[k + 1]);
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	330c      	adds	r3, #12
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	021b      	lsls	r3, r3, #8
 8006dd0:	b299      	uxth	r1, r3
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	4413      	add	r3, r2
 8006dda:	7b1b      	ldrb	r3, [r3, #12]
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	8a7b      	ldrh	r3, [r7, #18]
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	4403      	add	r3, r0
 8006de6:	440a      	add	r2, r1
 8006de8:	b292      	uxth	r2, r2
 8006dea:	801a      	strh	r2, [r3, #0]
        k = k + 2;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	3302      	adds	r3, #2
 8006df0:	617b      	str	r3, [r7, #20]
        addrData += 1;
 8006df2:	8a7b      	ldrh	r3, [r7, #18]
 8006df4:	3301      	adds	r3, #1
 8006df6:	827b      	strh	r3, [r7, #18]
    for(j = 0; j < sizeData; j++)
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	897b      	ldrh	r3, [r7, #10]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	dbdd      	blt.n	8006dc2 <ModbusSetData+0x122>
    }

    crc = calcCRC(mb_obj->sdata, i);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	33a2      	adds	r3, #162	; 0xa2
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	b292      	uxth	r2, r2
 8006e0e:	4611      	mov	r1, r2
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff fc67 	bl	80066e4 <calcCRC>
 8006e16:	4603      	mov	r3, r0
 8006e18:	813b      	strh	r3, [r7, #8]
    mb_obj->sdata[i++] = (crc >> 8) & 0xFF;
 8006e1a:	893b      	ldrh	r3, [r7, #8]
 8006e1c:	0a1b      	lsrs	r3, r3, #8
 8006e1e:	b299      	uxth	r1, r3
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	61fa      	str	r2, [r7, #28]
 8006e26:	b2c9      	uxtb	r1, r1
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	460a      	mov	r2, r1
 8006e2e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    mb_obj->sdata[i++] = crc & 0xFF;
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	61fa      	str	r2, [r7, #28]
 8006e38:	893a      	ldrh	r2, [r7, #8]
 8006e3a:	b2d1      	uxtb	r1, r2
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	4413      	add	r3, r2
 8006e40:	460a      	mov	r2, r1
 8006e42:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2

    mb_obj->sSend = i;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    if(mb_obj->modbus.SetReDe != NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <ModbusSetData+0x1be>
    	mb_obj->modbus.SetReDe(1);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2001      	movs	r0, #1
 8006e5c:	4798      	blx	r3
    mb_obj->RcvTask = &ModbusSendData;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a08      	ldr	r2, [pc, #32]	; (8006e84 <ModbusSetData+0x1e4>)
 8006e62:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    mb_obj->tick = 0;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    mb_obj->scount = 0;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

}
 8006e76:	3724      	adds	r7, #36	; 0x24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd90      	pop	{r4, r7, pc}
 8006e7c:	08006b81 	.word	0x08006b81
 8006e80:	200007d8 	.word	0x200007d8
 8006e84:	080070a5 	.word	0x080070a5

08006e88 <ModbusCreateData>:
static void ModbusCreateData(m_modbus_obj *mb_obj)
{
 8006e88:	b590      	push	{r4, r7, lr}
 8006e8a:	b089      	sub	sp, #36	; 0x24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
    int i, j;
    uint16_t crc;
    uint16_t addrData;
    uint16_t sizeData;
    uint16_t *ptr_data = NULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	613b      	str	r3, [r7, #16]
    for(i = 0; i < 2; i++)
 8006e94:	2300      	movs	r3, #0
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	e00d      	b.n	8006eb6 <ModbusCreateData+0x2e>
    {
        mb_obj->sdata[i] = mb_obj->rdata[i];
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	7819      	ldrb	r1, [r3, #0]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	33a2      	adds	r3, #162	; 0xa2
 8006eac:	460a      	mov	r2, r1
 8006eae:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < 2; i++)
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	61fb      	str	r3, [r7, #28]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	ddee      	ble.n	8006e9a <ModbusCreateData+0x12>
    }

    addrData = mb_obj->rdata[2] << 8 | mb_obj->rdata[3];
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	7b9b      	ldrb	r3, [r3, #14]
 8006ec0:	021b      	lsls	r3, r3, #8
 8006ec2:	b21a      	sxth	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7bdb      	ldrb	r3, [r3, #15]
 8006ec8:	b21b      	sxth	r3, r3
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	b21b      	sxth	r3, r3
 8006ece:	82fb      	strh	r3, [r7, #22]
//    addrData = mb_obj->rdata[3] ;
    sizeData = mb_obj->rdata[4] << 8 | mb_obj->rdata[5];
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	7c1b      	ldrb	r3, [r3, #16]
 8006ed4:	021b      	lsls	r3, r3, #8
 8006ed6:	b21a      	sxth	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	7c5b      	ldrb	r3, [r3, #17]
 8006edc:	b21b      	sxth	r3, r3
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	b21b      	sxth	r3, r3
 8006ee2:	81fb      	strh	r3, [r7, #14]

    mb_obj->sdata[i++] = sizeData * 2;
 8006ee4:	89fb      	ldrh	r3, [r7, #14]
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	1c59      	adds	r1, r3, #1
 8006eec:	61f9      	str	r1, [r7, #28]
 8006eee:	0052      	lsls	r2, r2, #1
 8006ef0:	b2d1      	uxtb	r1, r2
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	460a      	mov	r2, r1
 8006ef8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    if(sizeData * 2 > (TXSIZE - 6))
 8006efc:	89fb      	ldrh	r3, [r7, #14]
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	2b90      	cmp	r3, #144	; 0x90
 8006f02:	dd04      	ble.n	8006f0e <ModbusCreateData+0x86>
    {
        mb_obj->RcvTask = &ModbusGetData;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a64      	ldr	r2, [pc, #400]	; (8007098 <ModbusCreateData+0x210>)
 8006f08:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        return;           // over len buff
 8006f0c:	e0c1      	b.n	8007092 <ModbusCreateData+0x20a>
    }
    for(j = 0; j < MAX_VAR_SHOW; j++)
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	e044      	b.n	8006f9e <ModbusCreateData+0x116>
    {
        if(data_list[j].data != NULL)
 8006f14:	4961      	ldr	r1, [pc, #388]	; (800709c <ModbusCreateData+0x214>)
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	3304      	adds	r3, #4
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d036      	beq.n	8006f98 <ModbusCreateData+0x110>
        {
            if(addrData >= data_list[j].start_addr && addrData < data_list[j].start_addr + data_list[j].len)
 8006f2a:	495c      	ldr	r1, [pc, #368]	; (800709c <ModbusCreateData+0x214>)
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	8afa      	ldrh	r2, [r7, #22]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d32b      	bcc.n	8006f98 <ModbusCreateData+0x110>
 8006f40:	8af9      	ldrh	r1, [r7, #22]
 8006f42:	4856      	ldr	r0, [pc, #344]	; (800709c <ModbusCreateData+0x214>)
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	4613      	mov	r3, r2
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4403      	add	r3, r0
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	461c      	mov	r4, r3
 8006f54:	4851      	ldr	r0, [pc, #324]	; (800709c <ModbusCreateData+0x214>)
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4403      	add	r3, r0
 8006f62:	3308      	adds	r3, #8
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	4423      	add	r3, r4
 8006f68:	4299      	cmp	r1, r3
 8006f6a:	da15      	bge.n	8006f98 <ModbusCreateData+0x110>
            {
                ptr_data = (uint16_t *)data_list[j].data;
 8006f6c:	494b      	ldr	r1, [pc, #300]	; (800709c <ModbusCreateData+0x214>)
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	4613      	mov	r3, r2
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	440b      	add	r3, r1
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	613b      	str	r3, [r7, #16]
                addrData = addrData - data_list[j].start_addr;
 8006f80:	4946      	ldr	r1, [pc, #280]	; (800709c <ModbusCreateData+0x214>)
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	4613      	mov	r3, r2
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	440b      	add	r3, r1
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	8afa      	ldrh	r2, [r7, #22]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	82fb      	strh	r3, [r7, #22]
                break;
 8006f96:	e005      	b.n	8006fa4 <ModbusCreateData+0x11c>
    for(j = 0; j < MAX_VAR_SHOW; j++)
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b05      	cmp	r3, #5
 8006fa2:	ddb7      	ble.n	8006f14 <ModbusCreateData+0x8c>
            }
        }
    }
    if(ptr_data == NULL)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <ModbusCreateData+0x12c>
    {
        mb_obj->RcvTask = &ModbusGetData;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a3a      	ldr	r2, [pc, #232]	; (8007098 <ModbusCreateData+0x210>)
 8006fae:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        return;
 8006fb2:	e06e      	b.n	8007092 <ModbusCreateData+0x20a>
    }

    for(j = 0; j < sizeData; j++)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61bb      	str	r3, [r7, #24]
 8006fb8:	e02f      	b.n	800701a <ModbusCreateData+0x192>
    {
        memcpy(&mb_obj->sdata[i], (uint16_t*)ptr_data + addrData, 2);
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	33a0      	adds	r3, #160	; 0xa0
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	3302      	adds	r3, #2
 8006fc4:	8afa      	ldrh	r2, [r7, #22]
 8006fc6:	0052      	lsls	r2, r2, #1
 8006fc8:	6939      	ldr	r1, [r7, #16]
 8006fca:	440a      	add	r2, r1
 8006fcc:	8812      	ldrh	r2, [r2, #0]
 8006fce:	b292      	uxth	r2, r2
 8006fd0:	801a      	strh	r2, [r3, #0]
        uint8_t fw = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	72fb      	strb	r3, [r7, #11]
        fw = mb_obj->sdata[i];
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	4413      	add	r3, r2
 8006fdc:	33a2      	adds	r3, #162	; 0xa2
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	72fb      	strb	r3, [r7, #11]
        mb_obj->sdata[i] = mb_obj->sdata[i + 1];
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f893 10a2 	ldrb.w	r1, [r3, #162]	; 0xa2
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	33a2      	adds	r3, #162	; 0xa2
 8006ff6:	460a      	mov	r2, r1
 8006ff8:	701a      	strb	r2, [r3, #0]
        mb_obj->sdata[i + 1] = fw;
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	4413      	add	r3, r2
 8007002:	7afa      	ldrb	r2, [r7, #11]
 8007004:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        i += 2;
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	3302      	adds	r3, #2
 800700c:	61fb      	str	r3, [r7, #28]
        addrData += 1;
 800700e:	8afb      	ldrh	r3, [r7, #22]
 8007010:	3301      	adds	r3, #1
 8007012:	82fb      	strh	r3, [r7, #22]
    for(j = 0; j < sizeData; j++)
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	3301      	adds	r3, #1
 8007018:	61bb      	str	r3, [r7, #24]
 800701a:	89fb      	ldrh	r3, [r7, #14]
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	429a      	cmp	r2, r3
 8007020:	dbcb      	blt.n	8006fba <ModbusCreateData+0x132>
    }
//    memcpy(&mb_obj->sdata[i], (uint16_t*)ptr_data + addrData, 2*sizeData);
//    i += 2*sizeData;
    crc = calcCRC(mb_obj->sdata, i);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	33a2      	adds	r3, #162	; 0xa2
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	b292      	uxth	r2, r2
 800702a:	4611      	mov	r1, r2
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff fb59 	bl	80066e4 <calcCRC>
 8007032:	4603      	mov	r3, r0
 8007034:	81bb      	strh	r3, [r7, #12]
    mb_obj->sdata[i++] = (crc >> 8) & 0xFF;
 8007036:	89bb      	ldrh	r3, [r7, #12]
 8007038:	0a1b      	lsrs	r3, r3, #8
 800703a:	b299      	uxth	r1, r3
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	61fa      	str	r2, [r7, #28]
 8007042:	b2c9      	uxtb	r1, r1
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4413      	add	r3, r2
 8007048:	460a      	mov	r2, r1
 800704a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    mb_obj->sdata[i++] = crc & 0xFF;
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	61fa      	str	r2, [r7, #28]
 8007054:	89ba      	ldrh	r2, [r7, #12]
 8007056:	b2d1      	uxtb	r1, r2
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	4413      	add	r3, r2
 800705c:	460a      	mov	r2, r1
 800705e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    if(mb_obj->modbus.SetReDe != NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <ModbusCreateData+0x1ea>
    	mb_obj->modbus.SetReDe(1);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	2001      	movs	r0, #1
 8007070:	4798      	blx	r3
    mb_obj->sSend = i;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	69fa      	ldr	r2, [r7, #28]
 8007076:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    mb_obj->RcvTask = &ModbusSendData;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a08      	ldr	r2, [pc, #32]	; (80070a0 <ModbusCreateData+0x218>)
 800707e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    mb_obj->tick = 0;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    mb_obj->scount = 0;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8007092:	3724      	adds	r7, #36	; 0x24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd90      	pop	{r4, r7, pc}
 8007098:	08006b81 	.word	0x08006b81
 800709c:	200007d8 	.word	0x200007d8
 80070a0:	080070a5 	.word	0x080070a5

080070a4 <ModbusSendData>:

static void ModbusSendData(m_modbus_obj *mb_obj) // Task 1
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
    if(mb_obj->tick >= TXTIMEOUT)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80070b2:	2b09      	cmp	r3, #9
 80070b4:	dd13      	ble.n	80070de <ModbusSendData+0x3a>
    {
    	if(mb_obj->modbus.SetReDe != NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d003      	beq.n	80070c6 <ModbusSendData+0x22>
    		mb_obj->modbus.SetReDe(0);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2000      	movs	r0, #0
 80070c4:	4798      	blx	r3
        mb_obj->RcvTask = &ModbusGetData;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a07      	ldr	r2, [pc, #28]	; (80070e8 <ModbusSendData+0x44>)
 80070ca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        mb_obj->scount = 0;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        mb_obj->tick = 0;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    }
}
 80070de:	bf00      	nop
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	08006b81 	.word	0x08006b81

080070ec <ModbusSetReDe>:

static void ModbusSetReDe(uint32_t level)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
	if(1 == level)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d103      	bne.n	8007102 <ModbusSetReDe+0x16>
		Pin_Func_TurnOn(CONTROL_485);
 80070fa:	2004      	movs	r0, #4
 80070fc:	f000 fac6 	bl	800768c <Pin_Func_TurnOn>
	else
		Pin_Func_TurnOff(CONTROL_485);
}
 8007100:	e002      	b.n	8007108 <ModbusSetReDe+0x1c>
		Pin_Func_TurnOff(CONTROL_485);
 8007102:	2004      	movs	r0, #4
 8007104:	f000 faec 	bl	80076e0 <Pin_Func_TurnOff>
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <create_modbus>:

modbus_master_obj* create_modbus(uint16_t id, serial_obj *serial)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	6039      	str	r1, [r7, #0]
 800711a:	80fb      	strh	r3, [r7, #6]
	if(current_index_modbus_dev >= MAX_MODBUS_DEV)
 800711c:	4b1a      	ldr	r3, [pc, #104]	; (8007188 <create_modbus+0x78>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b01      	cmp	r3, #1
 8007122:	dd00      	ble.n	8007126 <create_modbus+0x16>
	{
		while(1); // no modbus more than
 8007124:	e7fe      	b.n	8007124 <create_modbus+0x14>
	}
	m_modbus_obj *modbus = malloc(sizeof(m_modbus_obj));
 8007126:	f44f 70a6 	mov.w	r0, #332	; 0x14c
 800712a:	f001 fe8b 	bl	8008e44 <malloc>
 800712e:	4603      	mov	r3, r0
 8007130:	60fb      	str	r3, [r7, #12]
	memset(modbus, 0, sizeof(m_modbus_obj));
 8007132:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8007136:	2100      	movs	r1, #0
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f001 ff3f 	bl	8008fbc <memset>
	if(modbus != NULL)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01c      	beq.n	800717e <create_modbus+0x6e>
	{
		modbus->modbus.id = id;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	88fa      	ldrh	r2, [r7, #6]
 8007148:	801a      	strh	r2, [r3, #0]
		modbus->modbus.serial_port = serial;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	605a      	str	r2, [r3, #4]
		modbus_list[current_index_modbus_dev] = modbus;
 8007150:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <create_modbus+0x78>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	490d      	ldr	r1, [pc, #52]	; (800718c <create_modbus+0x7c>)
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ModbusResetValue(modbus);
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff fcdb 	bl	8006b18 <ModbusResetValue>
		current_index_modbus_dev++;
 8007162:	4b09      	ldr	r3, [pc, #36]	; (8007188 <create_modbus+0x78>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3301      	adds	r3, #1
 8007168:	4a07      	ldr	r2, [pc, #28]	; (8007188 <create_modbus+0x78>)
 800716a:	6013      	str	r3, [r2, #0]
		modbus->RcvTask = &ModbusGetData;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4a08      	ldr	r2, [pc, #32]	; (8007190 <create_modbus+0x80>)
 8007170:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
		modbus->modbus.SetReDe = ModbusSetReDe;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4a07      	ldr	r2, [pc, #28]	; (8007194 <create_modbus+0x84>)
 8007178:	609a      	str	r2, [r3, #8]
		return &(modbus->modbus);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	e000      	b.n	8007180 <create_modbus+0x70>
	}
	return NULL;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	20000820 	.word	0x20000820
 800718c:	20000824 	.word	0x20000824
 8007190:	08006b81 	.word	0x08006b81
 8007194:	080070ed 	.word	0x080070ed

08007198 <Modbus1kHz>:


void Modbus1kHz(void)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
	int index_modbus_dev = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	607b      	str	r3, [r7, #4]
	for(index_modbus_dev = 0; index_modbus_dev < current_index_modbus_dev; index_modbus_dev++)
 80071a2:	2300      	movs	r3, #0
 80071a4:	607b      	str	r3, [r7, #4]
 80071a6:	e00e      	b.n	80071c6 <Modbus1kHz+0x2e>
	{
		m_modbus_obj *modbus = modbus_list[index_modbus_dev];
 80071a8:	4a0d      	ldr	r2, [pc, #52]	; (80071e0 <Modbus1kHz+0x48>)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b0:	603b      	str	r3, [r7, #0]
		modbus->tick++;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	for(index_modbus_dev = 0; index_modbus_dev < current_index_modbus_dev; index_modbus_dev++)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3301      	adds	r3, #1
 80071c4:	607b      	str	r3, [r7, #4]
 80071c6:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <Modbus1kHz+0x4c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	dbeb      	blt.n	80071a8 <Modbus1kHz+0x10>
	}
}
 80071d0:	bf00      	nop
 80071d2:	bf00      	nop
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	20000824 	.word	0x20000824
 80071e4:	20000820 	.word	0x20000820

080071e8 <ModbusBackground>:

void ModbusBackground(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
	int index_modbus_dev = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	60fb      	str	r3, [r7, #12]
	for(index_modbus_dev = 0; index_modbus_dev < current_index_modbus_dev; index_modbus_dev++)
 80071f2:	2300      	movs	r3, #0
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	e07a      	b.n	80072ee <ModbusBackground+0x106>
	{
        if(modbus_list[index_modbus_dev]->RcvTask != NULL)
 80071f8:	4a43      	ldr	r2, [pc, #268]	; (8007308 <ModbusBackground+0x120>)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007200:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <ModbusBackground+0x38>
        {
        	modbus_list[index_modbus_dev]->RcvTask(modbus_list[index_modbus_dev]);
 8007208:	4a3f      	ldr	r2, [pc, #252]	; (8007308 <ModbusBackground+0x120>)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007210:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8007214:	493c      	ldr	r1, [pc, #240]	; (8007308 <ModbusBackground+0x120>)
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800721c:	4610      	mov	r0, r2
 800721e:	4798      	blx	r3
        }

        m_modbus_obj *modbus = modbus_list[index_modbus_dev];
 8007220:	4a39      	ldr	r2, [pc, #228]	; (8007308 <ModbusBackground+0x120>)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007228:	60bb      	str	r3, [r7, #8]
		SerialHandle(modbus->modbus.serial_port);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fc2a 	bl	8007a88 <SerialHandle>
		while(modbus->modbus.serial_port->length_received > 0 && modbus->RcvTask == (void*)&ModbusGetData)	 // check if a char has been received
 8007234:	e020      	b.n	8007278 <ModbusBackground+0x90>
		{
			if(modbus->rcount >= RXSIZE)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800723c:	2b95      	cmp	r3, #149	; 0x95
 800723e:	dd03      	ble.n	8007248 <ModbusBackground+0x60>
			{
				modbus->rcount = 0;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			}
			SerialReadBuf(modbus->modbus.serial_port,
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	6858      	ldr	r0, [r3, #4]
							&(modbus->rdata[modbus->rcount]),
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
			SerialReadBuf(modbus->modbus.serial_port,
 8007252:	3308      	adds	r3, #8
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	4413      	add	r3, r2
 8007258:	3304      	adds	r3, #4
 800725a:	2201      	movs	r2, #1
 800725c:	4619      	mov	r1, r3
 800725e:	f000 fd03 	bl	8007c68 <SerialReadBuf>
							1);
			modbus->rcount++;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			modbus->tick = 0;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		while(modbus->modbus.serial_port->length_received > 0 && modbus->RcvTask == (void*)&ModbusGetData)	 // check if a char has been received
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	8a1b      	ldrh	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <ModbusBackground+0xa6>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8007288:	4a20      	ldr	r2, [pc, #128]	; (800730c <ModbusBackground+0x124>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d0d3      	beq.n	8007236 <ModbusBackground+0x4e>
		}
		send:
 800728e:	bf00      	nop
		if(modbus->scount < modbus->sSend && modbus->RcvTask == (void*)&ModbusSendData)
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800729c:	429a      	cmp	r2, r3
 800729e:	da23      	bge.n	80072e8 <ModbusBackground+0x100>
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80072a6:	4a1a      	ldr	r2, [pc, #104]	; (8007310 <ModbusBackground+0x128>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d11d      	bne.n	80072e8 <ModbusBackground+0x100>
		{
			bool ret;
			ret = SerialSendBuf(modbus->modbus.serial_port, &modbus->sdata[modbus->scount], 1);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	6858      	ldr	r0, [r3, #4]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80072b6:	33a0      	adds	r3, #160	; 0xa0
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	4413      	add	r3, r2
 80072bc:	3302      	adds	r3, #2
 80072be:	2201      	movs	r2, #1
 80072c0:	4619      	mov	r1, r3
 80072c2:	f000 fcab 	bl	8007c1c <SerialSendBuf>
 80072c6:	4603      	mov	r3, r0
 80072c8:	71fb      	strb	r3, [r7, #7]
			if(ret == true)
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d015      	beq.n	80072fc <ModbusBackground+0x114>
			{
				modbus->tick = 0;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
				modbus->scount++;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				goto send;
 80072e6:	e7d3      	b.n	8007290 <ModbusBackground+0xa8>
	for(index_modbus_dev = 0; index_modbus_dev < current_index_modbus_dev; index_modbus_dev++)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3301      	adds	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	4b09      	ldr	r3, [pc, #36]	; (8007314 <ModbusBackground+0x12c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	f6ff af7f 	blt.w	80071f8 <ModbusBackground+0x10>
				break;
			}
		}

	}
}
 80072fa:	e000      	b.n	80072fe <ModbusBackground+0x116>
				break;
 80072fc:	bf00      	nop
}
 80072fe:	bf00      	nop
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000824 	.word	0x20000824
 800730c:	08006b81 	.word	0x08006b81
 8007310:	080070a5 	.word	0x080070a5
 8007314:	20000820 	.word	0x20000820

08007318 <ModbusAddVariable>:

void ModbusAddVariable(modbus_master_obj *obj, uint16_t addr, void *data, uint16_t len)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	461a      	mov	r2, r3
 8007324:	460b      	mov	r3, r1
 8007326:	817b      	strh	r3, [r7, #10]
 8007328:	4613      	mov	r3, r2
 800732a:	813b      	strh	r3, [r7, #8]
    if(current_index_list_var >= MAX_VAR_SHOW) return;
 800732c:	4b17      	ldr	r3, [pc, #92]	; (800738c <ModbusAddVariable+0x74>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b05      	cmp	r3, #5
 8007332:	dc25      	bgt.n	8007380 <ModbusAddVariable+0x68>
    data_list[current_index_list_var].start_addr = addr;
 8007334:	4b15      	ldr	r3, [pc, #84]	; (800738c <ModbusAddVariable+0x74>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	4915      	ldr	r1, [pc, #84]	; (8007390 <ModbusAddVariable+0x78>)
 800733a:	4613      	mov	r3, r2
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	440b      	add	r3, r1
 8007344:	897a      	ldrh	r2, [r7, #10]
 8007346:	801a      	strh	r2, [r3, #0]
    data_list[current_index_list_var].data = data;
 8007348:	4b10      	ldr	r3, [pc, #64]	; (800738c <ModbusAddVariable+0x74>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	4910      	ldr	r1, [pc, #64]	; (8007390 <ModbusAddVariable+0x78>)
 800734e:	4613      	mov	r3, r2
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	3304      	adds	r3, #4
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	601a      	str	r2, [r3, #0]
    data_list[current_index_list_var].len = len;
 800735e:	4b0b      	ldr	r3, [pc, #44]	; (800738c <ModbusAddVariable+0x74>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	490b      	ldr	r1, [pc, #44]	; (8007390 <ModbusAddVariable+0x78>)
 8007364:	4613      	mov	r3, r2
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	3308      	adds	r3, #8
 8007370:	893a      	ldrh	r2, [r7, #8]
 8007372:	801a      	strh	r2, [r3, #0]
    current_index_list_var++;
 8007374:	4b05      	ldr	r3, [pc, #20]	; (800738c <ModbusAddVariable+0x74>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3301      	adds	r3, #1
 800737a:	4a04      	ldr	r2, [pc, #16]	; (800738c <ModbusAddVariable+0x74>)
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	e000      	b.n	8007382 <ModbusAddVariable+0x6a>
    if(current_index_list_var >= MAX_VAR_SHOW) return;
 8007380:	bf00      	nop
}
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	200007d4 	.word	0x200007d4
 8007390:	200007d8 	.word	0x200007d8

08007394 <EnableTimerChanel>:
__STATIC_INLINE void DisableTimerChanel(timer_advance_obj_t *advancetimerobjX)
{
	CLEAR_BIT(advancetimerobjX->advtimer->BDTR, TIM_BDTR_MOE);
}
__STATIC_INLINE void EnableTimerChanel(timer_advance_obj_t *advancetimerobjX)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->BDTR, TIM_BDTR_MOE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073aa:	645a      	str	r2, [r3, #68]	; 0x44
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <EnableCH1NOutput>:
{
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1);
}

__STATIC_INLINE void EnableCH1NOutput(timer_advance_obj_t *advancetimerobjX)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1N);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	6a1a      	ldr	r2, [r3, #32]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f042 0204 	orr.w	r2, r2, #4
 80073ce:	621a      	str	r2, [r3, #32]
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <EnableCH2NOutput>:
{
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2);
}

__STATIC_INLINE void EnableCH2NOutput(timer_advance_obj_t *advancetimerobjX)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2N);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	6a1a      	ldr	r2, [r3, #32]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f2:	621a      	str	r2, [r3, #32]
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <DisableCH1NOutput>:
{
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1);
}

__STATIC_INLINE void DisableCH1NOutput(timer_advance_obj_t *advancetimerobjX)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1N);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	6a1a      	ldr	r2, [r3, #32]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f022 0204 	bic.w	r2, r2, #4
 8007416:	621a      	str	r2, [r3, #32]
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <DisableCH2NOutput>:
{
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2);
}

__STATIC_INLINE void DisableCH2NOutput(timer_advance_obj_t *advancetimerobjX)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2N);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	6a1a      	ldr	r2, [r3, #32]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800743a:	621a      	str	r2, [r3, #32]
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <PwmWindBuckEnable>:
void PwmWindBuckBoostDisableAllOutput(timer_advance_obj_t *timeradvanceX){
	DisableTimerChanel(timeradvanceX);
	DisableCH1NAndCH2NOutputs(timeradvanceX);
}

void PwmWindBuckEnable(timer_advance_obj_t *timeradvanceX){
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	EnableTimerChanel(timeradvanceX);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff ff9f 	bl	8007394 <EnableTimerChanel>
	EnableCH2NOutput(timeradvanceX);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff ffc0 	bl	80073dc <EnableCH2NOutput>
}
 800745c:	bf00      	nop
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <PwmWindBoostEnable>:

void PwmWindBoostEnable(timer_advance_obj_t *timeradvanceX){
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
	EnableTimerChanel(timeradvanceX);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7ff ff91 	bl	8007394 <EnableTimerChanel>
	EnableCH1NOutput(timeradvanceX);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7ff ffa0 	bl	80073b8 <EnableCH1NOutput>
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <PwmWindBuckDisable>:

void PwmWindBuckDisable(timer_advance_obj_t *timeradvanceX)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
	DisableCH2NOutput(timeradvanceX);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff ffcb 	bl	8007424 <DisableCH2NOutput>
}
 800748e:	bf00      	nop
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <PwmWindBoostDisable>:
void PwmWindBoostDisable(timer_advance_obj_t *timeradvanceX)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
	DisableCH1NOutput(timeradvanceX);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff ffae 	bl	8007400 <DisableCH1NOutput>
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <DisableTimerChanel>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->BDTR, TIM_BDTR_MOE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074c2:	645a      	str	r2, [r3, #68]	; 0x44
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <EnableTimerChanel>:
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->BDTR, TIM_BDTR_MOE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074e6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <EnableCH2Output>:
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	6a1a      	ldr	r2, [r3, #32]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f042 0210 	orr.w	r2, r2, #16
 800750a:	621a      	str	r2, [r3, #32]
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <DisableCH2Output>:
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	6a1a      	ldr	r2, [r3, #32]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f022 0210 	bic.w	r2, r2, #16
 800752e:	621a      	str	r2, [r3, #32]
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <PwmWindDumpLoadEnableOutput>:
//	TIM_ClearFlag_CC2(timeradvanceX);
//	TIM_EnableIT_CC2(timeradvanceX);

}
void PwmWindDumpLoadEnableOutput(timer_advance_obj_t *timeradvanceX)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
	EnableTimerChanel(timeradvanceX);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff ffc3 	bl	80074d0 <EnableTimerChanel>
	EnableCH2Output(timeradvanceX);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff ffd2 	bl	80074f4 <EnableCH2Output>
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <PwmWindDumpLoadDisableOutput>:

void PwmWindDumpLoadDisableOutput(timer_advance_obj_t *timeradvanceX)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
	DisableTimerChanel(timeradvanceX);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff ffa3 	bl	80074ac <DisableTimerChanel>
	DisableCH2Output(timeradvanceX);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff ffd6 	bl	8007518 <DisableCH2Output>

}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <Pin_Func_Init>:
		{BUZZ	, 				PORT_A, 		PIN_12, 		OUTPUT, 		GPIO_LOW		},
		{CONTROL_485, 			PORT_B, 		PIN_12, 		OUTPUT, 		GPIO_HIGH		},
};

void Pin_Func_Init(void)
{
 8007574:	b590      	push	{r4, r7, lr}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
    pin_func_id_e id = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	71fb      	strb	r3, [r7, #7]
    for (id = 0; id < PIN_FUNC_MAX; id++)
 800757e:	2300      	movs	r3, #0
 8007580:	71fb      	strb	r3, [r7, #7]
 8007582:	e078      	b.n	8007676 <Pin_Func_Init+0x102>
    {
        if (pin_func_list[id].port_id != PORT_MAX)
 8007584:	79fa      	ldrb	r2, [r7, #7]
 8007586:	4940      	ldr	r1, [pc, #256]	; (8007688 <Pin_Func_Init+0x114>)
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	440b      	add	r3, r1
 8007590:	3301      	adds	r3, #1
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b07      	cmp	r3, #7
 8007596:	d06b      	beq.n	8007670 <Pin_Func_Init+0xfc>
        {
            if (pin_func_list[id].dir == OUTPUT)
 8007598:	79fa      	ldrb	r2, [r7, #7]
 800759a:	493b      	ldr	r1, [pc, #236]	; (8007688 <Pin_Func_Init+0x114>)
 800759c:	4613      	mov	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	440b      	add	r3, r1
 80075a4:	3303      	adds	r3, #3
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d12e      	bne.n	800760a <Pin_Func_Init+0x96>
            {
                GPIO_SetPinOut(pin_func_list[id].port_id, pin_func_list[id].pin_id);
 80075ac:	79fa      	ldrb	r2, [r7, #7]
 80075ae:	4936      	ldr	r1, [pc, #216]	; (8007688 <Pin_Func_Init+0x114>)
 80075b0:	4613      	mov	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	440b      	add	r3, r1
 80075b8:	3301      	adds	r3, #1
 80075ba:	7818      	ldrb	r0, [r3, #0]
 80075bc:	79fa      	ldrb	r2, [r7, #7]
 80075be:	4932      	ldr	r1, [pc, #200]	; (8007688 <Pin_Func_Init+0x114>)
 80075c0:	4613      	mov	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	440b      	add	r3, r1
 80075c8:	3302      	adds	r3, #2
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	4619      	mov	r1, r3
 80075ce:	f000 f91d 	bl	800780c <GPIO_SetPinOut>
                GPIO_WritePin(pin_func_list[id].port_id, pin_func_list[id].pin_id, pin_func_list[id].default_level);
 80075d2:	79fa      	ldrb	r2, [r7, #7]
 80075d4:	492c      	ldr	r1, [pc, #176]	; (8007688 <Pin_Func_Init+0x114>)
 80075d6:	4613      	mov	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	440b      	add	r3, r1
 80075de:	3301      	adds	r3, #1
 80075e0:	7818      	ldrb	r0, [r3, #0]
 80075e2:	79fa      	ldrb	r2, [r7, #7]
 80075e4:	4928      	ldr	r1, [pc, #160]	; (8007688 <Pin_Func_Init+0x114>)
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	440b      	add	r3, r1
 80075ee:	3302      	adds	r3, #2
 80075f0:	7819      	ldrb	r1, [r3, #0]
 80075f2:	79fa      	ldrb	r2, [r7, #7]
 80075f4:	4c24      	ldr	r4, [pc, #144]	; (8007688 <Pin_Func_Init+0x114>)
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	4423      	add	r3, r4
 80075fe:	3304      	adds	r3, #4
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	f000 f950 	bl	80078a8 <GPIO_WritePin>
 8007608:	e032      	b.n	8007670 <Pin_Func_Init+0xfc>
            }
            else if (pin_func_list[id].dir == INPUT_PULLDOWN)
 800760a:	79fa      	ldrb	r2, [r7, #7]
 800760c:	491e      	ldr	r1, [pc, #120]	; (8007688 <Pin_Func_Init+0x114>)
 800760e:	4613      	mov	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	440b      	add	r3, r1
 8007616:	3303      	adds	r3, #3
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d114      	bne.n	8007648 <Pin_Func_Init+0xd4>
            {
                GPIO_SetPinIn(pin_func_list[id].port_id, pin_func_list[id].pin_id, PULL_DOWN);
 800761e:	79fa      	ldrb	r2, [r7, #7]
 8007620:	4919      	ldr	r1, [pc, #100]	; (8007688 <Pin_Func_Init+0x114>)
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	440b      	add	r3, r1
 800762a:	3301      	adds	r3, #1
 800762c:	7818      	ldrb	r0, [r3, #0]
 800762e:	79fa      	ldrb	r2, [r7, #7]
 8007630:	4915      	ldr	r1, [pc, #84]	; (8007688 <Pin_Func_Init+0x114>)
 8007632:	4613      	mov	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	440b      	add	r3, r1
 800763a:	3302      	adds	r3, #2
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2202      	movs	r2, #2
 8007640:	4619      	mov	r1, r3
 8007642:	f000 f909 	bl	8007858 <GPIO_SetPinIn>
 8007646:	e013      	b.n	8007670 <Pin_Func_Init+0xfc>
            }
            else
                GPIO_SetPinIn(pin_func_list[id].port_id, pin_func_list[id].pin_id, PULL_UP);
 8007648:	79fa      	ldrb	r2, [r7, #7]
 800764a:	490f      	ldr	r1, [pc, #60]	; (8007688 <Pin_Func_Init+0x114>)
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	440b      	add	r3, r1
 8007654:	3301      	adds	r3, #1
 8007656:	7818      	ldrb	r0, [r3, #0]
 8007658:	79fa      	ldrb	r2, [r7, #7]
 800765a:	490b      	ldr	r1, [pc, #44]	; (8007688 <Pin_Func_Init+0x114>)
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	440b      	add	r3, r1
 8007664:	3302      	adds	r3, #2
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2201      	movs	r2, #1
 800766a:	4619      	mov	r1, r3
 800766c:	f000 f8f4 	bl	8007858 <GPIO_SetPinIn>
    for (id = 0; id < PIN_FUNC_MAX; id++)
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	3301      	adds	r3, #1
 8007674:	71fb      	strb	r3, [r7, #7]
 8007676:	79fb      	ldrb	r3, [r7, #7]
 8007678:	2b04      	cmp	r3, #4
 800767a:	d983      	bls.n	8007584 <Pin_Func_Init+0x10>
        }
    }
}
 800767c:	bf00      	nop
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	bd90      	pop	{r4, r7, pc}
 8007686:	bf00      	nop
 8007688:	2000000c 	.word	0x2000000c

0800768c <Pin_Func_TurnOn>:

void Pin_Func_TurnOn(pin_func_id_e id)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	4603      	mov	r3, r0
 8007694:	71fb      	strb	r3, [r7, #7]
    if (pin_func_list[id].port_id < PORT_MAX)
 8007696:	79fa      	ldrb	r2, [r7, #7]
 8007698:	4910      	ldr	r1, [pc, #64]	; (80076dc <Pin_Func_TurnOn+0x50>)
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	440b      	add	r3, r1
 80076a2:	3301      	adds	r3, #1
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	2b06      	cmp	r3, #6
 80076a8:	d813      	bhi.n	80076d2 <Pin_Func_TurnOn+0x46>
    {
        GPIO_WritePin(pin_func_list[id].port_id, pin_func_list[id].pin_id, GPIO_HIGH);
 80076aa:	79fa      	ldrb	r2, [r7, #7]
 80076ac:	490b      	ldr	r1, [pc, #44]	; (80076dc <Pin_Func_TurnOn+0x50>)
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	440b      	add	r3, r1
 80076b6:	3301      	adds	r3, #1
 80076b8:	7818      	ldrb	r0, [r3, #0]
 80076ba:	79fa      	ldrb	r2, [r7, #7]
 80076bc:	4907      	ldr	r1, [pc, #28]	; (80076dc <Pin_Func_TurnOn+0x50>)
 80076be:	4613      	mov	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	440b      	add	r3, r1
 80076c6:	3302      	adds	r3, #2
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2201      	movs	r2, #1
 80076cc:	4619      	mov	r1, r3
 80076ce:	f000 f8eb 	bl	80078a8 <GPIO_WritePin>
    }
}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	2000000c 	.word	0x2000000c

080076e0 <Pin_Func_TurnOff>:

void Pin_Func_TurnOff(pin_func_id_e id)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	71fb      	strb	r3, [r7, #7]
    if (pin_func_list[id].port_id < PORT_MAX)
 80076ea:	79fa      	ldrb	r2, [r7, #7]
 80076ec:	4910      	ldr	r1, [pc, #64]	; (8007730 <Pin_Func_TurnOff+0x50>)
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	440b      	add	r3, r1
 80076f6:	3301      	adds	r3, #1
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b06      	cmp	r3, #6
 80076fc:	d813      	bhi.n	8007726 <Pin_Func_TurnOff+0x46>
    {
        GPIO_WritePin(pin_func_list[id].port_id, pin_func_list[id].pin_id, GPIO_LOW);
 80076fe:	79fa      	ldrb	r2, [r7, #7]
 8007700:	490b      	ldr	r1, [pc, #44]	; (8007730 <Pin_Func_TurnOff+0x50>)
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	440b      	add	r3, r1
 800770a:	3301      	adds	r3, #1
 800770c:	7818      	ldrb	r0, [r3, #0]
 800770e:	79fa      	ldrb	r2, [r7, #7]
 8007710:	4907      	ldr	r1, [pc, #28]	; (8007730 <Pin_Func_TurnOff+0x50>)
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	440b      	add	r3, r1
 800771a:	3302      	adds	r3, #2
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	2200      	movs	r2, #0
 8007720:	4619      	mov	r1, r3
 8007722:	f000 f8c1 	bl	80078a8 <GPIO_WritePin>
    }
}
 8007726:	bf00      	nop
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	2000000c 	.word	0x2000000c

08007734 <Signal_Init>:

//static double Convert_ADC_To_Val(uint16_t adc_val){
//	return 1;
//}

void Signal_Init(void){
 8007734:	b590      	push	{r4, r7, lr}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	80fb      	strh	r3, [r7, #6]
	for(i = 0; i < ADC_ID_MAX; i++){
 800773e:	2300      	movs	r3, #0
 8007740:	80fb      	strh	r3, [r7, #6]
 8007742:	e00c      	b.n	800775e <Signal_Init+0x2a>
		s_signal_obj[i] = ADC_DMA_CREATE(i);
 8007744:	88fb      	ldrh	r3, [r7, #6]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	88fc      	ldrh	r4, [r7, #6]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 f812 	bl	8007774 <ADC_DMA_CREATE>
 8007750:	4603      	mov	r3, r0
 8007752:	4a07      	ldr	r2, [pc, #28]	; (8007770 <Signal_Init+0x3c>)
 8007754:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(i = 0; i < ADC_ID_MAX; i++){
 8007758:	88fb      	ldrh	r3, [r7, #6]
 800775a:	3301      	adds	r3, #1
 800775c:	80fb      	strh	r3, [r7, #6]
 800775e:	88fb      	ldrh	r3, [r7, #6]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d9ef      	bls.n	8007744 <Signal_Init+0x10>
	}
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	bd90      	pop	{r4, r7, pc}
 800776e:	bf00      	nop
 8007770:	2000082c 	.word	0x2000082c

08007774 <ADC_DMA_CREATE>:
static adc_id_inf_t adc_id_inf[2] = {
	{ADC_ID_1, &hadc1, 1, {{ ADC_CH_1, RANK_1}, { ADC_CH_2, RANK_2}, {ADC_CH_3}, {ADC_CH_4}, {ADC_CH_5, RANK_3}, {ADC_CH_6}, {ADC_CH_7}, {ADC_CH_8},{ADC_CH_9},{ADC_CH_10},{ADC_CH_11},{ADC_CH_12},{ADC_CH_13},{ADC_CH_14},{ADC_CH_15,RANK_4},{ADC_CH_16},{ADC_CH_17} }},
	{ADC_ID_2, &hadc2, 1, {{ ADC_CH_1}, { ADC_CH_2}, {ADC_CH_3, RANK_1}, {ADC_CH_4, RANK_2}, {ADC_CH_5}, {ADC_CH_6}, {ADC_CH_7}, {ADC_CH_8},{ADC_CH_9},{ADC_CH_10},{ADC_CH_11},{ADC_CH_12},{ADC_CH_13, RANK_3},{ADC_CH_14},{ADC_CH_15},{ADC_CH_16},{ADC_CH_17,RANK_4} }},
};

adc_obj_t* ADC_DMA_CREATE(ADC_ID_e id){
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	71fb      	strb	r3, [r7, #7]
	uint16_t num_adc_val = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	82fb      	strh	r3, [r7, #22]
	ADC_HandleTypeDef* hadc = adc_id_inf[id].hadc;
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	4a20      	ldr	r2, [pc, #128]	; (8007808 <ADC_DMA_CREATE+0x94>)
 8007786:	2194      	movs	r1, #148	; 0x94
 8007788:	fb01 f303 	mul.w	r3, r1, r3
 800778c:	4413      	add	r3, r2
 800778e:	3304      	adds	r3, #4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	613b      	str	r3, [r7, #16]

	adc_obj_t* adc_obj = malloc(sizeof(adc_obj_t));
 8007794:	200e      	movs	r0, #14
 8007796:	f001 fb55 	bl	8008e44 <malloc>
 800779a:	4603      	mov	r3, r0
 800779c:	60fb      	str	r3, [r7, #12]
	memset(adc_obj, 0, sizeof(adc_obj_t));
 800779e:	220e      	movs	r2, #14
 80077a0:	2100      	movs	r1, #0
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f001 fc0a 	bl	8008fbc <memset>

	if(NULL == adc_obj){
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d104      	bne.n	80077b8 <ADC_DMA_CREATE+0x44>
		free(adc_obj);
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f001 fb50 	bl	8008e54 <free>
		return NULL;
 80077b4:	2300      	movs	r3, #0
 80077b6:	e023      	b.n	8007800 <ADC_DMA_CREATE+0x8c>
	}

	adc_obj->adc_id = id;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	79fa      	ldrb	r2, [r7, #7]
 80077bc:	721a      	strb	r2, [r3, #8]
	adc_obj->sample_num = adc_id_inf[id].sample_num;
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	4a11      	ldr	r2, [pc, #68]	; (8007808 <ADC_DMA_CREATE+0x94>)
 80077c2:	2194      	movs	r1, #148	; 0x94
 80077c4:	fb01 f303 	mul.w	r3, r1, r3
 80077c8:	4413      	add	r3, r2
 80077ca:	3308      	adds	r3, #8
 80077cc:	881a      	ldrh	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	815a      	strh	r2, [r3, #10]
	adc_obj->ch_num = hadc->Init.NbrOfConversion;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	819a      	strh	r2, [r3, #12]
	num_adc_val = adc_obj->sample_num * adc_obj->ch_num;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	895a      	ldrh	r2, [r3, #10]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	899b      	ldrh	r3, [r3, #12]
 80077e4:	fb12 f303 	smulbb	r3, r2, r3
 80077e8:	82fb      	strh	r3, [r7, #22]

	HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED);
 80077ea:	217f      	movs	r1, #127	; 0x7f
 80077ec:	6938      	ldr	r0, [r7, #16]
 80077ee:	f7fb fb73 	bl	8002ed8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t *)&adc_obj->val, num_adc_val);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8afa      	ldrh	r2, [r7, #22]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6938      	ldr	r0, [r7, #16]
 80077fa:	f7fa fd03 	bl	8002204 <HAL_ADC_Start_DMA>
	return adc_obj;
 80077fe:	68fb      	ldr	r3, [r7, #12]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	200000c8 	.word	0x200000c8

0800780c <GPIO_SetPinOut>:
		{PORT_E, GPIOE},
		{PORT_F, GPIOF},
		{PORT_G, GPIOG},
};

void GPIO_SetPinOut(gpio_port_id port_id, gpio_pin_id pin_id){
 800780c:	b580      	push	{r7, lr}
 800780e:	b088      	sub	sp, #32
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	460a      	mov	r2, r1
 8007816:	71fb      	strb	r3, [r7, #7]
 8007818:	4613      	mov	r3, r2
 800781a:	71bb      	strb	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;   /*!< Specifies the operating mode for the selected pins.
 800781c:	2301      	movs	r3, #1
 800781e:	613b      	str	r3, [r7, #16]
                           	   	   	   	   	   	   	   This parameter can be a value of @ref GPIO_mode */
	GPIO_InitStruct.Pin = s_gpio_pin[pin_id].pin; /*!< Specifies the GPIO pins to be configured.
 8007820:	79bb      	ldrb	r3, [r7, #6]
 8007822:	4a0b      	ldr	r2, [pc, #44]	; (8007850 <GPIO_SetPinOut+0x44>)
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	4413      	add	r3, r2
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	60fb      	str	r3, [r7, #12]
                           	   	   	   	   	   	   	   This parameter can be any value of @ref GPIO_pins */
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; /*!< Specifies the speed for the selected pins.
 800782c:	2302      	movs	r3, #2
 800782e:	61bb      	str	r3, [r7, #24]
                           	   	   	   	   	   	   	   This parameter can be a value of @ref GPIO_speed */
	HAL_GPIO_Init(s_gpio_port[port_id].port, &GPIO_InitStruct);
 8007830:	79fb      	ldrb	r3, [r7, #7]
 8007832:	4a08      	ldr	r2, [pc, #32]	; (8007854 <GPIO_SetPinOut+0x48>)
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	4413      	add	r3, r2
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f107 020c 	add.w	r2, r7, #12
 800783e:	4611      	mov	r1, r2
 8007840:	4618      	mov	r0, r3
 8007842:	f7fb fef7 	bl	8003634 <HAL_GPIO_Init>
	return;
 8007846:	bf00      	nop
}
 8007848:	3720      	adds	r7, #32
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	200001f0 	.word	0x200001f0
 8007854:	20000270 	.word	0x20000270

08007858 <GPIO_SetPinIn>:

void GPIO_SetPinIn(gpio_port_id port_id, gpio_pin_id pin_id, uint32_t PULLUPDOWN){
 8007858:	b580      	push	{r7, lr}
 800785a:	b088      	sub	sp, #32
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	603a      	str	r2, [r7, #0]
 8007862:	71fb      	strb	r3, [r7, #7]
 8007864:	460b      	mov	r3, r1
 8007866:	71bb      	strb	r3, [r7, #6]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;      	/*!< Input Floating Mode                   	*/
 8007868:	2300      	movs	r3, #0
 800786a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull  = PULLUPDOWN;				/*!< Input state pull-up or pull-down		*/
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;	/*!< Specifies the speed for the selected pins.
 8007870:	2302      	movs	r3, #2
 8007872:	61bb      	str	r3, [r7, #24]
                           	   	   	   	   	   	   	   This parameter can be a value of @ref GPIO_speed */
	GPIO_InitStruct.Pin = s_gpio_pin[pin_id].pin;
 8007874:	79bb      	ldrb	r3, [r7, #6]
 8007876:	4a0a      	ldr	r2, [pc, #40]	; (80078a0 <GPIO_SetPinIn+0x48>)
 8007878:	00db      	lsls	r3, r3, #3
 800787a:	4413      	add	r3, r2
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(s_gpio_port[port_id].port, &GPIO_InitStruct);
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	4a08      	ldr	r2, [pc, #32]	; (80078a4 <GPIO_SetPinIn+0x4c>)
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	4413      	add	r3, r2
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f107 020c 	add.w	r2, r7, #12
 800788e:	4611      	mov	r1, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f7fb fecf 	bl	8003634 <HAL_GPIO_Init>
	return;
 8007896:	bf00      	nop
}
 8007898:	3720      	adds	r7, #32
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	200001f0 	.word	0x200001f0
 80078a4:	20000270 	.word	0x20000270

080078a8 <GPIO_WritePin>:

void GPIO_WritePin(gpio_port_id port_id, gpio_pin_id pin_id, gpio_state state){
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	4603      	mov	r3, r0
 80078b0:	71fb      	strb	r3, [r7, #7]
 80078b2:	460b      	mov	r3, r1
 80078b4:	71bb      	strb	r3, [r7, #6]
 80078b6:	4613      	mov	r3, r2
 80078b8:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(s_gpio_port[port_id].port, s_gpio_pin[pin_id].pin, state);
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	4a08      	ldr	r2, [pc, #32]	; (80078e0 <GPIO_WritePin+0x38>)
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	4413      	add	r3, r2
 80078c2:	6858      	ldr	r0, [r3, #4]
 80078c4:	79bb      	ldrb	r3, [r7, #6]
 80078c6:	4a07      	ldr	r2, [pc, #28]	; (80078e4 <GPIO_WritePin+0x3c>)
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	4413      	add	r3, r2
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	797a      	ldrb	r2, [r7, #5]
 80078d2:	4619      	mov	r1, r3
 80078d4:	f7fc f830 	bl	8003938 <HAL_GPIO_WritePin>
}
 80078d8:	bf00      	nop
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	20000270 	.word	0x20000270
 80078e4:	200001f0 	.word	0x200001f0

080078e8 <OpenUart2>:


/*=============================================================UART 2=====================================================================*/

static bool OpenUart2(int baudrate)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	huart2.Init.BaudRate = baudrate;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a15      	ldr	r2, [pc, #84]	; (8007948 <OpenUart2+0x60>)
 80078f4:	6053      	str	r3, [r2, #4]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80078f6:	4814      	ldr	r0, [pc, #80]	; (8007948 <OpenUart2+0x60>)
 80078f8:	f7fd f924 	bl	8004b44 <HAL_UART_Init>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <OpenUart2+0x1e>
		return false;
 8007902:	2300      	movs	r3, #0
 8007904:	e01b      	b.n	800793e <OpenUart2+0x56>
#ifdef USE_FIFO
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007906:	2100      	movs	r1, #0
 8007908:	480f      	ldr	r0, [pc, #60]	; (8007948 <OpenUart2+0x60>)
 800790a:	f7fd ff91 	bl	8005830 <HAL_UARTEx_SetTxFifoThreshold>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <OpenUart2+0x30>
	{
	Error_Handler();
 8007914:	f7f9 fcd0 	bl	80012b8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8007918:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800791c:	480a      	ldr	r0, [pc, #40]	; (8007948 <OpenUart2+0x60>)
 800791e:	f7fd ffc5 	bl	80058ac <HAL_UARTEx_SetRxFifoThreshold>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <OpenUart2+0x44>
	{
	Error_Handler();
 8007928:	f7f9 fcc6 	bl	80012b8 <Error_Handler>
	}
	if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800792c:	4806      	ldr	r0, [pc, #24]	; (8007948 <OpenUart2+0x60>)
 800792e:	f7fd ff44 	bl	80057ba <HAL_UARTEx_EnableFifoMode>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <OpenUart2+0x54>
	{
	Error_Handler();
 8007938:	f7f9 fcbe 	bl	80012b8 <Error_Handler>
	}
#else
	HAL_UART_Receive_IT(&huart2, uart2_data_rx_isr_buff, 1);
#endif
	return true;
 800793c:	2301      	movs	r3, #1
}
 800793e:	4618      	mov	r0, r3
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	200006a8 	.word	0x200006a8

0800794c <SendByteUart2>:

static bool SendByteUart2(uint8_t byte)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	ret = HAL_UART_Transmit(&huart2, &byte, 1, 10);
 8007956:	1df9      	adds	r1, r7, #7
 8007958:	230a      	movs	r3, #10
 800795a:	2201      	movs	r2, #1
 800795c:	4807      	ldr	r0, [pc, #28]	; (800797c <SendByteUart2+0x30>)
 800795e:	f7fd f941 	bl	8004be4 <HAL_UART_Transmit>
 8007962:	4603      	mov	r3, r0
 8007964:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <SendByteUart2+0x24>
		return true;
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <SendByteUart2+0x26>
	return false;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	200006a8 	.word	0x200006a8

08007980 <ReceiveByteUart2>:

// unuse funtion ReceiveByteUart1 to read, use HAL_UART_RxCpltCallback interrupt to receive and put to fifo
static bool ReceiveByteUart2(uint8_t *byte)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	ret = HAL_UART_Receive(&huart2, byte, 1, 0);
 8007988:	2300      	movs	r3, #0
 800798a:	2201      	movs	r2, #1
 800798c:	6879      	ldr	r1, [r7, #4]
 800798e:	4807      	ldr	r0, [pc, #28]	; (80079ac <ReceiveByteUart2+0x2c>)
 8007990:	f7fd f9be 	bl	8004d10 <HAL_UART_Receive>
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <ReceiveByteUart2+0x22>
		return true;
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <ReceiveByteUart2+0x24>
	return false;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	200006a8 	.word	0x200006a8

080079b0 <OpenUart3>:

/*=============================================================UART 3=====================================================================*/

static bool OpenUart3(int baudrate)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
	huart3.Init.BaudRate = baudrate;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a15      	ldr	r2, [pc, #84]	; (8007a10 <OpenUart3+0x60>)
 80079bc:	6053      	str	r3, [r2, #4]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80079be:	4814      	ldr	r0, [pc, #80]	; (8007a10 <OpenUart3+0x60>)
 80079c0:	f7fd f8c0 	bl	8004b44 <HAL_UART_Init>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <OpenUart3+0x1e>
		return false;
 80079ca:	2300      	movs	r3, #0
 80079cc:	e01b      	b.n	8007a06 <OpenUart3+0x56>
#ifdef USE_FIFO
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80079ce:	2100      	movs	r1, #0
 80079d0:	480f      	ldr	r0, [pc, #60]	; (8007a10 <OpenUart3+0x60>)
 80079d2:	f7fd ff2d 	bl	8005830 <HAL_UARTEx_SetTxFifoThreshold>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <OpenUart3+0x30>
	{
	Error_Handler();
 80079dc:	f7f9 fc6c 	bl	80012b8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80079e0:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80079e4:	480a      	ldr	r0, [pc, #40]	; (8007a10 <OpenUart3+0x60>)
 80079e6:	f7fd ff61 	bl	80058ac <HAL_UARTEx_SetRxFifoThreshold>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <OpenUart3+0x44>
	{
	Error_Handler();
 80079f0:	f7f9 fc62 	bl	80012b8 <Error_Handler>
	}
	if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 80079f4:	4806      	ldr	r0, [pc, #24]	; (8007a10 <OpenUart3+0x60>)
 80079f6:	f7fd fee0 	bl	80057ba <HAL_UARTEx_EnableFifoMode>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <OpenUart3+0x54>
	{
	Error_Handler();
 8007a00:	f7f9 fc5a 	bl	80012b8 <Error_Handler>
	}
#else
	HAL_UART_Receive_IT(&huart3, uart3_data_rx_isr_buff, 1);
#endif
	return true;
 8007a04:	2301      	movs	r3, #1
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000738 	.word	0x20000738

08007a14 <SendByteUart3>:

static bool SendByteUart3(uint8_t byte)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	ret = HAL_UART_Transmit(&huart3, &byte, 1, 10);
 8007a1e:	1df9      	adds	r1, r7, #7
 8007a20:	230a      	movs	r3, #10
 8007a22:	2201      	movs	r2, #1
 8007a24:	4807      	ldr	r0, [pc, #28]	; (8007a44 <SendByteUart3+0x30>)
 8007a26:	f7fd f8dd 	bl	8004be4 <HAL_UART_Transmit>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <SendByteUart3+0x24>
		return true;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <SendByteUart3+0x26>
	return false;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20000738 	.word	0x20000738

08007a48 <ReceiveByteUart3>:

// unuse funtion ReceiveByteUart1 to read, use HAL_UART_RxCpltCallback interrupt to receive and put to fifo
static bool ReceiveByteUart3(uint8_t *byte)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	if((huart3.Instance->ISR & USART_ISR_RXNE_RXFNE) != 0)
 8007a50:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <ReceiveByteUart3+0x3c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00c      	beq.n	8007a78 <ReceiveByteUart3+0x30>
	{
		ret = HAL_UART_Receive(&huart3, byte, 1, 0);
 8007a5e:	2300      	movs	r3, #0
 8007a60:	2201      	movs	r2, #1
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	4807      	ldr	r0, [pc, #28]	; (8007a84 <ReceiveByteUart3+0x3c>)
 8007a66:	f7fd f953 	bl	8004d10 <HAL_UART_Receive>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK)
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <ReceiveByteUart3+0x30>
			return true;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e000      	b.n	8007a7a <ReceiveByteUart3+0x32>
	}
	return false;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000738 	.word	0x20000738

08007a88 <SerialHandle>:
	}
}
#endif

void SerialHandle(serial_obj* serial)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
	uint8_t data;
	bool ret;
	fifo *tx = uart_list[serial->port].tx_buf;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	4619      	mov	r1, r3
 8007a96:	4a2f      	ldr	r2, [pc, #188]	; (8007b54 <SerialHandle+0xcc>)
 8007a98:	232c      	movs	r3, #44	; 0x2c
 8007a9a:	fb01 f303 	mul.w	r3, r1, r3
 8007a9e:	4413      	add	r3, r2
 8007aa0:	3324      	adds	r3, #36	; 0x24
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	617b      	str	r3, [r7, #20]
	fifo *rx = uart_list[serial->port].rx_buf;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4a29      	ldr	r2, [pc, #164]	; (8007b54 <SerialHandle+0xcc>)
 8007aae:	232c      	movs	r3, #44	; 0x2c
 8007ab0:	fb01 f303 	mul.w	r3, r1, r3
 8007ab4:	4413      	add	r3, r2
 8007ab6:	3328      	adds	r3, #40	; 0x28
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	613b      	str	r3, [r7, #16]
	send:
	if(tx->data_len > 0)
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	891b      	ldrh	r3, [r3, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d020      	beq.n	8007b06 <SerialHandle+0x7e>
	{
		tx->Peak(tx, &data);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	f107 020e 	add.w	r2, r7, #14
 8007acc:	4611      	mov	r1, r2
 8007ace:	6978      	ldr	r0, [r7, #20]
 8007ad0:	4798      	blx	r3
		ret = uart_list[serial->port].SendByte(data);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4a1e      	ldr	r2, [pc, #120]	; (8007b54 <SerialHandle+0xcc>)
 8007ada:	232c      	movs	r3, #44	; 0x2c
 8007adc:	fb01 f303 	mul.w	r3, r1, r3
 8007ae0:	4413      	add	r3, r2
 8007ae2:	331c      	adds	r3, #28
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	7bba      	ldrb	r2, [r7, #14]
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4798      	blx	r3
 8007aec:	4603      	mov	r3, r0
 8007aee:	73fb      	strb	r3, [r7, #15]
		if(ret == true)
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d007      	beq.n	8007b06 <SerialHandle+0x7e>
		{
			tx->Get(tx, &data);
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	f107 020e 	add.w	r2, r7, #14
 8007afe:	4611      	mov	r1, r2
 8007b00:	6978      	ldr	r0, [r7, #20]
 8007b02:	4798      	blx	r3
			goto send;
 8007b04:	e7da      	b.n	8007abc <SerialHandle+0x34>
		}
	}
#ifdef USE_FIFO
	read:
 8007b06:	bf00      	nop
	if(uart_list[serial->port].ReceiveByte(&data) == true)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	4a11      	ldr	r2, [pc, #68]	; (8007b54 <SerialHandle+0xcc>)
 8007b10:	232c      	movs	r3, #44	; 0x2c
 8007b12:	fb01 f303 	mul.w	r3, r1, r3
 8007b16:	4413      	add	r3, r2
 8007b18:	3320      	adds	r3, #32
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f107 020e 	add.w	r2, r7, #14
 8007b20:	4610      	mov	r0, r2
 8007b22:	4798      	blx	r3
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <SerialHandle+0xb2>
	{
		rx->Put(rx, &data);
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f107 020e 	add.w	r2, r7, #14
 8007b32:	4611      	mov	r1, r2
 8007b34:	6938      	ldr	r0, [r7, #16]
 8007b36:	4798      	blx	r3
		goto read;
 8007b38:	e7e6      	b.n	8007b08 <SerialHandle+0x80>
	}
	serial->length_received = rx->data_len;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	891a      	ldrh	r2, [r3, #8]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	821a      	strh	r2, [r3, #16]
	serial->length_send = tx->data_len;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	891a      	ldrh	r2, [r3, #8]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	825a      	strh	r2, [r3, #18]
#endif
}
 8007b4a:	bf00      	nop
 8007b4c:	3718      	adds	r7, #24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	200002a8 	.word	0x200002a8

08007b58 <create_serial>:
// End porting hardware


serial_obj* create_serial(uint16_t port, uint32_t baudrate, uint16_t tx_size, uint16_t rx_size)
{
 8007b58:	b590      	push	{r4, r7, lr}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	4611      	mov	r1, r2
 8007b62:	461a      	mov	r2, r3
 8007b64:	4603      	mov	r3, r0
 8007b66:	81fb      	strh	r3, [r7, #14]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	81bb      	strh	r3, [r7, #12]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	80fb      	strh	r3, [r7, #6]
	serial_obj* serial;
	serial = &(uart_list[port].serial_port);
 8007b70:	89fb      	ldrh	r3, [r7, #14]
 8007b72:	222c      	movs	r2, #44	; 0x2c
 8007b74:	fb02 f303 	mul.w	r3, r2, r3
 8007b78:	4a27      	ldr	r2, [pc, #156]	; (8007c18 <create_serial+0xc0>)
 8007b7a:	4413      	add	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]
	serial->port = port;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	89fa      	ldrh	r2, [r7, #14]
 8007b82:	801a      	strh	r2, [r3, #0]
	uart_list[port].tx_buf = create_fifo(tx_size,1);
 8007b84:	89fc      	ldrh	r4, [r7, #14]
 8007b86:	89bb      	ldrh	r3, [r7, #12]
 8007b88:	2101      	movs	r1, #1
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe fdf2 	bl	8006774 <create_fifo>
 8007b90:	4602      	mov	r2, r0
 8007b92:	4921      	ldr	r1, [pc, #132]	; (8007c18 <create_serial+0xc0>)
 8007b94:	232c      	movs	r3, #44	; 0x2c
 8007b96:	fb04 f303 	mul.w	r3, r4, r3
 8007b9a:	440b      	add	r3, r1
 8007b9c:	3324      	adds	r3, #36	; 0x24
 8007b9e:	601a      	str	r2, [r3, #0]
	uart_list[port].rx_buf = create_fifo(rx_size,1);
 8007ba0:	89fc      	ldrh	r4, [r7, #14]
 8007ba2:	88fb      	ldrh	r3, [r7, #6]
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fde4 	bl	8006774 <create_fifo>
 8007bac:	4602      	mov	r2, r0
 8007bae:	491a      	ldr	r1, [pc, #104]	; (8007c18 <create_serial+0xc0>)
 8007bb0:	232c      	movs	r3, #44	; 0x2c
 8007bb2:	fb04 f303 	mul.w	r3, r4, r3
 8007bb6:	440b      	add	r3, r1
 8007bb8:	3328      	adds	r3, #40	; 0x28
 8007bba:	601a      	str	r2, [r3, #0]
	if(uart_list[port].tx_buf == null || uart_list[port].rx_buf == null)
 8007bbc:	89fb      	ldrh	r3, [r7, #14]
 8007bbe:	4a16      	ldr	r2, [pc, #88]	; (8007c18 <create_serial+0xc0>)
 8007bc0:	212c      	movs	r1, #44	; 0x2c
 8007bc2:	fb01 f303 	mul.w	r3, r1, r3
 8007bc6:	4413      	add	r3, r2
 8007bc8:	3324      	adds	r3, #36	; 0x24
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d009      	beq.n	8007be4 <create_serial+0x8c>
 8007bd0:	89fb      	ldrh	r3, [r7, #14]
 8007bd2:	4a11      	ldr	r2, [pc, #68]	; (8007c18 <create_serial+0xc0>)
 8007bd4:	212c      	movs	r1, #44	; 0x2c
 8007bd6:	fb01 f303 	mul.w	r3, r1, r3
 8007bda:	4413      	add	r3, r2
 8007bdc:	3328      	adds	r3, #40	; 0x28
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d100      	bne.n	8007be6 <create_serial+0x8e>
		while(1);
 8007be4:	e7fe      	b.n	8007be4 <create_serial+0x8c>

	serial->tx_size = tx_size;
 8007be6:	89ba      	ldrh	r2, [r7, #12]
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	609a      	str	r2, [r3, #8]
	serial->rx_size = rx_size;
 8007bec:	88fa      	ldrh	r2, [r7, #6]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	60da      	str	r2, [r3, #12]
	serial->baudrate =  baudrate;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	605a      	str	r2, [r3, #4]
	uart_list[port].OpenUart(baudrate);
 8007bf8:	89fb      	ldrh	r3, [r7, #14]
 8007bfa:	4a07      	ldr	r2, [pc, #28]	; (8007c18 <create_serial+0xc0>)
 8007bfc:	212c      	movs	r1, #44	; 0x2c
 8007bfe:	fb01 f303 	mul.w	r3, r1, r3
 8007c02:	4413      	add	r3, r2
 8007c04:	3318      	adds	r3, #24
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	4798      	blx	r3
	return serial;
 8007c0e:	697b      	ldr	r3, [r7, #20]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	371c      	adds	r7, #28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd90      	pop	{r4, r7, pc}
 8007c18:	200002a8 	.word	0x200002a8

08007c1c <SerialSendBuf>:

bool SerialSendBuf(serial_obj* serial, uint8_t *data, uint16_t len)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4613      	mov	r3, r2
 8007c28:	80fb      	strh	r3, [r7, #6]
	bool ret;
	fifo *tx = uart_list[serial->port].tx_buf;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	4a0c      	ldr	r2, [pc, #48]	; (8007c64 <SerialSendBuf+0x48>)
 8007c32:	232c      	movs	r3, #44	; 0x2c
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	4413      	add	r3, r2
 8007c3a:	3324      	adds	r3, #36	; 0x24
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	617b      	str	r3, [r7, #20]
	ret = tx->Puts(tx, data, len);
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	88fa      	ldrh	r2, [r7, #6]
 8007c46:	68b9      	ldr	r1, [r7, #8]
 8007c48:	6978      	ldr	r0, [r7, #20]
 8007c4a:	4798      	blx	r3
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	74fb      	strb	r3, [r7, #19]
	serial->length_send = tx->data_len;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	891a      	ldrh	r2, [r3, #8]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	825a      	strh	r2, [r3, #18]

	return ret;
 8007c58:	7cfb      	ldrb	r3, [r7, #19]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	200002a8 	.word	0x200002a8

08007c68 <SerialReadBuf>:

uint16_t SerialReadBuf(serial_obj* serial, uint8_t *data, uint16_t len)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	80fb      	strh	r3, [r7, #6]
	fifo *rx = uart_list[serial->port].rx_buf;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4a0d      	ldr	r2, [pc, #52]	; (8007cb4 <SerialReadBuf+0x4c>)
 8007c7e:	232c      	movs	r3, #44	; 0x2c
 8007c80:	fb01 f303 	mul.w	r3, r1, r3
 8007c84:	4413      	add	r3, r2
 8007c86:	3328      	adds	r3, #40	; 0x28
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	617b      	str	r3, [r7, #20]
	if(rx->Gets(rx, data, len) == true)
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	88fa      	ldrh	r2, [r7, #6]
 8007c92:	68b9      	ldr	r1, [r7, #8]
 8007c94:	6978      	ldr	r0, [r7, #20]
 8007c96:	4798      	blx	r3
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <SerialReadBuf+0x42>
	{
		serial->length_received = rx->data_len;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	891a      	ldrh	r2, [r3, #8]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	821a      	strh	r2, [r3, #16]
		return len;
 8007ca6:	88fb      	ldrh	r3, [r7, #6]
 8007ca8:	e000      	b.n	8007cac <SerialReadBuf+0x44>
	}
	return 0;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	200002a8 	.word	0x200002a8

08007cb8 <Timer1kHzAddCallback>:


static int current_index_callback_1k_fn = 0;

bool Timer1kHzAddCallback(TimerfuncCb fn)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
	if(current_index_callback_1k_fn < MAX_TIMER_SERVICE)
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <Timer1kHzAddCallback+0x38>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b04      	cmp	r3, #4
 8007cc6:	dc0c      	bgt.n	8007ce2 <Timer1kHzAddCallback+0x2a>
	{
		fnFunctionTimer1kHzISR[current_index_callback_1k_fn] = fn;
 8007cc8:	4b09      	ldr	r3, [pc, #36]	; (8007cf0 <Timer1kHzAddCallback+0x38>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4909      	ldr	r1, [pc, #36]	; (8007cf4 <Timer1kHzAddCallback+0x3c>)
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		current_index_callback_1k_fn++;
 8007cd4:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <Timer1kHzAddCallback+0x38>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	4a05      	ldr	r2, [pc, #20]	; (8007cf0 <Timer1kHzAddCallback+0x38>)
 8007cdc:	6013      	str	r3, [r2, #0]
		return true;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e000      	b.n	8007ce4 <Timer1kHzAddCallback+0x2c>
	}
	return false;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	20000868 	.word	0x20000868
 8007cf4:	20000854 	.word	0x20000854

08007cf8 <TimerTick1kHz>:

void TimerTick1kHz()
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
	int i = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	607b      	str	r3, [r7, #4]
	for (i=0; i < current_index_callback_1k_fn; i++)
 8007d02:	2300      	movs	r3, #0
 8007d04:	607b      	str	r3, [r7, #4]
 8007d06:	e00d      	b.n	8007d24 <TimerTick1kHz+0x2c>
	{
		if (fnFunctionTimer1kHzISR[i] != NULL)
 8007d08:	4a0b      	ldr	r2, [pc, #44]	; (8007d38 <TimerTick1kHz+0x40>)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d004      	beq.n	8007d1e <TimerTick1kHz+0x26>
		{
			fnFunctionTimer1kHzISR[i]();
 8007d14:	4a08      	ldr	r2, [pc, #32]	; (8007d38 <TimerTick1kHz+0x40>)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d1c:	4798      	blx	r3
	for (i=0; i < current_index_callback_1k_fn; i++)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3301      	adds	r3, #1
 8007d22:	607b      	str	r3, [r7, #4]
 8007d24:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <TimerTick1kHz+0x44>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	dbec      	blt.n	8007d08 <TimerTick1kHz+0x10>
		}
	}
}
 8007d2e:	bf00      	nop
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	20000854 	.word	0x20000854
 8007d3c:	20000868 	.word	0x20000868

08007d40 <AppMainInit>:
static BackgroundCb BackgroundTask[MAX_BACKGOUND_TASK] = {NULL};
static int current_index_background = 0;
static void MainAddBackgroundProcess(BackgroundCb fn);


void AppMainInit(){
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0

		serial_init();
 8007d44:	f000 fc02 	bl	800854c <serial_init>
//	  	serial_test_1 = create_serial(1, 115200, 512, 512);
		debug_modbus = create_modbus(118, serial_test_1);
 8007d48:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <AppMainInit+0x40>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	2076      	movs	r0, #118	; 0x76
 8007d50:	f7ff f9de 	bl	8007110 <create_modbus>
 8007d54:	4603      	mov	r3, r0
 8007d56:	4a0b      	ldr	r2, [pc, #44]	; (8007d84 <AppMainInit+0x44>)
 8007d58:	6013      	str	r3, [r2, #0]
		initGlobalVariables();
 8007d5a:	f000 fc09 	bl	8008570 <initGlobalVariables>
		MainAddBackgroundProcess(&ModbusBackground);
 8007d5e:	480a      	ldr	r0, [pc, #40]	; (8007d88 <AppMainInit+0x48>)
 8007d60:	f000 f836 	bl	8007dd0 <MainAddBackgroundProcess>
		MainAddBackgroundProcess(&UpdateAllVariable);
 8007d64:	4809      	ldr	r0, [pc, #36]	; (8007d8c <AppMainInit+0x4c>)
 8007d66:	f000 f833 	bl	8007dd0 <MainAddBackgroundProcess>

//		MainAddBackgroundProcess(&send_data);
//		send_data();
//		MainAddBackgroundProcess(&receive_string_data);
		Timer1kHzAddCallback(&Modbus1kHz);
 8007d6a:	4809      	ldr	r0, [pc, #36]	; (8007d90 <AppMainInit+0x50>)
 8007d6c:	f7ff ffa4 	bl	8007cb8 <Timer1kHzAddCallback>
		Pin_Func_Init();
 8007d70:	f7ff fc00 	bl	8007574 <Pin_Func_Init>
		Signal_Init();
 8007d74:	f7ff fcde 	bl	8007734 <Signal_Init>
//		ControlDcDcBoostInit();
//		ControlDcDcBuckInit();
//		ControlDcDcDumpInit();
		StateInit();
 8007d78:	f000 fc6c 	bl	8008654 <StateInit>


}
 8007d7c:	bf00      	nop
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	20000874 	.word	0x20000874
 8007d84:	20000870 	.word	0x20000870
 8007d88:	080071e9 	.word	0x080071e9
 8007d8c:	08008599 	.word	0x08008599
 8007d90:	08007199 	.word	0x08007199

08007d94 <AppMainProcess>:

void AppMainProcess(){
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < MAX_BACKGOUND_TASK; i++){
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	607b      	str	r3, [r7, #4]
 8007d9e:	e00d      	b.n	8007dbc <AppMainProcess+0x28>
		if(BackgroundTask[i] != NULL){
 8007da0:	4a0a      	ldr	r2, [pc, #40]	; (8007dcc <AppMainProcess+0x38>)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d004      	beq.n	8007db6 <AppMainProcess+0x22>
			BackgroundTask[i]();
 8007dac:	4a07      	ldr	r2, [pc, #28]	; (8007dcc <AppMainProcess+0x38>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db4:	4798      	blx	r3
	for(i = 0; i < MAX_BACKGOUND_TASK; i++){
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3301      	adds	r3, #1
 8007dba:	607b      	str	r3, [r7, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b05      	cmp	r3, #5
 8007dc0:	ddee      	ble.n	8007da0 <AppMainProcess+0xc>
		}
	}
}
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	20000878 	.word	0x20000878

08007dd0 <MainAddBackgroundProcess>:

static void MainAddBackgroundProcess(BackgroundCb fn){
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
	if(current_index_background < MAX_BACKGOUND_TASK){
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <MainAddBackgroundProcess+0x34>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b05      	cmp	r3, #5
 8007dde:	dc0a      	bgt.n	8007df6 <MainAddBackgroundProcess+0x26>
		BackgroundTask[current_index_background] = fn;
 8007de0:	4b08      	ldr	r3, [pc, #32]	; (8007e04 <MainAddBackgroundProcess+0x34>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4908      	ldr	r1, [pc, #32]	; (8007e08 <MainAddBackgroundProcess+0x38>)
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		current_index_background++;
 8007dec:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <MainAddBackgroundProcess+0x34>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3301      	adds	r3, #1
 8007df2:	4a04      	ldr	r2, [pc, #16]	; (8007e04 <MainAddBackgroundProcess+0x34>)
 8007df4:	6013      	str	r3, [r2, #0]
	}
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20000890 	.word	0x20000890
 8007e08:	20000878 	.word	0x20000878

08007e0c <SetCompareCH1>:
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR1, CompareValue);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <SetCompareCH2>:
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR2, CompareValue);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <SetCompareCH4>:
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR4, CompareValue);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007e5a:	bf00      	nop
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
	...

08007e68 <DC_StopPWM_Boost>:
//static CNTL_2P2Z_F_C_Vars dc_no_mppt_pi_cur_var;



void DC_StopPWM_Boost(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
	PwmWindBoostDisable(s_ptimer_pwm);
 8007e6c:	4b03      	ldr	r3, [pc, #12]	; (8007e7c <DC_StopPWM_Boost+0x14>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff fb10 	bl	8007496 <PwmWindBoostDisable>
}
 8007e76:	bf00      	nop
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000898 	.word	0x20000898

08007e80 <DC_StartPWM_Boost>:

void DC_StartPWM_Boost(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
	if (g_wind.is_plugin == true)
 8007e84:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <DC_StartPWM_Boost+0x1c>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d004      	beq.n	8007e96 <DC_StartPWM_Boost+0x16>
	{
		 PwmWindBoostEnable(s_ptimer_pwm);
 8007e8c:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <DC_StartPWM_Boost+0x20>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff fae7 	bl	8007464 <PwmWindBoostEnable>
	}
}
 8007e96:	bf00      	nop
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	2000094c 	.word	0x2000094c
 8007ea0:	20000898 	.word	0x20000898

08007ea4 <DC_StopPWM_Buck>:

void DC_StopPWM_Buck(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
	PwmWindBuckDisable(s_ptimer_pwm);
 8007ea8:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <DC_StopPWM_Buck+0x14>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff fae7 	bl	8007480 <PwmWindBuckDisable>
}
 8007eb2:	bf00      	nop
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000898 	.word	0x20000898

08007ebc <DC_StartPWM_Buck>:

void DC_StartPWM_Buck(void)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
//	PwmWindBuckEnable(s_ptimer_pwm);
	if (g_wind.is_plugin == true)
 8007ec0:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <DC_StartPWM_Buck+0x1c>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d004      	beq.n	8007ed2 <DC_StartPWM_Buck+0x16>
	{
		 PwmWindBuckEnable(s_ptimer_pwm);
 8007ec8:	4b04      	ldr	r3, [pc, #16]	; (8007edc <DC_StartPWM_Buck+0x20>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff fabb 	bl	8007448 <PwmWindBuckEnable>
	}
}
 8007ed2:	bf00      	nop
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	2000094c 	.word	0x2000094c
 8007edc:	20000898 	.word	0x20000898

08007ee0 <DcDc_ControllerMppt>:
		PwmWindBoostSetDuty(s_ptimer_pwm, (i-1));
	}
}


void DcDc_ControllerMppt(void){
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
	flag = true;
 8007ee6:	4b4d      	ldr	r3, [pc, #308]	; (800801c <DcDc_ControllerMppt+0x13c>)
 8007ee8:	2201      	movs	r2, #1
 8007eea:	701a      	strb	r2, [r3, #0]
	static float duty;

	TestMPPTUpdate(&g_wind.mppt, g_wind.iwt, g_wind.vwt);
 8007eec:	4b4c      	ldr	r3, [pc, #304]	; (8008020 <DcDc_ControllerMppt+0x140>)
 8007eee:	edd3 7a02 	vldr	s15, [r3, #8]
 8007ef2:	4b4b      	ldr	r3, [pc, #300]	; (8008020 <DcDc_ControllerMppt+0x140>)
 8007ef4:	ed93 7a01 	vldr	s14, [r3, #4]
 8007ef8:	eef0 0a47 	vmov.f32	s1, s14
 8007efc:	eeb0 0a67 	vmov.f32	s0, s15
 8007f00:	4848      	ldr	r0, [pc, #288]	; (8008024 <DcDc_ControllerMppt+0x144>)
 8007f02:	f000 ff65 	bl	8008dd0 <TestMPPTUpdate>
	WindControlMppt(&g_wind);
 8007f06:	4846      	ldr	r0, [pc, #280]	; (8008020 <DcDc_ControllerMppt+0x140>)
 8007f08:	f000 fe4c 	bl	8008ba4 <WindControlMppt>


	duty = g_wind.mppt.D_ref;
 8007f0c:	4b44      	ldr	r3, [pc, #272]	; (8008020 <DcDc_ControllerMppt+0x140>)
 8007f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f10:	4a45      	ldr	r2, [pc, #276]	; (8008028 <DcDc_ControllerMppt+0x148>)
 8007f12:	6013      	str	r3, [r2, #0]
	if (duty >= 0 && duty <= 1){
 8007f14:	4b44      	ldr	r3, [pc, #272]	; (8008028 <DcDc_ControllerMppt+0x148>)
 8007f16:	edd3 7a00 	vldr	s15, [r3]
 8007f1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f22:	db3d      	blt.n	8007fa0 <DcDc_ControllerMppt+0xc0>
 8007f24:	4b40      	ldr	r3, [pc, #256]	; (8008028 <DcDc_ControllerMppt+0x148>)
 8007f26:	edd3 7a00 	vldr	s15, [r3]
 8007f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f36:	d833      	bhi.n	8007fa0 <DcDc_ControllerMppt+0xc0>
		PwmWindBuckSetDuty(s_ptimer_pwm, duty);
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	4b3b      	ldr	r3, [pc, #236]	; (800802c <DcDc_ControllerMppt+0x14c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	885b      	ldrh	r3, [r3, #2]
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f4a:	4b37      	ldr	r3, [pc, #220]	; (8008028 <DcDc_ControllerMppt+0x148>)
 8007f4c:	edd3 7a00 	vldr	s15, [r3]
 8007f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f58:	ee17 3a90 	vmov	r3, s15
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	4b33      	ldr	r3, [pc, #204]	; (800802c <DcDc_ControllerMppt+0x14c>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	085b      	lsrs	r3, r3, #1
 8007f66:	4619      	mov	r1, r3
 8007f68:	4610      	mov	r0, r2
 8007f6a:	f7ff ff5e 	bl	8007e2a <SetCompareCH2>
 8007f6e:	4b2f      	ldr	r3, [pc, #188]	; (800802c <DcDc_ControllerMppt+0x14c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68f9      	ldr	r1, [r7, #12]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7ff ff49 	bl	8007e0c <SetCompareCH1>
		PwmWindBoostSetDuty(s_ptimer_pwm, 0);
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60bb      	str	r3, [r7, #8]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60bb      	str	r3, [r7, #8]
 8007f82:	4b2a      	ldr	r3, [pc, #168]	; (800802c <DcDc_ControllerMppt+0x14c>)
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	085b      	lsrs	r3, r3, #1
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	f7ff ff4c 	bl	8007e2a <SetCompareCH2>
 8007f92:	4b26      	ldr	r3, [pc, #152]	; (800802c <DcDc_ControllerMppt+0x14c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68b9      	ldr	r1, [r7, #8]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff ff55 	bl	8007e48 <SetCompareCH4>
	if (duty >= 0 && duty <= 1){
 8007f9e:	e039      	b.n	8008014 <DcDc_ControllerMppt+0x134>
	}
	else{
		PwmWindBuckSetDuty(s_ptimer_pwm, 1);
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	607b      	str	r3, [r7, #4]
 8007fa4:	4b21      	ldr	r3, [pc, #132]	; (800802c <DcDc_ControllerMppt+0x14c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	885b      	ldrh	r3, [r3, #2]
 8007faa:	607b      	str	r3, [r7, #4]
 8007fac:	4b1f      	ldr	r3, [pc, #124]	; (800802c <DcDc_ControllerMppt+0x14c>)
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	085b      	lsrs	r3, r3, #1
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	f7ff ff37 	bl	8007e2a <SetCompareCH2>
 8007fbc:	4b1b      	ldr	r3, [pc, #108]	; (800802c <DcDc_ControllerMppt+0x14c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff ff22 	bl	8007e0c <SetCompareCH1>
		PwmWindBoostSetDuty(s_ptimer_pwm, (duty-1));
 8007fc8:	2300      	movs	r3, #0
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	4b16      	ldr	r3, [pc, #88]	; (8008028 <DcDc_ControllerMppt+0x148>)
 8007fce:	edd3 7a00 	vldr	s15, [r3]
 8007fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fd6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007fda:	4b14      	ldr	r3, [pc, #80]	; (800802c <DcDc_ControllerMppt+0x14c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	885b      	ldrh	r3, [r3, #2]
 8007fe0:	ee07 3a90 	vmov	s15, r3
 8007fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ff0:	ee17 3a90 	vmov	r3, s15
 8007ff4:	603b      	str	r3, [r7, #0]
 8007ff6:	4b0d      	ldr	r3, [pc, #52]	; (800802c <DcDc_ControllerMppt+0x14c>)
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	085b      	lsrs	r3, r3, #1
 8007ffe:	4619      	mov	r1, r3
 8008000:	4610      	mov	r0, r2
 8008002:	f7ff ff12 	bl	8007e2a <SetCompareCH2>
 8008006:	4b09      	ldr	r3, [pc, #36]	; (800802c <DcDc_ControllerMppt+0x14c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff ff1b 	bl	8007e48 <SetCompareCH4>
	}
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20000894 	.word	0x20000894
 8008020:	2000094c 	.word	0x2000094c
 8008024:	20000974 	.word	0x20000974
 8008028:	2000089c 	.word	0x2000089c
 800802c:	20000898 	.word	0x20000898

08008030 <SetCompareCH2>:
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR2, CompareValue);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
	...

08008050 <Start_PWM_Dumpload>:
	s_ptimer_pwm = create_advance_timer(TIMER_ADVANCE_ID_1, FREQUENCY_SAMPLE_WIND_DUMPLOAD);
	PwmWindDumpLoadInit(s_ptimer_pwm);
}

void Start_PWM_Dumpload(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	af00      	add	r7, sp, #0
	PwmWindDumpLoadEnableOutput(s_ptimer_pwm);
 8008054:	4b03      	ldr	r3, [pc, #12]	; (8008064 <Start_PWM_Dumpload+0x14>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff fa6f 	bl	800753c <PwmWindDumpLoadEnableOutput>
}
 800805e:	bf00      	nop
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	200008a0 	.word	0x200008a0

08008068 <Stop_PWM_Dumpload>:

void Stop_PWM_Dumpload(void)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	af00      	add	r7, sp, #0
	PwmWindDumpLoadDisableOutput(s_ptimer_pwm);
 800806c:	4b03      	ldr	r3, [pc, #12]	; (800807c <Stop_PWM_Dumpload+0x14>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4618      	mov	r0, r3
 8008072:	f7ff fa71 	bl	8007558 <PwmWindDumpLoadDisableOutput>
}
 8008076:	bf00      	nop
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	200008a0 	.word	0x200008a0

08008080 <Dumpload_controller>:

void Dumpload_controller(void)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
	if(g_vin > DC_MAX_INPUT)
 8008086:	4b1f      	ldr	r3, [pc, #124]	; (8008104 <Dumpload_controller+0x84>)
 8008088:	edd3 7a00 	vldr	s15, [r3]
 800808c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8008108 <Dumpload_controller+0x88>
 8008090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008098:	dd24      	ble.n	80080e4 <Dumpload_controller+0x64>
	{
		PwmWindDumpLoadSetDuty(s_ptimer_pwm, (g_vin - MAX_VIN)/g_vin);
 800809a:	2300      	movs	r3, #0
 800809c:	603b      	str	r3, [r7, #0]
 800809e:	4b19      	ldr	r3, [pc, #100]	; (8008104 <Dumpload_controller+0x84>)
 80080a0:	edd3 7a00 	vldr	s15, [r3]
 80080a4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800810c <Dumpload_controller+0x8c>
 80080a8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80080ac:	4b15      	ldr	r3, [pc, #84]	; (8008104 <Dumpload_controller+0x84>)
 80080ae:	edd3 7a00 	vldr	s15, [r3]
 80080b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080b6:	4b16      	ldr	r3, [pc, #88]	; (8008110 <Dumpload_controller+0x90>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	885b      	ldrh	r3, [r3, #2]
 80080bc:	ee07 3a90 	vmov	s15, r3
 80080c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080cc:	ee17 3a90 	vmov	r3, s15
 80080d0:	603b      	str	r3, [r7, #0]
 80080d2:	4b0f      	ldr	r3, [pc, #60]	; (8008110 <Dumpload_controller+0x90>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	4618      	mov	r0, r3
 80080da:	f7ff ffa9 	bl	8008030 <SetCompareCH2>
		Start_PWM_Dumpload();
 80080de:	f7ff ffb7 	bl	8008050 <Start_PWM_Dumpload>
	else
	{
		PwmWindDumpLoadSetDuty(s_ptimer_pwm, 0);
		Stop_PWM_Dumpload();
	}
}
 80080e2:	e00b      	b.n	80080fc <Dumpload_controller+0x7c>
		PwmWindDumpLoadSetDuty(s_ptimer_pwm, 0);
 80080e4:	2300      	movs	r3, #0
 80080e6:	607b      	str	r3, [r7, #4]
 80080e8:	2300      	movs	r3, #0
 80080ea:	607b      	str	r3, [r7, #4]
 80080ec:	4b08      	ldr	r3, [pc, #32]	; (8008110 <Dumpload_controller+0x90>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff ff9c 	bl	8008030 <SetCompareCH2>
		Stop_PWM_Dumpload();
 80080f8:	f7ff ffb6 	bl	8008068 <Stop_PWM_Dumpload>
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20000834 	.word	0x20000834
 8008108:	43160000 	.word	0x43160000
 800810c:	42400000 	.word	0x42400000
 8008110:	200008a0 	.word	0x200008a0

08008114 <ErrorCheckInit>:
//		{ID_OIBAT_DCHAR,	CODE_OIBAT_CHAR,		STATE_ALL,				1,							TYPE_UP,				0,										0,									0,							&s_mError[ID_OIBAT_DCHAR],		NULL,			false,			ACTIVE},
//		{ID_UIBAT_DCHAR,	CODE_UIBAT_CHAR,		STATE_ALL,				1,							TYPE_UP,				0,										0,									0,							&s_mError[ID_UIBAT_DCHAR],		NULL,			false,			ACTIVE},

};

void ErrorCheckInit(void){
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
	for(countList = 0; countList < ID_MAX; countList++){
 8008118:	4b22      	ldr	r3, [pc, #136]	; (80081a4 <ErrorCheckInit+0x90>)
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	e025      	b.n	800816c <ErrorCheckInit+0x58>
		listError[countList].time_count 	= 0;
 8008120:	4b20      	ldr	r3, [pc, #128]	; (80081a4 <ErrorCheckInit+0x90>)
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	4920      	ldr	r1, [pc, #128]	; (80081a8 <ErrorCheckInit+0x94>)
 8008126:	4613      	mov	r3, r2
 8008128:	00db      	lsls	r3, r3, #3
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	440b      	add	r3, r1
 8008130:	3310      	adds	r3, #16
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
		listError[countList].error_state 	= false;
 8008136:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <ErrorCheckInit+0x90>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	491b      	ldr	r1, [pc, #108]	; (80081a8 <ErrorCheckInit+0x94>)
 800813c:	4613      	mov	r3, r2
 800813e:	00db      	lsls	r3, r3, #3
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	440b      	add	r3, r1
 8008146:	3320      	adds	r3, #32
 8008148:	2200      	movs	r2, #0
 800814a:	701a      	strb	r2, [r3, #0]
		listError[countList].active_err		= ACTIVE;
 800814c:	4b15      	ldr	r3, [pc, #84]	; (80081a4 <ErrorCheckInit+0x90>)
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	4915      	ldr	r1, [pc, #84]	; (80081a8 <ErrorCheckInit+0x94>)
 8008152:	4613      	mov	r3, r2
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	4413      	add	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	440b      	add	r3, r1
 800815c:	3321      	adds	r3, #33	; 0x21
 800815e:	2200      	movs	r2, #0
 8008160:	701a      	strb	r2, [r3, #0]
	for(countList = 0; countList < ID_MAX; countList++){
 8008162:	4b10      	ldr	r3, [pc, #64]	; (80081a4 <ErrorCheckInit+0x90>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3301      	adds	r3, #1
 8008168:	4a0e      	ldr	r2, [pc, #56]	; (80081a4 <ErrorCheckInit+0x90>)
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <ErrorCheckInit+0x90>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b06      	cmp	r3, #6
 8008172:	d9d5      	bls.n	8008120 <ErrorCheckInit+0xc>
	}
	listError[ID_OVDC1].active_err = DEACTIVE;
 8008174:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <ErrorCheckInit+0x94>)
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	listError[ID_OVDC2].active_err = DEACTIVE;
 800817c:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <ErrorCheckInit+0x94>)
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	listError[ID_OCDC1].active_err = DEACTIVE;
 8008184:	4b08      	ldr	r3, [pc, #32]	; (80081a8 <ErrorCheckInit+0x94>)
 8008186:	2201      	movs	r2, #1
 8008188:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	listError[ID_OCDC2].active_err = DEACTIVE;
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <ErrorCheckInit+0x94>)
 800818e:	2201      	movs	r2, #1
 8008190:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
	countList = 0;
 8008194:	4b03      	ldr	r3, [pc, #12]	; (80081a4 <ErrorCheckInit+0x90>)
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]
}
 800819a:	bf00      	nop
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	200008a4 	.word	0x200008a4
 80081a8:	20000300 	.word	0x20000300

080081ac <ErrorCheck_Running>:

void ErrorCheck_Running(void){
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
	UpdateCalc();
 80081b0:	f000 f96a 	bl	8008488 <UpdateCalc>
	for(countList = 1; countList < ID_MAX; countList++){
 80081b4:	4ba7      	ldr	r3, [pc, #668]	; (8008454 <ErrorCheck_Running+0x2a8>)
 80081b6:	2201      	movs	r2, #1
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	e15b      	b.n	8008474 <ErrorCheck_Running+0x2c8>
		if(listError[countList].state_valid == STATE_MAX){
 80081bc:	4ba5      	ldr	r3, [pc, #660]	; (8008454 <ErrorCheck_Running+0x2a8>)
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	49a5      	ldr	r1, [pc, #660]	; (8008458 <ErrorCheck_Running+0x2ac>)
 80081c2:	4613      	mov	r3, r2
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	3302      	adds	r3, #2
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b05      	cmp	r3, #5
 80081d2:	d117      	bne.n	8008204 <ErrorCheck_Running+0x58>
			if(listError[countList].func_check != NULL){
 80081d4:	4b9f      	ldr	r3, [pc, #636]	; (8008454 <ErrorCheck_Running+0x2a8>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	499f      	ldr	r1, [pc, #636]	; (8008458 <ErrorCheck_Running+0x2ac>)
 80081da:	4613      	mov	r3, r2
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	440b      	add	r3, r1
 80081e4:	331c      	adds	r3, #28
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d032      	beq.n	8008252 <ErrorCheck_Running+0xa6>
				listError[countList].func_check();
 80081ec:	4b99      	ldr	r3, [pc, #612]	; (8008454 <ErrorCheck_Running+0x2a8>)
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	4999      	ldr	r1, [pc, #612]	; (8008458 <ErrorCheck_Running+0x2ac>)
 80081f2:	4613      	mov	r3, r2
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	440b      	add	r3, r1
 80081fc:	331c      	adds	r3, #28
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4798      	blx	r3
				}
				else
					goto run_all;
			}
		}
		continue;
 8008202:	e125      	b.n	8008450 <ErrorCheck_Running+0x2a4>
			if(listError[countList].state_valid == g_current_state){
 8008204:	4b93      	ldr	r3, [pc, #588]	; (8008454 <ErrorCheck_Running+0x2a8>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	4993      	ldr	r1, [pc, #588]	; (8008458 <ErrorCheck_Running+0x2ac>)
 800820a:	4613      	mov	r3, r2
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	440b      	add	r3, r1
 8008214:	3302      	adds	r3, #2
 8008216:	781a      	ldrb	r2, [r3, #0]
 8008218:	4b90      	ldr	r3, [pc, #576]	; (800845c <ErrorCheck_Running+0x2b0>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	429a      	cmp	r2, r3
 800821e:	f040 8117 	bne.w	8008450 <ErrorCheck_Running+0x2a4>
				if(listError[countList].func_check != NULL){
 8008222:	4b8c      	ldr	r3, [pc, #560]	; (8008454 <ErrorCheck_Running+0x2a8>)
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	498c      	ldr	r1, [pc, #560]	; (8008458 <ErrorCheck_Running+0x2ac>)
 8008228:	4613      	mov	r3, r2
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	331c      	adds	r3, #28
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00d      	beq.n	8008256 <ErrorCheck_Running+0xaa>
					listError[countList].func_check();
 800823a:	4b86      	ldr	r3, [pc, #536]	; (8008454 <ErrorCheck_Running+0x2a8>)
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4986      	ldr	r1, [pc, #536]	; (8008458 <ErrorCheck_Running+0x2ac>)
 8008240:	4613      	mov	r3, r2
 8008242:	00db      	lsls	r3, r3, #3
 8008244:	4413      	add	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	440b      	add	r3, r1
 800824a:	331c      	adds	r3, #28
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4798      	blx	r3
		continue;
 8008250:	e0fe      	b.n	8008450 <ErrorCheck_Running+0x2a4>
				goto run_all;
 8008252:	bf00      	nop
 8008254:	e000      	b.n	8008258 <ErrorCheck_Running+0xac>
					goto run_all;
 8008256:	bf00      	nop
		run_all:
		switch(listError[countList].type_check){
 8008258:	4b7e      	ldr	r3, [pc, #504]	; (8008454 <ErrorCheck_Running+0x2a8>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	497e      	ldr	r1, [pc, #504]	; (8008458 <ErrorCheck_Running+0x2ac>)
 800825e:	4613      	mov	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	4413      	add	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	440b      	add	r3, r1
 8008268:	3308      	adds	r3, #8
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 808f 	beq.w	8008390 <ErrorCheck_Running+0x1e4>
 8008272:	2b01      	cmp	r3, #1
 8008274:	f040 80f8 	bne.w	8008468 <ErrorCheck_Running+0x2bc>
			case TYPE_DOWN:
				if(fabs(*listError[countList].value_addr) <= listError[countList].value_limit){
 8008278:	4b76      	ldr	r3, [pc, #472]	; (8008454 <ErrorCheck_Running+0x2a8>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	4976      	ldr	r1, [pc, #472]	; (8008458 <ErrorCheck_Running+0x2ac>)
 800827e:	4613      	mov	r3, r2
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	440b      	add	r3, r1
 8008288:	3318      	adds	r3, #24
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	edd3 7a00 	vldr	s15, [r3]
 8008290:	eeb0 7ae7 	vabs.f32	s14, s15
 8008294:	4b6f      	ldr	r3, [pc, #444]	; (8008454 <ErrorCheck_Running+0x2a8>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	496f      	ldr	r1, [pc, #444]	; (8008458 <ErrorCheck_Running+0x2ac>)
 800829a:	4613      	mov	r3, r2
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	3304      	adds	r3, #4
 80082a6:	edd3 7a00 	vldr	s15, [r3]
 80082aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b2:	d84b      	bhi.n	800834c <ErrorCheck_Running+0x1a0>
					if(listError[countList].time_count < listError[countList].time_limit)
 80082b4:	4b67      	ldr	r3, [pc, #412]	; (8008454 <ErrorCheck_Running+0x2a8>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	4967      	ldr	r1, [pc, #412]	; (8008458 <ErrorCheck_Running+0x2ac>)
 80082ba:	4613      	mov	r3, r2
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	440b      	add	r3, r1
 80082c4:	3310      	adds	r3, #16
 80082c6:	6819      	ldr	r1, [r3, #0]
 80082c8:	4b62      	ldr	r3, [pc, #392]	; (8008454 <ErrorCheck_Running+0x2a8>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	4862      	ldr	r0, [pc, #392]	; (8008458 <ErrorCheck_Running+0x2ac>)
 80082ce:	4613      	mov	r3, r2
 80082d0:	00db      	lsls	r3, r3, #3
 80082d2:	4413      	add	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4403      	add	r3, r0
 80082d8:	330c      	adds	r3, #12
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4299      	cmp	r1, r3
 80082de:	d213      	bcs.n	8008308 <ErrorCheck_Running+0x15c>
					 {
							 listError[countList].time_count++;
 80082e0:	4b5c      	ldr	r3, [pc, #368]	; (8008454 <ErrorCheck_Running+0x2a8>)
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	495c      	ldr	r1, [pc, #368]	; (8008458 <ErrorCheck_Running+0x2ac>)
 80082e6:	4613      	mov	r3, r2
 80082e8:	00db      	lsls	r3, r3, #3
 80082ea:	4413      	add	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	440b      	add	r3, r1
 80082f0:	3310      	adds	r3, #16
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	1c59      	adds	r1, r3, #1
 80082f6:	4858      	ldr	r0, [pc, #352]	; (8008458 <ErrorCheck_Running+0x2ac>)
 80082f8:	4613      	mov	r3, r2
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4403      	add	r3, r0
 8008302:	3310      	adds	r3, #16
 8008304:	6019      	str	r1, [r3, #0]
							 if(countList == ID_UVDC1) g_state_vin 	= true;
							 if(countList == ID_UVDC2) g_state_vout = true;
					 }
					 listError[countList].time_count = 0;
				}
				break;
 8008306:	e0b0      	b.n	800846a <ErrorCheck_Running+0x2be>
							 if(countList == ID_UVDC1 || countList == ID_UVDC2)
 8008308:	4b52      	ldr	r3, [pc, #328]	; (8008454 <ErrorCheck_Running+0x2a8>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b03      	cmp	r3, #3
 800830e:	d003      	beq.n	8008318 <ErrorCheck_Running+0x16c>
 8008310:	4b50      	ldr	r3, [pc, #320]	; (8008454 <ErrorCheck_Running+0x2a8>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b04      	cmp	r3, #4
 8008316:	d10d      	bne.n	8008334 <ErrorCheck_Running+0x188>
									 if(countList == ID_UVDC1) g_state_vin 	= false;
 8008318:	4b4e      	ldr	r3, [pc, #312]	; (8008454 <ErrorCheck_Running+0x2a8>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b03      	cmp	r3, #3
 800831e:	d102      	bne.n	8008326 <ErrorCheck_Running+0x17a>
 8008320:	4b4f      	ldr	r3, [pc, #316]	; (8008460 <ErrorCheck_Running+0x2b4>)
 8008322:	2200      	movs	r2, #0
 8008324:	701a      	strb	r2, [r3, #0]
									 if(countList == ID_UVDC2) g_state_vout = false;
 8008326:	4b4b      	ldr	r3, [pc, #300]	; (8008454 <ErrorCheck_Running+0x2a8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b04      	cmp	r3, #4
 800832c:	d102      	bne.n	8008334 <ErrorCheck_Running+0x188>
 800832e:	4b4d      	ldr	r3, [pc, #308]	; (8008464 <ErrorCheck_Running+0x2b8>)
 8008330:	2200      	movs	r2, #0
 8008332:	701a      	strb	r2, [r3, #0]
							 listError[countList].error_state = true;
 8008334:	4b47      	ldr	r3, [pc, #284]	; (8008454 <ErrorCheck_Running+0x2a8>)
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	4947      	ldr	r1, [pc, #284]	; (8008458 <ErrorCheck_Running+0x2ac>)
 800833a:	4613      	mov	r3, r2
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	4413      	add	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	440b      	add	r3, r1
 8008344:	3320      	adds	r3, #32
 8008346:	2201      	movs	r2, #1
 8008348:	701a      	strb	r2, [r3, #0]
				break;
 800834a:	e08e      	b.n	800846a <ErrorCheck_Running+0x2be>
					 if(countList == ID_UVDC1 || countList == ID_UVDC2)
 800834c:	4b41      	ldr	r3, [pc, #260]	; (8008454 <ErrorCheck_Running+0x2a8>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b03      	cmp	r3, #3
 8008352:	d003      	beq.n	800835c <ErrorCheck_Running+0x1b0>
 8008354:	4b3f      	ldr	r3, [pc, #252]	; (8008454 <ErrorCheck_Running+0x2a8>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b04      	cmp	r3, #4
 800835a:	d10d      	bne.n	8008378 <ErrorCheck_Running+0x1cc>
							 if(countList == ID_UVDC1) g_state_vin 	= true;
 800835c:	4b3d      	ldr	r3, [pc, #244]	; (8008454 <ErrorCheck_Running+0x2a8>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b03      	cmp	r3, #3
 8008362:	d102      	bne.n	800836a <ErrorCheck_Running+0x1be>
 8008364:	4b3e      	ldr	r3, [pc, #248]	; (8008460 <ErrorCheck_Running+0x2b4>)
 8008366:	2201      	movs	r2, #1
 8008368:	701a      	strb	r2, [r3, #0]
							 if(countList == ID_UVDC2) g_state_vout = true;
 800836a:	4b3a      	ldr	r3, [pc, #232]	; (8008454 <ErrorCheck_Running+0x2a8>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b04      	cmp	r3, #4
 8008370:	d102      	bne.n	8008378 <ErrorCheck_Running+0x1cc>
 8008372:	4b3c      	ldr	r3, [pc, #240]	; (8008464 <ErrorCheck_Running+0x2b8>)
 8008374:	2201      	movs	r2, #1
 8008376:	701a      	strb	r2, [r3, #0]
					 listError[countList].time_count = 0;
 8008378:	4b36      	ldr	r3, [pc, #216]	; (8008454 <ErrorCheck_Running+0x2a8>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	4936      	ldr	r1, [pc, #216]	; (8008458 <ErrorCheck_Running+0x2ac>)
 800837e:	4613      	mov	r3, r2
 8008380:	00db      	lsls	r3, r3, #3
 8008382:	4413      	add	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	440b      	add	r3, r1
 8008388:	3310      	adds	r3, #16
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]
				break;
 800838e:	e06c      	b.n	800846a <ErrorCheck_Running+0x2be>

			case TYPE_UP:
				if(fabs(*listError[countList].value_addr) >= listError[countList].value_limit)
 8008390:	4b30      	ldr	r3, [pc, #192]	; (8008454 <ErrorCheck_Running+0x2a8>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	4930      	ldr	r1, [pc, #192]	; (8008458 <ErrorCheck_Running+0x2ac>)
 8008396:	4613      	mov	r3, r2
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	440b      	add	r3, r1
 80083a0:	3318      	adds	r3, #24
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	edd3 7a00 	vldr	s15, [r3]
 80083a8:	eeb0 7ae7 	vabs.f32	s14, s15
 80083ac:	4b29      	ldr	r3, [pc, #164]	; (8008454 <ErrorCheck_Running+0x2a8>)
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	4929      	ldr	r1, [pc, #164]	; (8008458 <ErrorCheck_Running+0x2ac>)
 80083b2:	4613      	mov	r3, r2
 80083b4:	00db      	lsls	r3, r3, #3
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	440b      	add	r3, r1
 80083bc:	3304      	adds	r3, #4
 80083be:	edd3 7a00 	vldr	s15, [r3]
 80083c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ca:	db35      	blt.n	8008438 <ErrorCheck_Running+0x28c>
				 {
						 if(listError[countList].time_count < listError[countList].time_limit)
 80083cc:	4b21      	ldr	r3, [pc, #132]	; (8008454 <ErrorCheck_Running+0x2a8>)
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	4921      	ldr	r1, [pc, #132]	; (8008458 <ErrorCheck_Running+0x2ac>)
 80083d2:	4613      	mov	r3, r2
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	440b      	add	r3, r1
 80083dc:	3310      	adds	r3, #16
 80083de:	6819      	ldr	r1, [r3, #0]
 80083e0:	4b1c      	ldr	r3, [pc, #112]	; (8008454 <ErrorCheck_Running+0x2a8>)
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	481c      	ldr	r0, [pc, #112]	; (8008458 <ErrorCheck_Running+0x2ac>)
 80083e6:	4613      	mov	r3, r2
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4403      	add	r3, r0
 80083f0:	330c      	adds	r3, #12
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4299      	cmp	r1, r3
 80083f6:	d213      	bcs.n	8008420 <ErrorCheck_Running+0x274>
						 {
								 listError[countList].time_count++;
 80083f8:	4b16      	ldr	r3, [pc, #88]	; (8008454 <ErrorCheck_Running+0x2a8>)
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	4916      	ldr	r1, [pc, #88]	; (8008458 <ErrorCheck_Running+0x2ac>)
 80083fe:	4613      	mov	r3, r2
 8008400:	00db      	lsls	r3, r3, #3
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	440b      	add	r3, r1
 8008408:	3310      	adds	r3, #16
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	1c59      	adds	r1, r3, #1
 800840e:	4812      	ldr	r0, [pc, #72]	; (8008458 <ErrorCheck_Running+0x2ac>)
 8008410:	4613      	mov	r3, r2
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4403      	add	r3, r0
 800841a:	3310      	adds	r3, #16
 800841c:	6019      	str	r1, [r3, #0]
				 }
				 else
				 {
						 listError[countList].time_count = 0;
				 }
				 break;
 800841e:	e024      	b.n	800846a <ErrorCheck_Running+0x2be>
								 listError[countList].error_state = true;
 8008420:	4b0c      	ldr	r3, [pc, #48]	; (8008454 <ErrorCheck_Running+0x2a8>)
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	490c      	ldr	r1, [pc, #48]	; (8008458 <ErrorCheck_Running+0x2ac>)
 8008426:	4613      	mov	r3, r2
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	440b      	add	r3, r1
 8008430:	3320      	adds	r3, #32
 8008432:	2201      	movs	r2, #1
 8008434:	701a      	strb	r2, [r3, #0]
				 break;
 8008436:	e018      	b.n	800846a <ErrorCheck_Running+0x2be>
						 listError[countList].time_count = 0;
 8008438:	4b06      	ldr	r3, [pc, #24]	; (8008454 <ErrorCheck_Running+0x2a8>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4906      	ldr	r1, [pc, #24]	; (8008458 <ErrorCheck_Running+0x2ac>)
 800843e:	4613      	mov	r3, r2
 8008440:	00db      	lsls	r3, r3, #3
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	440b      	add	r3, r1
 8008448:	3310      	adds	r3, #16
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
				 break;
 800844e:	e00c      	b.n	800846a <ErrorCheck_Running+0x2be>
		continue;
 8008450:	bf00      	nop
 8008452:	e00a      	b.n	800846a <ErrorCheck_Running+0x2be>
 8008454:	200008a4 	.word	0x200008a4
 8008458:	20000300 	.word	0x20000300
 800845c:	20000934 	.word	0x20000934
 8008460:	20000937 	.word	0x20000937
 8008464:	20000938 	.word	0x20000938

		 default:
				 break;
 8008468:	bf00      	nop
	for(countList = 1; countList < ID_MAX; countList++){
 800846a:	4b06      	ldr	r3, [pc, #24]	; (8008484 <ErrorCheck_Running+0x2d8>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3301      	adds	r3, #1
 8008470:	4a04      	ldr	r2, [pc, #16]	; (8008484 <ErrorCheck_Running+0x2d8>)
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	4b03      	ldr	r3, [pc, #12]	; (8008484 <ErrorCheck_Running+0x2d8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b06      	cmp	r3, #6
 800847a:	f67f ae9f 	bls.w	80081bc <ErrorCheck_Running+0x10>
		}
	}
}
 800847e:	bf00      	nop
 8008480:	bf00      	nop
 8008482:	bd80      	pop	{r7, pc}
 8008484:	200008a4 	.word	0x200008a4

08008488 <UpdateCalc>:

static void UpdateCalc(void){
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
	s_mError[ID_OCDC1]	= g_iload;
 800848c:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <UpdateCalc+0x30>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a0a      	ldr	r2, [pc, #40]	; (80084bc <UpdateCalc+0x34>)
 8008492:	6153      	str	r3, [r2, #20]
	s_mError[ID_OCDC2]	= g_idumpload;
 8008494:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <UpdateCalc+0x38>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a08      	ldr	r2, [pc, #32]	; (80084bc <UpdateCalc+0x34>)
 800849a:	6193      	str	r3, [r2, #24]
	s_mError[ID_OVDC1]	= g_vin;
 800849c:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <UpdateCalc+0x3c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a06      	ldr	r2, [pc, #24]	; (80084bc <UpdateCalc+0x34>)
 80084a2:	6053      	str	r3, [r2, #4]
//	s_mError[ID_UVDC1]	= g_vin;
	s_mError[ID_OVDC2]	= g_vout;
 80084a4:	4b08      	ldr	r3, [pc, #32]	; (80084c8 <UpdateCalc+0x40>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a04      	ldr	r2, [pc, #16]	; (80084bc <UpdateCalc+0x34>)
 80084aa:	6093      	str	r3, [r2, #8]
//	s_mError[ID_UVDC2]	= g_vout;

}
 80084ac:	bf00      	nop
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	2000083c 	.word	0x2000083c
 80084bc:	200008a8 	.word	0x200008a8
 80084c0:	20000840 	.word	0x20000840
 80084c4:	20000834 	.word	0x20000834
 80084c8:	20000838 	.word	0x20000838

080084cc <getFaultInfo>:

ERROR_CODE getFaultInfo(){
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < ID_MAX; i++){
 80084d2:	2300      	movs	r3, #0
 80084d4:	607b      	str	r3, [r7, #4]
 80084d6:	e02d      	b.n	8008534 <getFaultInfo+0x68>
		if(listError[i].error_state == true && listError[i].active_err == ACTIVE){
 80084d8:	491b      	ldr	r1, [pc, #108]	; (8008548 <getFaultInfo+0x7c>)
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	4613      	mov	r3, r2
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	4413      	add	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	440b      	add	r3, r1
 80084e6:	3320      	adds	r3, #32
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d01f      	beq.n	800852e <getFaultInfo+0x62>
 80084ee:	4916      	ldr	r1, [pc, #88]	; (8008548 <getFaultInfo+0x7c>)
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	4613      	mov	r3, r2
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	440b      	add	r3, r1
 80084fc:	3321      	adds	r3, #33	; 0x21
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d114      	bne.n	800852e <getFaultInfo+0x62>
			if(listError[i].code_err != CODE_OK){
 8008504:	4910      	ldr	r1, [pc, #64]	; (8008548 <getFaultInfo+0x7c>)
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	4613      	mov	r3, r2
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	4413      	add	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	440b      	add	r3, r1
 8008512:	3301      	adds	r3, #1
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d009      	beq.n	800852e <getFaultInfo+0x62>
				return listError[i].code_err;
 800851a:	490b      	ldr	r1, [pc, #44]	; (8008548 <getFaultInfo+0x7c>)
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	4613      	mov	r3, r2
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	4413      	add	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	440b      	add	r3, r1
 8008528:	3301      	adds	r3, #1
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	e006      	b.n	800853c <getFaultInfo+0x70>
	for(i = 0; i < ID_MAX; i++){
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	3301      	adds	r3, #1
 8008532:	607b      	str	r3, [r7, #4]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b06      	cmp	r3, #6
 8008538:	ddce      	ble.n	80084d8 <getFaultInfo+0xc>
			}
		}
	}
	return CODE_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	20000300 	.word	0x20000300

0800854c <serial_init>:

extern serial_obj *serial_test_1;
volatile ManagerVariable g_guiValue;
MPPT_PNO mppt_pno;

void serial_init(){
 800854c:	b580      	push	{r7, lr}
 800854e:	af00      	add	r7, sp, #0
	serial_test_1 = create_serial(1, 9600, 512, 512);
 8008550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008558:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800855c:	2001      	movs	r0, #1
 800855e:	f7ff fafb 	bl	8007b58 <create_serial>
 8008562:	4603      	mov	r3, r0
 8008564:	4a01      	ldr	r2, [pc, #4]	; (800856c <serial_init+0x20>)
 8008566:	6013      	str	r3, [r2, #0]
}
 8008568:	bf00      	nop
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20000874 	.word	0x20000874

08008570 <initGlobalVariables>:

void initGlobalVariables(void){
 8008570:	b580      	push	{r7, lr}
 8008572:	af00      	add	r7, sp, #0
	memset((void*)&g_guiValue, 0, sizeof(g_guiValue));
 8008574:	2220      	movs	r2, #32
 8008576:	2100      	movs	r1, #0
 8008578:	4805      	ldr	r0, [pc, #20]	; (8008590 <initGlobalVariables+0x20>)
 800857a:	f000 fd1f 	bl	8008fbc <memset>
	ModbusAddVariable(debug_modbus, MONITOR_VAR_ADDR, (void*)&g_guiValue, sizeof(g_guiValue));
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <initGlobalVariables+0x24>)
 8008580:	6818      	ldr	r0, [r3, #0]
 8008582:	2320      	movs	r3, #32
 8008584:	4a02      	ldr	r2, [pc, #8]	; (8008590 <initGlobalVariables+0x20>)
 8008586:	2100      	movs	r1, #0
 8008588:	f7fe fec6 	bl	8007318 <ModbusAddVariable>
}
 800858c:	bf00      	nop
 800858e:	bd80      	pop	{r7, pc}
 8008590:	200008c4 	.word	0x200008c4
 8008594:	20000870 	.word	0x20000870

08008598 <UpdateAllVariable>:

void UpdateAllVariable(void){
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
	g_guiValue.guiVin 	= g_signal_value[VIN].val_control 	* g_signal_value[VIN].gain;
 800859c:	4b28      	ldr	r3, [pc, #160]	; (8008640 <UpdateAllVariable+0xa8>)
 800859e:	ed93 7a01 	vldr	s14, [r3, #4]
 80085a2:	4b27      	ldr	r3, [pc, #156]	; (8008640 <UpdateAllVariable+0xa8>)
 80085a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80085a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ac:	4b25      	ldr	r3, [pc, #148]	; (8008644 <UpdateAllVariable+0xac>)
 80085ae:	edc3 7a00 	vstr	s15, [r3]
	g_guiValue.guiVout	= g_signal_value[VOUT].val_control 	* g_signal_value[VOUT].gain;
 80085b2:	4b23      	ldr	r3, [pc, #140]	; (8008640 <UpdateAllVariable+0xa8>)
 80085b4:	ed93 7a06 	vldr	s14, [r3, #24]
 80085b8:	4b21      	ldr	r3, [pc, #132]	; (8008640 <UpdateAllVariable+0xa8>)
 80085ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80085be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c2:	4b20      	ldr	r3, [pc, #128]	; (8008644 <UpdateAllVariable+0xac>)
 80085c4:	edc3 7a01 	vstr	s15, [r3, #4]
	g_guiValue.guiIload	= g_signal_value[ILOAD].val_control * g_signal_value[ILOAD].gain;
 80085c8:	4b1d      	ldr	r3, [pc, #116]	; (8008640 <UpdateAllVariable+0xa8>)
 80085ca:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80085ce:	4b1c      	ldr	r3, [pc, #112]	; (8008640 <UpdateAllVariable+0xa8>)
 80085d0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80085d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d8:	4b1a      	ldr	r3, [pc, #104]	; (8008644 <UpdateAllVariable+0xac>)
 80085da:	edc3 7a02 	vstr	s15, [r3, #8]
	g_guiValue.guiIdump	= g_signal_value[IDUMP].val_control * g_signal_value[IDUMP].gain;
 80085de:	4b18      	ldr	r3, [pc, #96]	; (8008640 <UpdateAllVariable+0xa8>)
 80085e0:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80085e4:	4b16      	ldr	r3, [pc, #88]	; (8008640 <UpdateAllVariable+0xa8>)
 80085e6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80085ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ee:	4b15      	ldr	r3, [pc, #84]	; (8008644 <UpdateAllVariable+0xac>)
 80085f0:	edc3 7a03 	vstr	s15, [r3, #12]
	g_guiValue.guiPwind = g_guiValue.guiVin * g_guiValue.guiIload;
 80085f4:	4b13      	ldr	r3, [pc, #76]	; (8008644 <UpdateAllVariable+0xac>)
 80085f6:	ed93 7a00 	vldr	s14, [r3]
 80085fa:	4b12      	ldr	r3, [pc, #72]	; (8008644 <UpdateAllVariable+0xac>)
 80085fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8008600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008604:	4b0f      	ldr	r3, [pc, #60]	; (8008644 <UpdateAllVariable+0xac>)
 8008606:	edc3 7a04 	vstr	s15, [r3, #16]
	g_guiValue.guiDref 	= mppt_pno.D_ref;
 800860a:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <UpdateAllVariable+0xb0>)
 800860c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860e:	4a0d      	ldr	r2, [pc, #52]	; (8008644 <UpdateAllVariable+0xac>)
 8008610:	6153      	str	r3, [r2, #20]
	g_guiValue.guiErrCode = faultInfo;
 8008612:	4b0e      	ldr	r3, [pc, #56]	; (800864c <UpdateAllVariable+0xb4>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	ee07 3a90 	vmov	s15, r3
 800861a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861e:	4b09      	ldr	r3, [pc, #36]	; (8008644 <UpdateAllVariable+0xac>)
 8008620:	edc3 7a06 	vstr	s15, [r3, #24]
	g_guiValue.guiStatus = g_current_state;
 8008624:	4b0a      	ldr	r3, [pc, #40]	; (8008650 <UpdateAllVariable+0xb8>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	ee07 3a90 	vmov	s15, r3
 800862c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008630:	4b04      	ldr	r3, [pc, #16]	; (8008644 <UpdateAllVariable+0xac>)
 8008632:	edc3 7a07 	vstr	s15, [r3, #28]
//	g_guiValue.guiIdump = 22;
//	g_guiValue.guiPwind = 2;
//	g_guiValue.guiDref 	= 1;
//	g_guiValue.guiErrCode = 6;
//	g_guiValue.guiStatus = 7;
}
 8008636:	bf00      	nop
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	20000028 	.word	0x20000028
 8008644:	200008c4 	.word	0x200008c4
 8008648:	200008e4 	.word	0x200008e4
 800864c:	20000936 	.word	0x20000936
 8008650:	20000934 	.word	0x20000934

08008654 <StateInit>:
        {STATE_CLOSE_LOOP,                      STATE_CLOSE_LOOP,                       STATE_RESET,                        100,               &CloseLoop,                 true,                   CODE_OK},
        {STATE_RESET,                           STATE_WIND_OFF,                         STATE_ERR,                          100,               &StateReset,                true,                   CODE_ERR},
        {STATE_ERR,                             STATE_ERR,                              STATE_ERR,                          100,               &ErrorFunction,             false,                  CODE_ERR}};

void StateInit(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	af00      	add	r7, sp, #0
    g_current_state = STATE_WIND_OFF;
 8008658:	4b03      	ldr	r3, [pc, #12]	; (8008668 <StateInit+0x14>)
 800865a:	2200      	movs	r2, #0
 800865c:	701a      	strb	r2, [r3, #0]
    Timer1kHzAddCallback(&StateMachineRunning);
 800865e:	4803      	ldr	r0, [pc, #12]	; (800866c <StateInit+0x18>)
 8008660:	f7ff fb2a 	bl	8007cb8 <Timer1kHzAddCallback>
//		Timer1kHzAddCallBack(&Run_Mode_Dumpload);
}
 8008664:	bf00      	nop
 8008666:	bd80      	pop	{r7, pc}
 8008668:	20000934 	.word	0x20000934
 800866c:	08008671 	.word	0x08008671

08008670 <StateMachineRunning>:

static void StateMachineRunning()
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
    static uint32_t tick = 0, loop_check_err = 0;
    static ERROR_CODE protect_ret;
    static FUNCTION_RETURN ret;
    int i;
    tick++;
 8008676:	4b74      	ldr	r3, [pc, #464]	; (8008848 <StateMachineRunning+0x1d8>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3301      	adds	r3, #1
 800867c:	4a72      	ldr	r2, [pc, #456]	; (8008848 <StateMachineRunning+0x1d8>)
 800867e:	6013      	str	r3, [r2, #0]
    loop_check_err++;
 8008680:	4b72      	ldr	r3, [pc, #456]	; (800884c <StateMachineRunning+0x1dc>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3301      	adds	r3, #1
 8008686:	4a71      	ldr	r2, [pc, #452]	; (800884c <StateMachineRunning+0x1dc>)
 8008688:	6013      	str	r3, [r2, #0]
    if (loop_check_err >= ERR_LOOP_DIV)
 800868a:	4b70      	ldr	r3, [pc, #448]	; (800884c <StateMachineRunning+0x1dc>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b04      	cmp	r3, #4
 8008690:	d92b      	bls.n	80086ea <StateMachineRunning+0x7a>
    {
        loop_check_err = 0;
 8008692:	4b6e      	ldr	r3, [pc, #440]	; (800884c <StateMachineRunning+0x1dc>)
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]
        if (g_current_state != STATE_WIND_OFF && g_current_state != STATE_RESET)
 8008698:	4b6d      	ldr	r3, [pc, #436]	; (8008850 <StateMachineRunning+0x1e0>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d024      	beq.n	80086ea <StateMachineRunning+0x7a>
 80086a0:	4b6b      	ldr	r3, [pc, #428]	; (8008850 <StateMachineRunning+0x1e0>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d020      	beq.n	80086ea <StateMachineRunning+0x7a>
        {
            ErrorCheck_Running();
 80086a8:	f7ff fd80 	bl	80081ac <ErrorCheck_Running>
            protect_ret = getFaultInfo();
 80086ac:	f7ff ff0e 	bl	80084cc <getFaultInfo>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	4b67      	ldr	r3, [pc, #412]	; (8008854 <StateMachineRunning+0x1e4>)
 80086b6:	701a      	strb	r2, [r3, #0]
            if (protect_ret != CODE_OK && faultInfo == CODE_OK)
 80086b8:	4b66      	ldr	r3, [pc, #408]	; (8008854 <StateMachineRunning+0x1e4>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d014      	beq.n	80086ea <StateMachineRunning+0x7a>
 80086c0:	4b65      	ldr	r3, [pc, #404]	; (8008858 <StateMachineRunning+0x1e8>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d110      	bne.n	80086ea <StateMachineRunning+0x7a>
            {
                faultInfo = protect_ret;
 80086c8:	4b62      	ldr	r3, [pc, #392]	; (8008854 <StateMachineRunning+0x1e4>)
 80086ca:	781a      	ldrb	r2, [r3, #0]
 80086cc:	4b62      	ldr	r3, [pc, #392]	; (8008858 <StateMachineRunning+0x1e8>)
 80086ce:	701a      	strb	r2, [r3, #0]
                g_current_state = STATE_RESET;
 80086d0:	4b5f      	ldr	r3, [pc, #380]	; (8008850 <StateMachineRunning+0x1e0>)
 80086d2:	2203      	movs	r2, #3
 80086d4:	701a      	strb	r2, [r3, #0]
                tick = 0;
 80086d6:	4b5c      	ldr	r3, [pc, #368]	; (8008848 <StateMachineRunning+0x1d8>)
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]
                prv_state = g_current_state;
 80086dc:	4b5c      	ldr	r3, [pc, #368]	; (8008850 <StateMachineRunning+0x1e0>)
 80086de:	781a      	ldrb	r2, [r3, #0]
 80086e0:	4b5e      	ldr	r3, [pc, #376]	; (800885c <StateMachineRunning+0x1ec>)
 80086e2:	701a      	strb	r2, [r3, #0]
                IsStartState = true;
 80086e4:	4b5e      	ldr	r3, [pc, #376]	; (8008860 <StateMachineRunning+0x1f0>)
 80086e6:	2201      	movs	r2, #1
 80086e8:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    for (i = 0; i < STATE_MAX; i++)
 80086ea:	2300      	movs	r3, #0
 80086ec:	607b      	str	r3, [r7, #4]
 80086ee:	e090      	b.n	8008812 <StateMachineRunning+0x1a2>
    {
        if (g_current_state == state_list[i].id)
 80086f0:	4a5c      	ldr	r2, [pc, #368]	; (8008864 <StateMachineRunning+0x1f4>)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	011b      	lsls	r3, r3, #4
 80086f6:	4413      	add	r3, r2
 80086f8:	781a      	ldrb	r2, [r3, #0]
 80086fa:	4b55      	ldr	r3, [pc, #340]	; (8008850 <StateMachineRunning+0x1e0>)
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	429a      	cmp	r2, r3
 8008700:	f040 8084 	bne.w	800880c <StateMachineRunning+0x19c>
        {
            if (tick < state_list[i].time_running)
 8008704:	4a57      	ldr	r2, [pc, #348]	; (8008864 <StateMachineRunning+0x1f4>)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	011b      	lsls	r3, r3, #4
 800870a:	4413      	add	r3, r2
 800870c:	3304      	adds	r3, #4
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	4b4d      	ldr	r3, [pc, #308]	; (8008848 <StateMachineRunning+0x1d8>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	429a      	cmp	r2, r3
 8008716:	d94d      	bls.n	80087b4 <StateMachineRunning+0x144>
            {
                if (state_list[i].fn != NULL)
 8008718:	4a52      	ldr	r2, [pc, #328]	; (8008864 <StateMachineRunning+0x1f4>)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	4413      	add	r3, r2
 8008720:	3308      	adds	r3, #8
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d079      	beq.n	800881c <StateMachineRunning+0x1ac>
                {
                    ret = state_list[i].fn();
 8008728:	4a4e      	ldr	r2, [pc, #312]	; (8008864 <StateMachineRunning+0x1f4>)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	011b      	lsls	r3, r3, #4
 800872e:	4413      	add	r3, r2
 8008730:	3308      	adds	r3, #8
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4798      	blx	r3
 8008736:	4603      	mov	r3, r0
 8008738:	461a      	mov	r2, r3
 800873a:	4b4b      	ldr	r3, [pc, #300]	; (8008868 <StateMachineRunning+0x1f8>)
 800873c:	701a      	strb	r2, [r3, #0]
                    IsStartState = false;
 800873e:	4b48      	ldr	r3, [pc, #288]	; (8008860 <StateMachineRunning+0x1f0>)
 8008740:	2200      	movs	r2, #0
 8008742:	701a      	strb	r2, [r3, #0]
                    if (state_list[i].is_always_true == true)
 8008744:	4a47      	ldr	r2, [pc, #284]	; (8008864 <StateMachineRunning+0x1f4>)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	011b      	lsls	r3, r3, #4
 800874a:	4413      	add	r3, r2
 800874c:	330c      	adds	r3, #12
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d01f      	beq.n	8008794 <StateMachineRunning+0x124>
                    {
                        if (ret == FUNCTION_FAIL)
 8008754:	4b44      	ldr	r3, [pc, #272]	; (8008868 <StateMachineRunning+0x1f8>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2b03      	cmp	r3, #3
 800875a:	d15f      	bne.n	800881c <StateMachineRunning+0x1ac>
                        {
                            g_current_state = state_list[i].back;
 800875c:	4a41      	ldr	r2, [pc, #260]	; (8008864 <StateMachineRunning+0x1f4>)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	011b      	lsls	r3, r3, #4
 8008762:	4413      	add	r3, r2
 8008764:	3302      	adds	r3, #2
 8008766:	781a      	ldrb	r2, [r3, #0]
 8008768:	4b39      	ldr	r3, [pc, #228]	; (8008850 <StateMachineRunning+0x1e0>)
 800876a:	701a      	strb	r2, [r3, #0]
                            tick = 0;
 800876c:	4b36      	ldr	r3, [pc, #216]	; (8008848 <StateMachineRunning+0x1d8>)
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
                            if (state_list[i].code_fault != CODE_OK)
 8008772:	4a3c      	ldr	r2, [pc, #240]	; (8008864 <StateMachineRunning+0x1f4>)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	4413      	add	r3, r2
 800877a:	330d      	adds	r3, #13
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d04c      	beq.n	800881c <StateMachineRunning+0x1ac>
                                faultInfo = state_list[i].code_fault;
 8008782:	4a38      	ldr	r2, [pc, #224]	; (8008864 <StateMachineRunning+0x1f4>)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	4413      	add	r3, r2
 800878a:	330d      	adds	r3, #13
 800878c:	781a      	ldrb	r2, [r3, #0]
 800878e:	4b32      	ldr	r3, [pc, #200]	; (8008858 <StateMachineRunning+0x1e8>)
 8008790:	701a      	strb	r2, [r3, #0]
                    tick = 0;
                    if (state_list[i].code_fault != CODE_OK)
                        faultInfo = state_list[i].code_fault;
                }
            }
            break;
 8008792:	e043      	b.n	800881c <StateMachineRunning+0x1ac>
                        if (ret == FUNCTION_DONE)
 8008794:	4b34      	ldr	r3, [pc, #208]	; (8008868 <StateMachineRunning+0x1f8>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b02      	cmp	r3, #2
 800879a:	d13f      	bne.n	800881c <StateMachineRunning+0x1ac>
                            g_current_state = state_list[i].next;
 800879c:	4a31      	ldr	r2, [pc, #196]	; (8008864 <StateMachineRunning+0x1f4>)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	011b      	lsls	r3, r3, #4
 80087a2:	4413      	add	r3, r2
 80087a4:	3301      	adds	r3, #1
 80087a6:	781a      	ldrb	r2, [r3, #0]
 80087a8:	4b29      	ldr	r3, [pc, #164]	; (8008850 <StateMachineRunning+0x1e0>)
 80087aa:	701a      	strb	r2, [r3, #0]
                            tick = 0;
 80087ac:	4b26      	ldr	r3, [pc, #152]	; (8008848 <StateMachineRunning+0x1d8>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	601a      	str	r2, [r3, #0]
            break;
 80087b2:	e033      	b.n	800881c <StateMachineRunning+0x1ac>
                if (ret == FUNCTION_DONE)
 80087b4:	4b2c      	ldr	r3, [pc, #176]	; (8008868 <StateMachineRunning+0x1f8>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d10b      	bne.n	80087d4 <StateMachineRunning+0x164>
                    g_current_state = state_list[i].next;
 80087bc:	4a29      	ldr	r2, [pc, #164]	; (8008864 <StateMachineRunning+0x1f4>)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	011b      	lsls	r3, r3, #4
 80087c2:	4413      	add	r3, r2
 80087c4:	3301      	adds	r3, #1
 80087c6:	781a      	ldrb	r2, [r3, #0]
 80087c8:	4b21      	ldr	r3, [pc, #132]	; (8008850 <StateMachineRunning+0x1e0>)
 80087ca:	701a      	strb	r2, [r3, #0]
                    tick = 0;
 80087cc:	4b1e      	ldr	r3, [pc, #120]	; (8008848 <StateMachineRunning+0x1d8>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	601a      	str	r2, [r3, #0]
            break;
 80087d2:	e023      	b.n	800881c <StateMachineRunning+0x1ac>
                    g_current_state = state_list[i].back;
 80087d4:	4a23      	ldr	r2, [pc, #140]	; (8008864 <StateMachineRunning+0x1f4>)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	011b      	lsls	r3, r3, #4
 80087da:	4413      	add	r3, r2
 80087dc:	3302      	adds	r3, #2
 80087de:	781a      	ldrb	r2, [r3, #0]
 80087e0:	4b1b      	ldr	r3, [pc, #108]	; (8008850 <StateMachineRunning+0x1e0>)
 80087e2:	701a      	strb	r2, [r3, #0]
                    tick = 0;
 80087e4:	4b18      	ldr	r3, [pc, #96]	; (8008848 <StateMachineRunning+0x1d8>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]
                    if (state_list[i].code_fault != CODE_OK)
 80087ea:	4a1e      	ldr	r2, [pc, #120]	; (8008864 <StateMachineRunning+0x1f4>)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	011b      	lsls	r3, r3, #4
 80087f0:	4413      	add	r3, r2
 80087f2:	330d      	adds	r3, #13
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d010      	beq.n	800881c <StateMachineRunning+0x1ac>
                        faultInfo = state_list[i].code_fault;
 80087fa:	4a1a      	ldr	r2, [pc, #104]	; (8008864 <StateMachineRunning+0x1f4>)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	4413      	add	r3, r2
 8008802:	330d      	adds	r3, #13
 8008804:	781a      	ldrb	r2, [r3, #0]
 8008806:	4b14      	ldr	r3, [pc, #80]	; (8008858 <StateMachineRunning+0x1e8>)
 8008808:	701a      	strb	r2, [r3, #0]
            break;
 800880a:	e007      	b.n	800881c <StateMachineRunning+0x1ac>
    for (i = 0; i < STATE_MAX; i++)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3301      	adds	r3, #1
 8008810:	607b      	str	r3, [r7, #4]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b04      	cmp	r3, #4
 8008816:	f77f af6b 	ble.w	80086f0 <StateMachineRunning+0x80>
 800881a:	e000      	b.n	800881e <StateMachineRunning+0x1ae>
            break;
 800881c:	bf00      	nop
        }
    }

    if (prv_state != g_current_state)
 800881e:	4b0f      	ldr	r3, [pc, #60]	; (800885c <StateMachineRunning+0x1ec>)
 8008820:	781a      	ldrb	r2, [r3, #0]
 8008822:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <StateMachineRunning+0x1e0>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	429a      	cmp	r2, r3
 8008828:	d009      	beq.n	800883e <StateMachineRunning+0x1ce>
    {
        tick = 0;
 800882a:	4b07      	ldr	r3, [pc, #28]	; (8008848 <StateMachineRunning+0x1d8>)
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]
        prv_state = g_current_state;
 8008830:	4b07      	ldr	r3, [pc, #28]	; (8008850 <StateMachineRunning+0x1e0>)
 8008832:	781a      	ldrb	r2, [r3, #0]
 8008834:	4b09      	ldr	r3, [pc, #36]	; (800885c <StateMachineRunning+0x1ec>)
 8008836:	701a      	strb	r2, [r3, #0]
        IsStartState = true;
 8008838:	4b09      	ldr	r3, [pc, #36]	; (8008860 <StateMachineRunning+0x1f0>)
 800883a:	2201      	movs	r2, #1
 800883c:	701a      	strb	r2, [r3, #0]
    }
}
 800883e:	bf00      	nop
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	2000093c 	.word	0x2000093c
 800884c:	20000940 	.word	0x20000940
 8008850:	20000934 	.word	0x20000934
 8008854:	20000944 	.word	0x20000944
 8008858:	20000936 	.word	0x20000936
 800885c:	20000935 	.word	0x20000935
 8008860:	200003fc 	.word	0x200003fc
 8008864:	20000400 	.word	0x20000400
 8008868:	20000945 	.word	0x20000945

0800886c <WindOff>:

static FUNCTION_RETURN WindOff(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	af00      	add	r7, sp, #0
    if (IsStartState == true)
 8008870:	4b05      	ldr	r3, [pc, #20]	; (8008888 <WindOff+0x1c>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d004      	beq.n	8008882 <WindOff+0x16>
    {
        ErrorCheckInit();
 8008878:	f7ff fc4c 	bl	8008114 <ErrorCheckInit>
        faultInfo = CODE_OK;
 800887c:	4b03      	ldr	r3, [pc, #12]	; (800888c <WindOff+0x20>)
 800887e:	2200      	movs	r2, #0
 8008880:	701a      	strb	r2, [r3, #0]
    }
    return FUNCTION_DONE;
 8008882:	2302      	movs	r3, #2
}
 8008884:	4618      	mov	r0, r3
 8008886:	bd80      	pop	{r7, pc}
 8008888:	200003fc 	.word	0x200003fc
 800888c:	20000936 	.word	0x20000936

08008890 <CheckWind>:

static FUNCTION_RETURN CheckWind(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0
    if (g_wind.vwt > DC_MIN_INPUT && g_wind.vwt < DC_MAX_INPUT)
 8008894:	4b33      	ldr	r3, [pc, #204]	; (8008964 <CheckWind+0xd4>)
 8008896:	edd3 7a01 	vldr	s15, [r3, #4]
 800889a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800889e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a2:	dd0c      	ble.n	80088be <CheckWind+0x2e>
 80088a4:	4b2f      	ldr	r3, [pc, #188]	; (8008964 <CheckWind+0xd4>)
 80088a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80088aa:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008968 <CheckWind+0xd8>
 80088ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b6:	d502      	bpl.n	80088be <CheckWind+0x2e>
    {
        WindControlInit(&g_wind);
 80088b8:	482a      	ldr	r0, [pc, #168]	; (8008964 <CheckWind+0xd4>)
 80088ba:	f000 f963 	bl	8008b84 <WindControlInit>
    }

    if (g_wind.is_plugin == true)
 80088be:	4b29      	ldr	r3, [pc, #164]	; (8008964 <CheckWind+0xd4>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <CheckWind+0x3a>
    {
        return FUNCTION_DONE;
 80088c6:	2302      	movs	r3, #2
 80088c8:	e049      	b.n	800895e <CheckWind+0xce>
    }
    else
    {
        if(g_wind.vwt > DC_MAX_INPUT)
 80088ca:	4b26      	ldr	r3, [pc, #152]	; (8008964 <CheckWind+0xd4>)
 80088cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80088d0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008968 <CheckWind+0xd8>
 80088d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088dc:	dd06      	ble.n	80088ec <CheckWind+0x5c>
        {
            faultInfo = CODE_OVDC1;
 80088de:	4b23      	ldr	r3, [pc, #140]	; (800896c <CheckWind+0xdc>)
 80088e0:	2208      	movs	r2, #8
 80088e2:	701a      	strb	r2, [r3, #0]
            Pin_Func_TurnOff(LED1);
 80088e4:	2000      	movs	r0, #0
 80088e6:	f7fe fefb 	bl	80076e0 <Pin_Func_TurnOff>
 80088ea:	e013      	b.n	8008914 <CheckWind+0x84>
        }
        else if(g_wind.vwt <= DC_MIN_INPUT)
 80088ec:	4b1d      	ldr	r3, [pc, #116]	; (8008964 <CheckWind+0xd4>)
 80088ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80088f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088fa:	d80b      	bhi.n	8008914 <CheckWind+0x84>
        {
            faultInfo = NoWindInput;
 80088fc:	4b1b      	ldr	r3, [pc, #108]	; (800896c <CheckWind+0xdc>)
 80088fe:	2202      	movs	r2, #2
 8008900:	701a      	strb	r2, [r3, #0]
            Pin_Func_TurnOff(LED1);
 8008902:	2000      	movs	r0, #0
 8008904:	f7fe feec 	bl	80076e0 <Pin_Func_TurnOff>
            Pin_Func_TurnOff(LED2);
 8008908:	2001      	movs	r0, #1
 800890a:	f7fe fee9 	bl	80076e0 <Pin_Func_TurnOff>
            Pin_Func_TurnOff(LED3);
 800890e:	2002      	movs	r0, #2
 8008910:	f7fe fee6 	bl	80076e0 <Pin_Func_TurnOff>
        }
    }
		if(g_vout > BAT_MIN_INPUT && g_vout < BAT_MAX_INPUT )
 8008914:	4b16      	ldr	r3, [pc, #88]	; (8008970 <CheckWind+0xe0>)
 8008916:	edd3 7a00 	vldr	s15, [r3]
 800891a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8008974 <CheckWind+0xe4>
 800891e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008926:	dd0d      	ble.n	8008944 <CheckWind+0xb4>
 8008928:	4b11      	ldr	r3, [pc, #68]	; (8008970 <CheckWind+0xe0>)
 800892a:	edd3 7a00 	vldr	s15, [r3]
 800892e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8008978 <CheckWind+0xe8>
 8008932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800893a:	d503      	bpl.n	8008944 <CheckWind+0xb4>
		{
				g_state_bat = true;
 800893c:	4b0f      	ldr	r3, [pc, #60]	; (800897c <CheckWind+0xec>)
 800893e:	2201      	movs	r2, #1
 8008940:	701a      	strb	r2, [r3, #0]
 8008942:	e002      	b.n	800894a <CheckWind+0xba>
		}
		else
		{
				g_state_bat = false;
 8008944:	4b0d      	ldr	r3, [pc, #52]	; (800897c <CheckWind+0xec>)
 8008946:	2200      	movs	r2, #0
 8008948:	701a      	strb	r2, [r3, #0]
		}
		if(g_state_bat == true)
 800894a:	4b0c      	ldr	r3, [pc, #48]	; (800897c <CheckWind+0xec>)
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <CheckWind+0xc6>
		{
				return FUNCTION_DONE;
 8008952:	2302      	movs	r3, #2
 8008954:	e003      	b.n	800895e <CheckWind+0xce>
		}
		else
		{
				faultInfo = NoBatInput;
 8008956:	4b05      	ldr	r3, [pc, #20]	; (800896c <CheckWind+0xdc>)
 8008958:	2203      	movs	r2, #3
 800895a:	701a      	strb	r2, [r3, #0]
		}
    return FUNCTION_FAIL;
 800895c:	2303      	movs	r3, #3
}
 800895e:	4618      	mov	r0, r3
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	2000094c 	.word	0x2000094c
 8008968:	43160000 	.word	0x43160000
 800896c:	20000936 	.word	0x20000936
 8008970:	20000838 	.word	0x20000838
 8008974:	42140000 	.word	0x42140000
 8008978:	42700000 	.word	0x42700000
 800897c:	20000939 	.word	0x20000939

08008980 <CloseLoop>:

static FUNCTION_RETURN CloseLoop(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
    static uint32_t count_wind = 0;
    if(g_wind.vwt > DC_MIN_INPUT && g_wind.vwt < DC_MAX_INPUT && g_state_bat == true)
 8008984:	4b5c      	ldr	r3, [pc, #368]	; (8008af8 <CloseLoop+0x178>)
 8008986:	edd3 7a01 	vldr	s15, [r3, #4]
 800898a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800898e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008992:	dd14      	ble.n	80089be <CloseLoop+0x3e>
 8008994:	4b58      	ldr	r3, [pc, #352]	; (8008af8 <CloseLoop+0x178>)
 8008996:	edd3 7a01 	vldr	s15, [r3, #4]
 800899a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8008afc <CloseLoop+0x17c>
 800899e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a6:	d50a      	bpl.n	80089be <CloseLoop+0x3e>
 80089a8:	4b55      	ldr	r3, [pc, #340]	; (8008b00 <CloseLoop+0x180>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d006      	beq.n	80089be <CloseLoop+0x3e>
    {
        g_wind.is_plugin = true;
 80089b0:	4b51      	ldr	r3, [pc, #324]	; (8008af8 <CloseLoop+0x178>)
 80089b2:	2201      	movs	r2, #1
 80089b4:	701a      	strb	r2, [r3, #0]
        faultInfo = CODE_OK;
 80089b6:	4b53      	ldr	r3, [pc, #332]	; (8008b04 <CloseLoop+0x184>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	701a      	strb	r2, [r3, #0]
 80089bc:	e002      	b.n	80089c4 <CloseLoop+0x44>
    }
    else{
        g_wind.is_plugin = false;
 80089be:	4b4e      	ldr	r3, [pc, #312]	; (8008af8 <CloseLoop+0x178>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	701a      	strb	r2, [r3, #0]
    }

    if(g_wind.is_plugin == true)
 80089c4:	4b4c      	ldr	r3, [pc, #304]	; (8008af8 <CloseLoop+0x178>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d049      	beq.n	8008a60 <CloseLoop+0xe0>
    {
        if(g_vout < MAX_VOUT && g_iload < MAX_ILOAD)
 80089cc:	4b4e      	ldr	r3, [pc, #312]	; (8008b08 <CloseLoop+0x188>)
 80089ce:	edd3 7a00 	vldr	s15, [r3]
 80089d2:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8008b0c <CloseLoop+0x18c>
 80089d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089de:	d514      	bpl.n	8008a0a <CloseLoop+0x8a>
 80089e0:	4b4b      	ldr	r3, [pc, #300]	; (8008b10 <CloseLoop+0x190>)
 80089e2:	edd3 7a00 	vldr	s15, [r3]
 80089e6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80089ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f2:	d50a      	bpl.n	8008a0a <CloseLoop+0x8a>
        {
            faultInfo = CODE_OK;
 80089f4:	4b43      	ldr	r3, [pc, #268]	; (8008b04 <CloseLoop+0x184>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	701a      	strb	r2, [r3, #0]
            DcDc_ControllerMppt();
 80089fa:	f7ff fa71 	bl	8007ee0 <DcDc_ControllerMppt>
			DC_StartPWM_Boost();
 80089fe:	f7ff fa3f 	bl	8007e80 <DC_StartPWM_Boost>
			DC_StartPWM_Buck();
 8008a02:	f7ff fa5b 	bl	8007ebc <DC_StartPWM_Buck>
		{
			faultInfo = CODE_OCDC1;
		}
        return FUNCTION_FAIL;
    }
    return FUNCTION_DONE;
 8008a06:	2302      	movs	r3, #2
 8008a08:	e073      	b.n	8008af2 <CloseLoop+0x172>
            if(g_vout > MAX_VOUT)
 8008a0a:	4b3f      	ldr	r3, [pc, #252]	; (8008b08 <CloseLoop+0x188>)
 8008a0c:	edd3 7a00 	vldr	s15, [r3]
 8008a10:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8008b0c <CloseLoop+0x18c>
 8008a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a1c:	dd0a      	ble.n	8008a34 <CloseLoop+0xb4>
                faultInfo = CODE_OVDC2;
 8008a1e:	4b39      	ldr	r3, [pc, #228]	; (8008b04 <CloseLoop+0x184>)
 8008a20:	2209      	movs	r2, #9
 8008a22:	701a      	strb	r2, [r3, #0]
                DC_StopPWM_Buck();
 8008a24:	f7ff fa3e 	bl	8007ea4 <DC_StopPWM_Buck>
                DC_StopPWM_Boost();
 8008a28:	f7ff fa1e 	bl	8007e68 <DC_StopPWM_Boost>
                Pin_Func_TurnOn(LED2);
 8008a2c:	2001      	movs	r0, #1
 8008a2e:	f7fe fe2d 	bl	800768c <Pin_Func_TurnOn>
 8008a32:	e013      	b.n	8008a5c <CloseLoop+0xdc>
            else if(g_iload > MAX_ILOAD)
 8008a34:	4b36      	ldr	r3, [pc, #216]	; (8008b10 <CloseLoop+0x190>)
 8008a36:	edd3 7a00 	vldr	s15, [r3]
 8008a3a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a46:	dd09      	ble.n	8008a5c <CloseLoop+0xdc>
                faultInfo = CODE_OCDC1;
 8008a48:	4b2e      	ldr	r3, [pc, #184]	; (8008b04 <CloseLoop+0x184>)
 8008a4a:	220c      	movs	r2, #12
 8008a4c:	701a      	strb	r2, [r3, #0]
                DC_StopPWM_Buck();
 8008a4e:	f7ff fa29 	bl	8007ea4 <DC_StopPWM_Buck>
                DC_StopPWM_Boost();
 8008a52:	f7ff fa09 	bl	8007e68 <DC_StopPWM_Boost>
                Pin_Func_TurnOn(LED3);
 8008a56:	2002      	movs	r0, #2
 8008a58:	f7fe fe18 	bl	800768c <Pin_Func_TurnOn>
            return FUNCTION_FAIL;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e048      	b.n	8008af2 <CloseLoop+0x172>
        if(g_wind.vwt > DC_MAX_INPUT)
 8008a60:	4b25      	ldr	r3, [pc, #148]	; (8008af8 <CloseLoop+0x178>)
 8008a62:	edd3 7a01 	vldr	s15, [r3, #4]
 8008a66:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008afc <CloseLoop+0x17c>
 8008a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a72:	dd17      	ble.n	8008aa4 <CloseLoop+0x124>
			count_wind++;
 8008a74:	4b27      	ldr	r3, [pc, #156]	; (8008b14 <CloseLoop+0x194>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	4a26      	ldr	r2, [pc, #152]	; (8008b14 <CloseLoop+0x194>)
 8008a7c:	6013      	str	r3, [r2, #0]
			if(count_wind > 300)
 8008a7e:	4b25      	ldr	r3, [pc, #148]	; (8008b14 <CloseLoop+0x194>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008a86:	d90a      	bls.n	8008a9e <CloseLoop+0x11e>
				faultInfo = CODE_OVDC1;
 8008a88:	4b1e      	ldr	r3, [pc, #120]	; (8008b04 <CloseLoop+0x184>)
 8008a8a:	2208      	movs	r2, #8
 8008a8c:	701a      	strb	r2, [r3, #0]
				DC_StopPWM_Buck();
 8008a8e:	f7ff fa09 	bl	8007ea4 <DC_StopPWM_Buck>
				DC_StopPWM_Boost();
 8008a92:	f7ff f9e9 	bl	8007e68 <DC_StopPWM_Boost>
				Pin_Func_TurnOn(LED1);
 8008a96:	2000      	movs	r0, #0
 8008a98:	f7fe fdf8 	bl	800768c <Pin_Func_TurnOn>
 8008a9c:	e028      	b.n	8008af0 <CloseLoop+0x170>
				Dumpload_controller();
 8008a9e:	f7ff faef 	bl	8008080 <Dumpload_controller>
 8008aa2:	e025      	b.n	8008af0 <CloseLoop+0x170>
        else if(g_wind.vwt <= DC_MIN_INPUT)
 8008aa4:	4b14      	ldr	r3, [pc, #80]	; (8008af8 <CloseLoop+0x178>)
 8008aa6:	edd3 7a01 	vldr	s15, [r3, #4]
 8008aaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab2:	d810      	bhi.n	8008ad6 <CloseLoop+0x156>
            faultInfo = NoWindInput;
 8008ab4:	4b13      	ldr	r3, [pc, #76]	; (8008b04 <CloseLoop+0x184>)
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	701a      	strb	r2, [r3, #0]
            DC_StopPWM_Buck();
 8008aba:	f7ff f9f3 	bl	8007ea4 <DC_StopPWM_Buck>
            DC_StopPWM_Boost();
 8008abe:	f7ff f9d3 	bl	8007e68 <DC_StopPWM_Boost>
            Pin_Func_TurnOn(LED1);
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	f7fe fde2 	bl	800768c <Pin_Func_TurnOn>
            Pin_Func_TurnOn(LED2);
 8008ac8:	2001      	movs	r0, #1
 8008aca:	f7fe fddf 	bl	800768c <Pin_Func_TurnOn>
            Pin_Func_TurnOn(LED3);
 8008ace:	2002      	movs	r0, #2
 8008ad0:	f7fe fddc 	bl	800768c <Pin_Func_TurnOn>
 8008ad4:	e00c      	b.n	8008af0 <CloseLoop+0x170>
		else if(g_wind.iwt > MAX_ILOAD)
 8008ad6:	4b08      	ldr	r3, [pc, #32]	; (8008af8 <CloseLoop+0x178>)
 8008ad8:	edd3 7a02 	vldr	s15, [r3, #8]
 8008adc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae8:	dd02      	ble.n	8008af0 <CloseLoop+0x170>
			faultInfo = CODE_OCDC1;
 8008aea:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <CloseLoop+0x184>)
 8008aec:	220c      	movs	r2, #12
 8008aee:	701a      	strb	r2, [r3, #0]
        return FUNCTION_FAIL;
 8008af0:	2303      	movs	r3, #3
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	2000094c 	.word	0x2000094c
 8008afc:	43160000 	.word	0x43160000
 8008b00:	20000939 	.word	0x20000939
 8008b04:	20000936 	.word	0x20000936
 8008b08:	20000838 	.word	0x20000838
 8008b0c:	42480000 	.word	0x42480000
 8008b10:	2000083c 	.word	0x2000083c
 8008b14:	20000948 	.word	0x20000948

08008b18 <ErrorFunction>:

static FUNCTION_RETURN ErrorFunction(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	af00      	add	r7, sp, #0
    if (IsStartState == true)
 8008b1c:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <ErrorFunction+0x44>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d003      	beq.n	8008b2c <ErrorFunction+0x14>
    {
        DC_StopPWM_Buck();
 8008b24:	f7ff f9be 	bl	8007ea4 <DC_StopPWM_Buck>
        DC_StopPWM_Boost();
 8008b28:	f7ff f99e 	bl	8007e68 <DC_StopPWM_Boost>
    }
    if (faultInfo == CODE_OVDC1)
 8008b2c:	4b0c      	ldr	r3, [pc, #48]	; (8008b60 <ErrorFunction+0x48>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d102      	bne.n	8008b3a <ErrorFunction+0x22>
    {
    	Pin_Func_TurnOn(LED1);
 8008b34:	2000      	movs	r0, #0
 8008b36:	f7fe fda9 	bl	800768c <Pin_Func_TurnOn>
    }
    if (faultInfo == CODE_OVDC2)
 8008b3a:	4b09      	ldr	r3, [pc, #36]	; (8008b60 <ErrorFunction+0x48>)
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	2b09      	cmp	r3, #9
 8008b40:	d102      	bne.n	8008b48 <ErrorFunction+0x30>
    {
    	Pin_Func_TurnOn(LED2);
 8008b42:	2001      	movs	r0, #1
 8008b44:	f7fe fda2 	bl	800768c <Pin_Func_TurnOn>
    }
    if (faultInfo == CODE_OCDC1)
 8008b48:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <ErrorFunction+0x48>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	2b0c      	cmp	r3, #12
 8008b4e:	d102      	bne.n	8008b56 <ErrorFunction+0x3e>
    {
    	Pin_Func_TurnOn(LED3);
 8008b50:	2002      	movs	r0, #2
 8008b52:	f7fe fd9b 	bl	800768c <Pin_Func_TurnOn>
    }
    return FUNCTION_FAIL;
 8008b56:	2303      	movs	r3, #3
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	200003fc 	.word	0x200003fc
 8008b60:	20000936 	.word	0x20000936

08008b64 <StateReset>:

static FUNCTION_RETURN StateReset(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
    if (IsStartState == true)
 8008b68:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <StateReset+0x1c>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d003      	beq.n	8008b78 <StateReset+0x14>
    {
        DC_StopPWM_Buck();
 8008b70:	f7ff f998 	bl	8007ea4 <DC_StopPWM_Buck>
        DC_StopPWM_Boost();
 8008b74:	f7ff f978 	bl	8007e68 <DC_StopPWM_Boost>
    }
    return FUNCTION_DONE;
 8008b78:	2302      	movs	r3, #2
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	200003fc 	.word	0x200003fc

08008b84 <WindControlInit>:

WIND g_wind;



void WindControlInit(WIND *wind){
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
	wind->is_plugin 			= true;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	701a      	strb	r2, [r3, #0]
//	wind->boost_state 			= false;
//	wind->is_dumpload 			= false;
//	wind->vwt_oc 				= wind->vwt;
	TestMPPTInit(&wind->mppt);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	3328      	adds	r3, #40	; 0x28
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 f812 	bl	8008bc0 <TestMPPTInit>
//	wind->mppt.mppt_enable 		= 1;
//	wind->mppt.VmppOut 			= wind->vwt_oc - 5;
//	wind->mppt.MinVolt 			= wind->vwt_oc * 0.5f;
}
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <WindControlMppt>:

void WindControlMppt(WIND *wind){
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
	TestMPPTProcess(&wind->mppt);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3328      	adds	r3, #40	; 0x28
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 f857 	bl	8008c64 <TestMPPTProcess>
//
////		if(fabs(wind->mppt.Vwt - wind->mppt.VmppOut) > 5.0){
////			wind->mppt.VmppOut = wind->mppt.Vwt - 1.0;
////		}
//	}
}
 8008bb6:	bf00      	nop
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <TestMPPTInit>:

bool flag_check_mppt = false;

//static timer_advance_obj_t *s_ptimer_pwm;

void TestMPPTInit(MPPT_PNO *v){
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
	v->Iwt = 0;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f04f 0200 	mov.w	r2, #0
 8008bce:	601a      	str	r2, [r3, #0]
	v->Iwt_prev = 0;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f04f 0200 	mov.w	r2, #0
 8008bd6:	605a      	str	r2, [r3, #4]
	v->Vwt = 0;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f04f 0200 	mov.w	r2, #0
 8008bde:	609a      	str	r2, [r3, #8]
	v->Vwt_prev = 0;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	60da      	str	r2, [r3, #12]
	v->Delta_V = 0;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f04f 0200 	mov.w	r2, #0
 8008bee:	611a      	str	r2, [r3, #16]
	v->Delta_P = 0;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f04f 0200 	mov.w	r2, #0
 8008bf6:	615a      	str	r2, [r3, #20]
	v->Stepsize = 0;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f04f 0200 	mov.w	r2, #0
 8008bfe:	619a      	str	r2, [r3, #24]
	v->K_factor = 1;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008c06:	61da      	str	r2, [r3, #28]
	v->Power_wind = 0.1;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a12      	ldr	r2, [pc, #72]	; (8008c54 <TestMPPTInit+0x94>)
 8008c0c:	621a      	str	r2, [r3, #32]
	v->Power_wind_prev = 0;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f04f 0200 	mov.w	r2, #0
 8008c14:	625a      	str	r2, [r3, #36]	; 0x24
//	v->VmppOut = 0;
//	v->VmppOut_prev = 0;
//	v->VmppOutMax	= 2;
//	v->VmppOutMin = 0.005;
	v-> D_ref = 0 ;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f04f 0200 	mov.w	r2, #0
 8008c1c:	639a      	str	r2, [r3, #56]	; 0x38
	v-> D_prev  = 0.01 ;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a0d      	ldr	r2, [pc, #52]	; (8008c58 <TestMPPTInit+0x98>)
 8008c22:	63da      	str	r2, [r3, #60]	; 0x3c
	v-> Delta_D = 0.001;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a0d      	ldr	r2, [pc, #52]	; (8008c5c <TestMPPTInit+0x9c>)
 8008c28:	641a      	str	r2, [r3, #64]	; 0x40
	v->	D_refMin = 0.005 ;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a0c      	ldr	r2, [pc, #48]	; (8008c60 <TestMPPTInit+0xa0>)
 8008c2e:	649a      	str	r2, [r3, #72]	; 0x48
	v->	D_refMax = 1.5 ;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8008c36:	645a      	str	r2, [r3, #68]	; 0x44
	v->mppt_enable = 1;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	v->mppt_first = 1;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	3dcccccd 	.word	0x3dcccccd
 8008c58:	3c23d70a 	.word	0x3c23d70a
 8008c5c:	3a83126f 	.word	0x3a83126f
 8008c60:	3ba3d70a 	.word	0x3ba3d70a

08008c64 <TestMPPTProcess>:

void TestMPPTProcess(MPPT_PNO *v){
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]

//	flag_check_mppt = true;
	v->Delta_V 		= v->Vwt - v->Vwt_prev;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	edd3 7a03 	vldr	s15, [r3, #12]
 8008c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	edc3 7a04 	vstr	s15, [r3, #16]
	v->Power_wind 	= v->Vwt * v->Iwt;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	ed93 7a02 	vldr	s14, [r3, #8]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	edd3 7a00 	vldr	s15, [r3]
 8008c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	edc3 7a08 	vstr	s15, [r3, #32]
	v->Delta_P 		= v->Power_wind - v->Power_wind_prev;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	ed93 7a08 	vldr	s14, [r3, #32]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	edc3 7a05 	vstr	s15, [r3, #20]
	v->K_factor		= 1;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008cb4:	61da      	str	r2, [r3, #28]

	if ( v->mppt_enable == 1){
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d15a      	bne.n	8008d76 <TestMPPTProcess+0x112>
		if (v->Delta_P > 0){
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	edd3 7a05 	vldr	s15, [r3, #20]
 8008cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cce:	dd29      	ble.n	8008d24 <TestMPPTProcess+0xc0>
			if(v->Delta_V >0){
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8008cd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cde:	dd10      	ble.n	8008d02 <TestMPPTProcess+0x9e>
				v->D_ref = v->D_prev - v->Delta_D	*	v->K_factor;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	edd3 7a07 	vldr	s15, [r3, #28]
 8008cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 8008d00:	e039      	b.n	8008d76 <TestMPPTProcess+0x112>
			}
			else{
				v->D_ref = v->D_prev + v->Delta_D	*	v->K_factor;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	edd3 7a07 	vldr	s15, [r3, #28]
 8008d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 8008d22:	e028      	b.n	8008d76 <TestMPPTProcess+0x112>
			}
		}
		else{
			if(v->Delta_V >0){
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	edd3 7a04 	vldr	s15, [r3, #16]
 8008d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d32:	dd10      	ble.n	8008d56 <TestMPPTProcess+0xf2>
				v->D_ref = v->D_prev + v->Delta_D	*	v->K_factor;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	edd3 7a07 	vldr	s15, [r3, #28]
 8008d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 8008d54:	e00f      	b.n	8008d76 <TestMPPTProcess+0x112>
			}
			else{
				v->D_ref = v->D_prev - v->Delta_D	*	v->K_factor;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	edd3 7a07 	vldr	s15, [r3, #28]
 8008d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			}
		}
	}

	if (v->D_ref > v->D_refMax || v->D_ref < v->D_refMin ){
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8a:	dc0a      	bgt.n	8008da2 <TestMPPTProcess+0x13e>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8008d98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da0:	d503      	bpl.n	8008daa <TestMPPTProcess+0x146>
		v->D_ref = v->D_prev;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	639a      	str	r2, [r3, #56]	; 0x38
	}

	v->Power_wind_prev = v->Power_wind;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a1a      	ldr	r2, [r3, #32]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	625a      	str	r2, [r3, #36]	; 0x24
	v->Vwt_prev = v->Vwt;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60da      	str	r2, [r3, #12]
	v->D_prev = v->D_ref;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8008dc2:	bf00      	nop
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
	...

08008dd0 <TestMPPTUpdate>:

void TestMPPTUpdate(MPPT_PNO *mppt, float cur, float vol){
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8008ddc:	edc7 0a01 	vstr	s1, [r7, #4]

	static float vwt_avg_multiplier = 0.002f;
	static float iwt_avg_multiplier = 0.002f;
	mppt ->Vwt = ((vol - mppt->Vwt)*vwt_avg_multiplier) + mppt->Vwt;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	edd3 7a02 	vldr	s15, [r3, #8]
 8008de6:	ed97 7a01 	vldr	s14, [r7, #4]
 8008dea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008dee:	4b13      	ldr	r3, [pc, #76]	; (8008e3c <TestMPPTUpdate+0x6c>)
 8008df0:	edd3 7a00 	vldr	s15, [r3]
 8008df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	edd3 7a02 	vldr	s15, [r3, #8]
 8008dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	edc3 7a02 	vstr	s15, [r3, #8]
	mppt ->Iwt = ((cur - mppt->Iwt)*iwt_avg_multiplier) + mppt->Iwt;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	edd3 7a00 	vldr	s15, [r3]
 8008e0e:	ed97 7a02 	vldr	s14, [r7, #8]
 8008e12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008e16:	4b0a      	ldr	r3, [pc, #40]	; (8008e40 <TestMPPTUpdate+0x70>)
 8008e18:	edd3 7a00 	vldr	s15, [r3]
 8008e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	edd3 7a00 	vldr	s15, [r3]
 8008e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	edc3 7a00 	vstr	s15, [r3]

}
 8008e30:	bf00      	nop
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	20000450 	.word	0x20000450
 8008e40:	20000454 	.word	0x20000454

08008e44 <malloc>:
 8008e44:	4b02      	ldr	r3, [pc, #8]	; (8008e50 <malloc+0xc>)
 8008e46:	4601      	mov	r1, r0
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	f000 b82b 	b.w	8008ea4 <_malloc_r>
 8008e4e:	bf00      	nop
 8008e50:	200004a4 	.word	0x200004a4

08008e54 <free>:
 8008e54:	4b02      	ldr	r3, [pc, #8]	; (8008e60 <free+0xc>)
 8008e56:	4601      	mov	r1, r0
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	f000 b901 	b.w	8009060 <_free_r>
 8008e5e:	bf00      	nop
 8008e60:	200004a4 	.word	0x200004a4

08008e64 <sbrk_aligned>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	4e0e      	ldr	r6, [pc, #56]	; (8008ea0 <sbrk_aligned+0x3c>)
 8008e68:	460c      	mov	r4, r1
 8008e6a:	6831      	ldr	r1, [r6, #0]
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	b911      	cbnz	r1, 8008e76 <sbrk_aligned+0x12>
 8008e70:	f000 f8ac 	bl	8008fcc <_sbrk_r>
 8008e74:	6030      	str	r0, [r6, #0]
 8008e76:	4621      	mov	r1, r4
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f000 f8a7 	bl	8008fcc <_sbrk_r>
 8008e7e:	1c43      	adds	r3, r0, #1
 8008e80:	d00a      	beq.n	8008e98 <sbrk_aligned+0x34>
 8008e82:	1cc4      	adds	r4, r0, #3
 8008e84:	f024 0403 	bic.w	r4, r4, #3
 8008e88:	42a0      	cmp	r0, r4
 8008e8a:	d007      	beq.n	8008e9c <sbrk_aligned+0x38>
 8008e8c:	1a21      	subs	r1, r4, r0
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f000 f89c 	bl	8008fcc <_sbrk_r>
 8008e94:	3001      	adds	r0, #1
 8008e96:	d101      	bne.n	8008e9c <sbrk_aligned+0x38>
 8008e98:	f04f 34ff 	mov.w	r4, #4294967295
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	200009c8 	.word	0x200009c8

08008ea4 <_malloc_r>:
 8008ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea8:	1ccd      	adds	r5, r1, #3
 8008eaa:	f025 0503 	bic.w	r5, r5, #3
 8008eae:	3508      	adds	r5, #8
 8008eb0:	2d0c      	cmp	r5, #12
 8008eb2:	bf38      	it	cc
 8008eb4:	250c      	movcc	r5, #12
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	4607      	mov	r7, r0
 8008eba:	db01      	blt.n	8008ec0 <_malloc_r+0x1c>
 8008ebc:	42a9      	cmp	r1, r5
 8008ebe:	d905      	bls.n	8008ecc <_malloc_r+0x28>
 8008ec0:	230c      	movs	r3, #12
 8008ec2:	603b      	str	r3, [r7, #0]
 8008ec4:	2600      	movs	r6, #0
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ecc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008fa0 <_malloc_r+0xfc>
 8008ed0:	f000 f868 	bl	8008fa4 <__malloc_lock>
 8008ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed8:	461c      	mov	r4, r3
 8008eda:	bb5c      	cbnz	r4, 8008f34 <_malloc_r+0x90>
 8008edc:	4629      	mov	r1, r5
 8008ede:	4638      	mov	r0, r7
 8008ee0:	f7ff ffc0 	bl	8008e64 <sbrk_aligned>
 8008ee4:	1c43      	adds	r3, r0, #1
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	d155      	bne.n	8008f96 <_malloc_r+0xf2>
 8008eea:	f8d8 4000 	ldr.w	r4, [r8]
 8008eee:	4626      	mov	r6, r4
 8008ef0:	2e00      	cmp	r6, #0
 8008ef2:	d145      	bne.n	8008f80 <_malloc_r+0xdc>
 8008ef4:	2c00      	cmp	r4, #0
 8008ef6:	d048      	beq.n	8008f8a <_malloc_r+0xe6>
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	4631      	mov	r1, r6
 8008efc:	4638      	mov	r0, r7
 8008efe:	eb04 0903 	add.w	r9, r4, r3
 8008f02:	f000 f863 	bl	8008fcc <_sbrk_r>
 8008f06:	4581      	cmp	r9, r0
 8008f08:	d13f      	bne.n	8008f8a <_malloc_r+0xe6>
 8008f0a:	6821      	ldr	r1, [r4, #0]
 8008f0c:	1a6d      	subs	r5, r5, r1
 8008f0e:	4629      	mov	r1, r5
 8008f10:	4638      	mov	r0, r7
 8008f12:	f7ff ffa7 	bl	8008e64 <sbrk_aligned>
 8008f16:	3001      	adds	r0, #1
 8008f18:	d037      	beq.n	8008f8a <_malloc_r+0xe6>
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	442b      	add	r3, r5
 8008f1e:	6023      	str	r3, [r4, #0]
 8008f20:	f8d8 3000 	ldr.w	r3, [r8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d038      	beq.n	8008f9a <_malloc_r+0xf6>
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	42a2      	cmp	r2, r4
 8008f2c:	d12b      	bne.n	8008f86 <_malloc_r+0xe2>
 8008f2e:	2200      	movs	r2, #0
 8008f30:	605a      	str	r2, [r3, #4]
 8008f32:	e00f      	b.n	8008f54 <_malloc_r+0xb0>
 8008f34:	6822      	ldr	r2, [r4, #0]
 8008f36:	1b52      	subs	r2, r2, r5
 8008f38:	d41f      	bmi.n	8008f7a <_malloc_r+0xd6>
 8008f3a:	2a0b      	cmp	r2, #11
 8008f3c:	d917      	bls.n	8008f6e <_malloc_r+0xca>
 8008f3e:	1961      	adds	r1, r4, r5
 8008f40:	42a3      	cmp	r3, r4
 8008f42:	6025      	str	r5, [r4, #0]
 8008f44:	bf18      	it	ne
 8008f46:	6059      	strne	r1, [r3, #4]
 8008f48:	6863      	ldr	r3, [r4, #4]
 8008f4a:	bf08      	it	eq
 8008f4c:	f8c8 1000 	streq.w	r1, [r8]
 8008f50:	5162      	str	r2, [r4, r5]
 8008f52:	604b      	str	r3, [r1, #4]
 8008f54:	4638      	mov	r0, r7
 8008f56:	f104 060b 	add.w	r6, r4, #11
 8008f5a:	f000 f829 	bl	8008fb0 <__malloc_unlock>
 8008f5e:	f026 0607 	bic.w	r6, r6, #7
 8008f62:	1d23      	adds	r3, r4, #4
 8008f64:	1af2      	subs	r2, r6, r3
 8008f66:	d0ae      	beq.n	8008ec6 <_malloc_r+0x22>
 8008f68:	1b9b      	subs	r3, r3, r6
 8008f6a:	50a3      	str	r3, [r4, r2]
 8008f6c:	e7ab      	b.n	8008ec6 <_malloc_r+0x22>
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	6862      	ldr	r2, [r4, #4]
 8008f72:	d1dd      	bne.n	8008f30 <_malloc_r+0x8c>
 8008f74:	f8c8 2000 	str.w	r2, [r8]
 8008f78:	e7ec      	b.n	8008f54 <_malloc_r+0xb0>
 8008f7a:	4623      	mov	r3, r4
 8008f7c:	6864      	ldr	r4, [r4, #4]
 8008f7e:	e7ac      	b.n	8008eda <_malloc_r+0x36>
 8008f80:	4634      	mov	r4, r6
 8008f82:	6876      	ldr	r6, [r6, #4]
 8008f84:	e7b4      	b.n	8008ef0 <_malloc_r+0x4c>
 8008f86:	4613      	mov	r3, r2
 8008f88:	e7cc      	b.n	8008f24 <_malloc_r+0x80>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	603b      	str	r3, [r7, #0]
 8008f8e:	4638      	mov	r0, r7
 8008f90:	f000 f80e 	bl	8008fb0 <__malloc_unlock>
 8008f94:	e797      	b.n	8008ec6 <_malloc_r+0x22>
 8008f96:	6025      	str	r5, [r4, #0]
 8008f98:	e7dc      	b.n	8008f54 <_malloc_r+0xb0>
 8008f9a:	605b      	str	r3, [r3, #4]
 8008f9c:	deff      	udf	#255	; 0xff
 8008f9e:	bf00      	nop
 8008fa0:	200009c4 	.word	0x200009c4

08008fa4 <__malloc_lock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <__malloc_lock+0x8>)
 8008fa6:	f000 b84b 	b.w	8009040 <__retarget_lock_acquire_recursive>
 8008faa:	bf00      	nop
 8008fac:	20000b08 	.word	0x20000b08

08008fb0 <__malloc_unlock>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	; (8008fb8 <__malloc_unlock+0x8>)
 8008fb2:	f000 b846 	b.w	8009042 <__retarget_lock_release_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	20000b08 	.word	0x20000b08

08008fbc <memset>:
 8008fbc:	4402      	add	r2, r0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d100      	bne.n	8008fc6 <memset+0xa>
 8008fc4:	4770      	bx	lr
 8008fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8008fca:	e7f9      	b.n	8008fc0 <memset+0x4>

08008fcc <_sbrk_r>:
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	4d06      	ldr	r5, [pc, #24]	; (8008fe8 <_sbrk_r+0x1c>)
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	4608      	mov	r0, r1
 8008fd6:	602b      	str	r3, [r5, #0]
 8008fd8:	f7f8 fc14 	bl	8001804 <_sbrk>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d102      	bne.n	8008fe6 <_sbrk_r+0x1a>
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	b103      	cbz	r3, 8008fe6 <_sbrk_r+0x1a>
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	20000b04 	.word	0x20000b04

08008fec <__errno>:
 8008fec:	4b01      	ldr	r3, [pc, #4]	; (8008ff4 <__errno+0x8>)
 8008fee:	6818      	ldr	r0, [r3, #0]
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	200004a4 	.word	0x200004a4

08008ff8 <__libc_init_array>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	4d0d      	ldr	r5, [pc, #52]	; (8009030 <__libc_init_array+0x38>)
 8008ffc:	4c0d      	ldr	r4, [pc, #52]	; (8009034 <__libc_init_array+0x3c>)
 8008ffe:	1b64      	subs	r4, r4, r5
 8009000:	10a4      	asrs	r4, r4, #2
 8009002:	2600      	movs	r6, #0
 8009004:	42a6      	cmp	r6, r4
 8009006:	d109      	bne.n	800901c <__libc_init_array+0x24>
 8009008:	4d0b      	ldr	r5, [pc, #44]	; (8009038 <__libc_init_array+0x40>)
 800900a:	4c0c      	ldr	r4, [pc, #48]	; (800903c <__libc_init_array+0x44>)
 800900c:	f000 f874 	bl	80090f8 <_init>
 8009010:	1b64      	subs	r4, r4, r5
 8009012:	10a4      	asrs	r4, r4, #2
 8009014:	2600      	movs	r6, #0
 8009016:	42a6      	cmp	r6, r4
 8009018:	d105      	bne.n	8009026 <__libc_init_array+0x2e>
 800901a:	bd70      	pop	{r4, r5, r6, pc}
 800901c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009020:	4798      	blx	r3
 8009022:	3601      	adds	r6, #1
 8009024:	e7ee      	b.n	8009004 <__libc_init_array+0xc>
 8009026:	f855 3b04 	ldr.w	r3, [r5], #4
 800902a:	4798      	blx	r3
 800902c:	3601      	adds	r6, #1
 800902e:	e7f2      	b.n	8009016 <__libc_init_array+0x1e>
 8009030:	08009170 	.word	0x08009170
 8009034:	08009170 	.word	0x08009170
 8009038:	08009170 	.word	0x08009170
 800903c:	08009174 	.word	0x08009174

08009040 <__retarget_lock_acquire_recursive>:
 8009040:	4770      	bx	lr

08009042 <__retarget_lock_release_recursive>:
 8009042:	4770      	bx	lr

08009044 <memcpy>:
 8009044:	440a      	add	r2, r1
 8009046:	4291      	cmp	r1, r2
 8009048:	f100 33ff 	add.w	r3, r0, #4294967295
 800904c:	d100      	bne.n	8009050 <memcpy+0xc>
 800904e:	4770      	bx	lr
 8009050:	b510      	push	{r4, lr}
 8009052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800905a:	4291      	cmp	r1, r2
 800905c:	d1f9      	bne.n	8009052 <memcpy+0xe>
 800905e:	bd10      	pop	{r4, pc}

08009060 <_free_r>:
 8009060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009062:	2900      	cmp	r1, #0
 8009064:	d044      	beq.n	80090f0 <_free_r+0x90>
 8009066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800906a:	9001      	str	r0, [sp, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	f1a1 0404 	sub.w	r4, r1, #4
 8009072:	bfb8      	it	lt
 8009074:	18e4      	addlt	r4, r4, r3
 8009076:	f7ff ff95 	bl	8008fa4 <__malloc_lock>
 800907a:	4a1e      	ldr	r2, [pc, #120]	; (80090f4 <_free_r+0x94>)
 800907c:	9801      	ldr	r0, [sp, #4]
 800907e:	6813      	ldr	r3, [r2, #0]
 8009080:	b933      	cbnz	r3, 8009090 <_free_r+0x30>
 8009082:	6063      	str	r3, [r4, #4]
 8009084:	6014      	str	r4, [r2, #0]
 8009086:	b003      	add	sp, #12
 8009088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800908c:	f7ff bf90 	b.w	8008fb0 <__malloc_unlock>
 8009090:	42a3      	cmp	r3, r4
 8009092:	d908      	bls.n	80090a6 <_free_r+0x46>
 8009094:	6825      	ldr	r5, [r4, #0]
 8009096:	1961      	adds	r1, r4, r5
 8009098:	428b      	cmp	r3, r1
 800909a:	bf01      	itttt	eq
 800909c:	6819      	ldreq	r1, [r3, #0]
 800909e:	685b      	ldreq	r3, [r3, #4]
 80090a0:	1949      	addeq	r1, r1, r5
 80090a2:	6021      	streq	r1, [r4, #0]
 80090a4:	e7ed      	b.n	8009082 <_free_r+0x22>
 80090a6:	461a      	mov	r2, r3
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	b10b      	cbz	r3, 80090b0 <_free_r+0x50>
 80090ac:	42a3      	cmp	r3, r4
 80090ae:	d9fa      	bls.n	80090a6 <_free_r+0x46>
 80090b0:	6811      	ldr	r1, [r2, #0]
 80090b2:	1855      	adds	r5, r2, r1
 80090b4:	42a5      	cmp	r5, r4
 80090b6:	d10b      	bne.n	80090d0 <_free_r+0x70>
 80090b8:	6824      	ldr	r4, [r4, #0]
 80090ba:	4421      	add	r1, r4
 80090bc:	1854      	adds	r4, r2, r1
 80090be:	42a3      	cmp	r3, r4
 80090c0:	6011      	str	r1, [r2, #0]
 80090c2:	d1e0      	bne.n	8009086 <_free_r+0x26>
 80090c4:	681c      	ldr	r4, [r3, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	6053      	str	r3, [r2, #4]
 80090ca:	440c      	add	r4, r1
 80090cc:	6014      	str	r4, [r2, #0]
 80090ce:	e7da      	b.n	8009086 <_free_r+0x26>
 80090d0:	d902      	bls.n	80090d8 <_free_r+0x78>
 80090d2:	230c      	movs	r3, #12
 80090d4:	6003      	str	r3, [r0, #0]
 80090d6:	e7d6      	b.n	8009086 <_free_r+0x26>
 80090d8:	6825      	ldr	r5, [r4, #0]
 80090da:	1961      	adds	r1, r4, r5
 80090dc:	428b      	cmp	r3, r1
 80090de:	bf04      	itt	eq
 80090e0:	6819      	ldreq	r1, [r3, #0]
 80090e2:	685b      	ldreq	r3, [r3, #4]
 80090e4:	6063      	str	r3, [r4, #4]
 80090e6:	bf04      	itt	eq
 80090e8:	1949      	addeq	r1, r1, r5
 80090ea:	6021      	streq	r1, [r4, #0]
 80090ec:	6054      	str	r4, [r2, #4]
 80090ee:	e7ca      	b.n	8009086 <_free_r+0x26>
 80090f0:	b003      	add	sp, #12
 80090f2:	bd30      	pop	{r4, r5, pc}
 80090f4:	200009c4 	.word	0x200009c4

080090f8 <_init>:
 80090f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fa:	bf00      	nop
 80090fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090fe:	bc08      	pop	{r3}
 8009100:	469e      	mov	lr, r3
 8009102:	4770      	bx	lr

08009104 <_fini>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	bf00      	nop
 8009108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910a:	bc08      	pop	{r3}
 800910c:	469e      	mov	lr, r3
 800910e:	4770      	bx	lr
