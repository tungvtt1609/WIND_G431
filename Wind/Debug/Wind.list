
Wind.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800caa8  0800caa8  0001caa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cef4  0800cef4  000204d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cef4  0800cef4  0001cef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cefc  0800cefc  000204d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cefc  0800cefc  0001cefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf00  0800cf00  0001cf00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d0  20000000  0800cf04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001440  200004d0  0800d3d4  000204d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001910  0800d3d4  00021910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020500  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fb6d  00000000  00000000  00020543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000539c  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a58  00000000  00000000  00045450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000143e  00000000  00000000  00046ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000282fb  00000000  00000000  000482e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025225  00000000  00000000  000705e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6358  00000000  00000000  00095806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000070e8  00000000  00000000  0017bb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00182c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200004d0 	.word	0x200004d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ca90 	.word	0x0800ca90

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200004d4 	.word	0x200004d4
 800021c:	0800ca90 	.word	0x0800ca90

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_d2f>:
 8000668:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800066c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000670:	bf24      	itt	cs
 8000672:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000676:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800067a:	d90d      	bls.n	8000698 <__aeabi_d2f+0x30>
 800067c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000680:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000684:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000688:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800068c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000690:	bf08      	it	eq
 8000692:	f020 0001 	biceq.w	r0, r0, #1
 8000696:	4770      	bx	lr
 8000698:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800069c:	d121      	bne.n	80006e2 <__aeabi_d2f+0x7a>
 800069e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80006a2:	bfbc      	itt	lt
 80006a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80006a8:	4770      	bxlt	lr
 80006aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80006b2:	f1c2 0218 	rsb	r2, r2, #24
 80006b6:	f1c2 0c20 	rsb	ip, r2, #32
 80006ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80006be:	fa20 f002 	lsr.w	r0, r0, r2
 80006c2:	bf18      	it	ne
 80006c4:	f040 0001 	orrne.w	r0, r0, #1
 80006c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006d4:	ea40 000c 	orr.w	r0, r0, ip
 80006d8:	fa23 f302 	lsr.w	r3, r3, r2
 80006dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006e0:	e7cc      	b.n	800067c <__aeabi_d2f+0x14>
 80006e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006e6:	d107      	bne.n	80006f8 <__aeabi_d2f+0x90>
 80006e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ec:	bf1e      	ittt	ne
 80006ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006f6:	4770      	bxne	lr
 80006f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000700:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b970 	b.w	8000a00 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9e08      	ldr	r6, [sp, #32]
 800073e:	460d      	mov	r5, r1
 8000740:	4604      	mov	r4, r0
 8000742:	460f      	mov	r7, r1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d14a      	bne.n	80007de <__udivmoddi4+0xa6>
 8000748:	428a      	cmp	r2, r1
 800074a:	4694      	mov	ip, r2
 800074c:	d965      	bls.n	800081a <__udivmoddi4+0xe2>
 800074e:	fab2 f382 	clz	r3, r2
 8000752:	b143      	cbz	r3, 8000766 <__udivmoddi4+0x2e>
 8000754:	fa02 fc03 	lsl.w	ip, r2, r3
 8000758:	f1c3 0220 	rsb	r2, r3, #32
 800075c:	409f      	lsls	r7, r3
 800075e:	fa20 f202 	lsr.w	r2, r0, r2
 8000762:	4317      	orrs	r7, r2
 8000764:	409c      	lsls	r4, r3
 8000766:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800076a:	fa1f f58c 	uxth.w	r5, ip
 800076e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000772:	0c22      	lsrs	r2, r4, #16
 8000774:	fb0e 7711 	mls	r7, lr, r1, r7
 8000778:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800077c:	fb01 f005 	mul.w	r0, r1, r5
 8000780:	4290      	cmp	r0, r2
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x62>
 8000784:	eb1c 0202 	adds.w	r2, ip, r2
 8000788:	f101 37ff 	add.w	r7, r1, #4294967295
 800078c:	f080 811c 	bcs.w	80009c8 <__udivmoddi4+0x290>
 8000790:	4290      	cmp	r0, r2
 8000792:	f240 8119 	bls.w	80009c8 <__udivmoddi4+0x290>
 8000796:	3902      	subs	r1, #2
 8000798:	4462      	add	r2, ip
 800079a:	1a12      	subs	r2, r2, r0
 800079c:	b2a4      	uxth	r4, r4
 800079e:	fbb2 f0fe 	udiv	r0, r2, lr
 80007a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007aa:	fb00 f505 	mul.w	r5, r0, r5
 80007ae:	42a5      	cmp	r5, r4
 80007b0:	d90a      	bls.n	80007c8 <__udivmoddi4+0x90>
 80007b2:	eb1c 0404 	adds.w	r4, ip, r4
 80007b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ba:	f080 8107 	bcs.w	80009cc <__udivmoddi4+0x294>
 80007be:	42a5      	cmp	r5, r4
 80007c0:	f240 8104 	bls.w	80009cc <__udivmoddi4+0x294>
 80007c4:	4464      	add	r4, ip
 80007c6:	3802      	subs	r0, #2
 80007c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007cc:	1b64      	subs	r4, r4, r5
 80007ce:	2100      	movs	r1, #0
 80007d0:	b11e      	cbz	r6, 80007da <__udivmoddi4+0xa2>
 80007d2:	40dc      	lsrs	r4, r3
 80007d4:	2300      	movs	r3, #0
 80007d6:	e9c6 4300 	strd	r4, r3, [r6]
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0xbc>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	f000 80ed 	beq.w	80009c2 <__udivmoddi4+0x28a>
 80007e8:	2100      	movs	r1, #0
 80007ea:	e9c6 0500 	strd	r0, r5, [r6]
 80007ee:	4608      	mov	r0, r1
 80007f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f4:	fab3 f183 	clz	r1, r3
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d149      	bne.n	8000890 <__udivmoddi4+0x158>
 80007fc:	42ab      	cmp	r3, r5
 80007fe:	d302      	bcc.n	8000806 <__udivmoddi4+0xce>
 8000800:	4282      	cmp	r2, r0
 8000802:	f200 80f8 	bhi.w	80009f6 <__udivmoddi4+0x2be>
 8000806:	1a84      	subs	r4, r0, r2
 8000808:	eb65 0203 	sbc.w	r2, r5, r3
 800080c:	2001      	movs	r0, #1
 800080e:	4617      	mov	r7, r2
 8000810:	2e00      	cmp	r6, #0
 8000812:	d0e2      	beq.n	80007da <__udivmoddi4+0xa2>
 8000814:	e9c6 4700 	strd	r4, r7, [r6]
 8000818:	e7df      	b.n	80007da <__udivmoddi4+0xa2>
 800081a:	b902      	cbnz	r2, 800081e <__udivmoddi4+0xe6>
 800081c:	deff      	udf	#255	; 0xff
 800081e:	fab2 f382 	clz	r3, r2
 8000822:	2b00      	cmp	r3, #0
 8000824:	f040 8090 	bne.w	8000948 <__udivmoddi4+0x210>
 8000828:	1a8a      	subs	r2, r1, r2
 800082a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082e:	fa1f fe8c 	uxth.w	lr, ip
 8000832:	2101      	movs	r1, #1
 8000834:	fbb2 f5f7 	udiv	r5, r2, r7
 8000838:	fb07 2015 	mls	r0, r7, r5, r2
 800083c:	0c22      	lsrs	r2, r4, #16
 800083e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000842:	fb0e f005 	mul.w	r0, lr, r5
 8000846:	4290      	cmp	r0, r2
 8000848:	d908      	bls.n	800085c <__udivmoddi4+0x124>
 800084a:	eb1c 0202 	adds.w	r2, ip, r2
 800084e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000852:	d202      	bcs.n	800085a <__udivmoddi4+0x122>
 8000854:	4290      	cmp	r0, r2
 8000856:	f200 80cb 	bhi.w	80009f0 <__udivmoddi4+0x2b8>
 800085a:	4645      	mov	r5, r8
 800085c:	1a12      	subs	r2, r2, r0
 800085e:	b2a4      	uxth	r4, r4
 8000860:	fbb2 f0f7 	udiv	r0, r2, r7
 8000864:	fb07 2210 	mls	r2, r7, r0, r2
 8000868:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086c:	fb0e fe00 	mul.w	lr, lr, r0
 8000870:	45a6      	cmp	lr, r4
 8000872:	d908      	bls.n	8000886 <__udivmoddi4+0x14e>
 8000874:	eb1c 0404 	adds.w	r4, ip, r4
 8000878:	f100 32ff 	add.w	r2, r0, #4294967295
 800087c:	d202      	bcs.n	8000884 <__udivmoddi4+0x14c>
 800087e:	45a6      	cmp	lr, r4
 8000880:	f200 80bb 	bhi.w	80009fa <__udivmoddi4+0x2c2>
 8000884:	4610      	mov	r0, r2
 8000886:	eba4 040e 	sub.w	r4, r4, lr
 800088a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800088e:	e79f      	b.n	80007d0 <__udivmoddi4+0x98>
 8000890:	f1c1 0720 	rsb	r7, r1, #32
 8000894:	408b      	lsls	r3, r1
 8000896:	fa22 fc07 	lsr.w	ip, r2, r7
 800089a:	ea4c 0c03 	orr.w	ip, ip, r3
 800089e:	fa05 f401 	lsl.w	r4, r5, r1
 80008a2:	fa20 f307 	lsr.w	r3, r0, r7
 80008a6:	40fd      	lsrs	r5, r7
 80008a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008ac:	4323      	orrs	r3, r4
 80008ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80008b2:	fa1f fe8c 	uxth.w	lr, ip
 80008b6:	fb09 5518 	mls	r5, r9, r8, r5
 80008ba:	0c1c      	lsrs	r4, r3, #16
 80008bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008c0:	fb08 f50e 	mul.w	r5, r8, lr
 80008c4:	42a5      	cmp	r5, r4
 80008c6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ca:	fa00 f001 	lsl.w	r0, r0, r1
 80008ce:	d90b      	bls.n	80008e8 <__udivmoddi4+0x1b0>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008d8:	f080 8088 	bcs.w	80009ec <__udivmoddi4+0x2b4>
 80008dc:	42a5      	cmp	r5, r4
 80008de:	f240 8085 	bls.w	80009ec <__udivmoddi4+0x2b4>
 80008e2:	f1a8 0802 	sub.w	r8, r8, #2
 80008e6:	4464      	add	r4, ip
 80008e8:	1b64      	subs	r4, r4, r5
 80008ea:	b29d      	uxth	r5, r3
 80008ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80008f0:	fb09 4413 	mls	r4, r9, r3, r4
 80008f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008fc:	45a6      	cmp	lr, r4
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x1da>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f103 35ff 	add.w	r5, r3, #4294967295
 8000908:	d26c      	bcs.n	80009e4 <__udivmoddi4+0x2ac>
 800090a:	45a6      	cmp	lr, r4
 800090c:	d96a      	bls.n	80009e4 <__udivmoddi4+0x2ac>
 800090e:	3b02      	subs	r3, #2
 8000910:	4464      	add	r4, ip
 8000912:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000916:	fba3 9502 	umull	r9, r5, r3, r2
 800091a:	eba4 040e 	sub.w	r4, r4, lr
 800091e:	42ac      	cmp	r4, r5
 8000920:	46c8      	mov	r8, r9
 8000922:	46ae      	mov	lr, r5
 8000924:	d356      	bcc.n	80009d4 <__udivmoddi4+0x29c>
 8000926:	d053      	beq.n	80009d0 <__udivmoddi4+0x298>
 8000928:	b156      	cbz	r6, 8000940 <__udivmoddi4+0x208>
 800092a:	ebb0 0208 	subs.w	r2, r0, r8
 800092e:	eb64 040e 	sbc.w	r4, r4, lr
 8000932:	fa04 f707 	lsl.w	r7, r4, r7
 8000936:	40ca      	lsrs	r2, r1
 8000938:	40cc      	lsrs	r4, r1
 800093a:	4317      	orrs	r7, r2
 800093c:	e9c6 7400 	strd	r7, r4, [r6]
 8000940:	4618      	mov	r0, r3
 8000942:	2100      	movs	r1, #0
 8000944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000948:	f1c3 0120 	rsb	r1, r3, #32
 800094c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000950:	fa20 f201 	lsr.w	r2, r0, r1
 8000954:	fa25 f101 	lsr.w	r1, r5, r1
 8000958:	409d      	lsls	r5, r3
 800095a:	432a      	orrs	r2, r5
 800095c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fbb1 f0f7 	udiv	r0, r1, r7
 8000968:	fb07 1510 	mls	r5, r7, r0, r1
 800096c:	0c11      	lsrs	r1, r2, #16
 800096e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000972:	fb00 f50e 	mul.w	r5, r0, lr
 8000976:	428d      	cmp	r5, r1
 8000978:	fa04 f403 	lsl.w	r4, r4, r3
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x258>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f100 38ff 	add.w	r8, r0, #4294967295
 8000986:	d22f      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 8000988:	428d      	cmp	r5, r1
 800098a:	d92d      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 800098c:	3802      	subs	r0, #2
 800098e:	4461      	add	r1, ip
 8000990:	1b49      	subs	r1, r1, r5
 8000992:	b292      	uxth	r2, r2
 8000994:	fbb1 f5f7 	udiv	r5, r1, r7
 8000998:	fb07 1115 	mls	r1, r7, r5, r1
 800099c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009a0:	fb05 f10e 	mul.w	r1, r5, lr
 80009a4:	4291      	cmp	r1, r2
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x282>
 80009a8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80009b0:	d216      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 80009b2:	4291      	cmp	r1, r2
 80009b4:	d914      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 80009b6:	3d02      	subs	r5, #2
 80009b8:	4462      	add	r2, ip
 80009ba:	1a52      	subs	r2, r2, r1
 80009bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009c0:	e738      	b.n	8000834 <__udivmoddi4+0xfc>
 80009c2:	4631      	mov	r1, r6
 80009c4:	4630      	mov	r0, r6
 80009c6:	e708      	b.n	80007da <__udivmoddi4+0xa2>
 80009c8:	4639      	mov	r1, r7
 80009ca:	e6e6      	b.n	800079a <__udivmoddi4+0x62>
 80009cc:	4610      	mov	r0, r2
 80009ce:	e6fb      	b.n	80007c8 <__udivmoddi4+0x90>
 80009d0:	4548      	cmp	r0, r9
 80009d2:	d2a9      	bcs.n	8000928 <__udivmoddi4+0x1f0>
 80009d4:	ebb9 0802 	subs.w	r8, r9, r2
 80009d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009dc:	3b01      	subs	r3, #1
 80009de:	e7a3      	b.n	8000928 <__udivmoddi4+0x1f0>
 80009e0:	4645      	mov	r5, r8
 80009e2:	e7ea      	b.n	80009ba <__udivmoddi4+0x282>
 80009e4:	462b      	mov	r3, r5
 80009e6:	e794      	b.n	8000912 <__udivmoddi4+0x1da>
 80009e8:	4640      	mov	r0, r8
 80009ea:	e7d1      	b.n	8000990 <__udivmoddi4+0x258>
 80009ec:	46d0      	mov	r8, sl
 80009ee:	e77b      	b.n	80008e8 <__udivmoddi4+0x1b0>
 80009f0:	3d02      	subs	r5, #2
 80009f2:	4462      	add	r2, ip
 80009f4:	e732      	b.n	800085c <__udivmoddi4+0x124>
 80009f6:	4608      	mov	r0, r1
 80009f8:	e70a      	b.n	8000810 <__udivmoddi4+0xd8>
 80009fa:	4464      	add	r4, ip
 80009fc:	3802      	subs	r0, #2
 80009fe:	e742      	b.n	8000886 <__udivmoddi4+0x14e>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db0b      	blt.n	8000a4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f003 021f 	and.w	r2, r3, #31
 8000a38:	4907      	ldr	r1, [pc, #28]	; (8000a58 <__NVIC_EnableIRQ+0x38>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	; (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	; (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	; 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	601a      	str	r2, [r3, #0]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d02e      	beq.n	8000bc6 <LL_TIM_OC_DisableFast+0x6e>
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d029      	beq.n	8000bc2 <LL_TIM_OC_DisableFast+0x6a>
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	2b10      	cmp	r3, #16
 8000b72:	d024      	beq.n	8000bbe <LL_TIM_OC_DisableFast+0x66>
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2b40      	cmp	r3, #64	; 0x40
 8000b78:	d01f      	beq.n	8000bba <LL_TIM_OC_DisableFast+0x62>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b80:	d019      	beq.n	8000bb6 <LL_TIM_OC_DisableFast+0x5e>
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b88:	d013      	beq.n	8000bb2 <LL_TIM_OC_DisableFast+0x5a>
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b90:	d00d      	beq.n	8000bae <LL_TIM_OC_DisableFast+0x56>
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b98:	d007      	beq.n	8000baa <LL_TIM_OC_DisableFast+0x52>
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba0:	d101      	bne.n	8000ba6 <LL_TIM_OC_DisableFast+0x4e>
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	e010      	b.n	8000bc8 <LL_TIM_OC_DisableFast+0x70>
 8000ba6:	2309      	movs	r3, #9
 8000ba8:	e00e      	b.n	8000bc8 <LL_TIM_OC_DisableFast+0x70>
 8000baa:	2307      	movs	r3, #7
 8000bac:	e00c      	b.n	8000bc8 <LL_TIM_OC_DisableFast+0x70>
 8000bae:	2306      	movs	r3, #6
 8000bb0:	e00a      	b.n	8000bc8 <LL_TIM_OC_DisableFast+0x70>
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	e008      	b.n	8000bc8 <LL_TIM_OC_DisableFast+0x70>
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	e006      	b.n	8000bc8 <LL_TIM_OC_DisableFast+0x70>
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e004      	b.n	8000bc8 <LL_TIM_OC_DisableFast+0x70>
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	e002      	b.n	8000bc8 <LL_TIM_OC_DisableFast+0x70>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e000      	b.n	8000bc8 <LL_TIM_OC_DisableFast+0x70>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3318      	adds	r3, #24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <LL_TIM_OC_DisableFast+0xa8>)
 8000bd4:	5cd3      	ldrb	r3, [r2, r3]
 8000bd6:	440b      	add	r3, r1
 8000bd8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	4908      	ldr	r1, [pc, #32]	; (8000c04 <LL_TIM_OC_DisableFast+0xac>)
 8000be2:	5ccb      	ldrb	r3, [r1, r3]
 8000be4:	4619      	mov	r1, r3
 8000be6:	2304      	movs	r3, #4
 8000be8:	408b      	lsls	r3, r1
 8000bea:	43db      	mvns	r3, r3
 8000bec:	401a      	ands	r2, r3
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	601a      	str	r2, [r3, #0]

}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	0800ce68 	.word	0x0800ce68
 8000c04:	0800ce74 	.word	0x0800ce74

08000c08 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d02e      	beq.n	8000c76 <LL_TIM_OC_EnablePreload+0x6e>
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d029      	beq.n	8000c72 <LL_TIM_OC_EnablePreload+0x6a>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	2b10      	cmp	r3, #16
 8000c22:	d024      	beq.n	8000c6e <LL_TIM_OC_EnablePreload+0x66>
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	2b40      	cmp	r3, #64	; 0x40
 8000c28:	d01f      	beq.n	8000c6a <LL_TIM_OC_EnablePreload+0x62>
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c30:	d019      	beq.n	8000c66 <LL_TIM_OC_EnablePreload+0x5e>
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c38:	d013      	beq.n	8000c62 <LL_TIM_OC_EnablePreload+0x5a>
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c40:	d00d      	beq.n	8000c5e <LL_TIM_OC_EnablePreload+0x56>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c48:	d007      	beq.n	8000c5a <LL_TIM_OC_EnablePreload+0x52>
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c50:	d101      	bne.n	8000c56 <LL_TIM_OC_EnablePreload+0x4e>
 8000c52:	2308      	movs	r3, #8
 8000c54:	e010      	b.n	8000c78 <LL_TIM_OC_EnablePreload+0x70>
 8000c56:	2309      	movs	r3, #9
 8000c58:	e00e      	b.n	8000c78 <LL_TIM_OC_EnablePreload+0x70>
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	e00c      	b.n	8000c78 <LL_TIM_OC_EnablePreload+0x70>
 8000c5e:	2306      	movs	r3, #6
 8000c60:	e00a      	b.n	8000c78 <LL_TIM_OC_EnablePreload+0x70>
 8000c62:	2305      	movs	r3, #5
 8000c64:	e008      	b.n	8000c78 <LL_TIM_OC_EnablePreload+0x70>
 8000c66:	2304      	movs	r3, #4
 8000c68:	e006      	b.n	8000c78 <LL_TIM_OC_EnablePreload+0x70>
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e004      	b.n	8000c78 <LL_TIM_OC_EnablePreload+0x70>
 8000c6e:	2302      	movs	r3, #2
 8000c70:	e002      	b.n	8000c78 <LL_TIM_OC_EnablePreload+0x70>
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <LL_TIM_OC_EnablePreload+0x70>
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3318      	adds	r3, #24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <LL_TIM_OC_EnablePreload+0xa4>)
 8000c84:	5cd3      	ldrb	r3, [r2, r3]
 8000c86:	440b      	add	r3, r1
 8000c88:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <LL_TIM_OC_EnablePreload+0xa8>)
 8000c92:	5ccb      	ldrb	r3, [r1, r3]
 8000c94:	4619      	mov	r1, r3
 8000c96:	2308      	movs	r3, #8
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	601a      	str	r2, [r3, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	0800ce68 	.word	0x0800ce68
 8000cb0:	0800ce74 	.word	0x0800ce74

08000cb4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000cc6:	f023 0307 	bic.w	r3, r3, #7
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	605a      	str	r2, [r3, #4]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	605a      	str	r2, [r3, #4]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	609a      	str	r2, [r3, #8]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d5c:	4907      	ldr	r1, [pc, #28]	; (8000d7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	40021000 	.word	0x40021000

08000d80 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	40021000 	.word	0x40021000

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db4:	f001 f855 	bl	8001e62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db8:	f000 f819 	bl	8000dee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dbc:	f000 fc66 	bl	800168c <MX_GPIO_Init>
  MX_DMA_Init();
 8000dc0:	f000 fc40 	bl	8001644 <MX_DMA_Init>
  MX_ADC1_Init();
 8000dc4:	f000 f85c 	bl	8000e80 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000dc8:	f000 f904 	bl	8000fd4 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000dcc:	f000 fba0 	bl	8001510 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000dd0:	f000 f998 	bl	8001104 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000dd4:	f000 f9d6 	bl	8001184 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000dd8:	f000 fbe6 	bl	80015a8 <MX_USART3_UART_Init>
  MX_TIM15_Init();
 8000ddc:	f000 fae2 	bl	80013a4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  AppMainInit();
 8000de0:	f00a f8a6 	bl	800af30 <AppMainInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	AppMainProcess();
 8000de4:	f00a f8d2 	bl	800af8c <AppMainProcess>
	TEST();
 8000de8:	f00a fd66 	bl	800b8b8 <TEST>
	AppMainProcess();
 8000dec:	e7fa      	b.n	8000de4 <main+0x34>

08000dee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b094      	sub	sp, #80	; 0x50
 8000df2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	2238      	movs	r2, #56	; 0x38
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f00b fa59 	bl	800c2b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f003 fbaf 	bl	8004574 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e20:	2302      	movs	r3, #2
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e24:	2303      	movs	r3, #3
 8000e26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e2c:	2355      	movs	r3, #85	; 0x55
 8000e2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	4618      	mov	r0, r3
 8000e42:	f003 fc3b 	bl	80046bc <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e4c:	f000 fcac 	bl	80017a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2303      	movs	r3, #3
 8000e56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2104      	movs	r1, #4
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 ff3f 	bl	8004cec <HAL_RCC_ClockConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e74:	f000 fc98 	bl	80017a8 <Error_Handler>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3750      	adds	r7, #80	; 0x50
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08c      	sub	sp, #48	; 0x30
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2220      	movs	r2, #32
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f00b fa0b 	bl	800c2b4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e9e:	4b48      	ldr	r3, [pc, #288]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000ea0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ea4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ea6:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000ea8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb4:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000eba:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ec0:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec6:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000ec8:	2204      	movs	r2, #4
 8000eca:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ecc:	4b3c      	ldr	r3, [pc, #240]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000ee6:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000ee8:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000eee:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ef6:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000efe:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000f00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f04:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f06:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0e:	482c      	ldr	r0, [pc, #176]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000f10:	f001 face 	bl	80024b0 <HAL_ADC_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000f1a:	f000 fc45 	bl	80017a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	4619      	mov	r1, r3
 8000f28:	4825      	ldr	r0, [pc, #148]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000f2a:	f002 fb17 	bl	800355c <HAL_ADCEx_MultiModeConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000f34:	f000 fc38 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f38:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <MX_ADC1_Init+0x144>)
 8000f3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f3c:	2306      	movs	r3, #6
 8000f3e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000f40:	2305      	movs	r3, #5
 8000f42:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f44:	237f      	movs	r3, #127	; 0x7f
 8000f46:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4619      	mov	r1, r3
 8000f54:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000f56:	f001 fd07 	bl	8002968 <HAL_ADC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000f60:	f000 fc22 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_ADC1_Init+0x148>)
 8000f66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f68:	230c      	movs	r3, #12
 8000f6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000f72:	f001 fcf9 	bl	8002968 <HAL_ADC_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000f7c:	f000 fc14 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_ADC1_Init+0x14c>)
 8000f82:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f84:	2312      	movs	r3, #18
 8000f86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000f8e:	f001 fceb 	bl	8002968 <HAL_ADC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000f98:	f000 fc06 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_ADC1_Init+0x150>)
 8000f9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000fa0:	2318      	movs	r3, #24
 8000fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_ADC1_Init+0x140>)
 8000faa:	f001 fcdd 	bl	8002968 <HAL_ADC_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000fb4:	f000 fbf8 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3730      	adds	r7, #48	; 0x30
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200004ec 	.word	0x200004ec
 8000fc4:	04300002 	.word	0x04300002
 8000fc8:	08600004 	.word	0x08600004
 8000fcc:	14f00020 	.word	0x14f00020
 8000fd0:	3ef08000 	.word	0x3ef08000

08000fd4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2220      	movs	r2, #32
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00b f967 	bl	800c2b4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fe6:	4b41      	ldr	r3, [pc, #260]	; (80010ec <MX_ADC2_Init+0x118>)
 8000fe8:	4a41      	ldr	r2, [pc, #260]	; (80010f0 <MX_ADC2_Init+0x11c>)
 8000fea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fec:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <MX_ADC2_Init+0x118>)
 8000fee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ff2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff4:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <MX_ADC2_Init+0x118>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffa:	4b3c      	ldr	r3, [pc, #240]	; (80010ec <MX_ADC2_Init+0x118>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001000:	4b3a      	ldr	r3, [pc, #232]	; (80010ec <MX_ADC2_Init+0x118>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001006:	4b39      	ldr	r3, [pc, #228]	; (80010ec <MX_ADC2_Init+0x118>)
 8001008:	2201      	movs	r2, #1
 800100a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100c:	4b37      	ldr	r3, [pc, #220]	; (80010ec <MX_ADC2_Init+0x118>)
 800100e:	2204      	movs	r2, #4
 8001010:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001012:	4b36      	ldr	r3, [pc, #216]	; (80010ec <MX_ADC2_Init+0x118>)
 8001014:	2200      	movs	r2, #0
 8001016:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001018:	4b34      	ldr	r3, [pc, #208]	; (80010ec <MX_ADC2_Init+0x118>)
 800101a:	2200      	movs	r2, #0
 800101c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 800101e:	4b33      	ldr	r3, [pc, #204]	; (80010ec <MX_ADC2_Init+0x118>)
 8001020:	2204      	movs	r2, #4
 8001022:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001024:	4b31      	ldr	r3, [pc, #196]	; (80010ec <MX_ADC2_Init+0x118>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <MX_ADC2_Init+0x118>)
 800102e:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <MX_ADC2_Init+0x118>)
 8001036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800103c:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <MX_ADC2_Init+0x118>)
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001044:	4b29      	ldr	r3, [pc, #164]	; (80010ec <MX_ADC2_Init+0x118>)
 8001046:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800104a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <MX_ADC2_Init+0x118>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001054:	4825      	ldr	r0, [pc, #148]	; (80010ec <MX_ADC2_Init+0x118>)
 8001056:	f001 fa2b 	bl	80024b0 <HAL_ADC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001060:	f000 fba2 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <MX_ADC2_Init+0x120>)
 8001066:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001068:	2306      	movs	r3, #6
 800106a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800106c:	2305      	movs	r3, #5
 800106e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001070:	237f      	movs	r3, #127	; 0x7f
 8001072:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001074:	2304      	movs	r3, #4
 8001076:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	481a      	ldr	r0, [pc, #104]	; (80010ec <MX_ADC2_Init+0x118>)
 8001082:	f001 fc71 	bl	8002968 <HAL_ADC_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 800108c:	f000 fb8c 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_ADC2_Init+0x124>)
 8001092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001094:	230c      	movs	r3, #12
 8001096:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4619      	mov	r1, r3
 800109c:	4813      	ldr	r0, [pc, #76]	; (80010ec <MX_ADC2_Init+0x118>)
 800109e:	f001 fc63 	bl	8002968 <HAL_ADC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 80010a8:	f000 fb7e 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_ADC2_Init+0x128>)
 80010ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010b0:	2312      	movs	r3, #18
 80010b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4619      	mov	r1, r3
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <MX_ADC2_Init+0x118>)
 80010ba:	f001 fc55 	bl	8002968 <HAL_ADC_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 80010c4:	f000 fb70 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <MX_ADC2_Init+0x12c>)
 80010ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010cc:	2318      	movs	r3, #24
 80010ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010d0:	463b      	mov	r3, r7
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_ADC2_Init+0x118>)
 80010d6:	f001 fc47 	bl	8002968 <HAL_ADC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC2_Init+0x110>
  {
    Error_Handler();
 80010e0:	f000 fb62 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000558 	.word	0x20000558
 80010f0:	50000100 	.word	0x50000100
 80010f4:	0c900008 	.word	0x0c900008
 80010f8:	10c00010 	.word	0x10c00010
 80010fc:	36902000 	.word	0x36902000
 8001100:	47520000 	.word	0x47520000

08001104 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_I2C2_Init+0x74>)
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <MX_I2C2_Init+0x78>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_I2C2_Init+0x74>)
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <MX_I2C2_Init+0x7c>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_I2C2_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_I2C2_Init+0x74>)
 800111c:	2201      	movs	r2, #1
 800111e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_I2C2_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_I2C2_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_I2C2_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_I2C2_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_I2C2_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800113e:	480e      	ldr	r0, [pc, #56]	; (8001178 <MX_I2C2_Init+0x74>)
 8001140:	f003 f8f2 	bl	8004328 <HAL_I2C_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800114a:	f000 fb2d 	bl	80017a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <MX_I2C2_Init+0x74>)
 8001152:	f003 f978 	bl	8004446 <HAL_I2CEx_ConfigAnalogFilter>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800115c:	f000 fb24 	bl	80017a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001160:	2100      	movs	r1, #0
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_I2C2_Init+0x74>)
 8001164:	f003 f9ba 	bl	80044dc <HAL_I2CEx_ConfigDigitalFilter>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800116e:	f000 fb1b 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000684 	.word	0x20000684
 800117c:	40005800 	.word	0x40005800
 8001180:	30a0a7fb 	.word	0x30a0a7fb

08001184 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0a0      	sub	sp, #128	; 0x80
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800118a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800119a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800119e:	2220      	movs	r2, #32
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00b f886 	bl	800c2b4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	2230      	movs	r2, #48	; 0x30
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00b f87f 	bl	800c2b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80011c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011ca:	f7ff fdd9 	bl	8000d80 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011ce:	f7ff fc19 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fc69 	bl	8000ab0 <NVIC_EncodePriority>
 80011de:	4603      	mov	r3, r0
 80011e0:	4619      	mov	r1, r3
 80011e2:	2018      	movs	r0, #24
 80011e4:	f7ff fc3a 	bl	8000a5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80011e8:	2018      	movs	r0, #24
 80011ea:	f7ff fc19 	bl	8000a20 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011ee:	f7ff fc09 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fc59 	bl	8000ab0 <NVIC_EncodePriority>
 80011fe:	4603      	mov	r3, r0
 8001200:	4619      	mov	r1, r3
 8001202:	201b      	movs	r0, #27
 8001204:	f7ff fc2a 	bl	8000a5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001208:	201b      	movs	r0, #27
 800120a:	f7ff fc09 	bl	8000a20 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001214:	2300      	movs	r3, #0
 8001216:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 3399;
 8001218:	f640 5347 	movw	r3, #3399	; 0xd47
 800121c:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001226:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800122a:	4619      	mov	r1, r3
 800122c:	485c      	ldr	r0, [pc, #368]	; (80013a0 <MX_TIM1_Init+0x21c>)
 800122e:	f006 fd39 	bl	8007ca4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 8001232:	485b      	ldr	r0, [pc, #364]	; (80013a0 <MX_TIM1_Init+0x21c>)
 8001234:	f7ff fc6f 	bl	8000b16 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001238:	2100      	movs	r1, #0
 800123a:	4859      	ldr	r0, [pc, #356]	; (80013a0 <MX_TIM1_Init+0x21c>)
 800123c:	f7ff fd3a 	bl	8000cb4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001240:	2101      	movs	r1, #1
 8001242:	4857      	ldr	r0, [pc, #348]	; (80013a0 <MX_TIM1_Init+0x21c>)
 8001244:	f7ff fce0 	bl	8000c08 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001248:	2360      	movs	r3, #96	; 0x60
 800124a:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001258:	2300      	movs	r3, #0
 800125a:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800125c:	2300      	movs	r3, #0
 800125e:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001268:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800126c:	461a      	mov	r2, r3
 800126e:	2101      	movs	r1, #1
 8001270:	484b      	ldr	r0, [pc, #300]	; (80013a0 <MX_TIM1_Init+0x21c>)
 8001272:	f006 fda1 	bl	8007db8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001276:	2101      	movs	r1, #1
 8001278:	4849      	ldr	r0, [pc, #292]	; (80013a0 <MX_TIM1_Init+0x21c>)
 800127a:	f7ff fc6d 	bl	8000b58 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 800127e:	2110      	movs	r1, #16
 8001280:	4847      	ldr	r0, [pc, #284]	; (80013a0 <MX_TIM1_Init+0x21c>)
 8001282:	f7ff fcc1 	bl	8000c08 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001286:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800128a:	461a      	mov	r2, r3
 800128c:	2110      	movs	r1, #16
 800128e:	4844      	ldr	r0, [pc, #272]	; (80013a0 <MX_TIM1_Init+0x21c>)
 8001290:	f006 fd92 	bl	8007db8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8001294:	2110      	movs	r1, #16
 8001296:	4842      	ldr	r0, [pc, #264]	; (80013a0 <MX_TIM1_Init+0x21c>)
 8001298:	f7ff fc5e 	bl	8000b58 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 800129c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a0:	483f      	ldr	r0, [pc, #252]	; (80013a0 <MX_TIM1_Init+0x21c>)
 80012a2:	f7ff fcb1 	bl	8000c08 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80012a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012aa:	461a      	mov	r2, r3
 80012ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b0:	483b      	ldr	r0, [pc, #236]	; (80013a0 <MX_TIM1_Init+0x21c>)
 80012b2:	f006 fd81 	bl	8007db8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80012b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ba:	4839      	ldr	r0, [pc, #228]	; (80013a0 <MX_TIM1_Init+0x21c>)
 80012bc:	f7ff fc4c 	bl	8000b58 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 80012c0:	2330      	movs	r3, #48	; 0x30
 80012c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80012c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012c8:	461a      	mov	r2, r3
 80012ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ce:	4834      	ldr	r0, [pc, #208]	; (80013a0 <MX_TIM1_Init+0x21c>)
 80012d0:	f006 fd72 	bl	8007db8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 80012d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d8:	4831      	ldr	r0, [pc, #196]	; (80013a0 <MX_TIM1_Init+0x21c>)
 80012da:	f7ff fc3d 	bl	8000b58 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
 80012de:	2170      	movs	r1, #112	; 0x70
 80012e0:	482f      	ldr	r0, [pc, #188]	; (80013a0 <MX_TIM1_Init+0x21c>)
 80012e2:	f7ff fcfc 	bl	8000cde <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 80012e6:	2100      	movs	r1, #0
 80012e8:	482d      	ldr	r0, [pc, #180]	; (80013a0 <MX_TIM1_Init+0x21c>)
 80012ea:	f7ff fd0d 	bl	8000d08 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80012ee:	482c      	ldr	r0, [pc, #176]	; (80013a0 <MX_TIM1_Init+0x21c>)
 80012f0:	f7ff fd1d 	bl	8000d2e <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 80012f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f8:	4829      	ldr	r0, [pc, #164]	; (80013a0 <MX_TIM1_Init+0x21c>)
 80012fa:	f7ff fc85 	bl	8000c08 <LL_TIM_OC_EnablePreload>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 800131e:	2300      	movs	r3, #0
 8001320:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8001326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800132a:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8001330:	2300      	movs	r3, #0
 8001332:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <MX_TIM1_Init+0x21c>)
 8001340:	f006 fd9a 	bl	8007e78 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fd03 	bl	8000d50 <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA11   ------> TIM1_CH1N
  PA12   ------> TIM1_CH2N
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 800134a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800134e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001350:	2302      	movs	r3, #2
 8001352:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800135c:	2302      	movs	r3, #2
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001360:	2306      	movs	r3, #6
 8001362:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136c:	f006 fb9b 	bl	8007aa6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001374:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001376:	2302      	movs	r3, #2
 8001378:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001382:	2302      	movs	r3, #2
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001386:	2306      	movs	r3, #6
 8001388:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001392:	f006 fb88 	bl	8007aa6 <LL_GPIO_Init>

}
 8001396:	bf00      	nop
 8001398:	3780      	adds	r7, #128	; 0x80
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40012c00 	.word	0x40012c00

080013a4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0a0      	sub	sp, #128	; 0x80
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80013aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80013ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013be:	2220      	movs	r2, #32
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00a ff76 	bl	800c2b4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	2230      	movs	r2, #48	; 0x30
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00a ff6f 	bl	800c2b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM15);
 80013e6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80013ea:	f7ff fcc9 	bl	8000d80 <LL_APB2_GRP1_EnableClock>

  /* TIM15 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013ee:	f7ff fb09 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fb59 	bl	8000ab0 <NVIC_EncodePriority>
 80013fe:	4603      	mov	r3, r0
 8001400:	4619      	mov	r1, r3
 8001402:	2018      	movs	r0, #24
 8001404:	f7ff fb2a 	bl	8000a5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001408:	2018      	movs	r0, #24
 800140a:	f7ff fb09 	bl	8000a20 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001414:	2300      	movs	r3, #0
 8001416:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 65535;
 8001418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141c:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM15, &TIM_InitStruct);
 8001426:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800142a:	4619      	mov	r1, r3
 800142c:	4836      	ldr	r0, [pc, #216]	; (8001508 <MX_TIM15_Init+0x164>)
 800142e:	f006 fc39 	bl	8007ca4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM15);
 8001432:	4835      	ldr	r0, [pc, #212]	; (8001508 <MX_TIM15_Init+0x164>)
 8001434:	f7ff fb7f 	bl	8000b36 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 8001438:	2330      	movs	r3, #48	; 0x30
 800143a:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001448:	2300      	movs	r3, #0
 800144a:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800144c:	2300      	movs	r3, #0
 800144e:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM15, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001458:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800145c:	461a      	mov	r2, r3
 800145e:	2101      	movs	r1, #1
 8001460:	4829      	ldr	r0, [pc, #164]	; (8001508 <MX_TIM15_Init+0x164>)
 8001462:	f006 fca9 	bl	8007db8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM15, LL_TIM_CHANNEL_CH1);
 8001466:	2101      	movs	r1, #1
 8001468:	4827      	ldr	r0, [pc, #156]	; (8001508 <MX_TIM15_Init+0x164>)
 800146a:	f7ff fb75 	bl	8000b58 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM15, LL_TIM_CHANNEL_CH2);
 800146e:	2110      	movs	r1, #16
 8001470:	4825      	ldr	r0, [pc, #148]	; (8001508 <MX_TIM15_Init+0x164>)
 8001472:	f7ff fbc9 	bl	8000c08 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001476:	2360      	movs	r3, #96	; 0x60
 8001478:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_TIM_OC_Init(TIM15, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800147a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800147e:	461a      	mov	r2, r3
 8001480:	2110      	movs	r1, #16
 8001482:	4821      	ldr	r0, [pc, #132]	; (8001508 <MX_TIM15_Init+0x164>)
 8001484:	f006 fc98 	bl	8007db8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM15, LL_TIM_CHANNEL_CH2);
 8001488:	2110      	movs	r1, #16
 800148a:	481f      	ldr	r0, [pc, #124]	; (8001508 <MX_TIM15_Init+0x164>)
 800148c:	f7ff fb64 	bl	8000b58 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM15, LL_TIM_TRGO_OC1REF);
 8001490:	2140      	movs	r1, #64	; 0x40
 8001492:	481d      	ldr	r0, [pc, #116]	; (8001508 <MX_TIM15_Init+0x164>)
 8001494:	f7ff fc23 	bl	8000cde <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM15);
 8001498:	481b      	ldr	r0, [pc, #108]	; (8001508 <MX_TIM15_Init+0x164>)
 800149a:	f7ff fc48 	bl	8000d2e <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_EnablePreload(TIM15, LL_TIM_CHANNEL_CH1);
 800149e:	2101      	movs	r1, #1
 80014a0:	4819      	ldr	r0, [pc, #100]	; (8001508 <MX_TIM15_Init+0x164>)
 80014a2:	f7ff fbb1 	bl	8000c08 <LL_TIM_OC_EnablePreload>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80014bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM15, &TIM_BDTRInitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <MX_TIM15_Init+0x164>)
 80014d2:	f006 fcd1 	bl	8007e78 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80014d6:	2002      	movs	r0, #2
 80014d8:	f7ff fc3a 	bl	8000d50 <LL_AHB2_GRP1_EnableClock>
  /**TIM15 GPIO Configuration
  PB15   ------> TIM15_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80014dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014e2:	2302      	movs	r3, #2
 80014e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80014ee:	2302      	movs	r3, #2
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_TIM15_Init+0x168>)
 80014fc:	f006 fad3 	bl	8007aa6 <LL_GPIO_Init>

}
 8001500:	bf00      	nop
 8001502:	3780      	adds	r7, #128	; 0x80
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40014000 	.word	0x40014000
 800150c:	48000400 	.word	0x48000400

08001510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 8001516:	4a23      	ldr	r2, [pc, #140]	; (80015a4 <MX_USART2_UART_Init+0x94>)
 8001518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 800151c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001558:	4811      	ldr	r0, [pc, #68]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 800155a:	f003 ffd3 	bl	8005504 <HAL_UART_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001564:	f000 f920 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001568:	2100      	movs	r1, #0
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 800156c:	f006 f886 	bl	800767c <HAL_UARTEx_SetTxFifoThreshold>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001576:	f000 f917 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157a:	2100      	movs	r1, #0
 800157c:	4808      	ldr	r0, [pc, #32]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 800157e:	f006 f8bb 	bl	80076f8 <HAL_UARTEx_SetRxFifoThreshold>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001588:	f000 f90e 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_USART2_UART_Init+0x90>)
 800158e:	f006 f83c 	bl	800760a <HAL_UARTEx_DisableFifoMode>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001598:	f000 f906 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200006d0 	.word	0x200006d0
 80015a4:	40004400 	.word	0x40004400

080015a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <MX_USART3_UART_Init+0x94>)
 80015ae:	4a24      	ldr	r2, [pc, #144]	; (8001640 <MX_USART3_UART_Init+0x98>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <MX_USART3_UART_Init+0x94>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <MX_USART3_UART_Init+0x94>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <MX_USART3_UART_Init+0x94>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_USART3_UART_Init+0x94>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <MX_USART3_UART_Init+0x94>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_USART3_UART_Init+0x94>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <MX_USART3_UART_Init+0x94>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_USART3_UART_Init+0x94>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <MX_USART3_UART_Init+0x94>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_USART3_UART_Init+0x94>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015f0:	4812      	ldr	r0, [pc, #72]	; (800163c <MX_USART3_UART_Init+0x94>)
 80015f2:	f003 ff87 	bl	8005504 <HAL_UART_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015fc:	f000 f8d4 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001600:	2100      	movs	r1, #0
 8001602:	480e      	ldr	r0, [pc, #56]	; (800163c <MX_USART3_UART_Init+0x94>)
 8001604:	f006 f83a 	bl	800767c <HAL_UARTEx_SetTxFifoThreshold>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800160e:	f000 f8cb 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001612:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001616:	4809      	ldr	r0, [pc, #36]	; (800163c <MX_USART3_UART_Init+0x94>)
 8001618:	f006 f86e 	bl	80076f8 <HAL_UARTEx_SetRxFifoThreshold>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8001622:	f000 f8c1 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_USART3_UART_Init+0x94>)
 8001628:	f005 ffb4 	bl	8007594 <HAL_UARTEx_EnableFifoMode>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8001632:	f000 f8b9 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000760 	.word	0x20000760
 8001640:	40004800 	.word	0x40004800

08001644 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_DMA_Init+0x44>)
 800164c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <MX_DMA_Init+0x44>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6493      	str	r3, [r2, #72]	; 0x48
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_DMA_Init+0x44>)
 8001658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_DMA_Init+0x44>)
 8001664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <MX_DMA_Init+0x44>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6493      	str	r3, [r2, #72]	; 0x48
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_DMA_Init+0x44>)
 8001670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <MX_GPIO_Init+0x110>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a3d      	ldr	r2, [pc, #244]	; (800179c <MX_GPIO_Init+0x110>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b3b      	ldr	r3, [pc, #236]	; (800179c <MX_GPIO_Init+0x110>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <MX_GPIO_Init+0x110>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a37      	ldr	r2, [pc, #220]	; (800179c <MX_GPIO_Init+0x110>)
 80016c0:	f043 0320 	orr.w	r3, r3, #32
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b35      	ldr	r3, [pc, #212]	; (800179c <MX_GPIO_Init+0x110>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b32      	ldr	r3, [pc, #200]	; (800179c <MX_GPIO_Init+0x110>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a31      	ldr	r2, [pc, #196]	; (800179c <MX_GPIO_Init+0x110>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b2f      	ldr	r3, [pc, #188]	; (800179c <MX_GPIO_Init+0x110>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <MX_GPIO_Init+0x110>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	4a2b      	ldr	r2, [pc, #172]	; (800179c <MX_GPIO_Init+0x110>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <MX_GPIO_Init+0x110>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001708:	4825      	ldr	r0, [pc, #148]	; (80017a0 <MX_GPIO_Init+0x114>)
 800170a:	f002 fdf5 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Control_485_Pin|Reset_3g_Pin
 800170e:	2200      	movs	r2, #0
 8001710:	f243 2186 	movw	r1, #12934	; 0x3286
 8001714:	4823      	ldr	r0, [pc, #140]	; (80017a4 <MX_GPIO_Init+0x118>)
 8001716:	f002 fdef 	bl	80042f8 <HAL_GPIO_WritePin>
                          |BUZZ_Pin|Power_on_off_3g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800171a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001724:	2301      	movs	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	481b      	ldr	r0, [pc, #108]	; (80017a0 <MX_GPIO_Init+0x114>)
 8001734:	f002 fb7c 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8001738:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173e:	2301      	movs	r3, #1
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4813      	ldr	r0, [pc, #76]	; (80017a0 <MX_GPIO_Init+0x114>)
 8001752:	f002 fb6d 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Reset_3g_Pin BUZZ_Pin
                           Power_on_off_3g_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Reset_3g_Pin|BUZZ_Pin
 8001756:	f242 2386 	movw	r3, #8838	; 0x2286
 800175a:	617b      	str	r3, [r7, #20]
                          |Power_on_off_3g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	480d      	ldr	r0, [pc, #52]	; (80017a4 <MX_GPIO_Init+0x118>)
 8001770:	f002 fb5e 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Control_485_Pin */
  GPIO_InitStruct.Pin = Control_485_Pin;
 8001774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001782:	2302      	movs	r3, #2
 8001784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Control_485_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_GPIO_Init+0x118>)
 800178e:	f002 fb4f 	bl	8003e30 <HAL_GPIO_Init>

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	48000800 	.word	0x48000800
 80017a4:	48000400 	.word	0x48000400

080017a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ac:	b672      	cpsid	i
}
 80017ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <Error_Handler+0x8>
	...

080017b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_MspInit+0x50>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_MspInit+0x50>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6613      	str	r3, [r2, #96]	; 0x60
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_MspInit+0x50>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_MspInit+0x50>)
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <HAL_MspInit+0x50>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6593      	str	r3, [r2, #88]	; 0x58
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_MspInit+0x50>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 80017ea:	2020      	movs	r0, #32
 80017ec:	f000 fbcc 	bl	8001f88 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80017f0:	f000 fbf2 	bl	8001fd8 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f000 fbdb 	bl	8001fb0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000

08001808 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b09e      	sub	sp, #120	; 0x78
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001820:	f107 0320 	add.w	r3, r7, #32
 8001824:	2244      	movs	r2, #68	; 0x44
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f00a fd43 	bl	800c2b4 <memset>
  if(hadc->Instance==ADC1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001836:	f040 8084 	bne.w	8001942 <HAL_ADC_MspInit+0x13a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800183a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800183e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001840:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001844:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fc6a 	bl	8005124 <HAL_RCCEx_PeriphCLKConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001856:	f7ff ffa7 	bl	80017a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800185a:	4b73      	ldr	r3, [pc, #460]	; (8001a28 <HAL_ADC_MspInit+0x220>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	4a71      	ldr	r2, [pc, #452]	; (8001a28 <HAL_ADC_MspInit+0x220>)
 8001862:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001864:	4b70      	ldr	r3, [pc, #448]	; (8001a28 <HAL_ADC_MspInit+0x220>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d10b      	bne.n	8001884 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800186c:	4b6f      	ldr	r3, [pc, #444]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001870:	4a6e      	ldr	r2, [pc, #440]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 8001872:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001878:	4b6c      	ldr	r3, [pc, #432]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b69      	ldr	r3, [pc, #420]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 8001886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001888:	4a68      	ldr	r2, [pc, #416]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001890:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 8001892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	4b63      	ldr	r3, [pc, #396]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a0:	4a62      	ldr	r2, [pc, #392]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a8:	4b60      	ldr	r3, [pc, #384]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC1_IN1_VOUT_Pin|ADC1_IN2_TEMP2_Pin;
 80018b4:	2303      	movs	r3, #3
 80018b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b8:	2303      	movs	r3, #3
 80018ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ca:	f002 fab1 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN15_WIND_Pin|ADC1_IN5_FREQ_Pin;
 80018ce:	f244 0301 	movw	r3, #16385	; 0x4001
 80018d2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d4:	2303      	movs	r3, #3
 80018d6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018e0:	4619      	mov	r1, r3
 80018e2:	4853      	ldr	r0, [pc, #332]	; (8001a30 <HAL_ADC_MspInit+0x228>)
 80018e4:	f002 faa4 	bl	8003e30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018e8:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <HAL_ADC_MspInit+0x22c>)
 80018ea:	4a53      	ldr	r2, [pc, #332]	; (8001a38 <HAL_ADC_MspInit+0x230>)
 80018ec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80018ee:	4b51      	ldr	r3, [pc, #324]	; (8001a34 <HAL_ADC_MspInit+0x22c>)
 80018f0:	2205      	movs	r2, #5
 80018f2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f4:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <HAL_ADC_MspInit+0x22c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fa:	4b4e      	ldr	r3, [pc, #312]	; (8001a34 <HAL_ADC_MspInit+0x22c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001900:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <HAL_ADC_MspInit+0x22c>)
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001906:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <HAL_ADC_MspInit+0x22c>)
 8001908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800190e:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <HAL_ADC_MspInit+0x22c>)
 8001910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001914:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001916:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <HAL_ADC_MspInit+0x22c>)
 8001918:	2220      	movs	r2, #32
 800191a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800191c:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <HAL_ADC_MspInit+0x22c>)
 800191e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001922:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001924:	4843      	ldr	r0, [pc, #268]	; (8001a34 <HAL_ADC_MspInit+0x22c>)
 8001926:	f001 ffff 	bl	8003928 <HAL_DMA_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8001930:	f7ff ff3a 	bl	80017a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a3f      	ldr	r2, [pc, #252]	; (8001a34 <HAL_ADC_MspInit+0x22c>)
 8001938:	655a      	str	r2, [r3, #84]	; 0x54
 800193a:	4a3e      	ldr	r2, [pc, #248]	; (8001a34 <HAL_ADC_MspInit+0x22c>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001940:	e06e      	b.n	8001a20 <HAL_ADC_MspInit+0x218>
  else if(hadc->Instance==ADC2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a3d      	ldr	r2, [pc, #244]	; (8001a3c <HAL_ADC_MspInit+0x234>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d169      	bne.n	8001a20 <HAL_ADC_MspInit+0x218>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800194c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001950:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001952:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001956:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001958:	f107 0320 	add.w	r3, r7, #32
 800195c:	4618      	mov	r0, r3
 800195e:	f003 fbe1 	bl	8005124 <HAL_RCCEx_PeriphCLKConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_ADC_MspInit+0x164>
      Error_Handler();
 8001968:	f7ff ff1e 	bl	80017a8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800196c:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <HAL_ADC_MspInit+0x220>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	4a2d      	ldr	r2, [pc, #180]	; (8001a28 <HAL_ADC_MspInit+0x220>)
 8001974:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001976:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <HAL_ADC_MspInit+0x220>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d10b      	bne.n	8001996 <HAL_ADC_MspInit+0x18e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800197e:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	4a2a      	ldr	r2, [pc, #168]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 8001984:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	4a24      	ldr	r2, [pc, #144]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <HAL_ADC_MspInit+0x224>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|ADC2_IN13_IDUMP_Pin|ADC2_IN3_VIN_Pin|ADC2_IN4_TEMP1_Pin;
 80019ae:	23f0      	movs	r3, #240	; 0xf0
 80019b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b2:	2303      	movs	r3, #3
 80019b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019be:	4619      	mov	r1, r3
 80019c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c4:	f002 fa34 	bl	8003e30 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_ADC_MspInit+0x238>)
 80019ca:	4a1e      	ldr	r2, [pc, #120]	; (8001a44 <HAL_ADC_MspInit+0x23c>)
 80019cc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80019ce:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <HAL_ADC_MspInit+0x238>)
 80019d0:	2224      	movs	r2, #36	; 0x24
 80019d2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_ADC_MspInit+0x238>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_ADC_MspInit+0x238>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_ADC_MspInit+0x238>)
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_ADC_MspInit+0x238>)
 80019e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ec:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_ADC_MspInit+0x238>)
 80019f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_ADC_MspInit+0x238>)
 80019f8:	2220      	movs	r2, #32
 80019fa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_ADC_MspInit+0x238>)
 80019fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001a04:	480e      	ldr	r0, [pc, #56]	; (8001a40 <HAL_ADC_MspInit+0x238>)
 8001a06:	f001 ff8f 	bl	8003928 <HAL_DMA_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_ADC_MspInit+0x20c>
      Error_Handler();
 8001a10:	f7ff feca 	bl	80017a8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_ADC_MspInit+0x238>)
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_ADC_MspInit+0x238>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001a20:	bf00      	nop
 8001a22:	3778      	adds	r7, #120	; 0x78
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200007f0 	.word	0x200007f0
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48000400 	.word	0x48000400
 8001a34:	200005c4 	.word	0x200005c4
 8001a38:	40020008 	.word	0x40020008
 8001a3c:	50000100 	.word	0x50000100
 8001a40:	20000624 	.word	0x20000624
 8001a44:	40020030 	.word	0x40020030

08001a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b09a      	sub	sp, #104	; 0x68
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	2244      	movs	r2, #68	; 0x44
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f00a fc23 	bl	800c2b4 <memset>
  if(hi2c->Instance==I2C2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1f      	ldr	r2, [pc, #124]	; (8001af0 <HAL_I2C_MspInit+0xa8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d137      	bne.n	8001ae8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 fb4d 	bl	8005124 <HAL_RCCEx_PeriphCLKConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a90:	f7ff fe8a 	bl	80017a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <HAL_I2C_MspInit+0xac>)
 8001a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a98:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <HAL_I2C_MspInit+0xac>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_I2C_MspInit+0xac>)
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ab0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab2:	2312      	movs	r3, #18
 8001ab4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001acc:	f002 f9b0 	bl	8003e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_I2C_MspInit+0xac>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_I2C_MspInit+0xac>)
 8001ad6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ada:	6593      	str	r3, [r2, #88]	; 0x58
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_I2C_MspInit+0xac>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	3768      	adds	r7, #104	; 0x68
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40005800 	.word	0x40005800
 8001af4:	40021000 	.word	0x40021000

08001af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b09c      	sub	sp, #112	; 0x70
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	2244      	movs	r2, #68	; 0x44
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f00a fbcb 	bl	800c2b4 <memset>
  if(huart->Instance==USART2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a41      	ldr	r2, [pc, #260]	; (8001c28 <HAL_UART_MspInit+0x130>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d13e      	bne.n	8001ba6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b30:	f107 0318 	add.w	r3, r7, #24
 8001b34:	4618      	mov	r0, r3
 8001b36:	f003 faf5 	bl	8005124 <HAL_RCCEx_PeriphCLKConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b40:	f7ff fe32 	bl	80017a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b44:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <HAL_UART_MspInit+0x134>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <HAL_UART_MspInit+0x134>)
 8001b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b50:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <HAL_UART_MspInit+0x134>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5c:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <HAL_UART_MspInit+0x134>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	4a32      	ldr	r2, [pc, #200]	; (8001c2c <HAL_UART_MspInit+0x134>)
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_UART_MspInit+0x134>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001b74:	2318      	movs	r3, #24
 8001b76:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b84:	2307      	movs	r3, #7
 8001b86:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4828      	ldr	r0, [pc, #160]	; (8001c30 <HAL_UART_MspInit+0x138>)
 8001b90:	f002 f94e 	bl	8003e30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	2026      	movs	r0, #38	; 0x26
 8001b9a:	f001 fe82 	bl	80038a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b9e:	2026      	movs	r0, #38	; 0x26
 8001ba0:	f001 fe99 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ba4:	e03b      	b.n	8001c1e <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART3)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <HAL_UART_MspInit+0x13c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d136      	bne.n	8001c1e <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 fab1 	bl	8005124 <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001bc8:	f7ff fdee 	bl	80017a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_UART_MspInit+0x134>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	4a16      	ldr	r2, [pc, #88]	; (8001c2c <HAL_UART_MspInit+0x134>)
 8001bd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_UART_MspInit+0x134>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_UART_MspInit+0x134>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_UART_MspInit+0x134>)
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_UART_MspInit+0x134>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX_485_Pin|RX_485_Pin;
 8001bfc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c00:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c0e:	2307      	movs	r3, #7
 8001c10:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <HAL_UART_MspInit+0x138>)
 8001c1a:	f002 f909 	bl	8003e30 <HAL_GPIO_Init>
}
 8001c1e:	bf00      	nop
 8001c20:	3770      	adds	r7, #112	; 0x70
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40004400 	.word	0x40004400
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	48000400 	.word	0x48000400
 8001c34:	40004800 	.word	0x40004800

08001c38 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <HAL_UART_MspDeInit+0x58>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10d      	bne.n	8001c66 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_UART_MspDeInit+0x5c>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4a11      	ldr	r2, [pc, #68]	; (8001c94 <HAL_UART_MspDeInit+0x5c>)
 8001c50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4);
 8001c56:	2118      	movs	r1, #24
 8001c58:	480f      	ldr	r0, [pc, #60]	; (8001c98 <HAL_UART_MspDeInit+0x60>)
 8001c5a:	f002 fa6b 	bl	8004134 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001c5e:	2026      	movs	r0, #38	; 0x26
 8001c60:	f001 fe47 	bl	80038f2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8001c64:	e00f      	b.n	8001c86 <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART3)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <HAL_UART_MspDeInit+0x64>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d10a      	bne.n	8001c86 <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_UART_MspDeInit+0x5c>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_UART_MspDeInit+0x5c>)
 8001c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7a:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, TX_485_Pin|RX_485_Pin);
 8001c7c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <HAL_UART_MspDeInit+0x60>)
 8001c82:	f002 fa57 	bl	8004134 <HAL_GPIO_DeInit>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40004400 	.word	0x40004400
 8001c94:	40021000 	.word	0x40021000
 8001c98:	48000400 	.word	0x48000400
 8001c9c:	40004800 	.word	0x40004800

08001ca0 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f06f 0208 	mvn.w	r2, #8
 8001cae:	611a      	str	r2, [r3, #16]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_TIM_ClearFlag_CC3OVR>:
  * @rmtoll SR           CC3OF         LL_TIM_ClearFlag_CC3OVR
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3OVR(TIM_TypeDef *TIMx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3OF));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001cca:	611a      	str	r2, [r3, #16]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <NMI_Handler+0x4>

08001cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <HardFault_Handler+0x4>

08001ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <MemManage_Handler+0x4>

08001cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <BusFault_Handler+0x4>

08001cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <UsageFault_Handler+0x4>

08001cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  TimerTick1kHz();
 8001d24:	f009 f83c 	bl	800ada0 <TimerTick1kHz>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d28:	f000 f8ee 	bl	8001f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
	LL_TIM_ClearFlag_CC3(TIM1);
 8001d44:	4807      	ldr	r0, [pc, #28]	; (8001d64 <TIM1_CC_IRQHandler+0x24>)
 8001d46:	f7ff ffab 	bl	8001ca0 <LL_TIM_ClearFlag_CC3>
	LL_TIM_ClearFlag_CC3OVR(TIM1);
 8001d4a:	4806      	ldr	r0, [pc, #24]	; (8001d64 <TIM1_CC_IRQHandler+0x24>)
 8001d4c:	f7ff ffb6 	bl	8001cbc <LL_TIM_ClearFlag_CC3OVR>
	if(Tim1CCIsr != NULL)
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <TIM1_CC_IRQHandler+0x28>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <TIM1_CC_IRQHandler+0x1e>
		Tim1CCIsr();
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <TIM1_CC_IRQHandler+0x28>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4798      	blx	r3
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40012c00 	.word	0x40012c00
 8001d68:	2000166c 	.word	0x2000166c

08001d6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <USART2_IRQHandler+0x10>)
 8001d72:	f003 fe13 	bl	800599c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200006d0 	.word	0x200006d0

08001d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d88:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <_sbrk+0x5c>)
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <_sbrk+0x60>)
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <_sbrk+0x64>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <_sbrk+0x64>)
 8001d9e:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <_sbrk+0x68>)
 8001da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d207      	bcs.n	8001dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db0:	f00a faae 	bl	800c310 <__errno>
 8001db4:	4603      	mov	r3, r0
 8001db6:	220c      	movs	r2, #12
 8001db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbe:	e009      	b.n	8001dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <_sbrk+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <_sbrk+0x64>)
 8001dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20008000 	.word	0x20008000
 8001de0:	00000400 	.word	0x00000400
 8001de4:	200007f4 	.word	0x200007f4
 8001de8:	20001910 	.word	0x20001910

08001dec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <SystemInit+0x20>)
 8001df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <SystemInit+0x20>)
 8001df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e10:	480d      	ldr	r0, [pc, #52]	; (8001e48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e14:	480d      	ldr	r0, [pc, #52]	; (8001e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e16:	490e      	ldr	r1, [pc, #56]	; (8001e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e18:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <LoopForever+0xe>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e1c:	e002      	b.n	8001e24 <LoopCopyDataInit>

08001e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e22:	3304      	adds	r3, #4

08001e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e28:	d3f9      	bcc.n	8001e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e2c:	4c0b      	ldr	r4, [pc, #44]	; (8001e5c <LoopForever+0x16>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e30:	e001      	b.n	8001e36 <LoopFillZerobss>

08001e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e34:	3204      	adds	r2, #4

08001e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e38:	d3fb      	bcc.n	8001e32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e3a:	f7ff ffd7 	bl	8001dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e3e:	f00a fa6d 	bl	800c31c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e42:	f7fe ffb5 	bl	8000db0 <main>

08001e46 <LoopForever>:

LoopForever:
    b LoopForever
 8001e46:	e7fe      	b.n	8001e46 <LoopForever>
  ldr   r0, =_estack
 8001e48:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e50:	200004d0 	.word	0x200004d0
  ldr r2, =_sidata
 8001e54:	0800cf04 	.word	0x0800cf04
  ldr r2, =_sbss
 8001e58:	200004d0 	.word	0x200004d0
  ldr r4, =_ebss
 8001e5c:	20001910 	.word	0x20001910

08001e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e60:	e7fe      	b.n	8001e60 <ADC1_2_IRQHandler>

08001e62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	f001 fd0d 	bl	800388c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e72:	200f      	movs	r0, #15
 8001e74:	f000 f80e 	bl	8001e94 <HAL_InitTick>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	e001      	b.n	8001e88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e84:	f7ff fc96 	bl	80017b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e88:	79fb      	ldrb	r3, [r7, #7]

}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_InitTick+0x68>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d022      	beq.n	8001eee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_InitTick+0x6c>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b13      	ldr	r3, [pc, #76]	; (8001efc <HAL_InitTick+0x68>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 fd26 	bl	800390e <HAL_SYSTICK_Config>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10f      	bne.n	8001ee8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b0f      	cmp	r3, #15
 8001ecc:	d809      	bhi.n	8001ee2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed6:	f001 fce4 	bl	80038a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <HAL_InitTick+0x70>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	e007      	b.n	8001ef2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	e004      	b.n	8001ef2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e001      	b.n	8001ef2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000008 	.word	0x20000008
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000004 	.word	0x20000004

08001f08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_IncTick+0x1c>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_IncTick+0x20>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	4a03      	ldr	r2, [pc, #12]	; (8001f24 <HAL_IncTick+0x1c>)
 8001f18:	6013      	str	r3, [r2, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	200007f8 	.word	0x200007f8
 8001f28:	20000008 	.word	0x20000008

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_GetTick+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	200007f8 	.word	0x200007f8

08001f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff ffee 	bl	8001f2c <HAL_GetTick>
 8001f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d004      	beq.n	8001f68 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_Delay+0x40>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f68:	bf00      	nop
 8001f6a:	f7ff ffdf 	bl	8001f2c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d8f7      	bhi.n	8001f6a <HAL_Delay+0x26>
  {
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000008 	.word	0x20000008

08001f88 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f98:	4904      	ldr	r1, [pc, #16]	; (8001fac <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40010030 	.word	0x40010030

08001fb0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 0202 	bic.w	r2, r3, #2
 8001fc0:	4904      	ldr	r1, [pc, #16]	; (8001fd4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40010030 	.word	0x40010030

08001fd8 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001fea:	f7ff ff9f 	bl	8001f2c <HAL_GetTick>
 8001fee:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001ff0:	e008      	b.n	8002004 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001ff2:	f7ff ff9b 	bl	8001f2c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b0a      	cmp	r3, #10
 8001ffe:	d901      	bls.n	8002004 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e006      	b.n	8002012 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40010030 	.word	0x40010030

08002020 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3360      	adds	r3, #96	; 0x60
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <LL_ADC_SetOffset+0x44>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020c0:	bf00      	nop
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	03fff000 	.word	0x03fff000

080020d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3360      	adds	r3, #96	; 0x60
 80020de:	461a      	mov	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3360      	adds	r3, #96	; 0x60
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	431a      	orrs	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002126:	bf00      	nop
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002132:	b480      	push	{r7}
 8002134:	b087      	sub	sp, #28
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3360      	adds	r3, #96	; 0x60
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	431a      	orrs	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3360      	adds	r3, #96	; 0x60
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	431a      	orrs	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	615a      	str	r2, [r3, #20]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b087      	sub	sp, #28
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3330      	adds	r3, #48	; 0x30
 80021fa:	461a      	mov	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	4413      	add	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	211f      	movs	r1, #31
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	401a      	ands	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	f003 011f 	and.w	r1, r3, #31
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	431a      	orrs	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002236:	bf00      	nop
 8002238:	371c      	adds	r7, #28
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002242:	b480      	push	{r7}
 8002244:	b087      	sub	sp, #28
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3314      	adds	r3, #20
 8002252:	461a      	mov	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	0e5b      	lsrs	r3, r3, #25
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	4413      	add	r3, r2
 8002260:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	0d1b      	lsrs	r3, r3, #20
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	2107      	movs	r1, #7
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	401a      	ands	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	0d1b      	lsrs	r3, r3, #20
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	431a      	orrs	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800228c:	bf00      	nop
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d10a      	bne.n	80022c2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b8:	431a      	orrs	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80022c0:	e00a      	b.n	80022d8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ce:	43db      	mvns	r3, r3
 80022d0:	401a      	ands	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	407f0000 	.word	0x407f0000

080022e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 031f 	and.w	r3, r3, #31
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6093      	str	r3, [r2, #8]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800233c:	d101      	bne.n	8002342 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002360:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002364:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800238c:	d101      	bne.n	8002392 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023dc:	f043 0202 	orr.w	r2, r3, #2
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <LL_ADC_IsEnabled+0x18>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <LL_ADC_IsEnabled+0x1a>
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d101      	bne.n	800242e <LL_ADC_IsDisableOngoing+0x18>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <LL_ADC_IsDisableOngoing+0x1a>
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800244c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002450:	f043 0204 	orr.w	r2, r3, #4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b04      	cmp	r3, #4
 8002476:	d101      	bne.n	800247c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b08      	cmp	r3, #8
 800249c:	d101      	bne.n	80024a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024bc:	2300      	movs	r3, #0
 80024be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e177      	b.n	80027ba <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d109      	bne.n	80024ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff f995 	bl	8001808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff19 	bl	8002328 <LL_ADC_IsDeepPowerDownEnabled>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d004      	beq.n	8002506 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff feff 	bl	8002304 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff34 	bl	8002378 <LL_ADC_IsInternalRegulatorEnabled>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d115      	bne.n	8002542 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff ff18 	bl	8002350 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002520:	4b9c      	ldr	r3, [pc, #624]	; (8002794 <HAL_ADC_Init+0x2e4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	099b      	lsrs	r3, r3, #6
 8002526:	4a9c      	ldr	r2, [pc, #624]	; (8002798 <HAL_ADC_Init+0x2e8>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	099b      	lsrs	r3, r3, #6
 800252e:	3301      	adds	r3, #1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002534:	e002      	b.n	800253c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	3b01      	subs	r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f9      	bne.n	8002536 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff16 	bl	8002378 <LL_ADC_IsInternalRegulatorEnabled>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10d      	bne.n	800256e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	f043 0210 	orr.w	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff76 	bl	8002464 <LL_ADC_REG_IsConversionOngoing>
 8002578:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 8110 	bne.w	80027a8 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 810c 	bne.w	80027a8 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002598:	f043 0202 	orr.w	r2, r3, #2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff23 	bl	80023f0 <LL_ADC_IsEnabled>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d111      	bne.n	80025d4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80025b4:	f7ff ff1c 	bl	80023f0 <LL_ADC_IsEnabled>
 80025b8:	4604      	mov	r4, r0
 80025ba:	4878      	ldr	r0, [pc, #480]	; (800279c <HAL_ADC_Init+0x2ec>)
 80025bc:	f7ff ff18 	bl	80023f0 <LL_ADC_IsEnabled>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4323      	orrs	r3, r4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4874      	ldr	r0, [pc, #464]	; (80027a0 <HAL_ADC_Init+0x2f0>)
 80025d0:	f7ff fd26 	bl	8002020 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7f5b      	ldrb	r3, [r3, #29]
 80025d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80025e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80025ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d106      	bne.n	8002610 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	3b01      	subs	r3, #1
 8002608:	045b      	lsls	r3, r3, #17
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d009      	beq.n	800262c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	4b5c      	ldr	r3, [pc, #368]	; (80027a4 <HAL_ADC_Init+0x2f4>)
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	69b9      	ldr	r1, [r7, #24]
 800263c:	430b      	orrs	r3, r1
 800263e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ff02 	bl	8002464 <LL_ADC_REG_IsConversionOngoing>
 8002660:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ff0f 	bl	800248a <LL_ADC_INJ_IsConversionOngoing>
 800266c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d16d      	bne.n	8002750 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d16a      	bne.n	8002750 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800267e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002686:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002696:	f023 0302 	bic.w	r3, r3, #2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	69b9      	ldr	r1, [r7, #24]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d017      	beq.n	80026dc <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80026ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6911      	ldr	r1, [r2, #16]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	430b      	orrs	r3, r1
 80026d6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80026da:	e013      	b.n	8002704 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002700:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800270a:	2b01      	cmp	r3, #1
 800270c:	d118      	bne.n	8002740 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002724:	4311      	orrs	r1, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800272a:	4311      	orrs	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002730:	430a      	orrs	r2, r1
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0201 	orr.w	r2, r2, #1
 800273c:	611a      	str	r2, [r3, #16]
 800273e:	e007      	b.n	8002750 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d10c      	bne.n	8002772 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f023 010f 	bic.w	r1, r3, #15
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	1e5a      	subs	r2, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
 8002770:	e007      	b.n	8002782 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 020f 	bic.w	r2, r2, #15
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	65da      	str	r2, [r3, #92]	; 0x5c
 8002792:	e011      	b.n	80027b8 <HAL_ADC_Init+0x308>
 8002794:	20000000 	.word	0x20000000
 8002798:	053e2d63 	.word	0x053e2d63
 800279c:	50000100 	.word	0x50000100
 80027a0:	50000300 	.word	0x50000300
 80027a4:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	f043 0210 	orr.w	r2, r3, #16
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}
 80027c2:	bf00      	nop

080027c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027d0:	4851      	ldr	r0, [pc, #324]	; (8002918 <HAL_ADC_Start_DMA+0x154>)
 80027d2:	f7ff fd89 	bl	80022e8 <LL_ADC_GetMultimode>
 80027d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fe41 	bl	8002464 <LL_ADC_REG_IsConversionOngoing>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 808f 	bne.w	8002908 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_ADC_Start_DMA+0x34>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e08a      	b.n	800290e <HAL_ADC_Start_DMA+0x14a>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b05      	cmp	r3, #5
 800280a:	d002      	beq.n	8002812 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	2b09      	cmp	r3, #9
 8002810:	d173      	bne.n	80028fa <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fc98 	bl	8003148 <ADC_Enable>
 8002818:	4603      	mov	r3, r0
 800281a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d166      	bne.n	80028f0 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a38      	ldr	r2, [pc, #224]	; (800291c <HAL_ADC_Start_DMA+0x158>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d002      	beq.n	8002846 <HAL_ADC_Start_DMA+0x82>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	e001      	b.n	800284a <HAL_ADC_Start_DMA+0x86>
 8002846:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	4293      	cmp	r3, r2
 8002850:	d002      	beq.n	8002858 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d006      	beq.n	800287e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002874:	f023 0206 	bic.w	r2, r3, #6
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	661a      	str	r2, [r3, #96]	; 0x60
 800287c:	e002      	b.n	8002884 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	4a25      	ldr	r2, [pc, #148]	; (8002920 <HAL_ADC_Start_DMA+0x15c>)
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	4a24      	ldr	r2, [pc, #144]	; (8002924 <HAL_ADC_Start_DMA+0x160>)
 8002892:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	4a23      	ldr	r2, [pc, #140]	; (8002928 <HAL_ADC_Start_DMA+0x164>)
 800289a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	221c      	movs	r2, #28
 80028a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0210 	orr.w	r2, r2, #16
 80028ba:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3340      	adds	r3, #64	; 0x40
 80028d6:	4619      	mov	r1, r3
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f001 f8cc 	bl	8003a78 <HAL_DMA_Start_IT>
 80028e0:	4603      	mov	r3, r0
 80028e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fda7 	bl	800243c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80028ee:	e00d      	b.n	800290c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80028f8:	e008      	b.n	800290c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002906:	e001      	b.n	800290c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002908:	2302      	movs	r3, #2
 800290a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800290c:	7dfb      	ldrb	r3, [r7, #23]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	50000300 	.word	0x50000300
 800291c:	50000100 	.word	0x50000100
 8002920:	080032cb 	.word	0x080032cb
 8002924:	080033a3 	.word	0x080033a3
 8002928:	080033bf 	.word	0x080033bf

0800292c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0b6      	sub	sp, #216	; 0xd8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_ADC_ConfigChannel+0x22>
 8002986:	2302      	movs	r3, #2
 8002988:	e3c8      	b.n	800311c <HAL_ADC_ConfigChannel+0x7b4>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fd64 	bl	8002464 <LL_ADC_REG_IsConversionOngoing>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f040 83ad 	bne.w	80030fe <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f7ff fc1a 	bl	80021ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fd52 	bl	8002464 <LL_ADC_REG_IsConversionOngoing>
 80029c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fd5e 	bl	800248a <LL_ADC_INJ_IsConversionOngoing>
 80029ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 81d9 	bne.w	8002d8e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f040 81d4 	bne.w	8002d8e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029ee:	d10f      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2200      	movs	r2, #0
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7ff fc21 	bl	8002242 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fbc8 	bl	800219e <LL_ADC_SetSamplingTimeCommonConfig>
 8002a0e:	e00e      	b.n	8002a2e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6819      	ldr	r1, [r3, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f7ff fc10 	bl	8002242 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fbb8 	bl	800219e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	08db      	lsrs	r3, r3, #3
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d022      	beq.n	8002a96 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6919      	ldr	r1, [r3, #16]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a60:	f7ff fb12 	bl	8002088 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6919      	ldr	r1, [r3, #16]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	461a      	mov	r2, r3
 8002a72:	f7ff fb5e 	bl	8002132 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6919      	ldr	r1, [r3, #16]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	7f1b      	ldrb	r3, [r3, #28]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d102      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x124>
 8002a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a8a:	e000      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x126>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f7ff fb6a 	bl	8002168 <LL_ADC_SetOffsetSaturation>
 8002a94:	e17b      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fb17 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x15a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fb0c 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	0e9b      	lsrs	r3, r3, #26
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	e01e      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x198>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fb01 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ae0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ae4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ae8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002af0:	2320      	movs	r3, #32
 8002af2:	e004      	b.n	8002afe <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002af8:	fab3 f383 	clz	r3, r3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x1b0>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0e9b      	lsrs	r3, r3, #26
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	e018      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x1e2>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e004      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002b40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d106      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fad0 	bl	80020fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2101      	movs	r1, #1
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fab4 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x220>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2101      	movs	r1, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff faa9 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	0e9b      	lsrs	r3, r3, #26
 8002b82:	f003 021f 	and.w	r2, r3, #31
 8002b86:	e01e      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x25e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fa9e 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002baa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e004      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002bba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x276>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	e018      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x2a8>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002bf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002bfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002c02:	2320      	movs	r3, #32
 8002c04:	e004      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002c06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d106      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fa6d 	bl	80020fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2102      	movs	r1, #2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fa51 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x2e6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fa46 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	0e9b      	lsrs	r3, r3, #26
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	e01e      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x324>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2102      	movs	r1, #2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fa3b 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002c74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e004      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x33c>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0e9b      	lsrs	r3, r3, #26
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	e016      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x36a>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002cb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002cc4:	2320      	movs	r3, #32
 8002cc6:	e004      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d106      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2102      	movs	r1, #2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fa0c 	bl	80020fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2103      	movs	r1, #3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff f9f0 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x3a8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2103      	movs	r1, #3
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff f9e5 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002d06:	4603      	mov	r3, r0
 8002d08:	0e9b      	lsrs	r3, r3, #26
 8002d0a:	f003 021f 	and.w	r2, r3, #31
 8002d0e:	e017      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x3d8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2103      	movs	r1, #3
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff f9da 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d2a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002d32:	2320      	movs	r3, #32
 8002d34:	e003      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d105      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x3f0>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0e9b      	lsrs	r3, r3, #26
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	e011      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x414>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d68:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002d70:	2320      	movs	r3, #32
 8002d72:	e003      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d106      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2103      	movs	r1, #3
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff f9b7 	bl	80020fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fb2c 	bl	80023f0 <LL_ADC_IsEnabled>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 8140 	bne.w	8003020 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f7ff fa73 	bl	8002298 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4a8f      	ldr	r2, [pc, #572]	; (8002ff4 <HAL_ADC_ConfigChannel+0x68c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	f040 8131 	bne.w	8003020 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10b      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x47e>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2b09      	cmp	r3, #9
 8002ddc:	bf94      	ite	ls
 8002dde:	2301      	movls	r3, #1
 8002de0:	2300      	movhi	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	e019      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x4b2>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e003      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2b09      	cmp	r3, #9
 8002e12:	bf94      	ite	ls
 8002e14:	2301      	movls	r3, #1
 8002e16:	2300      	movhi	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d079      	beq.n	8002f12 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d107      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x4d2>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	0e9b      	lsrs	r3, r3, #26
 8002e30:	3301      	adds	r3, #1
 8002e32:	069b      	lsls	r3, r3, #26
 8002e34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e38:	e015      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x4fe>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002e52:	2320      	movs	r3, #32
 8002e54:	e003      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e58:	fab3 f383 	clz	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	069b      	lsls	r3, r3, #26
 8002e62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x51e>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0e9b      	lsrs	r3, r3, #26
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	2101      	movs	r1, #1
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	e017      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x54e>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e96:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	e003      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	ea42 0103 	orr.w	r1, r2, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x574>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f003 021f 	and.w	r2, r3, #31
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	051b      	lsls	r3, r3, #20
 8002eda:	e018      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x5a6>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002ef4:	2320      	movs	r3, #32
 8002ef6:	e003      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	f003 021f 	and.w	r2, r3, #31
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	e081      	b.n	8003016 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x5c6>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	0e9b      	lsrs	r3, r3, #26
 8002f24:	3301      	adds	r3, #1
 8002f26:	069b      	lsls	r3, r3, #26
 8002f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f2c:	e015      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x5f2>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002f46:	2320      	movs	r3, #32
 8002f48:	e003      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	069b      	lsls	r3, r3, #26
 8002f56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x612>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	0e9b      	lsrs	r3, r3, #26
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2101      	movs	r1, #1
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	e017      	b.n	8002faa <HAL_ADC_ConfigChannel+0x642>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	61fb      	str	r3, [r7, #28]
  return result;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002f92:	2320      	movs	r3, #32
 8002f94:	e003      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	ea42 0103 	orr.w	r1, r2, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10d      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x66e>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0e9b      	lsrs	r3, r3, #26
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f003 021f 	and.w	r2, r3, #31
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	3b1e      	subs	r3, #30
 8002fce:	051b      	lsls	r3, r3, #20
 8002fd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	e01e      	b.n	8003014 <HAL_ADC_ConfigChannel+0x6ac>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	613b      	str	r3, [r7, #16]
  return result;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d104      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002fee:	2320      	movs	r3, #32
 8002ff0:	e006      	b.n	8003000 <HAL_ADC_ConfigChannel+0x698>
 8002ff2:	bf00      	nop
 8002ff4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	3301      	adds	r3, #1
 8003002:	f003 021f 	and.w	r2, r3, #31
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	3b1e      	subs	r3, #30
 800300e:	051b      	lsls	r3, r3, #20
 8003010:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003014:	430b      	orrs	r3, r1
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	6892      	ldr	r2, [r2, #8]
 800301a:	4619      	mov	r1, r3
 800301c:	f7ff f911 	bl	8002242 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <HAL_ADC_ConfigChannel+0x7bc>)
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d071      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800302c:	483e      	ldr	r0, [pc, #248]	; (8003128 <HAL_ADC_ConfigChannel+0x7c0>)
 800302e:	f7ff f81d 	bl	800206c <LL_ADC_GetCommonPathInternalCh>
 8003032:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a3c      	ldr	r2, [pc, #240]	; (800312c <HAL_ADC_ConfigChannel+0x7c4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_ADC_ConfigChannel+0x6e2>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a3a      	ldr	r2, [pc, #232]	; (8003130 <HAL_ADC_ConfigChannel+0x7c8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d127      	bne.n	800309a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800304a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800304e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d121      	bne.n	800309a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305e:	d157      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003060:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003064:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003068:	4619      	mov	r1, r3
 800306a:	482f      	ldr	r0, [pc, #188]	; (8003128 <HAL_ADC_ConfigChannel+0x7c0>)
 800306c:	f7fe ffeb 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003070:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HAL_ADC_ConfigChannel+0x7cc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	4a30      	ldr	r2, [pc, #192]	; (8003138 <HAL_ADC_ConfigChannel+0x7d0>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800308a:	e002      	b.n	8003092 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3b01      	subs	r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f9      	bne.n	800308c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003098:	e03a      	b.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a27      	ldr	r2, [pc, #156]	; (800313c <HAL_ADC_ConfigChannel+0x7d4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d113      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x764>
 80030a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10d      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a22      	ldr	r2, [pc, #136]	; (8003140 <HAL_ADC_ConfigChannel+0x7d8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d02a      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c2:	4619      	mov	r1, r3
 80030c4:	4818      	ldr	r0, [pc, #96]	; (8003128 <HAL_ADC_ConfigChannel+0x7c0>)
 80030c6:	f7fe ffbe 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030ca:	e021      	b.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <HAL_ADC_ConfigChannel+0x7dc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d11c      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d116      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a16      	ldr	r2, [pc, #88]	; (8003140 <HAL_ADC_ConfigChannel+0x7d8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d011      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030f4:	4619      	mov	r1, r3
 80030f6:	480c      	ldr	r0, [pc, #48]	; (8003128 <HAL_ADC_ConfigChannel+0x7c0>)
 80030f8:	f7fe ffa5 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
 80030fc:	e008      	b.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	f043 0220 	orr.w	r2, r3, #32
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003118:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800311c:	4618      	mov	r0, r3
 800311e:	37d8      	adds	r7, #216	; 0xd8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	80080000 	.word	0x80080000
 8003128:	50000300 	.word	0x50000300
 800312c:	c3210000 	.word	0xc3210000
 8003130:	90c00010 	.word	0x90c00010
 8003134:	20000000 	.word	0x20000000
 8003138:	053e2d63 	.word	0x053e2d63
 800313c:	c7520000 	.word	0xc7520000
 8003140:	50000100 	.word	0x50000100
 8003144:	cb840000 	.word	0xcb840000

08003148 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff f94b 	bl	80023f0 <LL_ADC_IsEnabled>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d14d      	bne.n	80031fc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	4b28      	ldr	r3, [pc, #160]	; (8003208 <ADC_Enable+0xc0>)
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00d      	beq.n	800318a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	f043 0210 	orr.w	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e039      	b.n	80031fe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff f906 	bl	80023a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003194:	f7fe feca 	bl	8001f2c <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800319a:	e028      	b.n	80031ee <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff f925 	bl	80023f0 <LL_ADC_IsEnabled>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff f8f5 	bl	80023a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031b6:	f7fe feb9 	bl	8001f2c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d914      	bls.n	80031ee <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d00d      	beq.n	80031ee <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d6:	f043 0210 	orr.w	r2, r3, #16
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e2:	f043 0201 	orr.w	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e007      	b.n	80031fe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d1cf      	bne.n	800319c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	8000003f 	.word	0x8000003f

0800320c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff f8fc 	bl	8002416 <LL_ADC_IsDisableOngoing>
 800321e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff f8e3 	bl	80023f0 <LL_ADC_IsEnabled>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d047      	beq.n	80032c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d144      	bne.n	80032c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 030d 	and.w	r3, r3, #13
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10c      	bne.n	800325e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff f8bd 	bl	80023c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2203      	movs	r2, #3
 8003254:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003256:	f7fe fe69 	bl	8001f2c <HAL_GetTick>
 800325a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800325c:	e029      	b.n	80032b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	f043 0210 	orr.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326e:	f043 0201 	orr.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e023      	b.n	80032c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800327a:	f7fe fe57 	bl	8001f2c <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d914      	bls.n	80032b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00d      	beq.n	80032b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	f043 0210 	orr.w	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e007      	b.n	80032c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1dc      	bne.n	800327a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d14b      	bne.n	800337c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d021      	beq.n	8003342 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe ff5e 	bl	80021c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d032      	beq.n	8003374 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d12b      	bne.n	8003374 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d11f      	bne.n	8003374 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	f043 0201 	orr.w	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003340:	e018      	b.n	8003374 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d111      	bne.n	8003374 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336c:	f043 0201 	orr.w	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f7ff fad9 	bl	800292c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800337a:	e00e      	b.n	800339a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f7ff fae3 	bl	8002954 <HAL_ADC_ErrorCallback>
}
 800338e:	e004      	b.n	800339a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7ff fac5 	bl	8002940 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033dc:	f043 0204 	orr.w	r2, r3, #4
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f7ff fab5 	bl	8002954 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <LL_ADC_IsEnabled>:
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <LL_ADC_IsEnabled+0x18>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <LL_ADC_IsEnabled+0x1a>
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <LL_ADC_StartCalibration>:
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800342a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003434:	4313      	orrs	r3, r2
 8003436:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	609a      	str	r2, [r3, #8]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <LL_ADC_IsCalibrationOnGoing>:
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800345a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800345e:	d101      	bne.n	8003464 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <LL_ADC_REG_IsConversionOngoing>:
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d101      	bne.n	800348a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e04d      	b.n	8003550 <HAL_ADCEx_Calibration_Start+0xb8>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff fea5 	bl	800320c <ADC_Disable>
 80034c2:	4603      	mov	r3, r0
 80034c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d136      	bne.n	800353a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034d4:	f023 0302 	bic.w	r3, r3, #2
 80034d8:	f043 0202 	orr.w	r2, r3, #2
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6839      	ldr	r1, [r7, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ff96 	bl	8003418 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034ec:	e014      	b.n	8003518 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	3301      	adds	r3, #1
 80034f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4a18      	ldr	r2, [pc, #96]	; (8003558 <HAL_ADCEx_Calibration_Start+0xc0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d90d      	bls.n	8003518 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	f023 0312 	bic.w	r3, r3, #18
 8003504:	f043 0210 	orr.w	r2, r3, #16
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e01b      	b.n	8003550 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff94 	bl	800344a <LL_ADC_IsCalibrationOnGoing>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e2      	bne.n	80034ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	f023 0303 	bic.w	r3, r3, #3
 8003530:	f043 0201 	orr.w	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	65da      	str	r2, [r3, #92]	; 0x5c
 8003538:	e005      	b.n	8003546 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	f043 0210 	orr.w	r2, r3, #16
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800354e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	0004de01 	.word	0x0004de01

0800355c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b0a1      	sub	sp, #132	; 0x84
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003576:	2302      	movs	r3, #2
 8003578:	e08b      	b.n	8003692 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003582:	2300      	movs	r3, #0
 8003584:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003586:	2300      	movs	r3, #0
 8003588:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003592:	d102      	bne.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003594:	4b41      	ldr	r3, [pc, #260]	; (800369c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	e001      	b.n	800359e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10b      	bne.n	80035bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a8:	f043 0220 	orr.w	r2, r3, #32
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e06a      	b.n	8003692 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff ff57 	bl	8003472 <LL_ADC_REG_IsConversionOngoing>
 80035c4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff ff51 	bl	8003472 <LL_ADC_REG_IsConversionOngoing>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d14c      	bne.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80035d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d149      	bne.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035dc:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80035de:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d028      	beq.n	800363a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80035e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035fa:	035b      	lsls	r3, r3, #13
 80035fc:	430b      	orrs	r3, r1
 80035fe:	431a      	orrs	r2, r3
 8003600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003602:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003604:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003608:	f7ff fef3 	bl	80033f2 <LL_ADC_IsEnabled>
 800360c:	4604      	mov	r4, r0
 800360e:	4823      	ldr	r0, [pc, #140]	; (800369c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003610:	f7ff feef 	bl	80033f2 <LL_ADC_IsEnabled>
 8003614:	4603      	mov	r3, r0
 8003616:	4323      	orrs	r3, r4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d133      	bne.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800361c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003624:	f023 030f 	bic.w	r3, r3, #15
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	6811      	ldr	r1, [r2, #0]
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	6892      	ldr	r2, [r2, #8]
 8003630:	430a      	orrs	r2, r1
 8003632:	431a      	orrs	r2, r3
 8003634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003636:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003638:	e024      	b.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800363a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003644:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003646:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800364a:	f7ff fed2 	bl	80033f2 <LL_ADC_IsEnabled>
 800364e:	4604      	mov	r4, r0
 8003650:	4812      	ldr	r0, [pc, #72]	; (800369c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003652:	f7ff fece 	bl	80033f2 <LL_ADC_IsEnabled>
 8003656:	4603      	mov	r3, r0
 8003658:	4323      	orrs	r3, r4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d112      	bne.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800365e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003666:	f023 030f 	bic.w	r3, r3, #15
 800366a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800366c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800366e:	e009      	b.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003682:	e000      	b.n	8003686 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003684:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800368e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003692:	4618      	mov	r0, r3
 8003694:	3784      	adds	r7, #132	; 0x84
 8003696:	46bd      	mov	sp, r7
 8003698:	bd90      	pop	{r4, r7, pc}
 800369a:	bf00      	nop
 800369c:	50000100 	.word	0x50000100
 80036a0:	50000300 	.word	0x50000300

080036a4 <__NVIC_SetPriorityGrouping>:
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b4:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <__NVIC_SetPriorityGrouping+0x44>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c0:	4013      	ands	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036d6:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <__NVIC_SetPriorityGrouping+0x44>)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	60d3      	str	r3, [r2, #12]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <__NVIC_GetPriorityGrouping>:
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f0:	4b04      	ldr	r3, [pc, #16]	; (8003704 <__NVIC_GetPriorityGrouping+0x18>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	0a1b      	lsrs	r3, r3, #8
 80036f6:	f003 0307 	and.w	r3, r3, #7
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <__NVIC_EnableIRQ>:
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	2b00      	cmp	r3, #0
 8003718:	db0b      	blt.n	8003732 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	f003 021f 	and.w	r2, r3, #31
 8003720:	4907      	ldr	r1, [pc, #28]	; (8003740 <__NVIC_EnableIRQ+0x38>)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	2001      	movs	r0, #1
 800372a:	fa00 f202 	lsl.w	r2, r0, r2
 800372e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	e000e100 	.word	0xe000e100

08003744 <__NVIC_DisableIRQ>:
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	2b00      	cmp	r3, #0
 8003754:	db12      	blt.n	800377c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	f003 021f 	and.w	r2, r3, #31
 800375c:	490a      	ldr	r1, [pc, #40]	; (8003788 <__NVIC_DisableIRQ+0x44>)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2001      	movs	r0, #1
 8003766:	fa00 f202 	lsl.w	r2, r0, r2
 800376a:	3320      	adds	r3, #32
 800376c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003770:	f3bf 8f4f 	dsb	sy
}
 8003774:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003776:	f3bf 8f6f 	isb	sy
}
 800377a:	bf00      	nop
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	e000e100 	.word	0xe000e100

0800378c <__NVIC_SetPriority>:
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	6039      	str	r1, [r7, #0]
 8003796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	2b00      	cmp	r3, #0
 800379e:	db0a      	blt.n	80037b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	490c      	ldr	r1, [pc, #48]	; (80037d8 <__NVIC_SetPriority+0x4c>)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	0112      	lsls	r2, r2, #4
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	440b      	add	r3, r1
 80037b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037b4:	e00a      	b.n	80037cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4908      	ldr	r1, [pc, #32]	; (80037dc <__NVIC_SetPriority+0x50>)
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	3b04      	subs	r3, #4
 80037c4:	0112      	lsls	r2, r2, #4
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	440b      	add	r3, r1
 80037ca:	761a      	strb	r2, [r3, #24]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000e100 	.word	0xe000e100
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <NVIC_EncodePriority>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f1c3 0307 	rsb	r3, r3, #7
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	bf28      	it	cs
 80037fe:	2304      	movcs	r3, #4
 8003800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3304      	adds	r3, #4
 8003806:	2b06      	cmp	r3, #6
 8003808:	d902      	bls.n	8003810 <NVIC_EncodePriority+0x30>
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3b03      	subs	r3, #3
 800380e:	e000      	b.n	8003812 <NVIC_EncodePriority+0x32>
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003814:	f04f 32ff 	mov.w	r2, #4294967295
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43da      	mvns	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	401a      	ands	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003828:	f04f 31ff 	mov.w	r1, #4294967295
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	43d9      	mvns	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	4313      	orrs	r3, r2
}
 800383a:	4618      	mov	r0, r3
 800383c:	3724      	adds	r7, #36	; 0x24
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3b01      	subs	r3, #1
 8003854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003858:	d301      	bcc.n	800385e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385a:	2301      	movs	r3, #1
 800385c:	e00f      	b.n	800387e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385e:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <SysTick_Config+0x40>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003866:	210f      	movs	r1, #15
 8003868:	f04f 30ff 	mov.w	r0, #4294967295
 800386c:	f7ff ff8e 	bl	800378c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <SysTick_Config+0x40>)
 8003872:	2200      	movs	r2, #0
 8003874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003876:	4b04      	ldr	r3, [pc, #16]	; (8003888 <SysTick_Config+0x40>)
 8003878:	2207      	movs	r2, #7
 800387a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	e000e010 	.word	0xe000e010

0800388c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ff05 	bl	80036a4 <__NVIC_SetPriorityGrouping>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b086      	sub	sp, #24
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	4603      	mov	r3, r0
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038b0:	f7ff ff1c 	bl	80036ec <__NVIC_GetPriorityGrouping>
 80038b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff ff90 	bl	80037e0 <NVIC_EncodePriority>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff5f 	bl	800378c <__NVIC_SetPriority>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff0f 	bl	8003708 <__NVIC_EnableIRQ>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	4603      	mov	r3, r0
 80038fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80038fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff1f 	bl	8003744 <__NVIC_DisableIRQ>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ff96 	bl	8003848 <SysTick_Config>
 800391c:	4603      	mov	r3, r0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e08d      	b.n	8003a56 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_DMA_Init+0x138>)
 8003942:	429a      	cmp	r2, r3
 8003944:	d80f      	bhi.n	8003966 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	4b45      	ldr	r3, [pc, #276]	; (8003a64 <HAL_DMA_Init+0x13c>)
 800394e:	4413      	add	r3, r2
 8003950:	4a45      	ldr	r2, [pc, #276]	; (8003a68 <HAL_DMA_Init+0x140>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	009a      	lsls	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a42      	ldr	r2, [pc, #264]	; (8003a6c <HAL_DMA_Init+0x144>)
 8003962:	641a      	str	r2, [r3, #64]	; 0x40
 8003964:	e00e      	b.n	8003984 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	4b40      	ldr	r3, [pc, #256]	; (8003a70 <HAL_DMA_Init+0x148>)
 800396e:	4413      	add	r3, r2
 8003970:	4a3d      	ldr	r2, [pc, #244]	; (8003a68 <HAL_DMA_Init+0x140>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	009a      	lsls	r2, r3, #2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a3c      	ldr	r2, [pc, #240]	; (8003a74 <HAL_DMA_Init+0x14c>)
 8003982:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f9c8 	bl	8003d6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e4:	d102      	bne.n	80039ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a00:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d010      	beq.n	8003a2c <HAL_DMA_Init+0x104>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d80c      	bhi.n	8003a2c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f9e8 	bl	8003de8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	e008      	b.n	8003a3e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40020407 	.word	0x40020407
 8003a64:	bffdfff8 	.word	0xbffdfff8
 8003a68:	cccccccd 	.word	0xcccccccd
 8003a6c:	40020000 	.word	0x40020000
 8003a70:	bffdfbf8 	.word	0xbffdfbf8
 8003a74:	40020400 	.word	0x40020400

08003a78 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_DMA_Start_IT+0x20>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e066      	b.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d155      	bne.n	8003b58 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f90c 	bl	8003cee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d008      	beq.n	8003af0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 020e 	orr.w	r2, r2, #14
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e00f      	b.n	8003b10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0204 	bic.w	r2, r2, #4
 8003afe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 020a 	orr.w	r2, r2, #10
 8003b0e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b2c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b44:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e005      	b.n	8003b64 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b60:	2302      	movs	r3, #2
 8003b62:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d005      	beq.n	8003b92 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2204      	movs	r2, #4
 8003b8a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
 8003b90:	e037      	b.n	8003c02 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 020e 	bic.w	r2, r2, #14
 8003ba0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f003 021f 	and.w	r2, r3, #31
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	2101      	movs	r1, #1
 8003bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bde:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00c      	beq.n	8003c02 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c00:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d00d      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	73fb      	strb	r3, [r7, #15]
 8003c52:	e047      	b.n	8003ce4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 020e 	bic.w	r2, r2, #14
 8003c62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	f003 021f 	and.w	r2, r3, #31
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2101      	movs	r1, #1
 8003c92:	fa01 f202 	lsl.w	r2, r1, r2
 8003c96:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ca0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00c      	beq.n	8003cc4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cc2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
    }
  }
  return status;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d04:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d16:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	2101      	movs	r1, #1
 8003d26:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d108      	bne.n	8003d4e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d4c:	e007      	b.n	8003d5e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	60da      	str	r2, [r3, #12]
}
 8003d5e:	bf00      	nop
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d802      	bhi.n	8003d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003d80:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e001      	b.n	8003d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d88:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	3b08      	subs	r3, #8
 8003d96:	4a12      	ldr	r2, [pc, #72]	; (8003de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d98:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	089b      	lsrs	r3, r3, #2
 8003da6:	009a      	lsls	r2, r3, #2
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	461a      	mov	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a0b      	ldr	r2, [pc, #44]	; (8003de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003db6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40020407 	.word	0x40020407
 8003dd8:	40020800 	.word	0x40020800
 8003ddc:	40020820 	.word	0x40020820
 8003de0:	cccccccd 	.word	0xcccccccd
 8003de4:	40020880 	.word	0x40020880

08003de8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	461a      	mov	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e0a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	2201      	movs	r2, #1
 8003e16:	409a      	lsls	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	1000823f 	.word	0x1000823f
 8003e2c:	40020940 	.word	0x40020940

08003e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e3e:	e15a      	b.n	80040f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	2101      	movs	r1, #1
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 814c 	beq.w	80040f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d005      	beq.n	8003e70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d130      	bne.n	8003ed2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 0201 	and.w	r2, r3, #1
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d017      	beq.n	8003f0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	2203      	movs	r2, #3
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d123      	bne.n	8003f62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	08da      	lsrs	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3208      	adds	r2, #8
 8003f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	220f      	movs	r2, #15
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	08da      	lsrs	r2, r3, #3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3208      	adds	r2, #8
 8003f5c:	6939      	ldr	r1, [r7, #16]
 8003f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4013      	ands	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 0203 	and.w	r2, r3, #3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80a6 	beq.w	80040f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa4:	4b5b      	ldr	r3, [pc, #364]	; (8004114 <HAL_GPIO_Init+0x2e4>)
 8003fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa8:	4a5a      	ldr	r2, [pc, #360]	; (8004114 <HAL_GPIO_Init+0x2e4>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6613      	str	r3, [r2, #96]	; 0x60
 8003fb0:	4b58      	ldr	r3, [pc, #352]	; (8004114 <HAL_GPIO_Init+0x2e4>)
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fbc:	4a56      	ldr	r2, [pc, #344]	; (8004118 <HAL_GPIO_Init+0x2e8>)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	089b      	lsrs	r3, r3, #2
 8003fc2:	3302      	adds	r3, #2
 8003fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	220f      	movs	r2, #15
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fe6:	d01f      	beq.n	8004028 <HAL_GPIO_Init+0x1f8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a4c      	ldr	r2, [pc, #304]	; (800411c <HAL_GPIO_Init+0x2ec>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d019      	beq.n	8004024 <HAL_GPIO_Init+0x1f4>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a4b      	ldr	r2, [pc, #300]	; (8004120 <HAL_GPIO_Init+0x2f0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <HAL_GPIO_Init+0x1f0>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a4a      	ldr	r2, [pc, #296]	; (8004124 <HAL_GPIO_Init+0x2f4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00d      	beq.n	800401c <HAL_GPIO_Init+0x1ec>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a49      	ldr	r2, [pc, #292]	; (8004128 <HAL_GPIO_Init+0x2f8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <HAL_GPIO_Init+0x1e8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a48      	ldr	r2, [pc, #288]	; (800412c <HAL_GPIO_Init+0x2fc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <HAL_GPIO_Init+0x1e4>
 8004010:	2305      	movs	r3, #5
 8004012:	e00a      	b.n	800402a <HAL_GPIO_Init+0x1fa>
 8004014:	2306      	movs	r3, #6
 8004016:	e008      	b.n	800402a <HAL_GPIO_Init+0x1fa>
 8004018:	2304      	movs	r3, #4
 800401a:	e006      	b.n	800402a <HAL_GPIO_Init+0x1fa>
 800401c:	2303      	movs	r3, #3
 800401e:	e004      	b.n	800402a <HAL_GPIO_Init+0x1fa>
 8004020:	2302      	movs	r3, #2
 8004022:	e002      	b.n	800402a <HAL_GPIO_Init+0x1fa>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <HAL_GPIO_Init+0x1fa>
 8004028:	2300      	movs	r3, #0
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	f002 0203 	and.w	r2, r2, #3
 8004030:	0092      	lsls	r2, r2, #2
 8004032:	4093      	lsls	r3, r2
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800403a:	4937      	ldr	r1, [pc, #220]	; (8004118 <HAL_GPIO_Init+0x2e8>)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	089b      	lsrs	r3, r3, #2
 8004040:	3302      	adds	r3, #2
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004048:	4b39      	ldr	r3, [pc, #228]	; (8004130 <HAL_GPIO_Init+0x300>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	43db      	mvns	r3, r3
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4013      	ands	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800406c:	4a30      	ldr	r2, [pc, #192]	; (8004130 <HAL_GPIO_Init+0x300>)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004072:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <HAL_GPIO_Init+0x300>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	43db      	mvns	r3, r3
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004096:	4a26      	ldr	r2, [pc, #152]	; (8004130 <HAL_GPIO_Init+0x300>)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800409c:	4b24      	ldr	r3, [pc, #144]	; (8004130 <HAL_GPIO_Init+0x300>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040c0:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <HAL_GPIO_Init+0x300>)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80040c6:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <HAL_GPIO_Init+0x300>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040ea:	4a11      	ldr	r2, [pc, #68]	; (8004130 <HAL_GPIO_Init+0x300>)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3301      	adds	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	f47f ae9d 	bne.w	8003e40 <HAL_GPIO_Init+0x10>
  }
}
 8004106:	bf00      	nop
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40021000 	.word	0x40021000
 8004118:	40010000 	.word	0x40010000
 800411c:	48000400 	.word	0x48000400
 8004120:	48000800 	.word	0x48000800
 8004124:	48000c00 	.word	0x48000c00
 8004128:	48001000 	.word	0x48001000
 800412c:	48001400 	.word	0x48001400
 8004130:	40010400 	.word	0x40010400

08004134 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004142:	e0bd      	b.n	80042c0 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004144:	2201      	movs	r2, #1
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80b0 	beq.w	80042ba <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800415a:	4a60      	ldr	r2, [pc, #384]	; (80042dc <HAL_GPIO_DeInit+0x1a8>)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	089b      	lsrs	r3, r3, #2
 8004160:	3302      	adds	r3, #2
 8004162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004166:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	220f      	movs	r2, #15
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4013      	ands	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004182:	d01f      	beq.n	80041c4 <HAL_GPIO_DeInit+0x90>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a56      	ldr	r2, [pc, #344]	; (80042e0 <HAL_GPIO_DeInit+0x1ac>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d019      	beq.n	80041c0 <HAL_GPIO_DeInit+0x8c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a55      	ldr	r2, [pc, #340]	; (80042e4 <HAL_GPIO_DeInit+0x1b0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <HAL_GPIO_DeInit+0x88>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a54      	ldr	r2, [pc, #336]	; (80042e8 <HAL_GPIO_DeInit+0x1b4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00d      	beq.n	80041b8 <HAL_GPIO_DeInit+0x84>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a53      	ldr	r2, [pc, #332]	; (80042ec <HAL_GPIO_DeInit+0x1b8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d007      	beq.n	80041b4 <HAL_GPIO_DeInit+0x80>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a52      	ldr	r2, [pc, #328]	; (80042f0 <HAL_GPIO_DeInit+0x1bc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d101      	bne.n	80041b0 <HAL_GPIO_DeInit+0x7c>
 80041ac:	2305      	movs	r3, #5
 80041ae:	e00a      	b.n	80041c6 <HAL_GPIO_DeInit+0x92>
 80041b0:	2306      	movs	r3, #6
 80041b2:	e008      	b.n	80041c6 <HAL_GPIO_DeInit+0x92>
 80041b4:	2304      	movs	r3, #4
 80041b6:	e006      	b.n	80041c6 <HAL_GPIO_DeInit+0x92>
 80041b8:	2303      	movs	r3, #3
 80041ba:	e004      	b.n	80041c6 <HAL_GPIO_DeInit+0x92>
 80041bc:	2302      	movs	r3, #2
 80041be:	e002      	b.n	80041c6 <HAL_GPIO_DeInit+0x92>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <HAL_GPIO_DeInit+0x92>
 80041c4:	2300      	movs	r3, #0
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	f002 0203 	and.w	r2, r2, #3
 80041cc:	0092      	lsls	r2, r2, #2
 80041ce:	4093      	lsls	r3, r2
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d132      	bne.n	800423c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80041d6:	4b47      	ldr	r3, [pc, #284]	; (80042f4 <HAL_GPIO_DeInit+0x1c0>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	43db      	mvns	r3, r3
 80041de:	4945      	ldr	r1, [pc, #276]	; (80042f4 <HAL_GPIO_DeInit+0x1c0>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80041e4:	4b43      	ldr	r3, [pc, #268]	; (80042f4 <HAL_GPIO_DeInit+0x1c0>)
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	43db      	mvns	r3, r3
 80041ec:	4941      	ldr	r1, [pc, #260]	; (80042f4 <HAL_GPIO_DeInit+0x1c0>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80041f2:	4b40      	ldr	r3, [pc, #256]	; (80042f4 <HAL_GPIO_DeInit+0x1c0>)
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	493e      	ldr	r1, [pc, #248]	; (80042f4 <HAL_GPIO_DeInit+0x1c0>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004200:	4b3c      	ldr	r3, [pc, #240]	; (80042f4 <HAL_GPIO_DeInit+0x1c0>)
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	43db      	mvns	r3, r3
 8004208:	493a      	ldr	r1, [pc, #232]	; (80042f4 <HAL_GPIO_DeInit+0x1c0>)
 800420a:	4013      	ands	r3, r2
 800420c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	220f      	movs	r2, #15
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800421e:	4a2f      	ldr	r2, [pc, #188]	; (80042dc <HAL_GPIO_DeInit+0x1a8>)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	3302      	adds	r3, #2
 8004226:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	43da      	mvns	r2, r3
 800422e:	482b      	ldr	r0, [pc, #172]	; (80042dc <HAL_GPIO_DeInit+0x1a8>)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	089b      	lsrs	r3, r3, #2
 8004234:	400a      	ands	r2, r1
 8004236:	3302      	adds	r3, #2
 8004238:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2103      	movs	r1, #3
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	08da      	lsrs	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3208      	adds	r2, #8
 8004258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	220f      	movs	r2, #15
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43db      	mvns	r3, r3
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	08d2      	lsrs	r2, r2, #3
 8004270:	4019      	ands	r1, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3208      	adds	r2, #8
 8004276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	2103      	movs	r1, #3
 8004284:	fa01 f303 	lsl.w	r3, r1, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	401a      	ands	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	2101      	movs	r1, #1
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	fa01 f303 	lsl.w	r3, r1, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	401a      	ands	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	2103      	movs	r1, #3
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	43db      	mvns	r3, r3
 80042b4:	401a      	ands	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	3301      	adds	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f47f af3b 	bne.w	8004144 <HAL_GPIO_DeInit+0x10>
  }
}
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40010000 	.word	0x40010000
 80042e0:	48000400 	.word	0x48000400
 80042e4:	48000800 	.word	0x48000800
 80042e8:	48000c00 	.word	0x48000c00
 80042ec:	48001000 	.word	0x48001000
 80042f0:	48001400 	.word	0x48001400
 80042f4:	40010400 	.word	0x40010400

080042f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
 8004304:	4613      	mov	r3, r2
 8004306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004308:	787b      	ldrb	r3, [r7, #1]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800430e:	887a      	ldrh	r2, [r7, #2]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004314:	e002      	b.n	800431c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004316:	887a      	ldrh	r2, [r7, #2]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e081      	b.n	800443e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fd fb7a 	bl	8001a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2224      	movs	r2, #36	; 0x24
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0201 	bic.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004378:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004388:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d107      	bne.n	80043a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	e006      	b.n	80043b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d104      	bne.n	80043c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69d9      	ldr	r1, [r3, #28]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1a      	ldr	r2, [r3, #32]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b20      	cmp	r3, #32
 800445a:	d138      	bne.n	80044ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004466:	2302      	movs	r3, #2
 8004468:	e032      	b.n	80044d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2224      	movs	r2, #36	; 0x24
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004498:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6819      	ldr	r1, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d139      	bne.n	8004566 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e033      	b.n	8004568 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2224      	movs	r2, #36	; 0x24
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800452e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0201 	orr.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	e000      	b.n	8004568 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004566:	2302      	movs	r3, #2
  }
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d141      	bne.n	8004606 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004582:	4b4b      	ldr	r3, [pc, #300]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458e:	d131      	bne.n	80045f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004590:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004596:	4a46      	ldr	r2, [pc, #280]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800459c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045a0:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045a8:	4a41      	ldr	r2, [pc, #260]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045b0:	4b40      	ldr	r3, [pc, #256]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2232      	movs	r2, #50	; 0x32
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	4a3f      	ldr	r2, [pc, #252]	; (80046b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	0c9b      	lsrs	r3, r3, #18
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045c6:	e002      	b.n	80045ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045ce:	4b38      	ldr	r3, [pc, #224]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045da:	d102      	bne.n	80045e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f2      	bne.n	80045c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045e2:	4b33      	ldr	r3, [pc, #204]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ee:	d158      	bne.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e057      	b.n	80046a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045f4:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045fa:	4a2d      	ldr	r2, [pc, #180]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004600:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004604:	e04d      	b.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460c:	d141      	bne.n	8004692 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800460e:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461a:	d131      	bne.n	8004680 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004622:	4a23      	ldr	r2, [pc, #140]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004628:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800462c:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004634:	4a1e      	ldr	r2, [pc, #120]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800463a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800463c:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2232      	movs	r2, #50	; 0x32
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	4a1c      	ldr	r2, [pc, #112]	; (80046b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	0c9b      	lsrs	r3, r3, #18
 800464e:	3301      	adds	r3, #1
 8004650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004652:	e002      	b.n	800465a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3b01      	subs	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004666:	d102      	bne.n	800466e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f2      	bne.n	8004654 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800466e:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467a:	d112      	bne.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e011      	b.n	80046a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004690:	e007      	b.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004692:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800469a:	4a05      	ldr	r2, [pc, #20]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800469c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	40007000 	.word	0x40007000
 80046b4:	20000000 	.word	0x20000000
 80046b8:	431bde83 	.word	0x431bde83

080046bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e306      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d075      	beq.n	80047c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046da:	4b97      	ldr	r3, [pc, #604]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046e4:	4b94      	ldr	r3, [pc, #592]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	d102      	bne.n	80046fa <HAL_RCC_OscConfig+0x3e>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d002      	beq.n	8004700 <HAL_RCC_OscConfig+0x44>
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d10b      	bne.n	8004718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004700:	4b8d      	ldr	r3, [pc, #564]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d05b      	beq.n	80047c4 <HAL_RCC_OscConfig+0x108>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d157      	bne.n	80047c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e2e1      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004720:	d106      	bne.n	8004730 <HAL_RCC_OscConfig+0x74>
 8004722:	4b85      	ldr	r3, [pc, #532]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a84      	ldr	r2, [pc, #528]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	e01d      	b.n	800476c <HAL_RCC_OscConfig+0xb0>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004738:	d10c      	bne.n	8004754 <HAL_RCC_OscConfig+0x98>
 800473a:	4b7f      	ldr	r3, [pc, #508]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a7e      	ldr	r2, [pc, #504]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	4b7c      	ldr	r3, [pc, #496]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a7b      	ldr	r2, [pc, #492]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 800474c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e00b      	b.n	800476c <HAL_RCC_OscConfig+0xb0>
 8004754:	4b78      	ldr	r3, [pc, #480]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a77      	ldr	r2, [pc, #476]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 800475a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	4b75      	ldr	r3, [pc, #468]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a74      	ldr	r2, [pc, #464]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800476a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d013      	beq.n	800479c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fd fbda 	bl	8001f2c <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800477c:	f7fd fbd6 	bl	8001f2c <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	; 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e2a6      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800478e:	4b6a      	ldr	r3, [pc, #424]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0xc0>
 800479a:	e014      	b.n	80047c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fd fbc6 	bl	8001f2c <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a4:	f7fd fbc2 	bl	8001f2c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b64      	cmp	r3, #100	; 0x64
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e292      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047b6:	4b60      	ldr	r3, [pc, #384]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0xe8>
 80047c2:	e000      	b.n	80047c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d075      	beq.n	80048be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d2:	4b59      	ldr	r3, [pc, #356]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
 80047da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047dc:	4b56      	ldr	r3, [pc, #344]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	d102      	bne.n	80047f2 <HAL_RCC_OscConfig+0x136>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d002      	beq.n	80047f8 <HAL_RCC_OscConfig+0x13c>
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d11f      	bne.n	8004838 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f8:	4b4f      	ldr	r3, [pc, #316]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_OscConfig+0x154>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e265      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004810:	4b49      	ldr	r3, [pc, #292]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	4946      	ldr	r1, [pc, #280]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004824:	4b45      	ldr	r3, [pc, #276]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f7fd fb33 	bl	8001e94 <HAL_InitTick>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d043      	beq.n	80048bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e251      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d023      	beq.n	8004888 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004840:	4b3d      	ldr	r3, [pc, #244]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a3c      	ldr	r2, [pc, #240]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fd fb6e 	bl	8001f2c <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004854:	f7fd fb6a 	bl	8001f2c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e23a      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004866:	4b34      	ldr	r3, [pc, #208]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004872:	4b31      	ldr	r3, [pc, #196]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	061b      	lsls	r3, r3, #24
 8004880:	492d      	ldr	r1, [pc, #180]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]
 8004886:	e01a      	b.n	80048be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004888:	4b2b      	ldr	r3, [pc, #172]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a2a      	ldr	r2, [pc, #168]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 800488e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fd fb4a 	bl	8001f2c <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800489c:	f7fd fb46 	bl	8001f2c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e216      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048ae:	4b22      	ldr	r3, [pc, #136]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x1e0>
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d041      	beq.n	800494e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01c      	beq.n	800490c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048d2:	4b19      	ldr	r3, [pc, #100]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 80048d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d8:	4a17      	ldr	r2, [pc, #92]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e2:	f7fd fb23 	bl	8001f2c <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ea:	f7fd fb1f 	bl	8001f2c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e1ef      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048fc:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 80048fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0ef      	beq.n	80048ea <HAL_RCC_OscConfig+0x22e>
 800490a:	e020      	b.n	800494e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 800490e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004912:	4a09      	ldr	r2, [pc, #36]	; (8004938 <HAL_RCC_OscConfig+0x27c>)
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491c:	f7fd fb06 	bl	8001f2c <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004922:	e00d      	b.n	8004940 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004924:	f7fd fb02 	bl	8001f2c <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d906      	bls.n	8004940 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e1d2      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000
 800493c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004940:	4b8c      	ldr	r3, [pc, #560]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1ea      	bne.n	8004924 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80a6 	beq.w	8004aa8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495c:	2300      	movs	r3, #0
 800495e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004960:	4b84      	ldr	r3, [pc, #528]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_OscConfig+0x2b4>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <HAL_RCC_OscConfig+0x2b6>
 8004970:	2300      	movs	r3, #0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00d      	beq.n	8004992 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004976:	4b7f      	ldr	r3, [pc, #508]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497a:	4a7e      	ldr	r2, [pc, #504]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 800497c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004980:	6593      	str	r3, [r2, #88]	; 0x58
 8004982:	4b7c      	ldr	r3, [pc, #496]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800498e:	2301      	movs	r3, #1
 8004990:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004992:	4b79      	ldr	r3, [pc, #484]	; (8004b78 <HAL_RCC_OscConfig+0x4bc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d118      	bne.n	80049d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499e:	4b76      	ldr	r3, [pc, #472]	; (8004b78 <HAL_RCC_OscConfig+0x4bc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a75      	ldr	r2, [pc, #468]	; (8004b78 <HAL_RCC_OscConfig+0x4bc>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049aa:	f7fd fabf 	bl	8001f2c <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b2:	f7fd fabb 	bl	8001f2c <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e18b      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c4:	4b6c      	ldr	r3, [pc, #432]	; (8004b78 <HAL_RCC_OscConfig+0x4bc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0f0      	beq.n	80049b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d108      	bne.n	80049ea <HAL_RCC_OscConfig+0x32e>
 80049d8:	4b66      	ldr	r3, [pc, #408]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049de:	4a65      	ldr	r2, [pc, #404]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 80049e0:	f043 0301 	orr.w	r3, r3, #1
 80049e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049e8:	e024      	b.n	8004a34 <HAL_RCC_OscConfig+0x378>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b05      	cmp	r3, #5
 80049f0:	d110      	bne.n	8004a14 <HAL_RCC_OscConfig+0x358>
 80049f2:	4b60      	ldr	r3, [pc, #384]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	4a5e      	ldr	r2, [pc, #376]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 80049fa:	f043 0304 	orr.w	r3, r3, #4
 80049fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a02:	4b5c      	ldr	r3, [pc, #368]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a08:	4a5a      	ldr	r2, [pc, #360]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a12:	e00f      	b.n	8004a34 <HAL_RCC_OscConfig+0x378>
 8004a14:	4b57      	ldr	r3, [pc, #348]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1a:	4a56      	ldr	r2, [pc, #344]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004a1c:	f023 0301 	bic.w	r3, r3, #1
 8004a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a24:	4b53      	ldr	r3, [pc, #332]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	4a52      	ldr	r2, [pc, #328]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004a2c:	f023 0304 	bic.w	r3, r3, #4
 8004a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d016      	beq.n	8004a6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3c:	f7fd fa76 	bl	8001f2c <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a42:	e00a      	b.n	8004a5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a44:	f7fd fa72 	bl	8001f2c <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e140      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5a:	4b46      	ldr	r3, [pc, #280]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0ed      	beq.n	8004a44 <HAL_RCC_OscConfig+0x388>
 8004a68:	e015      	b.n	8004a96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6a:	f7fd fa5f 	bl	8001f2c <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a70:	e00a      	b.n	8004a88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a72:	f7fd fa5b 	bl	8001f2c <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e129      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a88:	4b3a      	ldr	r3, [pc, #232]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1ed      	bne.n	8004a72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a96:	7ffb      	ldrb	r3, [r7, #31]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9c:	4b35      	ldr	r3, [pc, #212]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	4a34      	ldr	r2, [pc, #208]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d03c      	beq.n	8004b2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01c      	beq.n	8004af6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004abc:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ac2:	4a2c      	ldr	r2, [pc, #176]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fd fa2e 	bl	8001f2c <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ad4:	f7fd fa2a 	bl	8001f2c <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e0fa      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ae6:	4b23      	ldr	r3, [pc, #140]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0ef      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x418>
 8004af4:	e01b      	b.n	8004b2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004af6:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004afc:	4a1d      	ldr	r2, [pc, #116]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b06:	f7fd fa11 	bl	8001f2c <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b0e:	f7fd fa0d 	bl	8001f2c <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e0dd      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b20:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1ef      	bne.n	8004b0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80d1 	beq.w	8004cda <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b38:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 030c 	and.w	r3, r3, #12
 8004b40:	2b0c      	cmp	r3, #12
 8004b42:	f000 808b 	beq.w	8004c5c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d15e      	bne.n	8004c0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4e:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <HAL_RCC_OscConfig+0x4b8>)
 8004b54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5a:	f7fd f9e7 	bl	8001f2c <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b60:	e00c      	b.n	8004b7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b62:	f7fd f9e3 	bl	8001f2c <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d905      	bls.n	8004b7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e0b3      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7c:	4b59      	ldr	r3, [pc, #356]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1ec      	bne.n	8004b62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b88:	4b56      	ldr	r3, [pc, #344]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	4b56      	ldr	r3, [pc, #344]	; (8004ce8 <HAL_RCC_OscConfig+0x62c>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6a11      	ldr	r1, [r2, #32]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b98:	3a01      	subs	r2, #1
 8004b9a:	0112      	lsls	r2, r2, #4
 8004b9c:	4311      	orrs	r1, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004ba2:	0212      	lsls	r2, r2, #8
 8004ba4:	4311      	orrs	r1, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004baa:	0852      	lsrs	r2, r2, #1
 8004bac:	3a01      	subs	r2, #1
 8004bae:	0552      	lsls	r2, r2, #21
 8004bb0:	4311      	orrs	r1, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bb6:	0852      	lsrs	r2, r2, #1
 8004bb8:	3a01      	subs	r2, #1
 8004bba:	0652      	lsls	r2, r2, #25
 8004bbc:	4311      	orrs	r1, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bc2:	06d2      	lsls	r2, r2, #27
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	4947      	ldr	r1, [pc, #284]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bcc:	4b45      	ldr	r3, [pc, #276]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a44      	ldr	r2, [pc, #272]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bd8:	4b42      	ldr	r3, [pc, #264]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a41      	ldr	r2, [pc, #260]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004be2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fd f9a2 	bl	8001f2c <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fd f99e 	bl	8001f2c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e06e      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfe:	4b39      	ldr	r3, [pc, #228]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x530>
 8004c0a:	e066      	b.n	8004cda <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0c:	4b35      	ldr	r3, [pc, #212]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a34      	ldr	r2, [pc, #208]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c16:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c18:	4b32      	ldr	r3, [pc, #200]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a31      	ldr	r2, [pc, #196]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004c1e:	f023 0303 	bic.w	r3, r3, #3
 8004c22:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c24:	4b2f      	ldr	r3, [pc, #188]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	4a2e      	ldr	r2, [pc, #184]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004c2a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fd f97a 	bl	8001f2c <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3c:	f7fd f976 	bl	8001f2c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e046      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c4e:	4b25      	ldr	r3, [pc, #148]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x580>
 8004c5a:	e03e      	b.n	8004cda <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e039      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c68:	4b1e      	ldr	r3, [pc, #120]	; (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f003 0203 	and.w	r2, r3, #3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d12c      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	3b01      	subs	r3, #1
 8004c88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d123      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d11b      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d113      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d109      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d001      	beq.n	8004cda <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3720      	adds	r7, #32
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	019f800c 	.word	0x019f800c

08004cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e11e      	b.n	8004f42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d04:	4b91      	ldr	r3, [pc, #580]	; (8004f4c <HAL_RCC_ClockConfig+0x260>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d910      	bls.n	8004d34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d12:	4b8e      	ldr	r3, [pc, #568]	; (8004f4c <HAL_RCC_ClockConfig+0x260>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f023 020f 	bic.w	r2, r3, #15
 8004d1a:	498c      	ldr	r1, [pc, #560]	; (8004f4c <HAL_RCC_ClockConfig+0x260>)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d22:	4b8a      	ldr	r3, [pc, #552]	; (8004f4c <HAL_RCC_ClockConfig+0x260>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d001      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e106      	b.n	8004f42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d073      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d129      	bne.n	8004d9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d48:	4b81      	ldr	r3, [pc, #516]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0f4      	b.n	8004f42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d58:	f000 f99e 	bl	8005098 <RCC_GetSysClockFreqFromPLLSource>
 8004d5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4a7c      	ldr	r2, [pc, #496]	; (8004f54 <HAL_RCC_ClockConfig+0x268>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d93f      	bls.n	8004de6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d66:	4b7a      	ldr	r3, [pc, #488]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d033      	beq.n	8004de6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d12f      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d86:	4b72      	ldr	r3, [pc, #456]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d8e:	4a70      	ldr	r2, [pc, #448]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e024      	b.n	8004de6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d107      	bne.n	8004db4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004da4:	4b6a      	ldr	r3, [pc, #424]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0c6      	b.n	8004f42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004db4:	4b66      	ldr	r3, [pc, #408]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0be      	b.n	8004f42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004dc4:	f000 f8ce 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 8004dc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4a61      	ldr	r2, [pc, #388]	; (8004f54 <HAL_RCC_ClockConfig+0x268>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d909      	bls.n	8004de6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dd2:	4b5f      	ldr	r3, [pc, #380]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dda:	4a5d      	ldr	r2, [pc, #372]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004de6:	4b5a      	ldr	r3, [pc, #360]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f023 0203 	bic.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	4957      	ldr	r1, [pc, #348]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df8:	f7fd f898 	bl	8001f2c <HAL_GetTick>
 8004dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e00:	f7fd f894 	bl	8001f2c <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e095      	b.n	8004f42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e16:	4b4e      	ldr	r3, [pc, #312]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 020c 	and.w	r2, r3, #12
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d1eb      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d023      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e40:	4b43      	ldr	r3, [pc, #268]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a42      	ldr	r2, [pc, #264]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004e46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d007      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e58:	4b3d      	ldr	r3, [pc, #244]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e60:	4a3b      	ldr	r2, [pc, #236]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004e62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e68:	4b39      	ldr	r3, [pc, #228]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	4936      	ldr	r1, [pc, #216]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b80      	cmp	r3, #128	; 0x80
 8004e80:	d105      	bne.n	8004e8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e82:	4b33      	ldr	r3, [pc, #204]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	4a32      	ldr	r2, [pc, #200]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004e88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e8e:	4b2f      	ldr	r3, [pc, #188]	; (8004f4c <HAL_RCC_ClockConfig+0x260>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d21d      	bcs.n	8004ed8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9c:	4b2b      	ldr	r3, [pc, #172]	; (8004f4c <HAL_RCC_ClockConfig+0x260>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f023 020f 	bic.w	r2, r3, #15
 8004ea4:	4929      	ldr	r1, [pc, #164]	; (8004f4c <HAL_RCC_ClockConfig+0x260>)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004eac:	f7fd f83e 	bl	8001f2c <HAL_GetTick>
 8004eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb4:	f7fd f83a 	bl	8001f2c <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e03b      	b.n	8004f42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eca:	4b20      	ldr	r3, [pc, #128]	; (8004f4c <HAL_RCC_ClockConfig+0x260>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d1ed      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee4:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4917      	ldr	r1, [pc, #92]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d009      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f02:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	490f      	ldr	r1, [pc, #60]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f16:	f000 f825 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <HAL_RCC_ClockConfig+0x264>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	091b      	lsrs	r3, r3, #4
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	490c      	ldr	r1, [pc, #48]	; (8004f58 <HAL_RCC_ClockConfig+0x26c>)
 8004f28:	5ccb      	ldrb	r3, [r1, r3]
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f32:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <HAL_RCC_ClockConfig+0x270>)
 8004f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f36:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <HAL_RCC_ClockConfig+0x274>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fc ffaa 	bl	8001e94 <HAL_InitTick>
 8004f40:	4603      	mov	r3, r0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40022000 	.word	0x40022000
 8004f50:	40021000 	.word	0x40021000
 8004f54:	04c4b400 	.word	0x04c4b400
 8004f58:	0800ce80 	.word	0x0800ce80
 8004f5c:	20000000 	.word	0x20000000
 8004f60:	20000004 	.word	0x20000004

08004f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f6a:	4b2c      	ldr	r3, [pc, #176]	; (800501c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d102      	bne.n	8004f7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f76:	4b2a      	ldr	r3, [pc, #168]	; (8005020 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	e047      	b.n	800500c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f7c:	4b27      	ldr	r3, [pc, #156]	; (800501c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d102      	bne.n	8004f8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f88:	4b26      	ldr	r3, [pc, #152]	; (8005024 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	e03e      	b.n	800500c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f8e:	4b23      	ldr	r3, [pc, #140]	; (800501c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 030c 	and.w	r3, r3, #12
 8004f96:	2b0c      	cmp	r3, #12
 8004f98:	d136      	bne.n	8005008 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f9a:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fa4:	4b1d      	ldr	r3, [pc, #116]	; (800501c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d10c      	bne.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fb8:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	4a16      	ldr	r2, [pc, #88]	; (800501c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fc2:	68d2      	ldr	r2, [r2, #12]
 8004fc4:	0a12      	lsrs	r2, r2, #8
 8004fc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fca:	fb02 f303 	mul.w	r3, r2, r3
 8004fce:	617b      	str	r3, [r7, #20]
      break;
 8004fd0:	e00c      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fd2:	4a13      	ldr	r2, [pc, #76]	; (8005020 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	4a10      	ldr	r2, [pc, #64]	; (800501c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fdc:	68d2      	ldr	r2, [r2, #12]
 8004fde:	0a12      	lsrs	r2, r2, #8
 8004fe0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fe4:	fb02 f303 	mul.w	r3, r2, r3
 8004fe8:	617b      	str	r3, [r7, #20]
      break;
 8004fea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	0e5b      	lsrs	r3, r3, #25
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	fbb2 f3f3 	udiv	r3, r2, r3
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	e001      	b.n	800500c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800500c:	693b      	ldr	r3, [r7, #16]
}
 800500e:	4618      	mov	r0, r3
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40021000 	.word	0x40021000
 8005020:	00f42400 	.word	0x00f42400
 8005024:	007a1200 	.word	0x007a1200

08005028 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800502c:	4b03      	ldr	r3, [pc, #12]	; (800503c <HAL_RCC_GetHCLKFreq+0x14>)
 800502e:	681b      	ldr	r3, [r3, #0]
}
 8005030:	4618      	mov	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	20000000 	.word	0x20000000

08005040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005044:	f7ff fff0 	bl	8005028 <HAL_RCC_GetHCLKFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b06      	ldr	r3, [pc, #24]	; (8005064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4904      	ldr	r1, [pc, #16]	; (8005068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005060:	4618      	mov	r0, r3
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40021000 	.word	0x40021000
 8005068:	0800ce90 	.word	0x0800ce90

0800506c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005070:	f7ff ffda 	bl	8005028 <HAL_RCC_GetHCLKFreq>
 8005074:	4602      	mov	r2, r0
 8005076:	4b06      	ldr	r3, [pc, #24]	; (8005090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	0adb      	lsrs	r3, r3, #11
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	4904      	ldr	r1, [pc, #16]	; (8005094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005082:	5ccb      	ldrb	r3, [r1, r3]
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800508c:	4618      	mov	r0, r3
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40021000 	.word	0x40021000
 8005094:	0800ce90 	.word	0x0800ce90

08005098 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800509e:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050a8:	4b1b      	ldr	r3, [pc, #108]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	091b      	lsrs	r3, r3, #4
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	3301      	adds	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d10c      	bne.n	80050d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050bc:	4a17      	ldr	r2, [pc, #92]	; (800511c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	4a14      	ldr	r2, [pc, #80]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050c6:	68d2      	ldr	r2, [r2, #12]
 80050c8:	0a12      	lsrs	r2, r2, #8
 80050ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050ce:	fb02 f303 	mul.w	r3, r2, r3
 80050d2:	617b      	str	r3, [r7, #20]
    break;
 80050d4:	e00c      	b.n	80050f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050d6:	4a12      	ldr	r2, [pc, #72]	; (8005120 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	4a0e      	ldr	r2, [pc, #56]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050e0:	68d2      	ldr	r2, [r2, #12]
 80050e2:	0a12      	lsrs	r2, r2, #8
 80050e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050e8:	fb02 f303 	mul.w	r3, r2, r3
 80050ec:	617b      	str	r3, [r7, #20]
    break;
 80050ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050f0:	4b09      	ldr	r3, [pc, #36]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	0e5b      	lsrs	r3, r3, #25
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	3301      	adds	r3, #1
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800510a:	687b      	ldr	r3, [r7, #4]
}
 800510c:	4618      	mov	r0, r3
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	40021000 	.word	0x40021000
 800511c:	007a1200 	.word	0x007a1200
 8005120:	00f42400 	.word	0x00f42400

08005124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800512c:	2300      	movs	r3, #0
 800512e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005130:	2300      	movs	r3, #0
 8005132:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8098 	beq.w	8005272 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005142:	2300      	movs	r3, #0
 8005144:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005146:	4b43      	ldr	r3, [pc, #268]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10d      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005152:	4b40      	ldr	r3, [pc, #256]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005156:	4a3f      	ldr	r2, [pc, #252]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515c:	6593      	str	r3, [r2, #88]	; 0x58
 800515e:	4b3d      	ldr	r3, [pc, #244]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800516a:	2301      	movs	r3, #1
 800516c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800516e:	4b3a      	ldr	r3, [pc, #232]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a39      	ldr	r2, [pc, #228]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005178:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800517a:	f7fc fed7 	bl	8001f2c <HAL_GetTick>
 800517e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005180:	e009      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005182:	f7fc fed3 	bl	8001f2c <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d902      	bls.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	74fb      	strb	r3, [r7, #19]
        break;
 8005194:	e005      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005196:	4b30      	ldr	r3, [pc, #192]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0ef      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80051a2:	7cfb      	ldrb	r3, [r7, #19]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d159      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051a8:	4b2a      	ldr	r3, [pc, #168]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01e      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d019      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051c4:	4b23      	ldr	r3, [pc, #140]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051d0:	4b20      	ldr	r3, [pc, #128]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d6:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051e0:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e6:	4a1b      	ldr	r2, [pc, #108]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051f0:	4a18      	ldr	r2, [pc, #96]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d016      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005202:	f7fc fe93 	bl	8001f2c <HAL_GetTick>
 8005206:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005208:	e00b      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520a:	f7fc fe8f 	bl	8001f2c <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	f241 3288 	movw	r2, #5000	; 0x1388
 8005218:	4293      	cmp	r3, r2
 800521a:	d902      	bls.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	74fb      	strb	r3, [r7, #19]
            break;
 8005220:	e006      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0ec      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005230:	7cfb      	ldrb	r3, [r7, #19]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	4903      	ldr	r1, [pc, #12]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800524c:	e008      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800524e:	7cfb      	ldrb	r3, [r7, #19]
 8005250:	74bb      	strb	r3, [r7, #18]
 8005252:	e005      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005254:	40021000 	.word	0x40021000
 8005258:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525c:	7cfb      	ldrb	r3, [r7, #19]
 800525e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005260:	7c7b      	ldrb	r3, [r7, #17]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d105      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005266:	4ba6      	ldr	r3, [pc, #664]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526a:	4aa5      	ldr	r2, [pc, #660]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800526c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005270:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800527e:	4ba0      	ldr	r3, [pc, #640]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005284:	f023 0203 	bic.w	r2, r3, #3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	499c      	ldr	r1, [pc, #624]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052a0:	4b97      	ldr	r3, [pc, #604]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a6:	f023 020c 	bic.w	r2, r3, #12
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	4994      	ldr	r1, [pc, #592]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052c2:	4b8f      	ldr	r3, [pc, #572]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	498b      	ldr	r1, [pc, #556]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052e4:	4b86      	ldr	r3, [pc, #536]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	4983      	ldr	r1, [pc, #524]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005306:	4b7e      	ldr	r3, [pc, #504]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	497a      	ldr	r1, [pc, #488]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005328:	4b75      	ldr	r3, [pc, #468]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	4972      	ldr	r1, [pc, #456]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800534a:	4b6d      	ldr	r3, [pc, #436]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	4969      	ldr	r1, [pc, #420]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800536c:	4b64      	ldr	r3, [pc, #400]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	4961      	ldr	r1, [pc, #388]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800538e:	4b5c      	ldr	r3, [pc, #368]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	4958      	ldr	r1, [pc, #352]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d015      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053b0:	4b53      	ldr	r3, [pc, #332]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	4950      	ldr	r1, [pc, #320]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ce:	d105      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053d0:	4b4b      	ldr	r3, [pc, #300]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	4a4a      	ldr	r2, [pc, #296]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d015      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053e8:	4b45      	ldr	r3, [pc, #276]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	4942      	ldr	r1, [pc, #264]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005406:	d105      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005408:	4b3d      	ldr	r3, [pc, #244]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	4a3c      	ldr	r2, [pc, #240]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005412:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d015      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005420:	4b37      	ldr	r3, [pc, #220]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	4934      	ldr	r1, [pc, #208]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800543e:	d105      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005440:	4b2f      	ldr	r3, [pc, #188]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	4a2e      	ldr	r2, [pc, #184]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800544a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d015      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005458:	4b29      	ldr	r3, [pc, #164]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005466:	4926      	ldr	r1, [pc, #152]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005476:	d105      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005478:	4b21      	ldr	r3, [pc, #132]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	4a20      	ldr	r2, [pc, #128]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800547e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005482:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d015      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005490:	4b1b      	ldr	r3, [pc, #108]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005496:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	4918      	ldr	r1, [pc, #96]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ae:	d105      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b0:	4b13      	ldr	r3, [pc, #76]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	4a12      	ldr	r2, [pc, #72]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d015      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054c8:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	490a      	ldr	r1, [pc, #40]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054e6:	d105      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	4a04      	ldr	r2, [pc, #16]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80054f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40021000 	.word	0x40021000

08005504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e042      	b.n	800559c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800551c:	2b00      	cmp	r3, #0
 800551e:	d106      	bne.n	800552e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7fc fae5 	bl	8001af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2224      	movs	r2, #36	; 0x24
 8005532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0201 	bic.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fd56 	bl	8005ff8 <UART_SetConfig>
 800554c:	4603      	mov	r3, r0
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e022      	b.n	800559c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f001 f816 	bl	8006590 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005572:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005582:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f001 f89d 	bl	80066d4 <UART_CheckIdleState>
 800559a:	4603      	mov	r3, r0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e02e      	b.n	8005614 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2224      	movs	r2, #36	; 0x24
 80055ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fc fb26 	bl	8001c38 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08a      	sub	sp, #40	; 0x28
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	4613      	mov	r3, r2
 800562a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005632:	2b20      	cmp	r3, #32
 8005634:	f040 8083 	bne.w	800573e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_UART_Transmit+0x28>
 800563e:	88fb      	ldrh	r3, [r7, #6]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e07b      	b.n	8005740 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_UART_Transmit+0x3a>
 8005652:	2302      	movs	r3, #2
 8005654:	e074      	b.n	8005740 <HAL_UART_Transmit+0x124>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2221      	movs	r2, #33	; 0x21
 800566a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800566e:	f7fc fc5d 	bl	8001f2c <HAL_GetTick>
 8005672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568c:	d108      	bne.n	80056a0 <HAL_UART_Transmit+0x84>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	e003      	b.n	80056a8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80056b0:	e02c      	b.n	800570c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2200      	movs	r2, #0
 80056ba:	2180      	movs	r1, #128	; 0x80
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f001 f854 	bl	800676a <UART_WaitOnFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e039      	b.n	8005740 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10b      	bne.n	80056ea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	3302      	adds	r3, #2
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	e007      	b.n	80056fa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	781a      	ldrb	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	3301      	adds	r3, #1
 80056f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1cc      	bne.n	80056b2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2200      	movs	r2, #0
 8005720:	2140      	movs	r1, #64	; 0x40
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f001 f821 	bl	800676a <UART_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e006      	b.n	8005740 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	e000      	b.n	8005740 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800573e:	2302      	movs	r3, #2
  }
}
 8005740:	4618      	mov	r0, r3
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af02      	add	r7, sp, #8
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	4613      	mov	r3, r2
 8005756:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575e:	2b20      	cmp	r3, #32
 8005760:	f040 80c0 	bne.w	80058e4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_UART_Receive+0x28>
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0b8      	b.n	80058e6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_UART_Receive+0x3a>
 800577e:	2302      	movs	r3, #2
 8005780:	e0b1      	b.n	80058e6 <HAL_UART_Receive+0x19e>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2222      	movs	r2, #34	; 0x22
 8005796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057a0:	f7fc fbc4 	bl	8001f2c <HAL_GetTick>
 80057a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	88fa      	ldrh	r2, [r7, #6]
 80057aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	88fa      	ldrh	r2, [r7, #6]
 80057b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057be:	d10e      	bne.n	80057de <HAL_UART_Receive+0x96>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d105      	bne.n	80057d4 <HAL_UART_Receive+0x8c>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057d2:	e02d      	b.n	8005830 <HAL_UART_Receive+0xe8>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	22ff      	movs	r2, #255	; 0xff
 80057d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057dc:	e028      	b.n	8005830 <HAL_UART_Receive+0xe8>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10d      	bne.n	8005802 <HAL_UART_Receive+0xba>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d104      	bne.n	80057f8 <HAL_UART_Receive+0xb0>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	22ff      	movs	r2, #255	; 0xff
 80057f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057f6:	e01b      	b.n	8005830 <HAL_UART_Receive+0xe8>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	227f      	movs	r2, #127	; 0x7f
 80057fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005800:	e016      	b.n	8005830 <HAL_UART_Receive+0xe8>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800580a:	d10d      	bne.n	8005828 <HAL_UART_Receive+0xe0>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d104      	bne.n	800581e <HAL_UART_Receive+0xd6>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	227f      	movs	r2, #127	; 0x7f
 8005818:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800581c:	e008      	b.n	8005830 <HAL_UART_Receive+0xe8>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	223f      	movs	r2, #63	; 0x3f
 8005822:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005826:	e003      	b.n	8005830 <HAL_UART_Receive+0xe8>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005836:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005840:	d108      	bne.n	8005854 <HAL_UART_Receive+0x10c>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d104      	bne.n	8005854 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	61bb      	str	r3, [r7, #24]
 8005852:	e003      	b.n	800585c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005858:	2300      	movs	r3, #0
 800585a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005864:	e032      	b.n	80058cc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2200      	movs	r2, #0
 800586e:	2120      	movs	r1, #32
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 ff7a 	bl	800676a <UART_WaitOnFlagUntilTimeout>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e032      	b.n	80058e6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10c      	bne.n	80058a0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	b29a      	uxth	r2, r3
 800588e:	8a7b      	ldrh	r3, [r7, #18]
 8005890:	4013      	ands	r3, r2
 8005892:	b29a      	uxth	r2, r3
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	3302      	adds	r3, #2
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	e00c      	b.n	80058ba <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	8a7b      	ldrh	r3, [r7, #18]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	4013      	ands	r3, r2
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	3301      	adds	r3, #1
 80058b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1c6      	bne.n	8005866 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	e000      	b.n	80058e6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80058e4:	2302      	movs	r3, #2
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	; 0x28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005904:	2b20      	cmp	r3, #32
 8005906:	d142      	bne.n	800598e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_UART_Receive_IT+0x24>
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e03b      	b.n	8005990 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_UART_Receive_IT+0x36>
 8005922:	2302      	movs	r3, #2
 8005924:	e034      	b.n	8005990 <HAL_UART_Receive_IT+0xa0>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a17      	ldr	r2, [pc, #92]	; (8005998 <HAL_UART_Receive_IT+0xa8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d01f      	beq.n	800597e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d018      	beq.n	800597e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	613b      	str	r3, [r7, #16]
   return(result);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	623b      	str	r3, [r7, #32]
 800596c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	69f9      	ldr	r1, [r7, #28]
 8005970:	6a3a      	ldr	r2, [r7, #32]
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	61bb      	str	r3, [r7, #24]
   return(result);
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e6      	bne.n	800594c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	461a      	mov	r2, r3
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 ffb9 	bl	80068fc <UART_Start_Receive_IT>
 800598a:	4603      	mov	r3, r0
 800598c:	e000      	b.n	8005990 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800598e:	2302      	movs	r3, #2
  }
}
 8005990:	4618      	mov	r0, r3
 8005992:	3728      	adds	r7, #40	; 0x28
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40008000 	.word	0x40008000

0800599c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b0ba      	sub	sp, #232	; 0xe8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80059c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80059ca:	4013      	ands	r3, r2
 80059cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80059d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d11b      	bne.n	8005a10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d015      	beq.n	8005a10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d105      	bne.n	80059fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d009      	beq.n	8005a10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 82d6 	beq.w	8005fb2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	4798      	blx	r3
      }
      return;
 8005a0e:	e2d0      	b.n	8005fb2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 811f 	beq.w	8005c58 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005a1e:	4b8b      	ldr	r3, [pc, #556]	; (8005c4c <HAL_UART_IRQHandler+0x2b0>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a2a:	4b89      	ldr	r3, [pc, #548]	; (8005c50 <HAL_UART_IRQHandler+0x2b4>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8112 	beq.w	8005c58 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d011      	beq.n	8005a64 <HAL_UART_IRQHandler+0xc8>
 8005a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00b      	beq.n	8005a64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2201      	movs	r2, #1
 8005a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a5a:	f043 0201 	orr.w	r2, r3, #1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d011      	beq.n	8005a94 <HAL_UART_IRQHandler+0xf8>
 8005a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00b      	beq.n	8005a94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2202      	movs	r2, #2
 8005a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a8a:	f043 0204 	orr.w	r2, r3, #4
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d011      	beq.n	8005ac4 <HAL_UART_IRQHandler+0x128>
 8005aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00b      	beq.n	8005ac4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aba:	f043 0202 	orr.w	r2, r3, #2
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d017      	beq.n	8005b00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d105      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005adc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005ae0:	4b5a      	ldr	r3, [pc, #360]	; (8005c4c <HAL_UART_IRQHandler+0x2b0>)
 8005ae2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2208      	movs	r2, #8
 8005aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af6:	f043 0208 	orr.w	r2, r3, #8
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d012      	beq.n	8005b32 <HAL_UART_IRQHandler+0x196>
 8005b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00c      	beq.n	8005b32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b28:	f043 0220 	orr.w	r2, r3, #32
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 823c 	beq.w	8005fb6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d013      	beq.n	8005b72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d105      	bne.n	8005b62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b40      	cmp	r3, #64	; 0x40
 8005b88:	d005      	beq.n	8005b96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d04f      	beq.n	8005c36 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 ffda 	bl	8006b50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b40      	cmp	r3, #64	; 0x40
 8005ba8:	d141      	bne.n	8005c2e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1d9      	bne.n	8005baa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d013      	beq.n	8005c26 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c02:	4a14      	ldr	r2, [pc, #80]	; (8005c54 <HAL_UART_IRQHandler+0x2b8>)
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe f808 	bl	8003c20 <HAL_DMA_Abort_IT>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d017      	beq.n	8005c46 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005c20:	4610      	mov	r0, r2
 8005c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c24:	e00f      	b.n	8005c46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f004 ff6e 	bl	800ab08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c2c:	e00b      	b.n	8005c46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f004 ff6a 	bl	800ab08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c34:	e007      	b.n	8005c46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f004 ff66 	bl	800ab08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005c44:	e1b7      	b.n	8005fb6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c46:	bf00      	nop
    return;
 8005c48:	e1b5      	b.n	8005fb6 <HAL_UART_IRQHandler+0x61a>
 8005c4a:	bf00      	nop
 8005c4c:	10000001 	.word	0x10000001
 8005c50:	04000120 	.word	0x04000120
 8005c54:	08006c1d 	.word	0x08006c1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	f040 814a 	bne.w	8005ef6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c66:	f003 0310 	and.w	r3, r3, #16
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8143 	beq.w	8005ef6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 813c 	beq.w	8005ef6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2210      	movs	r2, #16
 8005c84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	f040 80b5 	bne.w	8005e00 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ca2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 8187 	beq.w	8005fba <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	f080 817f 	bcs.w	8005fba <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f040 8086 	bne.w	8005de4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1da      	bne.n	8005cd8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d34:	f023 0301 	bic.w	r3, r3, #1
 8005d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3308      	adds	r3, #8
 8005d42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e1      	bne.n	8005d22 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3308      	adds	r3, #8
 8005d64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e3      	bne.n	8005d5e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db4:	f023 0310 	bic.w	r3, r3, #16
 8005db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dc8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e4      	bne.n	8005da4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fd fec5 	bl	8003b6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f8f1 	bl	8005fe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dfe:	e0dc      	b.n	8005fba <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80ce 	beq.w	8005fbe <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005e22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 80c9 	beq.w	8005fbe <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e4      	bne.n	8005e2c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	623b      	str	r3, [r7, #32]
   return(result);
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3308      	adds	r3, #8
 8005e86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e8a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e1      	bne.n	8005e62 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0310 	bic.w	r3, r3, #16
 8005ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	69b9      	ldr	r1, [r7, #24]
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e4      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f876 	bl	8005fe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ef4:	e063      	b.n	8005fbe <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00e      	beq.n	8005f20 <HAL_UART_IRQHandler+0x584>
 8005f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d008      	beq.n	8005f20 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 fb1d 	bl	8007558 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f1e:	e051      	b.n	8005fc4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d014      	beq.n	8005f56 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d03a      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
    }
    return;
 8005f54:	e035      	b.n	8005fc2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d009      	beq.n	8005f76 <HAL_UART_IRQHandler+0x5da>
 8005f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fe6a 	bl	8006c48 <UART_EndTransmit_IT>
    return;
 8005f74:	e026      	b.n	8005fc4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <HAL_UART_IRQHandler+0x5fa>
 8005f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 faf6 	bl	8007580 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f94:	e016      	b.n	8005fc4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d010      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x628>
 8005fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	da0c      	bge.n	8005fc4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f001 fade 	bl	800756c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fb0:	e008      	b.n	8005fc4 <HAL_UART_IRQHandler+0x628>
      return;
 8005fb2:	bf00      	nop
 8005fb4:	e006      	b.n	8005fc4 <HAL_UART_IRQHandler+0x628>
    return;
 8005fb6:	bf00      	nop
 8005fb8:	e004      	b.n	8005fc4 <HAL_UART_IRQHandler+0x628>
      return;
 8005fba:	bf00      	nop
 8005fbc:	e002      	b.n	8005fc4 <HAL_UART_IRQHandler+0x628>
      return;
 8005fbe:	bf00      	nop
 8005fc0:	e000      	b.n	8005fc4 <HAL_UART_IRQHandler+0x628>
    return;
 8005fc2:	bf00      	nop
  }
}
 8005fc4:	37e8      	adds	r7, #232	; 0xe8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop

08005fcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ffc:	b08c      	sub	sp, #48	; 0x30
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	431a      	orrs	r2, r3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	431a      	orrs	r2, r3
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	4313      	orrs	r3, r2
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4bab      	ldr	r3, [pc, #684]	; (80062d4 <UART_SetConfig+0x2dc>)
 8006028:	4013      	ands	r3, r2
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	6812      	ldr	r2, [r2, #0]
 800602e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006030:	430b      	orrs	r3, r1
 8006032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4aa0      	ldr	r2, [pc, #640]	; (80062d8 <UART_SetConfig+0x2e0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006060:	4313      	orrs	r3, r2
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800606e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006078:	430b      	orrs	r3, r1
 800607a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	f023 010f 	bic.w	r1, r3, #15
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a91      	ldr	r2, [pc, #580]	; (80062dc <UART_SetConfig+0x2e4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d125      	bne.n	80060e8 <UART_SetConfig+0xf0>
 800609c:	4b90      	ldr	r3, [pc, #576]	; (80062e0 <UART_SetConfig+0x2e8>)
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d81a      	bhi.n	80060e0 <UART_SetConfig+0xe8>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0xb8>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060c1 	.word	0x080060c1
 80060b4:	080060d1 	.word	0x080060d1
 80060b8:	080060c9 	.word	0x080060c9
 80060bc:	080060d9 	.word	0x080060d9
 80060c0:	2301      	movs	r3, #1
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c6:	e0d6      	b.n	8006276 <UART_SetConfig+0x27e>
 80060c8:	2302      	movs	r3, #2
 80060ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ce:	e0d2      	b.n	8006276 <UART_SetConfig+0x27e>
 80060d0:	2304      	movs	r3, #4
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d6:	e0ce      	b.n	8006276 <UART_SetConfig+0x27e>
 80060d8:	2308      	movs	r3, #8
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060de:	e0ca      	b.n	8006276 <UART_SetConfig+0x27e>
 80060e0:	2310      	movs	r3, #16
 80060e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060e6:	e0c6      	b.n	8006276 <UART_SetConfig+0x27e>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a7d      	ldr	r2, [pc, #500]	; (80062e4 <UART_SetConfig+0x2ec>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d138      	bne.n	8006164 <UART_SetConfig+0x16c>
 80060f2:	4b7b      	ldr	r3, [pc, #492]	; (80062e0 <UART_SetConfig+0x2e8>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f8:	f003 030c 	and.w	r3, r3, #12
 80060fc:	2b0c      	cmp	r3, #12
 80060fe:	d82d      	bhi.n	800615c <UART_SetConfig+0x164>
 8006100:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <UART_SetConfig+0x110>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	0800613d 	.word	0x0800613d
 800610c:	0800615d 	.word	0x0800615d
 8006110:	0800615d 	.word	0x0800615d
 8006114:	0800615d 	.word	0x0800615d
 8006118:	0800614d 	.word	0x0800614d
 800611c:	0800615d 	.word	0x0800615d
 8006120:	0800615d 	.word	0x0800615d
 8006124:	0800615d 	.word	0x0800615d
 8006128:	08006145 	.word	0x08006145
 800612c:	0800615d 	.word	0x0800615d
 8006130:	0800615d 	.word	0x0800615d
 8006134:	0800615d 	.word	0x0800615d
 8006138:	08006155 	.word	0x08006155
 800613c:	2300      	movs	r3, #0
 800613e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006142:	e098      	b.n	8006276 <UART_SetConfig+0x27e>
 8006144:	2302      	movs	r3, #2
 8006146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800614a:	e094      	b.n	8006276 <UART_SetConfig+0x27e>
 800614c:	2304      	movs	r3, #4
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006152:	e090      	b.n	8006276 <UART_SetConfig+0x27e>
 8006154:	2308      	movs	r3, #8
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800615a:	e08c      	b.n	8006276 <UART_SetConfig+0x27e>
 800615c:	2310      	movs	r3, #16
 800615e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006162:	e088      	b.n	8006276 <UART_SetConfig+0x27e>
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a5f      	ldr	r2, [pc, #380]	; (80062e8 <UART_SetConfig+0x2f0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d125      	bne.n	80061ba <UART_SetConfig+0x1c2>
 800616e:	4b5c      	ldr	r3, [pc, #368]	; (80062e0 <UART_SetConfig+0x2e8>)
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006174:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006178:	2b30      	cmp	r3, #48	; 0x30
 800617a:	d016      	beq.n	80061aa <UART_SetConfig+0x1b2>
 800617c:	2b30      	cmp	r3, #48	; 0x30
 800617e:	d818      	bhi.n	80061b2 <UART_SetConfig+0x1ba>
 8006180:	2b20      	cmp	r3, #32
 8006182:	d00a      	beq.n	800619a <UART_SetConfig+0x1a2>
 8006184:	2b20      	cmp	r3, #32
 8006186:	d814      	bhi.n	80061b2 <UART_SetConfig+0x1ba>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <UART_SetConfig+0x19a>
 800618c:	2b10      	cmp	r3, #16
 800618e:	d008      	beq.n	80061a2 <UART_SetConfig+0x1aa>
 8006190:	e00f      	b.n	80061b2 <UART_SetConfig+0x1ba>
 8006192:	2300      	movs	r3, #0
 8006194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006198:	e06d      	b.n	8006276 <UART_SetConfig+0x27e>
 800619a:	2302      	movs	r3, #2
 800619c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061a0:	e069      	b.n	8006276 <UART_SetConfig+0x27e>
 80061a2:	2304      	movs	r3, #4
 80061a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061a8:	e065      	b.n	8006276 <UART_SetConfig+0x27e>
 80061aa:	2308      	movs	r3, #8
 80061ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b0:	e061      	b.n	8006276 <UART_SetConfig+0x27e>
 80061b2:	2310      	movs	r3, #16
 80061b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b8:	e05d      	b.n	8006276 <UART_SetConfig+0x27e>
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a4b      	ldr	r2, [pc, #300]	; (80062ec <UART_SetConfig+0x2f4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d125      	bne.n	8006210 <UART_SetConfig+0x218>
 80061c4:	4b46      	ldr	r3, [pc, #280]	; (80062e0 <UART_SetConfig+0x2e8>)
 80061c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061ce:	2bc0      	cmp	r3, #192	; 0xc0
 80061d0:	d016      	beq.n	8006200 <UART_SetConfig+0x208>
 80061d2:	2bc0      	cmp	r3, #192	; 0xc0
 80061d4:	d818      	bhi.n	8006208 <UART_SetConfig+0x210>
 80061d6:	2b80      	cmp	r3, #128	; 0x80
 80061d8:	d00a      	beq.n	80061f0 <UART_SetConfig+0x1f8>
 80061da:	2b80      	cmp	r3, #128	; 0x80
 80061dc:	d814      	bhi.n	8006208 <UART_SetConfig+0x210>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <UART_SetConfig+0x1f0>
 80061e2:	2b40      	cmp	r3, #64	; 0x40
 80061e4:	d008      	beq.n	80061f8 <UART_SetConfig+0x200>
 80061e6:	e00f      	b.n	8006208 <UART_SetConfig+0x210>
 80061e8:	2300      	movs	r3, #0
 80061ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ee:	e042      	b.n	8006276 <UART_SetConfig+0x27e>
 80061f0:	2302      	movs	r3, #2
 80061f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061f6:	e03e      	b.n	8006276 <UART_SetConfig+0x27e>
 80061f8:	2304      	movs	r3, #4
 80061fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061fe:	e03a      	b.n	8006276 <UART_SetConfig+0x27e>
 8006200:	2308      	movs	r3, #8
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006206:	e036      	b.n	8006276 <UART_SetConfig+0x27e>
 8006208:	2310      	movs	r3, #16
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800620e:	e032      	b.n	8006276 <UART_SetConfig+0x27e>
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a30      	ldr	r2, [pc, #192]	; (80062d8 <UART_SetConfig+0x2e0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d12a      	bne.n	8006270 <UART_SetConfig+0x278>
 800621a:	4b31      	ldr	r3, [pc, #196]	; (80062e0 <UART_SetConfig+0x2e8>)
 800621c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006220:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006224:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006228:	d01a      	beq.n	8006260 <UART_SetConfig+0x268>
 800622a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800622e:	d81b      	bhi.n	8006268 <UART_SetConfig+0x270>
 8006230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006234:	d00c      	beq.n	8006250 <UART_SetConfig+0x258>
 8006236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800623a:	d815      	bhi.n	8006268 <UART_SetConfig+0x270>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <UART_SetConfig+0x250>
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006244:	d008      	beq.n	8006258 <UART_SetConfig+0x260>
 8006246:	e00f      	b.n	8006268 <UART_SetConfig+0x270>
 8006248:	2300      	movs	r3, #0
 800624a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800624e:	e012      	b.n	8006276 <UART_SetConfig+0x27e>
 8006250:	2302      	movs	r3, #2
 8006252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006256:	e00e      	b.n	8006276 <UART_SetConfig+0x27e>
 8006258:	2304      	movs	r3, #4
 800625a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800625e:	e00a      	b.n	8006276 <UART_SetConfig+0x27e>
 8006260:	2308      	movs	r3, #8
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006266:	e006      	b.n	8006276 <UART_SetConfig+0x27e>
 8006268:	2310      	movs	r3, #16
 800626a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800626e:	e002      	b.n	8006276 <UART_SetConfig+0x27e>
 8006270:	2310      	movs	r3, #16
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <UART_SetConfig+0x2e0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	f040 80a8 	bne.w	80063d2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006282:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006286:	2b08      	cmp	r3, #8
 8006288:	d834      	bhi.n	80062f4 <UART_SetConfig+0x2fc>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <UART_SetConfig+0x298>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062b5 	.word	0x080062b5
 8006294:	080062f5 	.word	0x080062f5
 8006298:	080062bd 	.word	0x080062bd
 800629c:	080062f5 	.word	0x080062f5
 80062a0:	080062c3 	.word	0x080062c3
 80062a4:	080062f5 	.word	0x080062f5
 80062a8:	080062f5 	.word	0x080062f5
 80062ac:	080062f5 	.word	0x080062f5
 80062b0:	080062cb 	.word	0x080062cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b4:	f7fe fec4 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 80062b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062ba:	e021      	b.n	8006300 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062bc:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <UART_SetConfig+0x2f8>)
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062c0:	e01e      	b.n	8006300 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c2:	f7fe fe4f 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 80062c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062c8:	e01a      	b.n	8006300 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062d0:	e016      	b.n	8006300 <UART_SetConfig+0x308>
 80062d2:	bf00      	nop
 80062d4:	cfff69f3 	.word	0xcfff69f3
 80062d8:	40008000 	.word	0x40008000
 80062dc:	40013800 	.word	0x40013800
 80062e0:	40021000 	.word	0x40021000
 80062e4:	40004400 	.word	0x40004400
 80062e8:	40004800 	.word	0x40004800
 80062ec:	40004c00 	.word	0x40004c00
 80062f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 812a 	beq.w	800655c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	4a9e      	ldr	r2, [pc, #632]	; (8006588 <UART_SetConfig+0x590>)
 800630e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006312:	461a      	mov	r2, r3
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	fbb3 f3f2 	udiv	r3, r3, r2
 800631a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	4613      	mov	r3, r2
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	4413      	add	r3, r2
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	429a      	cmp	r2, r3
 800632a:	d305      	bcc.n	8006338 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	429a      	cmp	r2, r3
 8006336:	d903      	bls.n	8006340 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800633e:	e10d      	b.n	800655c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	2200      	movs	r2, #0
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	60fa      	str	r2, [r7, #12]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	4a8e      	ldr	r2, [pc, #568]	; (8006588 <UART_SetConfig+0x590>)
 800634e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006352:	b29b      	uxth	r3, r3
 8006354:	2200      	movs	r2, #0
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	607a      	str	r2, [r7, #4]
 800635a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006362:	f7fa f9d1 	bl	8000708 <__aeabi_uldivmod>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4610      	mov	r0, r2
 800636c:	4619      	mov	r1, r3
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	f04f 0300 	mov.w	r3, #0
 8006376:	020b      	lsls	r3, r1, #8
 8006378:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800637c:	0202      	lsls	r2, r0, #8
 800637e:	6979      	ldr	r1, [r7, #20]
 8006380:	6849      	ldr	r1, [r1, #4]
 8006382:	0849      	lsrs	r1, r1, #1
 8006384:	2000      	movs	r0, #0
 8006386:	460c      	mov	r4, r1
 8006388:	4605      	mov	r5, r0
 800638a:	eb12 0804 	adds.w	r8, r2, r4
 800638e:	eb43 0905 	adc.w	r9, r3, r5
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	469a      	mov	sl, r3
 800639a:	4693      	mov	fp, r2
 800639c:	4652      	mov	r2, sl
 800639e:	465b      	mov	r3, fp
 80063a0:	4640      	mov	r0, r8
 80063a2:	4649      	mov	r1, r9
 80063a4:	f7fa f9b0 	bl	8000708 <__aeabi_uldivmod>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4613      	mov	r3, r2
 80063ae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b6:	d308      	bcc.n	80063ca <UART_SetConfig+0x3d2>
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063be:	d204      	bcs.n	80063ca <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6a3a      	ldr	r2, [r7, #32]
 80063c6:	60da      	str	r2, [r3, #12]
 80063c8:	e0c8      	b.n	800655c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063d0:	e0c4      	b.n	800655c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063da:	d167      	bne.n	80064ac <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80063dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d828      	bhi.n	8006436 <UART_SetConfig+0x43e>
 80063e4:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <UART_SetConfig+0x3f4>)
 80063e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ea:	bf00      	nop
 80063ec:	08006411 	.word	0x08006411
 80063f0:	08006419 	.word	0x08006419
 80063f4:	08006421 	.word	0x08006421
 80063f8:	08006437 	.word	0x08006437
 80063fc:	08006427 	.word	0x08006427
 8006400:	08006437 	.word	0x08006437
 8006404:	08006437 	.word	0x08006437
 8006408:	08006437 	.word	0x08006437
 800640c:	0800642f 	.word	0x0800642f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006410:	f7fe fe16 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 8006414:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006416:	e014      	b.n	8006442 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006418:	f7fe fe28 	bl	800506c <HAL_RCC_GetPCLK2Freq>
 800641c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800641e:	e010      	b.n	8006442 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006420:	4b5a      	ldr	r3, [pc, #360]	; (800658c <UART_SetConfig+0x594>)
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006424:	e00d      	b.n	8006442 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006426:	f7fe fd9d 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 800642a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800642c:	e009      	b.n	8006442 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006432:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006434:	e005      	b.n	8006442 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006440:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8089 	beq.w	800655c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	4a4e      	ldr	r2, [pc, #312]	; (8006588 <UART_SetConfig+0x590>)
 8006450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006454:	461a      	mov	r2, r3
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	fbb3 f3f2 	udiv	r3, r3, r2
 800645c:	005a      	lsls	r2, r3, #1
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	085b      	lsrs	r3, r3, #1
 8006464:	441a      	add	r2, r3
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	fbb2 f3f3 	udiv	r3, r2, r3
 800646e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	2b0f      	cmp	r3, #15
 8006474:	d916      	bls.n	80064a4 <UART_SetConfig+0x4ac>
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800647c:	d212      	bcs.n	80064a4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	b29b      	uxth	r3, r3
 8006482:	f023 030f 	bic.w	r3, r3, #15
 8006486:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	b29b      	uxth	r3, r3
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	b29a      	uxth	r2, r3
 8006494:	8bfb      	ldrh	r3, [r7, #30]
 8006496:	4313      	orrs	r3, r2
 8006498:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	8bfa      	ldrh	r2, [r7, #30]
 80064a0:	60da      	str	r2, [r3, #12]
 80064a2:	e05b      	b.n	800655c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80064aa:	e057      	b.n	800655c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d828      	bhi.n	8006506 <UART_SetConfig+0x50e>
 80064b4:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <UART_SetConfig+0x4c4>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064e1 	.word	0x080064e1
 80064c0:	080064e9 	.word	0x080064e9
 80064c4:	080064f1 	.word	0x080064f1
 80064c8:	08006507 	.word	0x08006507
 80064cc:	080064f7 	.word	0x080064f7
 80064d0:	08006507 	.word	0x08006507
 80064d4:	08006507 	.word	0x08006507
 80064d8:	08006507 	.word	0x08006507
 80064dc:	080064ff 	.word	0x080064ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e0:	f7fe fdae 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 80064e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064e6:	e014      	b.n	8006512 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064e8:	f7fe fdc0 	bl	800506c <HAL_RCC_GetPCLK2Freq>
 80064ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064ee:	e010      	b.n	8006512 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f0:	4b26      	ldr	r3, [pc, #152]	; (800658c <UART_SetConfig+0x594>)
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064f4:	e00d      	b.n	8006512 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064f6:	f7fe fd35 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 80064fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064fc:	e009      	b.n	8006512 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006504:	e005      	b.n	8006512 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006510:	bf00      	nop
    }

    if (pclk != 0U)
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	2b00      	cmp	r3, #0
 8006516:	d021      	beq.n	800655c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	4a1a      	ldr	r2, [pc, #104]	; (8006588 <UART_SetConfig+0x590>)
 800651e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006522:	461a      	mov	r2, r3
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	fbb3 f2f2 	udiv	r2, r3, r2
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	441a      	add	r2, r3
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	fbb2 f3f3 	udiv	r3, r2, r3
 800653a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	2b0f      	cmp	r3, #15
 8006540:	d909      	bls.n	8006556 <UART_SetConfig+0x55e>
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006548:	d205      	bcs.n	8006556 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	b29a      	uxth	r2, r3
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	60da      	str	r2, [r3, #12]
 8006554:	e002      	b.n	800655c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2201      	movs	r2, #1
 8006560:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2201      	movs	r2, #1
 8006568:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2200      	movs	r2, #0
 8006570:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2200      	movs	r2, #0
 8006576:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006578:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800657c:	4618      	mov	r0, r3
 800657e:	3730      	adds	r7, #48	; 0x30
 8006580:	46bd      	mov	sp, r7
 8006582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006586:	bf00      	nop
 8006588:	0800ce98 	.word	0x0800ce98
 800658c:	00f42400 	.word	0x00f42400

08006590 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00a      	beq.n	80065ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01a      	beq.n	80066a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800668e:	d10a      	bne.n	80066a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	605a      	str	r2, [r3, #4]
  }
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af02      	add	r7, sp, #8
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066e4:	f7fb fc22 	bl	8001f2c <HAL_GetTick>
 80066e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d10e      	bne.n	8006716 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f82f 	bl	800676a <UART_WaitOnFlagUntilTimeout>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e025      	b.n	8006762 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0304 	and.w	r3, r3, #4
 8006720:	2b04      	cmp	r3, #4
 8006722:	d10e      	bne.n	8006742 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006724:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f819 	bl	800676a <UART_WaitOnFlagUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e00f      	b.n	8006762 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b09c      	sub	sp, #112	; 0x70
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	4613      	mov	r3, r2
 8006778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800677a:	e0a9      	b.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800677e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006782:	f000 80a5 	beq.w	80068d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006786:	f7fb fbd1 	bl	8001f2c <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006792:	429a      	cmp	r2, r3
 8006794:	d302      	bcc.n	800679c <UART_WaitOnFlagUntilTimeout+0x32>
 8006796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006798:	2b00      	cmp	r3, #0
 800679a:	d140      	bne.n	800681e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067b0:	667b      	str	r3, [r7, #100]	; 0x64
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e6      	bne.n	800679c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	f023 0301 	bic.w	r3, r3, #1
 80067e4:	663b      	str	r3, [r7, #96]	; 0x60
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3308      	adds	r3, #8
 80067ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80067f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e5      	bne.n	80067ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2220      	movs	r2, #32
 800680e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e069      	b.n	80068f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d051      	beq.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683a:	d149      	bne.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006844:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800685a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
 8006866:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800686a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e6      	bne.n	8006846 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3308      	adds	r3, #8
 800687e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	613b      	str	r3, [r7, #16]
   return(result);
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f023 0301 	bic.w	r3, r3, #1
 800688e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3308      	adds	r3, #8
 8006896:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006898:	623a      	str	r2, [r7, #32]
 800689a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	69f9      	ldr	r1, [r7, #28]
 800689e:	6a3a      	ldr	r2, [r7, #32]
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e5      	bne.n	8006878 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e010      	b.n	80068f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	69da      	ldr	r2, [r3, #28]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4013      	ands	r3, r2
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	429a      	cmp	r2, r3
 80068de:	bf0c      	ite	eq
 80068e0:	2301      	moveq	r3, #1
 80068e2:	2300      	movne	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	f43f af46 	beq.w	800677c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3770      	adds	r7, #112	; 0x70
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b0a3      	sub	sp, #140	; 0x8c
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	88fa      	ldrh	r2, [r7, #6]
 8006914:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692e:	d10e      	bne.n	800694e <UART_Start_Receive_IT+0x52>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d105      	bne.n	8006944 <UART_Start_Receive_IT+0x48>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800693e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006942:	e02d      	b.n	80069a0 <UART_Start_Receive_IT+0xa4>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	22ff      	movs	r2, #255	; 0xff
 8006948:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800694c:	e028      	b.n	80069a0 <UART_Start_Receive_IT+0xa4>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10d      	bne.n	8006972 <UART_Start_Receive_IT+0x76>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <UART_Start_Receive_IT+0x6c>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	22ff      	movs	r2, #255	; 0xff
 8006962:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006966:	e01b      	b.n	80069a0 <UART_Start_Receive_IT+0xa4>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	227f      	movs	r2, #127	; 0x7f
 800696c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006970:	e016      	b.n	80069a0 <UART_Start_Receive_IT+0xa4>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800697a:	d10d      	bne.n	8006998 <UART_Start_Receive_IT+0x9c>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <UART_Start_Receive_IT+0x92>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	227f      	movs	r2, #127	; 0x7f
 8006988:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800698c:	e008      	b.n	80069a0 <UART_Start_Receive_IT+0xa4>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	223f      	movs	r2, #63	; 0x3f
 8006992:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006996:	e003      	b.n	80069a0 <UART_Start_Receive_IT+0xa4>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2222      	movs	r2, #34	; 0x22
 80069ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3308      	adds	r3, #8
 80069b6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80069c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3308      	adds	r3, #8
 80069d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80069d4:	673a      	str	r2, [r7, #112]	; 0x70
 80069d6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80069da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80069e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e3      	bne.n	80069b0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069f0:	d153      	bne.n	8006a9a <UART_Start_Receive_IT+0x19e>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069f8:	88fa      	ldrh	r2, [r7, #6]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d34d      	bcc.n	8006a9a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a06:	d107      	bne.n	8006a18 <UART_Start_Receive_IT+0x11c>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d103      	bne.n	8006a18 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4a4b      	ldr	r2, [pc, #300]	; (8006b40 <UART_Start_Receive_IT+0x244>)
 8006a14:	671a      	str	r2, [r3, #112]	; 0x70
 8006a16:	e002      	b.n	8006a1e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4a4a      	ldr	r2, [pc, #296]	; (8006b44 <UART_Start_Receive_IT+0x248>)
 8006a1c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01a      	beq.n	8006a64 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a52:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e4      	bne.n	8006a2e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3308      	adds	r3, #8
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3308      	adds	r3, #8
 8006a82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006a84:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e5      	bne.n	8006a64 <UART_Start_Receive_IT+0x168>
 8006a98:	e04a      	b.n	8006b30 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa2:	d107      	bne.n	8006ab4 <UART_Start_Receive_IT+0x1b8>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d103      	bne.n	8006ab4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4a26      	ldr	r2, [pc, #152]	; (8006b48 <UART_Start_Receive_IT+0x24c>)
 8006ab0:	671a      	str	r2, [r3, #112]	; 0x70
 8006ab2:	e002      	b.n	8006aba <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4a25      	ldr	r2, [pc, #148]	; (8006b4c <UART_Start_Receive_IT+0x250>)
 8006ab8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d019      	beq.n	8006afe <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006ade:	677b      	str	r3, [r7, #116]	; 0x74
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e6      	bne.n	8006aca <UART_Start_Receive_IT+0x1ce>
 8006afc:	e018      	b.n	8006b30 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f043 0320 	orr.w	r3, r3, #32
 8006b12:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b1c:	623b      	str	r3, [r7, #32]
 8006b1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	69f9      	ldr	r1, [r7, #28]
 8006b22:	6a3a      	ldr	r2, [r7, #32]
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e6      	bne.n	8006afe <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	378c      	adds	r7, #140	; 0x8c
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	08007259 	.word	0x08007259
 8006b44:	08006f61 	.word	0x08006f61
 8006b48:	08006dff 	.word	0x08006dff
 8006b4c:	08006c9f 	.word	0x08006c9f

08006b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b095      	sub	sp, #84	; 0x54
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b76:	643b      	str	r3, [r7, #64]	; 0x40
 8006b78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e6      	bne.n	8006b58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ba0:	f023 0301 	bic.w	r3, r3, #1
 8006ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3308      	adds	r3, #8
 8006bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e3      	bne.n	8006b8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d118      	bne.n	8006bfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f023 0310 	bic.w	r3, r3, #16
 8006bde:	647b      	str	r3, [r7, #68]	; 0x44
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	461a      	mov	r2, r3
 8006be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bec:	6979      	ldr	r1, [r7, #20]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	e841 2300 	strex	r3, r2, [r1]
 8006bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1e6      	bne.n	8006bca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006c10:	bf00      	nop
 8006c12:	3754      	adds	r7, #84	; 0x54
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f003 ff64 	bl	800ab08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c40:	bf00      	nop
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	e853 3f00 	ldrex	r3, [r3]
 8006c5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c64:	61fb      	str	r3, [r7, #28]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	61bb      	str	r3, [r7, #24]
 8006c70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6979      	ldr	r1, [r7, #20]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1e6      	bne.n	8006c50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff f99b 	bl	8005fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c96:	bf00      	nop
 8006c98:	3720      	adds	r7, #32
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b096      	sub	sp, #88	; 0x58
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006cac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb6:	2b22      	cmp	r3, #34	; 0x22
 8006cb8:	f040 8095 	bne.w	8006de6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cc6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006cca:	b2d9      	uxtb	r1, r3
 8006ccc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd6:	400a      	ands	r2, r1
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d178      	bne.n	8006df6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d18:	653b      	str	r3, [r7, #80]	; 0x50
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d22:	647b      	str	r3, [r7, #68]	; 0x44
 8006d24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e6      	bne.n	8006d04 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	623b      	str	r3, [r7, #32]
   return(result);
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	f023 0301 	bic.w	r3, r3, #1
 8006d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3308      	adds	r3, #8
 8006d54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d56:	633a      	str	r2, [r7, #48]	; 0x30
 8006d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e5      	bne.n	8006d36 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d12e      	bne.n	8006dde <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0310 	bic.w	r3, r3, #16
 8006d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	461a      	mov	r2, r3
 8006da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	69b9      	ldr	r1, [r7, #24]
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	e841 2300 	strex	r3, r2, [r1]
 8006db0:	617b      	str	r3, [r7, #20]
   return(result);
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e6      	bne.n	8006d86 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	f003 0310 	and.w	r3, r3, #16
 8006dc2:	2b10      	cmp	r3, #16
 8006dc4:	d103      	bne.n	8006dce <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2210      	movs	r2, #16
 8006dcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff f902 	bl	8005fe0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ddc:	e00b      	b.n	8006df6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f003 fe78 	bl	800aad4 <HAL_UART_RxCpltCallback>
}
 8006de4:	e007      	b.n	8006df6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699a      	ldr	r2, [r3, #24]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0208 	orr.w	r2, r2, #8
 8006df4:	619a      	str	r2, [r3, #24]
}
 8006df6:	bf00      	nop
 8006df8:	3758      	adds	r7, #88	; 0x58
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b096      	sub	sp, #88	; 0x58
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e16:	2b22      	cmp	r3, #34	; 0x22
 8006e18:	f040 8095 	bne.w	8006f46 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e2a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e2c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006e30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e34:	4013      	ands	r3, r2
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e3a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e40:	1c9a      	adds	r2, r3, #2
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d178      	bne.n	8006f56 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e82:	643b      	str	r3, [r7, #64]	; 0x40
 8006e84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e6      	bne.n	8006e64 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e5      	bne.n	8006e96 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d12e      	bne.n	8006f3e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f023 0310 	bic.w	r3, r3, #16
 8006efa:	647b      	str	r3, [r7, #68]	; 0x44
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f04:	61bb      	str	r3, [r7, #24]
 8006f06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	6979      	ldr	r1, [r7, #20]
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	613b      	str	r3, [r7, #16]
   return(result);
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e6      	bne.n	8006ee6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f003 0310 	and.w	r3, r3, #16
 8006f22:	2b10      	cmp	r3, #16
 8006f24:	d103      	bne.n	8006f2e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2210      	movs	r2, #16
 8006f2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff f852 	bl	8005fe0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f3c:	e00b      	b.n	8006f56 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f003 fdc8 	bl	800aad4 <HAL_UART_RxCpltCallback>
}
 8006f44:	e007      	b.n	8006f56 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	699a      	ldr	r2, [r3, #24]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0208 	orr.w	r2, r2, #8
 8006f54:	619a      	str	r2, [r3, #24]
}
 8006f56:	bf00      	nop
 8006f58:	3758      	adds	r7, #88	; 0x58
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b0a6      	sub	sp, #152	; 0x98
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f6e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f96:	2b22      	cmp	r3, #34	; 0x22
 8006f98:	f040 814f 	bne.w	800723a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006fa2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fa6:	e0f6      	b.n	8007196 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006fb2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006fb6:	b2d9      	uxtb	r1, r3
 8006fb8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc2:	400a      	ands	r2, r1
 8006fc4:	b2d2      	uxtb	r2, r2
 8006fc6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006fee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d053      	beq.n	80070a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ffa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d011      	beq.n	800702a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800700a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00b      	beq.n	800702a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2201      	movs	r2, #1
 8007018:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007020:	f043 0201 	orr.w	r2, r3, #1
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800702a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d011      	beq.n	800705a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007036:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00b      	beq.n	800705a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2202      	movs	r2, #2
 8007048:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007050:	f043 0204 	orr.w	r2, r3, #4
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800705a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	d011      	beq.n	800708a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007066:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00b      	beq.n	800708a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2204      	movs	r2, #4
 8007078:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007080:	f043 0202 	orr.w	r2, r3, #2
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007090:	2b00      	cmp	r3, #0
 8007092:	d006      	beq.n	80070a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f003 fd37 	bl	800ab08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d173      	bne.n	8007196 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80070bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80070d2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80070d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80070de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e4      	bne.n	80070ae <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80070f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070fa:	f023 0301 	bic.w	r3, r3, #1
 80070fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3308      	adds	r3, #8
 8007106:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007108:	657a      	str	r2, [r7, #84]	; 0x54
 800710a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800710e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007110:	e841 2300 	strex	r3, r2, [r1]
 8007114:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e3      	bne.n	80070e4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2220      	movs	r2, #32
 8007120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800712e:	2b01      	cmp	r3, #1
 8007130:	d12e      	bne.n	8007190 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	f023 0310 	bic.w	r3, r3, #16
 800714c:	67bb      	str	r3, [r7, #120]	; 0x78
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007156:	643b      	str	r3, [r7, #64]	; 0x40
 8007158:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800715c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e6      	bne.n	8007138 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	2b10      	cmp	r3, #16
 8007176:	d103      	bne.n	8007180 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2210      	movs	r2, #16
 800717e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fe ff29 	bl	8005fe0 <HAL_UARTEx_RxEventCallback>
 800718e:	e002      	b.n	8007196 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f003 fc9f 	bl	800aad4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007196:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800719a:	2b00      	cmp	r3, #0
 800719c:	d006      	beq.n	80071ac <UART_RxISR_8BIT_FIFOEN+0x24c>
 800719e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f47f aefe 	bne.w	8006fa8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80071b6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d045      	beq.n	800724a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d23e      	bcs.n	800724a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3308      	adds	r3, #8
 80071d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	61fb      	str	r3, [r7, #28]
   return(result);
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071e2:	673b      	str	r3, [r7, #112]	; 0x70
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3308      	adds	r3, #8
 80071ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80071ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e5      	bne.n	80071cc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a14      	ldr	r2, [pc, #80]	; (8007254 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007204:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	e853 3f00 	ldrex	r3, [r3]
 8007212:	60bb      	str	r3, [r7, #8]
   return(result);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f043 0320 	orr.w	r3, r3, #32
 800721a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6979      	ldr	r1, [r7, #20]
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	613b      	str	r3, [r7, #16]
   return(result);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e6      	bne.n	8007206 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007238:	e007      	b.n	800724a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699a      	ldr	r2, [r3, #24]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0208 	orr.w	r2, r2, #8
 8007248:	619a      	str	r2, [r3, #24]
}
 800724a:	bf00      	nop
 800724c:	3798      	adds	r7, #152	; 0x98
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	08006c9f 	.word	0x08006c9f

08007258 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b0a8      	sub	sp, #160	; 0xa0
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007266:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728e:	2b22      	cmp	r3, #34	; 0x22
 8007290:	f040 8153 	bne.w	800753a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800729a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800729e:	e0fa      	b.n	8007496 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80072b2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80072b6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80072ba:	4013      	ands	r3, r2
 80072bc:	b29a      	uxth	r2, r3
 80072be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c8:	1c9a      	adds	r2, r3, #2
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80072ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d053      	beq.n	800739e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d011      	beq.n	8007326 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007302:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2201      	movs	r2, #1
 8007314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800731c:	f043 0201 	orr.w	r2, r3, #1
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007326:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d011      	beq.n	8007356 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007332:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2202      	movs	r2, #2
 8007344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800734c:	f043 0204 	orr.w	r2, r3, #4
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007356:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d011      	beq.n	8007386 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00b      	beq.n	8007386 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2204      	movs	r2, #4
 8007374:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800737c:	f043 0202 	orr.w	r2, r3, #2
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d006      	beq.n	800739e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f003 fbb9 	bl	800ab08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d175      	bne.n	8007496 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073ce:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e4      	bne.n	80073aa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3308      	adds	r3, #8
 80073e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ea:	e853 3f00 	ldrex	r3, [r3]
 80073ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073f6:	f023 0301 	bic.w	r3, r3, #1
 80073fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3308      	adds	r3, #8
 8007404:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007408:	65ba      	str	r2, [r7, #88]	; 0x58
 800740a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800740e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e1      	bne.n	80073e0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800742e:	2b01      	cmp	r3, #1
 8007430:	d12e      	bne.n	8007490 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007448:	f023 0310 	bic.w	r3, r3, #16
 800744c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007456:	647b      	str	r3, [r7, #68]	; 0x44
 8007458:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800745c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e6      	bne.n	8007438 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	f003 0310 	and.w	r3, r3, #16
 8007474:	2b10      	cmp	r3, #16
 8007476:	d103      	bne.n	8007480 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2210      	movs	r2, #16
 800747e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7fe fda9 	bl	8005fe0 <HAL_UARTEx_RxEventCallback>
 800748e:	e002      	b.n	8007496 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f003 fb1f 	bl	800aad4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007496:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800749a:	2b00      	cmp	r3, #0
 800749c:	d006      	beq.n	80074ac <UART_RxISR_16BIT_FIFOEN+0x254>
 800749e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f47f aefa 	bne.w	80072a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074b2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80074b6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d045      	beq.n	800754a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80074c4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d23e      	bcs.n	800754a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3308      	adds	r3, #8
 80074d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	623b      	str	r3, [r7, #32]
   return(result);
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074e2:	677b      	str	r3, [r7, #116]	; 0x74
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3308      	adds	r3, #8
 80074ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80074ec:	633a      	str	r2, [r7, #48]	; 0x30
 80074ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e5      	bne.n	80074cc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a14      	ldr	r2, [pc, #80]	; (8007554 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007504:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	60fb      	str	r3, [r7, #12]
   return(result);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f043 0320 	orr.w	r3, r3, #32
 800751a:	673b      	str	r3, [r7, #112]	; 0x70
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	69b9      	ldr	r1, [r7, #24]
 800752a:	69fa      	ldr	r2, [r7, #28]
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	617b      	str	r3, [r7, #20]
   return(result);
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e6      	bne.n	8007506 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007538:	e007      	b.n	800754a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	699a      	ldr	r2, [r3, #24]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f042 0208 	orr.w	r2, r2, #8
 8007548:	619a      	str	r2, [r3, #24]
}
 800754a:	bf00      	nop
 800754c:	37a0      	adds	r7, #160	; 0xa0
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	08006dff 	.word	0x08006dff

08007558 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d101      	bne.n	80075aa <HAL_UARTEx_EnableFifoMode+0x16>
 80075a6:	2302      	movs	r3, #2
 80075a8:	e02b      	b.n	8007602 <HAL_UARTEx_EnableFifoMode+0x6e>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2224      	movs	r2, #36	; 0x24
 80075b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0201 	bic.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80075e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f8c2 	bl	8007774 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800760a:	b480      	push	{r7}
 800760c:	b085      	sub	sp, #20
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_UARTEx_DisableFifoMode+0x16>
 800761c:	2302      	movs	r3, #2
 800761e:	e027      	b.n	8007670 <HAL_UARTEx_DisableFifoMode+0x66>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2224      	movs	r2, #36	; 0x24
 800762c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0201 	bic.w	r2, r2, #1
 8007646:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800764e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2220      	movs	r2, #32
 8007662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007690:	2302      	movs	r3, #2
 8007692:	e02d      	b.n	80076f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2224      	movs	r2, #36	; 0x24
 80076a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 0201 	bic.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f84f 	bl	8007774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007708:	2b01      	cmp	r3, #1
 800770a:	d101      	bne.n	8007710 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800770c:	2302      	movs	r3, #2
 800770e:	e02d      	b.n	800776c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2224      	movs	r2, #36	; 0x24
 800771c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0201 	bic.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f811 	bl	8007774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2220      	movs	r2, #32
 800775e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007780:	2b00      	cmp	r3, #0
 8007782:	d108      	bne.n	8007796 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007794:	e031      	b.n	80077fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007796:	2308      	movs	r3, #8
 8007798:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800779a:	2308      	movs	r3, #8
 800779c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	0e5b      	lsrs	r3, r3, #25
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	0f5b      	lsrs	r3, r3, #29
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077be:	7bbb      	ldrb	r3, [r7, #14]
 80077c0:	7b3a      	ldrb	r2, [r7, #12]
 80077c2:	4911      	ldr	r1, [pc, #68]	; (8007808 <UARTEx_SetNbDataToProcess+0x94>)
 80077c4:	5c8a      	ldrb	r2, [r1, r2]
 80077c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077ca:	7b3a      	ldrb	r2, [r7, #12]
 80077cc:	490f      	ldr	r1, [pc, #60]	; (800780c <UARTEx_SetNbDataToProcess+0x98>)
 80077ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	7b7a      	ldrb	r2, [r7, #13]
 80077e0:	4909      	ldr	r1, [pc, #36]	; (8007808 <UARTEx_SetNbDataToProcess+0x94>)
 80077e2:	5c8a      	ldrb	r2, [r1, r2]
 80077e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077e8:	7b7a      	ldrb	r2, [r7, #13]
 80077ea:	4908      	ldr	r1, [pc, #32]	; (800780c <UARTEx_SetNbDataToProcess+0x98>)
 80077ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80077fa:	bf00      	nop
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	0800ceb0 	.word	0x0800ceb0
 800780c:	0800ceb8 	.word	0x0800ceb8

08007810 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007810:	b480      	push	{r7}
 8007812:	b08b      	sub	sp, #44	; 0x2c
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	fa93 f3a3 	rbit	r3, r3
 800782a:	613b      	str	r3, [r7, #16]
  return result;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007836:	2320      	movs	r3, #32
 8007838:	e003      	b.n	8007842 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	fab3 f383 	clz	r3, r3
 8007840:	b2db      	uxtb	r3, r3
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	2103      	movs	r1, #3
 8007846:	fa01 f303 	lsl.w	r3, r1, r3
 800784a:	43db      	mvns	r3, r3
 800784c:	401a      	ands	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	fa93 f3a3 	rbit	r3, r3
 8007858:	61fb      	str	r3, [r7, #28]
  return result;
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007864:	2320      	movs	r3, #32
 8007866:	e003      	b.n	8007870 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	fab3 f383 	clz	r3, r3
 800786e:	b2db      	uxtb	r3, r3
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	fa01 f303 	lsl.w	r3, r1, r3
 8007878:	431a      	orrs	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	601a      	str	r2, [r3, #0]
}
 800787e:	bf00      	nop
 8007880:	372c      	adds	r7, #44	; 0x2c
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	43db      	mvns	r3, r3
 800789e:	401a      	ands	r2, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	6879      	ldr	r1, [r7, #4]
 80078a4:	fb01 f303 	mul.w	r3, r1, r3
 80078a8:	431a      	orrs	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	605a      	str	r2, [r3, #4]
}
 80078ae:	bf00      	nop
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b08b      	sub	sp, #44	; 0x2c
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	fa93 f3a3 	rbit	r3, r3
 80078d4:	613b      	str	r3, [r7, #16]
  return result;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80078e0:	2320      	movs	r3, #32
 80078e2:	e003      	b.n	80078ec <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	fab3 f383 	clz	r3, r3
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	2103      	movs	r1, #3
 80078f0:	fa01 f303 	lsl.w	r3, r1, r3
 80078f4:	43db      	mvns	r3, r3
 80078f6:	401a      	ands	r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	fa93 f3a3 	rbit	r3, r3
 8007902:	61fb      	str	r3, [r7, #28]
  return result;
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800790e:	2320      	movs	r3, #32
 8007910:	e003      	b.n	800791a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	fab3 f383 	clz	r3, r3
 8007918:	b2db      	uxtb	r3, r3
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	fa01 f303 	lsl.w	r3, r1, r3
 8007922:	431a      	orrs	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8007928:	bf00      	nop
 800792a:	372c      	adds	r7, #44	; 0x2c
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007934:	b480      	push	{r7}
 8007936:	b08b      	sub	sp, #44	; 0x2c
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	fa93 f3a3 	rbit	r3, r3
 800794e:	613b      	str	r3, [r7, #16]
  return result;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800795a:	2320      	movs	r3, #32
 800795c:	e003      	b.n	8007966 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	fab3 f383 	clz	r3, r3
 8007964:	b2db      	uxtb	r3, r3
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	2103      	movs	r1, #3
 800796a:	fa01 f303 	lsl.w	r3, r1, r3
 800796e:	43db      	mvns	r3, r3
 8007970:	401a      	ands	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	fa93 f3a3 	rbit	r3, r3
 800797c:	61fb      	str	r3, [r7, #28]
  return result;
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007988:	2320      	movs	r3, #32
 800798a:	e003      	b.n	8007994 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	fab3 f383 	clz	r3, r3
 8007992:	b2db      	uxtb	r3, r3
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	fa01 f303 	lsl.w	r3, r1, r3
 800799c:	431a      	orrs	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	60da      	str	r2, [r3, #12]
}
 80079a2:	bf00      	nop
 80079a4:	372c      	adds	r7, #44	; 0x2c
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b08b      	sub	sp, #44	; 0x2c
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	60b9      	str	r1, [r7, #8]
 80079b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	fa93 f3a3 	rbit	r3, r3
 80079c8:	613b      	str	r3, [r7, #16]
  return result;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80079d4:	2320      	movs	r3, #32
 80079d6:	e003      	b.n	80079e0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	fab3 f383 	clz	r3, r3
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	210f      	movs	r1, #15
 80079e4:	fa01 f303 	lsl.w	r3, r1, r3
 80079e8:	43db      	mvns	r3, r3
 80079ea:	401a      	ands	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	fa93 f3a3 	rbit	r3, r3
 80079f6:	61fb      	str	r3, [r7, #28]
  return result;
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007a02:	2320      	movs	r3, #32
 8007a04:	e003      	b.n	8007a0e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	fab3 f383 	clz	r3, r3
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	fa01 f303 	lsl.w	r3, r1, r3
 8007a16:	431a      	orrs	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007a1c:	bf00      	nop
 8007a1e:	372c      	adds	r7, #44	; 0x2c
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b08b      	sub	sp, #44	; 0x2c
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	0a1b      	lsrs	r3, r3, #8
 8007a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	fa93 f3a3 	rbit	r3, r3
 8007a44:	613b      	str	r3, [r7, #16]
  return result;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007a50:	2320      	movs	r3, #32
 8007a52:	e003      	b.n	8007a5c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	fab3 f383 	clz	r3, r3
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	210f      	movs	r1, #15
 8007a60:	fa01 f303 	lsl.w	r3, r1, r3
 8007a64:	43db      	mvns	r3, r3
 8007a66:	401a      	ands	r2, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	0a1b      	lsrs	r3, r3, #8
 8007a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	fa93 f3a3 	rbit	r3, r3
 8007a74:	61fb      	str	r3, [r7, #28]
  return result;
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007a80:	2320      	movs	r3, #32
 8007a82:	e003      	b.n	8007a8c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	fab3 f383 	clz	r3, r3
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	fa01 f303 	lsl.w	r3, r1, r3
 8007a94:	431a      	orrs	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8007a9a:	bf00      	nop
 8007a9c:	372c      	adds	r7, #44	; 0x2c
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b088      	sub	sp, #32
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	fa93 f3a3 	rbit	r3, r3
 8007abc:	60fb      	str	r3, [r7, #12]
  return result;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <LL_GPIO_Init+0x26>
    return 32U;
 8007ac8:	2320      	movs	r3, #32
 8007aca:	e003      	b.n	8007ad4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	fab3 f383 	clz	r3, r3
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007ad6:	e048      	b.n	8007b6a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	2101      	movs	r1, #1
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d03a      	beq.n	8007b64 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d003      	beq.n	8007afe <LL_GPIO_Init+0x58>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d10e      	bne.n	8007b1c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	461a      	mov	r2, r3
 8007b04:	69b9      	ldr	r1, [r7, #24]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff fed7 	bl	80078ba <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	6819      	ldr	r1, [r3, #0]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	461a      	mov	r2, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff feb7 	bl	800788a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	461a      	mov	r2, r3
 8007b22:	69b9      	ldr	r1, [r7, #24]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff ff05 	bl	8007934 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d111      	bne.n	8007b56 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	2bff      	cmp	r3, #255	; 0xff
 8007b36:	d807      	bhi.n	8007b48 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	69b9      	ldr	r1, [r7, #24]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff ff34 	bl	80079ae <LL_GPIO_SetAFPin_0_7>
 8007b46:	e006      	b.n	8007b56 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	69b9      	ldr	r1, [r7, #24]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff ff69 	bl	8007a28 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	69b9      	ldr	r1, [r7, #24]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff fe56 	bl	8007810 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	3301      	adds	r3, #1
 8007b68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	fa22 f303 	lsr.w	r3, r2, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1af      	bne.n	8007ad8 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3720      	adds	r7, #32
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <LL_TIM_SetPrescaler>:
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007b92:	bf00      	nop
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <LL_TIM_SetAutoReload>:
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <LL_TIM_SetRepetitionCounter>:
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <LL_TIM_OC_SetCompareCH1>:
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <LL_TIM_OC_SetCompareCH2>:
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <LL_TIM_OC_SetCompareCH3>:
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <LL_TIM_OC_SetCompareCH4>:
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007c3a:	bf00      	nop
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <LL_TIM_OC_SetCompareCH5>:
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <LL_TIM_OC_SetCompareCH6>:
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	f043 0201 	orr.w	r2, r3, #1
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	615a      	str	r2, [r3, #20]
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
	...

08007ca4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a39      	ldr	r2, [pc, #228]	; (8007d9c <LL_TIM_Init+0xf8>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d00f      	beq.n	8007cdc <LL_TIM_Init+0x38>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc2:	d00b      	beq.n	8007cdc <LL_TIM_Init+0x38>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a36      	ldr	r2, [pc, #216]	; (8007da0 <LL_TIM_Init+0xfc>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d007      	beq.n	8007cdc <LL_TIM_Init+0x38>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a35      	ldr	r2, [pc, #212]	; (8007da4 <LL_TIM_Init+0x100>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d003      	beq.n	8007cdc <LL_TIM_Init+0x38>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a34      	ldr	r2, [pc, #208]	; (8007da8 <LL_TIM_Init+0x104>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d106      	bne.n	8007cea <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a2b      	ldr	r2, [pc, #172]	; (8007d9c <LL_TIM_Init+0xf8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d01b      	beq.n	8007d2a <LL_TIM_Init+0x86>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf8:	d017      	beq.n	8007d2a <LL_TIM_Init+0x86>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a28      	ldr	r2, [pc, #160]	; (8007da0 <LL_TIM_Init+0xfc>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d013      	beq.n	8007d2a <LL_TIM_Init+0x86>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a27      	ldr	r2, [pc, #156]	; (8007da4 <LL_TIM_Init+0x100>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00f      	beq.n	8007d2a <LL_TIM_Init+0x86>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a26      	ldr	r2, [pc, #152]	; (8007da8 <LL_TIM_Init+0x104>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00b      	beq.n	8007d2a <LL_TIM_Init+0x86>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a25      	ldr	r2, [pc, #148]	; (8007dac <LL_TIM_Init+0x108>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d007      	beq.n	8007d2a <LL_TIM_Init+0x86>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a24      	ldr	r2, [pc, #144]	; (8007db0 <LL_TIM_Init+0x10c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d003      	beq.n	8007d2a <LL_TIM_Init+0x86>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a23      	ldr	r2, [pc, #140]	; (8007db4 <LL_TIM_Init+0x110>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d106      	bne.n	8007d38 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ff2a 	bl	8007b9e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	881b      	ldrh	r3, [r3, #0]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff ff16 	bl	8007b82 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a10      	ldr	r2, [pc, #64]	; (8007d9c <LL_TIM_Init+0xf8>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d00f      	beq.n	8007d7e <LL_TIM_Init+0xda>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a11      	ldr	r2, [pc, #68]	; (8007da8 <LL_TIM_Init+0x104>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00b      	beq.n	8007d7e <LL_TIM_Init+0xda>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a10      	ldr	r2, [pc, #64]	; (8007dac <LL_TIM_Init+0x108>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d007      	beq.n	8007d7e <LL_TIM_Init+0xda>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a0f      	ldr	r2, [pc, #60]	; (8007db0 <LL_TIM_Init+0x10c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d003      	beq.n	8007d7e <LL_TIM_Init+0xda>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a0e      	ldr	r2, [pc, #56]	; (8007db4 <LL_TIM_Init+0x110>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d105      	bne.n	8007d8a <LL_TIM_Init+0xe6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff ff18 	bl	8007bba <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7ff ff79 	bl	8007c82 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	40012c00 	.word	0x40012c00
 8007da0:	40000400 	.word	0x40000400
 8007da4:	40000800 	.word	0x40000800
 8007da8:	40013400 	.word	0x40013400
 8007dac:	40014000 	.word	0x40014000
 8007db0:	40014400 	.word	0x40014400
 8007db4:	40014800 	.word	0x40014800

08007db8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dce:	d045      	beq.n	8007e5c <LL_TIM_OC_Init+0xa4>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd6:	d848      	bhi.n	8007e6a <LL_TIM_OC_Init+0xb2>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dde:	d036      	beq.n	8007e4e <LL_TIM_OC_Init+0x96>
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de6:	d840      	bhi.n	8007e6a <LL_TIM_OC_Init+0xb2>
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dee:	d027      	beq.n	8007e40 <LL_TIM_OC_Init+0x88>
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df6:	d838      	bhi.n	8007e6a <LL_TIM_OC_Init+0xb2>
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfe:	d018      	beq.n	8007e32 <LL_TIM_OC_Init+0x7a>
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e06:	d830      	bhi.n	8007e6a <LL_TIM_OC_Init+0xb2>
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d003      	beq.n	8007e16 <LL_TIM_OC_Init+0x5e>
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b10      	cmp	r3, #16
 8007e12:	d007      	beq.n	8007e24 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007e14:	e029      	b.n	8007e6a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 f8b5 	bl	8007f88 <OC1Config>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	75fb      	strb	r3, [r7, #23]
      break;
 8007e22:	e023      	b.n	8007e6c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007e24:	6879      	ldr	r1, [r7, #4]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f92e 	bl	8008088 <OC2Config>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e30:	e01c      	b.n	8007e6c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 f9ab 	bl	8008190 <OC3Config>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e3e:	e015      	b.n	8007e6c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 fa28 	bl	8008298 <OC4Config>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e4c:	e00e      	b.n	8007e6c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 faa5 	bl	80083a0 <OC5Config>
 8007e56:	4603      	mov	r3, r0
 8007e58:	75fb      	strb	r3, [r7, #23]
      break;
 8007e5a:	e007      	b.n	8007e6c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 fb02 	bl	8008468 <OC6Config>
 8007e64:	4603      	mov	r3, r0
 8007e66:	75fb      	strb	r3, [r7, #23]
      break;
 8007e68:	e000      	b.n	8007e6c <LL_TIM_OC_Init+0xb4>
      break;
 8007e6a:	bf00      	nop
  }

  return result;
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	7b12      	ldrb	r2, [r2, #12]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	89d2      	ldrh	r2, [r2, #14]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a21      	ldr	r2, [pc, #132]	; (8007f80 <LL_TIM_BDTR_Init+0x108>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d003      	beq.n	8007f06 <LL_TIM_BDTR_Init+0x8e>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a20      	ldr	r2, [pc, #128]	; (8007f84 <LL_TIM_BDTR_Init+0x10c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d10d      	bne.n	8007f22 <LL_TIM_BDTR_Init+0xaa>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a16      	ldr	r2, [pc, #88]	; (8007f80 <LL_TIM_BDTR_Init+0x108>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d003      	beq.n	8007f32 <LL_TIM_BDTR_Init+0xba>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <LL_TIM_BDTR_Init+0x10c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d11b      	bne.n	8007f6a <LL_TIM_BDTR_Init+0xf2>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	40012c00 	.word	0x40012c00
 8007f84:	40013400 	.word	0x40013400

08007f88 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	f023 0201 	bic.w	r2, r3, #1
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0303 	bic.w	r3, r3, #3
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f023 0202 	bic.w	r2, r3, #2
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f023 0201 	bic.w	r2, r3, #1
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a22      	ldr	r2, [pc, #136]	; (8008074 <OC1Config+0xec>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d00f      	beq.n	800800e <OC1Config+0x86>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a21      	ldr	r2, [pc, #132]	; (8008078 <OC1Config+0xf0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d00b      	beq.n	800800e <OC1Config+0x86>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a20      	ldr	r2, [pc, #128]	; (800807c <OC1Config+0xf4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d007      	beq.n	800800e <OC1Config+0x86>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a1f      	ldr	r2, [pc, #124]	; (8008080 <OC1Config+0xf8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d003      	beq.n	800800e <OC1Config+0x86>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a1e      	ldr	r2, [pc, #120]	; (8008084 <OC1Config+0xfc>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d11e      	bne.n	800804c <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f023 0208 	bic.w	r2, r3, #8
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f023 0204 	bic.w	r2, r3, #4
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4313      	orrs	r3, r2
 800802c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	4313      	orrs	r3, r2
 800803a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	4313      	orrs	r3, r2
 800804a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7ff fdb9 	bl	8007bd6 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	40012c00 	.word	0x40012c00
 8008078:	40013400 	.word	0x40013400
 800807c:	40014000 	.word	0x40014000
 8008080:	40014400 	.word	0x40014400
 8008084:	40014800 	.word	0x40014800

08008088 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	f023 0210 	bic.w	r2, r3, #16
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	6812      	ldr	r2, [r2, #0]
 80080c6:	0212      	lsls	r2, r2, #8
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f023 0220 	bic.w	r2, r3, #32
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f023 0210 	bic.w	r2, r3, #16
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	4313      	orrs	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a23      	ldr	r2, [pc, #140]	; (800817c <OC2Config+0xf4>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00f      	beq.n	8008114 <OC2Config+0x8c>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a22      	ldr	r2, [pc, #136]	; (8008180 <OC2Config+0xf8>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d00b      	beq.n	8008114 <OC2Config+0x8c>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a21      	ldr	r2, [pc, #132]	; (8008184 <OC2Config+0xfc>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d007      	beq.n	8008114 <OC2Config+0x8c>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a20      	ldr	r2, [pc, #128]	; (8008188 <OC2Config+0x100>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d003      	beq.n	8008114 <OC2Config+0x8c>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a1f      	ldr	r2, [pc, #124]	; (800818c <OC2Config+0x104>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d11f      	bne.n	8008154 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	019b      	lsls	r3, r3, #6
 8008120:	4313      	orrs	r3, r2
 8008122:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	019b      	lsls	r3, r3, #6
 8008130:	4313      	orrs	r3, r2
 8008132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4313      	orrs	r3, r2
 8008142:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	4313      	orrs	r3, r2
 8008152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff fd43 	bl	8007bf2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	40012c00 	.word	0x40012c00
 8008180:	40013400 	.word	0x40013400
 8008184:	40014000 	.word	0x40014000
 8008188:	40014400 	.word	0x40014400
 800818c:	40014800 	.word	0x40014800

08008190 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f023 0303 	bic.w	r3, r3, #3
 80081be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	4313      	orrs	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	021b      	lsls	r3, r3, #8
 80081ee:	4313      	orrs	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a23      	ldr	r2, [pc, #140]	; (8008284 <OC3Config+0xf4>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d00f      	beq.n	800821a <OC3Config+0x8a>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a22      	ldr	r2, [pc, #136]	; (8008288 <OC3Config+0xf8>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00b      	beq.n	800821a <OC3Config+0x8a>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a21      	ldr	r2, [pc, #132]	; (800828c <OC3Config+0xfc>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d007      	beq.n	800821a <OC3Config+0x8a>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a20      	ldr	r2, [pc, #128]	; (8008290 <OC3Config+0x100>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d003      	beq.n	800821a <OC3Config+0x8a>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a1f      	ldr	r2, [pc, #124]	; (8008294 <OC3Config+0x104>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d11f      	bne.n	800825a <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	029b      	lsls	r3, r3, #10
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	029b      	lsls	r3, r3, #10
 8008236:	4313      	orrs	r3, r2
 8008238:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	011b      	lsls	r3, r3, #4
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	015b      	lsls	r3, r3, #5
 8008256:	4313      	orrs	r3, r2
 8008258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff fcce 	bl	8007c0e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	40012c00 	.word	0x40012c00
 8008288:	40013400 	.word	0x40013400
 800828c:	40014000 	.word	0x40014000
 8008290:	40014400 	.word	0x40014400
 8008294:	40014800 	.word	0x40014800

08008298 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	6812      	ldr	r2, [r2, #0]
 80082d6:	0212      	lsls	r2, r2, #8
 80082d8:	4313      	orrs	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	031b      	lsls	r3, r3, #12
 80082e8:	4313      	orrs	r3, r2
 80082ea:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	031b      	lsls	r3, r3, #12
 80082f8:	4313      	orrs	r3, r2
 80082fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a23      	ldr	r2, [pc, #140]	; (800838c <OC4Config+0xf4>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d00f      	beq.n	8008324 <OC4Config+0x8c>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a22      	ldr	r2, [pc, #136]	; (8008390 <OC4Config+0xf8>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00b      	beq.n	8008324 <OC4Config+0x8c>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a21      	ldr	r2, [pc, #132]	; (8008394 <OC4Config+0xfc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d007      	beq.n	8008324 <OC4Config+0x8c>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a20      	ldr	r2, [pc, #128]	; (8008398 <OC4Config+0x100>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d003      	beq.n	8008324 <OC4Config+0x8c>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a1f      	ldr	r2, [pc, #124]	; (800839c <OC4Config+0x104>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d11f      	bne.n	8008364 <OC4Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	039b      	lsls	r3, r3, #14
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	039b      	lsls	r3, r3, #14
 8008340:	4313      	orrs	r3, r2
 8008342:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	019b      	lsls	r3, r3, #6
 8008350:	4313      	orrs	r3, r2
 8008352:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	01db      	lsls	r3, r3, #7
 8008360:	4313      	orrs	r3, r2
 8008362:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff fc57 	bl	8007c2a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3718      	adds	r7, #24
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	40012c00 	.word	0x40012c00
 8008390:	40013400 	.word	0x40013400
 8008394:	40014000 	.word	0x40014000
 8008398:	40014400 	.word	0x40014400
 800839c:	40014800 	.word	0x40014800

080083a0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	6812      	ldr	r2, [r2, #0]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	041b      	lsls	r3, r3, #16
 80083e0:	4313      	orrs	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	041b      	lsls	r3, r3, #16
 80083f0:	4313      	orrs	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a17      	ldr	r2, [pc, #92]	; (8008454 <OC5Config+0xb4>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00f      	beq.n	800841c <OC5Config+0x7c>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a16      	ldr	r2, [pc, #88]	; (8008458 <OC5Config+0xb8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00b      	beq.n	800841c <OC5Config+0x7c>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a15      	ldr	r2, [pc, #84]	; (800845c <OC5Config+0xbc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d007      	beq.n	800841c <OC5Config+0x7c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a14      	ldr	r2, [pc, #80]	; (8008460 <OC5Config+0xc0>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d003      	beq.n	800841c <OC5Config+0x7c>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a13      	ldr	r2, [pc, #76]	; (8008464 <OC5Config+0xc4>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d109      	bne.n	8008430 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	021b      	lsls	r3, r3, #8
 800842a:	431a      	orrs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff fc02 	bl	8007c46 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	40012c00 	.word	0x40012c00
 8008458:	40013400 	.word	0x40013400
 800845c:	40014000 	.word	0x40014000
 8008460:	40014400 	.word	0x40014400
 8008464:	40014800 	.word	0x40014800

08008468 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008488:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	6812      	ldr	r2, [r2, #0]
 8008498:	0212      	lsls	r2, r2, #8
 800849a:	4313      	orrs	r3, r2
 800849c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	051b      	lsls	r3, r3, #20
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	051b      	lsls	r3, r3, #20
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a16      	ldr	r2, [pc, #88]	; (800851c <OC6Config+0xb4>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d00f      	beq.n	80084e6 <OC6Config+0x7e>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a15      	ldr	r2, [pc, #84]	; (8008520 <OC6Config+0xb8>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00b      	beq.n	80084e6 <OC6Config+0x7e>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a14      	ldr	r2, [pc, #80]	; (8008524 <OC6Config+0xbc>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d007      	beq.n	80084e6 <OC6Config+0x7e>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a13      	ldr	r2, [pc, #76]	; (8008528 <OC6Config+0xc0>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d003      	beq.n	80084e6 <OC6Config+0x7e>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a12      	ldr	r2, [pc, #72]	; (800852c <OC6Config+0xc4>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d109      	bne.n	80084fa <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	029b      	lsls	r3, r3, #10
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff fbad 	bl	8007c66 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	40012c00 	.word	0x40012c00
 8008520:	40013400 	.word	0x40013400
 8008524:	40014000 	.word	0x40014000
 8008528:	40014400 	.word	0x40014400
 800852c:	40014800 	.word	0x40014800

08008530 <calcCRC>:
#include "common.h"
#include <stdio.h>
#include <stdint.h>

uint16_t calcCRC(uint8_t *buf, uint16_t len)
{
 8008530:	b480      	push	{r7}
 8008532:	b089      	sub	sp, #36	; 0x24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	807b      	strh	r3, [r7, #2]
    int i, j;
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800853c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008540:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++)
 8008542:	2300      	movs	r3, #0
 8008544:	61fb      	str	r3, [r7, #28]
 8008546:	e023      	b.n	8008590 <calcCRC+0x60>
    {
        temp = temp ^ buf[i];
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	4413      	add	r3, r2
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	4053      	eors	r3, r2
 8008556:	617b      	str	r3, [r7, #20]
        for (j = 1; j <= 8; j++)
 8008558:	2301      	movs	r3, #1
 800855a:	61bb      	str	r3, [r7, #24]
 800855c:	e012      	b.n	8008584 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	60fb      	str	r3, [r7, #12]
            temp >>=1;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	085b      	lsrs	r3, r3, #1
 800856a:	617b      	str	r3, [r7, #20]
            if (flag)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <calcCRC+0x4e>
                temp ^= 0xA001;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8008578:	f083 0301 	eor.w	r3, r3, #1
 800857c:	617b      	str	r3, [r7, #20]
        for (j = 1; j <= 8; j++)
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	3301      	adds	r3, #1
 8008582:	61bb      	str	r3, [r7, #24]
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	2b08      	cmp	r3, #8
 8008588:	dde9      	ble.n	800855e <calcCRC+0x2e>
    for (i = 0; i < len; i++)
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	3301      	adds	r3, #1
 800858e:	61fb      	str	r3, [r7, #28]
 8008590:	887b      	ldrh	r3, [r7, #2]
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	429a      	cmp	r2, r3
 8008596:	dbd7      	blt.n	8008548 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	0a1b      	lsrs	r3, r3, #8
 800859c:	613b      	str	r3, [r7, #16]
    temp = (temp << 8) | temp2;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	021b      	lsls	r3, r3, #8
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	b29b      	uxth	r3, r3
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3724      	adds	r7, #36	; 0x24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
	...

080085c0 <create_fifo>:
static uint16_t FIFO_Get(fifo* fifo, void* byte);
static bool FIFO_Gets(fifo* fifo, void* buffer, uint16_t length);
static bool FIFO_Clear(fifo* fifo);

fifo* create_fifo(uint16_t size, uint16_t element_size)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	460a      	mov	r2, r1
 80085ca:	80fb      	strh	r3, [r7, #6]
 80085cc:	4613      	mov	r3, r2
 80085ce:	80bb      	strh	r3, [r7, #4]
	fifo* ff;
	ff = (fifo*)malloc(sizeof(fifo));
 80085d0:	2030      	movs	r0, #48	; 0x30
 80085d2:	f003 fd93 	bl	800c0fc <malloc>
 80085d6:	4603      	mov	r3, r0
 80085d8:	60fb      	str	r3, [r7, #12]
	if(ff != NULL)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d036      	beq.n	800864e <create_fifo+0x8e>
	{
		memset(ff, 0, sizeof(fifo));
 80085e0:	2230      	movs	r2, #48	; 0x30
 80085e2:	2100      	movs	r1, #0
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f003 fe65 	bl	800c2b4 <memset>
		ff->size = size;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	88fa      	ldrh	r2, [r7, #6]
 80085ee:	815a      	strh	r2, [r3, #10]
		ff->size_element = element_size;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	88ba      	ldrh	r2, [r7, #4]
 80085f4:	819a      	strh	r2, [r3, #12]
		ff->Put = FIFO_Put;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	4a17      	ldr	r2, [pc, #92]	; (8008658 <create_fifo+0x98>)
 80085fa:	611a      	str	r2, [r3, #16]
		ff->Puts = FIFO_Puts;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4a17      	ldr	r2, [pc, #92]	; (800865c <create_fifo+0x9c>)
 8008600:	615a      	str	r2, [r3, #20]
		ff->Peak = FIFO_Peak;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4a16      	ldr	r2, [pc, #88]	; (8008660 <create_fifo+0xa0>)
 8008606:	619a      	str	r2, [r3, #24]
		ff->Peaks = FIFO_Peaks;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4a16      	ldr	r2, [pc, #88]	; (8008664 <create_fifo+0xa4>)
 800860c:	61da      	str	r2, [r3, #28]
		ff->Get = FIFO_Get;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	4a15      	ldr	r2, [pc, #84]	; (8008668 <create_fifo+0xa8>)
 8008612:	621a      	str	r2, [r3, #32]
		ff->Gets = FIFO_Gets;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4a15      	ldr	r2, [pc, #84]	; (800866c <create_fifo+0xac>)
 8008618:	625a      	str	r2, [r3, #36]	; 0x24
		ff->Clear = FIFO_Clear;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	4a14      	ldr	r2, [pc, #80]	; (8008670 <create_fifo+0xb0>)
 800861e:	629a      	str	r2, [r3, #40]	; 0x28
		ff->GetAvaiableSpace = FIFO_GetAvaiableSpace;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4a14      	ldr	r2, [pc, #80]	; (8008674 <create_fifo+0xb4>)
 8008624:	62da      	str	r2, [r3, #44]	; 0x2c
		ff->buffer = malloc(size * element_size);
 8008626:	88fb      	ldrh	r3, [r7, #6]
 8008628:	88ba      	ldrh	r2, [r7, #4]
 800862a:	fb02 f303 	mul.w	r3, r2, r3
 800862e:	4618      	mov	r0, r3
 8008630:	f003 fd64 	bl	800c0fc <malloc>
 8008634:	4603      	mov	r3, r0
 8008636:	461a      	mov	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	605a      	str	r2, [r3, #4]
		if(ff->buffer != NULL) return ff;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <create_fifo+0x88>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	e003      	b.n	8008650 <create_fifo+0x90>
		else
			free(ff);
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f003 fd5f 	bl	800c10c <free>
	}
	return NULL;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	080086a3 	.word	0x080086a3
 800865c:	0800871b 	.word	0x0800871b
 8008660:	08008793 	.word	0x08008793
 8008664:	080087dd 	.word	0x080087dd
 8008668:	08008857 	.word	0x08008857
 800866c:	080088db 	.word	0x080088db
 8008670:	08008937 	.word	0x08008937
 8008674:	08008679 	.word	0x08008679

08008678 <FIFO_GetAvaiableSpace>:

uint16_t FIFO_GetAvaiableSpace(fifo* fifo)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
	if(fifo == NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <FIFO_GetAvaiableSpace+0x12>
		return 0;
 8008686:	2300      	movs	r3, #0
 8008688:	e005      	b.n	8008696 <FIFO_GetAvaiableSpace+0x1e>
    return (fifo->size - fifo->data_len);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	895a      	ldrh	r2, [r3, #10]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	891b      	ldrh	r3, [r3, #8]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	b29b      	uxth	r3, r3
}
 8008696:	4618      	mov	r0, r3
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <FIFO_Put>:

static bool FIFO_Put(fifo* fifo, void* byte)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
	if(fifo == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <FIFO_Put+0x14>
		return false;
 80086b2:	2300      	movs	r3, #0
 80086b4:	e02d      	b.n	8008712 <FIFO_Put+0x70>
    if(fifo->data_len < fifo->size)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	891a      	ldrh	r2, [r3, #8]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	895b      	ldrh	r3, [r3, #10]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d226      	bcs.n	8008710 <FIFO_Put+0x6e>
    {
      memcpy(&(fifo->buffer[fifo->write_idx*fifo->size_element]), byte, fifo->size_element);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	8852      	ldrh	r2, [r2, #2]
 80086ca:	4611      	mov	r1, r2
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	8992      	ldrh	r2, [r2, #12]
 80086d0:	fb01 f202 	mul.w	r2, r1, r2
 80086d4:	1898      	adds	r0, r3, r2
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	899b      	ldrh	r3, [r3, #12]
 80086da:	461a      	mov	r2, r3
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	f003 fe43 	bl	800c368 <memcpy>
      fifo->write_idx++;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	885b      	ldrh	r3, [r3, #2]
 80086e6:	3301      	adds	r3, #1
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	805a      	strh	r2, [r3, #2]
      fifo->data_len++;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	891b      	ldrh	r3, [r3, #8]
 80086f2:	3301      	adds	r3, #1
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	811a      	strh	r2, [r3, #8]
      if(fifo->write_idx == fifo->size)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	885a      	ldrh	r2, [r3, #2]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	895b      	ldrh	r3, [r3, #10]
 8008702:	429a      	cmp	r2, r3
 8008704:	d102      	bne.n	800870c <FIFO_Put+0x6a>
        fifo->write_idx = 0;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	805a      	strh	r2, [r3, #2]
      return true;
 800870c:	2301      	movs	r3, #1
 800870e:	e000      	b.n	8008712 <FIFO_Put+0x70>
    }
    return false;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <FIFO_Puts>:

bool FIFO_Puts(fifo* fifo, void* buffer, uint16_t length   )
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b086      	sub	sp, #24
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	4613      	mov	r3, r2
 8008726:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint8_t* ptr = (uint8_t*)buffer;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	613b      	str	r3, [r7, #16]
	if(fifo == NULL)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <FIFO_Puts+0x1c>
		return false;
 8008732:	2300      	movs	r3, #0
 8008734:	e029      	b.n	800878a <FIFO_Puts+0x70>
    if( length <= FIFO_GetAvaiableSpace(fifo))
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f7ff ff9e 	bl	8008678 <FIFO_GetAvaiableSpace>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	4293      	cmp	r3, r2
 8008744:	d81e      	bhi.n	8008784 <FIFO_Puts+0x6a>
    {
        for(i = 0; i < length; i++)
 8008746:	2300      	movs	r3, #0
 8008748:	82fb      	strh	r3, [r7, #22]
 800874a:	e016      	b.n	800877a <FIFO_Puts+0x60>
        if(FIFO_Put(fifo, ptr + i*fifo->size_element) == 0)
 800874c:	8afb      	ldrh	r3, [r7, #22]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	8992      	ldrh	r2, [r2, #12]
 8008752:	fb02 f303 	mul.w	r3, r2, r3
 8008756:	461a      	mov	r2, r3
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	4413      	add	r3, r2
 800875c:	4619      	mov	r1, r3
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f7ff ff9f 	bl	80086a2 <FIFO_Put>
 8008764:	4603      	mov	r3, r0
 8008766:	f083 0301 	eor.w	r3, r3, #1
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <FIFO_Puts+0x5a>
            return false;
 8008770:	2300      	movs	r3, #0
 8008772:	e00a      	b.n	800878a <FIFO_Puts+0x70>
        for(i = 0; i < length; i++)
 8008774:	8afb      	ldrh	r3, [r7, #22]
 8008776:	3301      	adds	r3, #1
 8008778:	82fb      	strh	r3, [r7, #22]
 800877a:	8afa      	ldrh	r2, [r7, #22]
 800877c:	88fb      	ldrh	r3, [r7, #6]
 800877e:	429a      	cmp	r2, r3
 8008780:	d3e4      	bcc.n	800874c <FIFO_Puts+0x32>
 8008782:	e001      	b.n	8008788 <FIFO_Puts+0x6e>
    }
    else
        return false;
 8008784:	2300      	movs	r3, #0
 8008786:	e000      	b.n	800878a <FIFO_Puts+0x70>
    return true;
 8008788:	2301      	movs	r3, #1
}
 800878a:	4618      	mov	r0, r3
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <FIFO_Peak>:

bool FIFO_Peak(fifo* fifo, void* data)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
	if(fifo == NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <FIFO_Peak+0x14>
		return false;
 80087a2:	2300      	movs	r3, #0
 80087a4:	e016      	b.n	80087d4 <FIFO_Peak+0x42>
    if(fifo->data_len > 0)       // it empty
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	891b      	ldrh	r3, [r3, #8]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d011      	beq.n	80087d2 <FIFO_Peak+0x40>
    {
    	memcpy(data, &(fifo->buffer[fifo->read_idx*fifo->size_element]), fifo->size_element);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	8812      	ldrh	r2, [r2, #0]
 80087b6:	4611      	mov	r1, r2
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	8992      	ldrh	r2, [r2, #12]
 80087bc:	fb01 f202 	mul.w	r2, r1, r2
 80087c0:	1899      	adds	r1, r3, r2
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	899b      	ldrh	r3, [r3, #12]
 80087c6:	461a      	mov	r2, r3
 80087c8:	6838      	ldr	r0, [r7, #0]
 80087ca:	f003 fdcd 	bl	800c368 <memcpy>
      return true;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <FIFO_Peak+0x42>
    }
    else
        return false;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <FIFO_Peaks>:

bool FIFO_Peaks(fifo* fifo, void* data, uint16_t len)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
	uint16_t index;
	uint8_t* ptr_data = (uint8_t*)data;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	613b      	str	r3, [r7, #16]
	if(fifo == NULL)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <FIFO_Peaks+0x1c>
		return false;
 80087f4:	2300      	movs	r3, #0
 80087f6:	e02a      	b.n	800884e <FIFO_Peaks+0x72>
    if(fifo->data_len >= len)       // it empty
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	891b      	ldrh	r3, [r3, #8]
 80087fc:	88fa      	ldrh	r2, [r7, #6]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d824      	bhi.n	800884c <FIFO_Peaks+0x70>
    {
    	for(index = 0; index < len; index++)
 8008802:	2300      	movs	r3, #0
 8008804:	82fb      	strh	r3, [r7, #22]
 8008806:	e01b      	b.n	8008840 <FIFO_Peaks+0x64>
    		memcpy(ptr_data + index*fifo->size_element, &(fifo->buffer[(fifo->read_idx + index)*fifo->size_element]), fifo->size_element);
 8008808:	8afb      	ldrh	r3, [r7, #22]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	8992      	ldrh	r2, [r2, #12]
 800880e:	fb02 f303 	mul.w	r3, r2, r3
 8008812:	461a      	mov	r2, r3
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	1898      	adds	r0, r3, r2
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	8812      	ldrh	r2, [r2, #0]
 8008820:	4611      	mov	r1, r2
 8008822:	8afa      	ldrh	r2, [r7, #22]
 8008824:	440a      	add	r2, r1
 8008826:	68f9      	ldr	r1, [r7, #12]
 8008828:	8989      	ldrh	r1, [r1, #12]
 800882a:	fb01 f202 	mul.w	r2, r1, r2
 800882e:	1899      	adds	r1, r3, r2
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	899b      	ldrh	r3, [r3, #12]
 8008834:	461a      	mov	r2, r3
 8008836:	f003 fd97 	bl	800c368 <memcpy>
    	for(index = 0; index < len; index++)
 800883a:	8afb      	ldrh	r3, [r7, #22]
 800883c:	3301      	adds	r3, #1
 800883e:	82fb      	strh	r3, [r7, #22]
 8008840:	8afa      	ldrh	r2, [r7, #22]
 8008842:	88fb      	ldrh	r3, [r7, #6]
 8008844:	429a      	cmp	r2, r3
 8008846:	d3df      	bcc.n	8008808 <FIFO_Peaks+0x2c>
      return true;
 8008848:	2301      	movs	r3, #1
 800884a:	e000      	b.n	800884e <FIFO_Peaks+0x72>
    }
    else
        return false;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <FIFO_Get>:

uint16_t FIFO_Get(fifo* fifo, void* byte)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
	if(fifo == NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <FIFO_Get+0x14>
		return 0;
 8008866:	2300      	movs	r3, #0
 8008868:	e033      	b.n	80088d2 <FIFO_Get+0x7c>
    if(fifo->data_len > 0)       // it empty
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	891b      	ldrh	r3, [r3, #8]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d02e      	beq.n	80088d0 <FIFO_Get+0x7a>
    {
    	memcpy(byte, &(fifo->buffer[fifo->read_idx*fifo->size_element]), fifo->size_element);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	8812      	ldrh	r2, [r2, #0]
 800887a:	4611      	mov	r1, r2
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	8992      	ldrh	r2, [r2, #12]
 8008880:	fb01 f202 	mul.w	r2, r1, r2
 8008884:	1899      	adds	r1, r3, r2
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	899b      	ldrh	r3, [r3, #12]
 800888a:	461a      	mov	r2, r3
 800888c:	6838      	ldr	r0, [r7, #0]
 800888e:	f003 fd6b 	bl	800c368 <memcpy>
      fifo->read_idx++;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	3301      	adds	r3, #1
 8008898:	b29a      	uxth	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	801a      	strh	r2, [r3, #0]
      fifo->data_len--;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	891b      	ldrh	r3, [r3, #8]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	811a      	strh	r2, [r3, #8]
      if(fifo->read_idx == fifo->size)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	881a      	ldrh	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	895b      	ldrh	r3, [r3, #10]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d102      	bne.n	80088bc <FIFO_Get+0x66>
        fifo->read_idx = 0;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	801a      	strh	r2, [r3, #0]
      if(fifo->data_len == 0) fifo->write_idx = fifo->read_idx;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	891b      	ldrh	r3, [r3, #8]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d103      	bne.n	80088cc <FIFO_Get+0x76>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	881a      	ldrh	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	805a      	strh	r2, [r3, #2]
      return 1;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e000      	b.n	80088d2 <FIFO_Get+0x7c>
    }
    return 0;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <FIFO_Gets>:

bool FIFO_Gets(fifo* fifo, void* buffer, uint16_t length)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b086      	sub	sp, #24
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	4613      	mov	r3, r2
 80088e6:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	if(fifo == NULL)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <FIFO_Gets+0x18>
		return false;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e01d      	b.n	800892e <FIFO_Gets+0x54>
    if(length <= fifo->data_len)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	891b      	ldrh	r3, [r3, #8]
 80088f6:	88fa      	ldrh	r2, [r7, #6]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d817      	bhi.n	800892c <FIFO_Gets+0x52>
    {
        for(i = 0; i < length; i++)
 80088fc:	2300      	movs	r3, #0
 80088fe:	82fb      	strh	r3, [r7, #22]
 8008900:	e00e      	b.n	8008920 <FIFO_Gets+0x46>
          FIFO_Get(fifo, (buffer + i*fifo->size_element));
 8008902:	8afb      	ldrh	r3, [r7, #22]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	8992      	ldrh	r2, [r2, #12]
 8008908:	fb02 f303 	mul.w	r3, r2, r3
 800890c:	461a      	mov	r2, r3
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	4413      	add	r3, r2
 8008912:	4619      	mov	r1, r3
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f7ff ff9e 	bl	8008856 <FIFO_Get>
        for(i = 0; i < length; i++)
 800891a:	8afb      	ldrh	r3, [r7, #22]
 800891c:	3301      	adds	r3, #1
 800891e:	82fb      	strh	r3, [r7, #22]
 8008920:	8afa      	ldrh	r2, [r7, #22]
 8008922:	88fb      	ldrh	r3, [r7, #6]
 8008924:	429a      	cmp	r2, r3
 8008926:	d3ec      	bcc.n	8008902 <FIFO_Gets+0x28>
        return true;
 8008928:	2301      	movs	r3, #1
 800892a:	e000      	b.n	800892e <FIFO_Gets+0x54>
    }
    return false;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <FIFO_Clear>:

bool FIFO_Clear(fifo* fifo)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
	if(fifo == NULL)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <FIFO_Clear+0x12>
		return false;
 8008944:	2300      	movs	r3, #0
 8008946:	e007      	b.n	8008958 <FIFO_Clear+0x22>
	fifo->data_len = 0;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	811a      	strh	r2, [r3, #8]
	fifo->read_idx = fifo->write_idx;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	885a      	ldrh	r2, [r3, #2]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	801a      	strh	r2, [r3, #0]
	return true;
 8008956:	2301      	movs	r3, #1
}
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <ModbusResetValue>:
static void ModbusResetValue(volatile m_modbus_obj *mb_obj);
static void ModbusGetData(m_modbus_obj *mb_obj);


static void ModbusResetValue(volatile m_modbus_obj *mb_obj)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
    int i;
    for(i = 0; i < RXSIZE; i++)
 800896c:	2300      	movs	r3, #0
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	e008      	b.n	8008984 <ModbusResetValue+0x20>
    {
        mb_obj->rdata[i] = 0;
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4413      	add	r3, r2
 8008978:	330c      	adds	r3, #12
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < RXSIZE; i++)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3301      	adds	r3, #1
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b63      	cmp	r3, #99	; 0x63
 8008988:	ddf3      	ble.n	8008972 <ModbusResetValue+0xe>
    }

    for(i = 0; i < TXSIZE; i++)
 800898a:	2300      	movs	r3, #0
 800898c:	60fb      	str	r3, [r7, #12]
 800898e:	e008      	b.n	80089a2 <ModbusResetValue+0x3e>
    {
        mb_obj->sdata[i] = 0;
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	4413      	add	r3, r2
 8008996:	3370      	adds	r3, #112	; 0x70
 8008998:	2200      	movs	r2, #0
 800899a:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < TXSIZE; i++)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	3301      	adds	r3, #1
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b63      	cmp	r3, #99	; 0x63
 80089a6:	ddf3      	ble.n	8008990 <ModbusResetValue+0x2c>
    }

    mb_obj->rcount = 0;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    mb_obj->scount = 0;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    mb_obj->tick = 0;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
}
 80089c0:	bf00      	nop
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <ModbusGetData>:

static void ModbusGetData(m_modbus_obj *mb_obj) // Get Function
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
    uint16_t crc;
    if(mb_obj->tick >= RXTIMEOUT)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80089da:	2b09      	cmp	r3, #9
 80089dc:	dd7e      	ble.n	8008adc <ModbusGetData+0x110>
    {
        mb_obj->tick = 0;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        if(mb_obj->rcount >= 8)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80089ec:	2b07      	cmp	r3, #7
 80089ee:	dd71      	ble.n	8008ad4 <ModbusGetData+0x108>
        {
            if( mb_obj->rdata[0] == mb_obj->modbus.id)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	7b1b      	ldrb	r3, [r3, #12]
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	881b      	ldrh	r3, [r3, #0]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d166      	bne.n	8008acc <ModbusGetData+0x100>
            {
                switch(mb_obj->rdata[1])
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	7b5b      	ldrb	r3, [r3, #13]
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d002      	beq.n	8008a0c <ModbusGetData+0x40>
 8008a06:	2b10      	cmp	r3, #16
 8008a08:	d026      	beq.n	8008a58 <ModbusGetData+0x8c>
 8008a0a:	e057      	b.n	8008abc <ModbusGetData+0xf0>
                {
                case 0x03:
                    if(mb_obj->rcount >= 8)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008a12:	2b07      	cmp	r3, #7
 8008a14:	dd57      	ble.n	8008ac6 <ModbusGetData+0xfa>
                    {
                        crc = calcCRC(mb_obj->rdata, 6);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	330c      	adds	r3, #12
 8008a1a:	2106      	movs	r1, #6
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff fd87 	bl	8008530 <calcCRC>
 8008a22:	4603      	mov	r3, r0
 8008a24:	81fb      	strh	r3, [r7, #14]
                        if((mb_obj->rdata[6] == (crc >> 8 & 0xFF)) && (mb_obj->rdata[7] == (crc & 0xFF)))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	7c9b      	ldrb	r3, [r3, #18]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	89fb      	ldrh	r3, [r7, #14]
 8008a2e:	0a1b      	lsrs	r3, r3, #8
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d146      	bne.n	8008ac6 <ModbusGetData+0xfa>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	7cdb      	ldrb	r3, [r3, #19]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	89fb      	ldrh	r3, [r7, #14]
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d13f      	bne.n	8008ac6 <ModbusGetData+0xfa>
                        {
                            mb_obj->RcvTask = &ModbusCreateData;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a26      	ldr	r2, [pc, #152]	; (8008ae4 <ModbusGetData+0x118>)
 8008a4a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                            mb_obj->tick = 0;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                        }
                    }
                    break;
 8008a56:	e036      	b.n	8008ac6 <ModbusGetData+0xfa>
                case 0x10:
                    crc = calcCRC(mb_obj->rdata, mb_obj->rcount - 2);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f103 020c 	add.w	r2, r3, #12
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	3b02      	subs	r3, #2
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	f7ff fd5f 	bl	8008530 <calcCRC>
 8008a72:	4603      	mov	r3, r0
 8008a74:	81fb      	strh	r3, [r7, #14]
                    if((mb_obj->rdata[mb_obj->rcount - 2] == (crc >> 8 & 0xFF)) && (mb_obj->rdata[mb_obj->rcount - 1] == (crc & 0xFF)))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008a7c:	3b02      	subs	r3, #2
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	4413      	add	r3, r2
 8008a82:	7b1b      	ldrb	r3, [r3, #12]
 8008a84:	461a      	mov	r2, r3
 8008a86:	89fb      	ldrh	r3, [r7, #14]
 8008a88:	0a1b      	lsrs	r3, r3, #8
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d11b      	bne.n	8008aca <ModbusGetData+0xfe>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	7b1b      	ldrb	r3, [r3, #12]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	89fb      	ldrh	r3, [r7, #14]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d10f      	bne.n	8008aca <ModbusGetData+0xfe>
                    {
                        mb_obj->RcvTask = &ModbusSetData;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a0e      	ldr	r2, [pc, #56]	; (8008ae8 <ModbusGetData+0x11c>)
 8008aae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                        mb_obj->tick = 0;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                    }
                    break;
 8008aba:	e006      	b.n	8008aca <ModbusGetData+0xfe>
                default:
                    mb_obj->tick = 0;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8008ac4:	e002      	b.n	8008acc <ModbusGetData+0x100>
                    break;
 8008ac6:	bf00      	nop
 8008ac8:	e000      	b.n	8008acc <ModbusGetData+0x100>
                    break;
 8008aca:	bf00      	nop
                }
            }
            mb_obj->rcount = 0;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        }
        mb_obj->rcount = 0;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }
}
 8008adc:	bf00      	nop
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	08008cd5 	.word	0x08008cd5
 8008ae8:	08008aed 	.word	0x08008aed

08008aec <ModbusSetData>:
static void ModbusSetData(m_modbus_obj *mb_obj)
{
 8008aec:	b590      	push	{r4, r7, lr}
 8008aee:	b089      	sub	sp, #36	; 0x24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
    int i, j, k;
    uint16_t crc;
    uint16_t addrData;
    uint16_t sizeData;
    uint16_t *ptr_data = NULL;
 8008af4:	2300      	movs	r3, #0
 8008af6:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < 6; i++)
 8008af8:	2300      	movs	r3, #0
 8008afa:	61fb      	str	r3, [r7, #28]
 8008afc:	e00d      	b.n	8008b1a <ModbusSetData+0x2e>
    {
        mb_obj->sdata[i] = mb_obj->rdata[i];
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	4413      	add	r3, r2
 8008b04:	330c      	adds	r3, #12
 8008b06:	7819      	ldrb	r1, [r3, #0]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	3370      	adds	r3, #112	; 0x70
 8008b10:	460a      	mov	r2, r1
 8008b12:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < 6; i++)
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	3301      	adds	r3, #1
 8008b18:	61fb      	str	r3, [r7, #28]
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	2b05      	cmp	r3, #5
 8008b1e:	ddee      	ble.n	8008afe <ModbusSetData+0x12>
    }

    addrData = mb_obj->rdata[2] << 8 | mb_obj->rdata[3];
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	7b9b      	ldrb	r3, [r3, #14]
 8008b24:	021b      	lsls	r3, r3, #8
 8008b26:	b21a      	sxth	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	7bdb      	ldrb	r3, [r3, #15]
 8008b2c:	b21b      	sxth	r3, r3
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	b21b      	sxth	r3, r3
 8008b32:	827b      	strh	r3, [r7, #18]
    sizeData = mb_obj->rdata[4] << 8 | mb_obj->rdata[5];
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	7c1b      	ldrb	r3, [r3, #16]
 8008b38:	021b      	lsls	r3, r3, #8
 8008b3a:	b21a      	sxth	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	7c5b      	ldrb	r3, [r3, #17]
 8008b40:	b21b      	sxth	r3, r3
 8008b42:	4313      	orrs	r3, r2
 8008b44:	b21b      	sxth	r3, r3
 8008b46:	817b      	strh	r3, [r7, #10]
    if(sizeData > (TXSIZE - 6))
 8008b48:	897b      	ldrh	r3, [r7, #10]
 8008b4a:	2b5e      	cmp	r3, #94	; 0x5e
 8008b4c:	d907      	bls.n	8008b5e <ModbusSetData+0x72>
    {
        mb_obj->RcvTask = &ModbusGetData;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a5d      	ldr	r2, [pc, #372]	; (8008cc8 <ModbusSetData+0x1dc>)
 8008b52:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        mb_obj->tick = 0;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    }
    for(j = 0; j < MAX_VAR_SHOW; j++)
 8008b5e:	2300      	movs	r3, #0
 8008b60:	61bb      	str	r3, [r7, #24]
 8008b62:	e044      	b.n	8008bee <ModbusSetData+0x102>
    {
        if(data_list[j].data != NULL)
 8008b64:	4959      	ldr	r1, [pc, #356]	; (8008ccc <ModbusSetData+0x1e0>)
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	440b      	add	r3, r1
 8008b72:	3304      	adds	r3, #4
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d036      	beq.n	8008be8 <ModbusSetData+0xfc>
        {
            if(addrData >= data_list[j].start_addr && addrData <= data_list[j].start_addr + data_list[j].len)
 8008b7a:	4954      	ldr	r1, [pc, #336]	; (8008ccc <ModbusSetData+0x1e0>)
 8008b7c:	69ba      	ldr	r2, [r7, #24]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	005b      	lsls	r3, r3, #1
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	440b      	add	r3, r1
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	8a7a      	ldrh	r2, [r7, #18]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d32b      	bcc.n	8008be8 <ModbusSetData+0xfc>
 8008b90:	8a79      	ldrh	r1, [r7, #18]
 8008b92:	484e      	ldr	r0, [pc, #312]	; (8008ccc <ModbusSetData+0x1e0>)
 8008b94:	69ba      	ldr	r2, [r7, #24]
 8008b96:	4613      	mov	r3, r2
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4403      	add	r3, r0
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	461c      	mov	r4, r3
 8008ba4:	4849      	ldr	r0, [pc, #292]	; (8008ccc <ModbusSetData+0x1e0>)
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4403      	add	r3, r0
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	4423      	add	r3, r4
 8008bb8:	4299      	cmp	r1, r3
 8008bba:	dc15      	bgt.n	8008be8 <ModbusSetData+0xfc>
            {
                ptr_data = (uint16_t *)data_list[j].data;
 8008bbc:	4943      	ldr	r1, [pc, #268]	; (8008ccc <ModbusSetData+0x1e0>)
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	4413      	add	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	440b      	add	r3, r1
 8008bca:	3304      	adds	r3, #4
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	60fb      	str	r3, [r7, #12]
                addrData = addrData - data_list[j].start_addr;
 8008bd0:	493e      	ldr	r1, [pc, #248]	; (8008ccc <ModbusSetData+0x1e0>)
 8008bd2:	69ba      	ldr	r2, [r7, #24]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	440b      	add	r3, r1
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	8a7a      	ldrh	r2, [r7, #18]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	827b      	strh	r3, [r7, #18]
                break;
 8008be6:	e005      	b.n	8008bf4 <ModbusSetData+0x108>
    for(j = 0; j < MAX_VAR_SHOW; j++)
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	3301      	adds	r3, #1
 8008bec:	61bb      	str	r3, [r7, #24]
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	2b09      	cmp	r3, #9
 8008bf2:	ddb7      	ble.n	8008b64 <ModbusSetData+0x78>
            }
        }
    }
    if(ptr_data == NULL)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d104      	bne.n	8008c04 <ModbusSetData+0x118>
    {
        mb_obj->RcvTask = &ModbusGetData;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a32      	ldr	r2, [pc, #200]	; (8008cc8 <ModbusSetData+0x1dc>)
 8008bfe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        return;
 8008c02:	e05e      	b.n	8008cc2 <ModbusSetData+0x1d6>
    }

    k = 7;
 8008c04:	2307      	movs	r3, #7
 8008c06:	617b      	str	r3, [r7, #20]
//        *(ptr_data + addrData + 1) = (mb_obj->rdata[k+2] << 8) + mb_obj->rdata[k+3];
//        addrData += 2;
//        k += 4;
//    }

    for(j = 0; j < sizeData; j++)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	61bb      	str	r3, [r7, #24]
 8008c0c:	e01d      	b.n	8008c4a <ModbusSetData+0x15e>
    {
        *((uint16_t*)ptr_data + addrData) = (uint16_t)(((uint16_t)mb_obj->rdata[k] << 8) + (uint16_t)mb_obj->rdata[k + 1]);
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	4413      	add	r3, r2
 8008c14:	330c      	adds	r3, #12
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	021b      	lsls	r3, r3, #8
 8008c1c:	b299      	uxth	r1, r3
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	3301      	adds	r3, #1
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	4413      	add	r3, r2
 8008c26:	7b1b      	ldrb	r3, [r3, #12]
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	8a7b      	ldrh	r3, [r7, #18]
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	4403      	add	r3, r0
 8008c32:	440a      	add	r2, r1
 8008c34:	b292      	uxth	r2, r2
 8008c36:	801a      	strh	r2, [r3, #0]
        k = k + 2;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	3302      	adds	r3, #2
 8008c3c:	617b      	str	r3, [r7, #20]
        addrData += 1;
 8008c3e:	8a7b      	ldrh	r3, [r7, #18]
 8008c40:	3301      	adds	r3, #1
 8008c42:	827b      	strh	r3, [r7, #18]
    for(j = 0; j < sizeData; j++)
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	3301      	adds	r3, #1
 8008c48:	61bb      	str	r3, [r7, #24]
 8008c4a:	897b      	ldrh	r3, [r7, #10]
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	dbdd      	blt.n	8008c0e <ModbusSetData+0x122>
    }

    crc = calcCRC(mb_obj->sdata, i);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3370      	adds	r3, #112	; 0x70
 8008c56:	69fa      	ldr	r2, [r7, #28]
 8008c58:	b292      	uxth	r2, r2
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7ff fc67 	bl	8008530 <calcCRC>
 8008c62:	4603      	mov	r3, r0
 8008c64:	813b      	strh	r3, [r7, #8]
    mb_obj->sdata[i++] = (crc >> 8) & 0xFF;
 8008c66:	893b      	ldrh	r3, [r7, #8]
 8008c68:	0a1b      	lsrs	r3, r3, #8
 8008c6a:	b299      	uxth	r1, r3
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	1c5a      	adds	r2, r3, #1
 8008c70:	61fa      	str	r2, [r7, #28]
 8008c72:	b2c9      	uxtb	r1, r1
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	4413      	add	r3, r2
 8008c78:	460a      	mov	r2, r1
 8008c7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    mb_obj->sdata[i++] = crc & 0xFF;
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	1c5a      	adds	r2, r3, #1
 8008c82:	61fa      	str	r2, [r7, #28]
 8008c84:	893a      	ldrh	r2, [r7, #8]
 8008c86:	b2d1      	uxtb	r1, r2
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	460a      	mov	r2, r1
 8008c8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    mb_obj->sSend = i;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	69fa      	ldr	r2, [r7, #28]
 8008c96:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    if(mb_obj->modbus.SetReDe != NULL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <ModbusSetData+0x1be>
    	mb_obj->modbus.SetReDe(0);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	4798      	blx	r3
    mb_obj->RcvTask = &ModbusSendData;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a08      	ldr	r2, [pc, #32]	; (8008cd0 <ModbusSetData+0x1e4>)
 8008cae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    mb_obj->tick = 0;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    mb_obj->scount = 0;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

}
 8008cc2:	3724      	adds	r7, #36	; 0x24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd90      	pop	{r4, r7, pc}
 8008cc8:	080089cd 	.word	0x080089cd
 8008ccc:	20000800 	.word	0x20000800
 8008cd0:	08008ef1 	.word	0x08008ef1

08008cd4 <ModbusCreateData>:
static void ModbusCreateData(m_modbus_obj *mb_obj)
{
 8008cd4:	b590      	push	{r4, r7, lr}
 8008cd6:	b089      	sub	sp, #36	; 0x24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
    int i, j;
    uint16_t crc;
    uint16_t addrData;
    uint16_t sizeData;
    uint16_t *ptr_data = NULL;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	613b      	str	r3, [r7, #16]
    for(i = 0; i < 2; i++)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61fb      	str	r3, [r7, #28]
 8008ce4:	e00d      	b.n	8008d02 <ModbusCreateData+0x2e>
    {
        mb_obj->sdata[i] = mb_obj->rdata[i];
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	4413      	add	r3, r2
 8008cec:	330c      	adds	r3, #12
 8008cee:	7819      	ldrb	r1, [r3, #0]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	3370      	adds	r3, #112	; 0x70
 8008cf8:	460a      	mov	r2, r1
 8008cfa:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < 2; i++)
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	61fb      	str	r3, [r7, #28]
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	ddee      	ble.n	8008ce6 <ModbusCreateData+0x12>
    }

    addrData = mb_obj->rdata[2] << 8 | mb_obj->rdata[3];
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	7b9b      	ldrb	r3, [r3, #14]
 8008d0c:	021b      	lsls	r3, r3, #8
 8008d0e:	b21a      	sxth	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	7bdb      	ldrb	r3, [r3, #15]
 8008d14:	b21b      	sxth	r3, r3
 8008d16:	4313      	orrs	r3, r2
 8008d18:	b21b      	sxth	r3, r3
 8008d1a:	82fb      	strh	r3, [r7, #22]
    sizeData = mb_obj->rdata[4] << 8 | mb_obj->rdata[5];
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	7c1b      	ldrb	r3, [r3, #16]
 8008d20:	021b      	lsls	r3, r3, #8
 8008d22:	b21a      	sxth	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	7c5b      	ldrb	r3, [r3, #17]
 8008d28:	b21b      	sxth	r3, r3
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	b21b      	sxth	r3, r3
 8008d2e:	81fb      	strh	r3, [r7, #14]

    mb_obj->sdata[i++] = sizeData * 2;
 8008d30:	89fb      	ldrh	r3, [r7, #14]
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	1c59      	adds	r1, r3, #1
 8008d38:	61f9      	str	r1, [r7, #28]
 8008d3a:	0052      	lsls	r2, r2, #1
 8008d3c:	b2d1      	uxtb	r1, r2
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	4413      	add	r3, r2
 8008d42:	460a      	mov	r2, r1
 8008d44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    if(sizeData * 2 > (TXSIZE - 6))
 8008d48:	89fb      	ldrh	r3, [r7, #14]
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	2b5e      	cmp	r3, #94	; 0x5e
 8008d4e:	dd04      	ble.n	8008d5a <ModbusCreateData+0x86>
    {
        mb_obj->RcvTask = &ModbusGetData;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a64      	ldr	r2, [pc, #400]	; (8008ee4 <ModbusCreateData+0x210>)
 8008d54:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        return;           // over len buff
 8008d58:	e0c0      	b.n	8008edc <ModbusCreateData+0x208>
    }
    for(j = 0; j < MAX_VAR_SHOW; j++)
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	61bb      	str	r3, [r7, #24]
 8008d5e:	e044      	b.n	8008dea <ModbusCreateData+0x116>
    {
        if(data_list[j].data != NULL)
 8008d60:	4961      	ldr	r1, [pc, #388]	; (8008ee8 <ModbusCreateData+0x214>)
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	4613      	mov	r3, r2
 8008d66:	005b      	lsls	r3, r3, #1
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	3304      	adds	r3, #4
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d036      	beq.n	8008de4 <ModbusCreateData+0x110>
        {
            if(addrData >= data_list[j].start_addr && addrData < data_list[j].start_addr + data_list[j].len)
 8008d76:	495c      	ldr	r1, [pc, #368]	; (8008ee8 <ModbusCreateData+0x214>)
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	4413      	add	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	440b      	add	r3, r1
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	8afa      	ldrh	r2, [r7, #22]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d32b      	bcc.n	8008de4 <ModbusCreateData+0x110>
 8008d8c:	8af9      	ldrh	r1, [r7, #22]
 8008d8e:	4856      	ldr	r0, [pc, #344]	; (8008ee8 <ModbusCreateData+0x214>)
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	4613      	mov	r3, r2
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4403      	add	r3, r0
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	461c      	mov	r4, r3
 8008da0:	4851      	ldr	r0, [pc, #324]	; (8008ee8 <ModbusCreateData+0x214>)
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	4613      	mov	r3, r2
 8008da6:	005b      	lsls	r3, r3, #1
 8008da8:	4413      	add	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4403      	add	r3, r0
 8008dae:	3308      	adds	r3, #8
 8008db0:	881b      	ldrh	r3, [r3, #0]
 8008db2:	4423      	add	r3, r4
 8008db4:	4299      	cmp	r1, r3
 8008db6:	da15      	bge.n	8008de4 <ModbusCreateData+0x110>
            {
                ptr_data = (uint16_t *)data_list[j].data;
 8008db8:	494b      	ldr	r1, [pc, #300]	; (8008ee8 <ModbusCreateData+0x214>)
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	440b      	add	r3, r1
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	613b      	str	r3, [r7, #16]
                addrData = addrData - data_list[j].start_addr;
 8008dcc:	4946      	ldr	r1, [pc, #280]	; (8008ee8 <ModbusCreateData+0x214>)
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	005b      	lsls	r3, r3, #1
 8008dd4:	4413      	add	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	440b      	add	r3, r1
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	8afa      	ldrh	r2, [r7, #22]
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	82fb      	strh	r3, [r7, #22]
                break;
 8008de2:	e005      	b.n	8008df0 <ModbusCreateData+0x11c>
    for(j = 0; j < MAX_VAR_SHOW; j++)
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	3301      	adds	r3, #1
 8008de8:	61bb      	str	r3, [r7, #24]
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	2b09      	cmp	r3, #9
 8008dee:	ddb7      	ble.n	8008d60 <ModbusCreateData+0x8c>
            }
        }
    }
    if(ptr_data == NULL)
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d104      	bne.n	8008e00 <ModbusCreateData+0x12c>
    {
        mb_obj->RcvTask = &ModbusGetData;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a3a      	ldr	r2, [pc, #232]	; (8008ee4 <ModbusCreateData+0x210>)
 8008dfa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        return;
 8008dfe:	e06d      	b.n	8008edc <ModbusCreateData+0x208>
    }

    for(j = 0; j < sizeData; j++)
 8008e00:	2300      	movs	r3, #0
 8008e02:	61bb      	str	r3, [r7, #24]
 8008e04:	e02e      	b.n	8008e64 <ModbusCreateData+0x190>
    {
        memcpy(&mb_obj->sdata[i], (uint16_t*)ptr_data + addrData, 2);
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	3370      	adds	r3, #112	; 0x70
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	8afa      	ldrh	r2, [r7, #22]
 8008e10:	0052      	lsls	r2, r2, #1
 8008e12:	6939      	ldr	r1, [r7, #16]
 8008e14:	440a      	add	r2, r1
 8008e16:	8812      	ldrh	r2, [r2, #0]
 8008e18:	b292      	uxth	r2, r2
 8008e1a:	801a      	strh	r2, [r3, #0]
        uint8_t fw = 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	72fb      	strb	r3, [r7, #11]
        fw = mb_obj->sdata[i];
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	4413      	add	r3, r2
 8008e26:	3370      	adds	r3, #112	; 0x70
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	72fb      	strb	r3, [r7, #11]
        mb_obj->sdata[i] = mb_obj->sdata[i + 1];
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	4413      	add	r3, r2
 8008e34:	f893 1070 	ldrb.w	r1, [r3, #112]	; 0x70
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	3370      	adds	r3, #112	; 0x70
 8008e40:	460a      	mov	r2, r1
 8008e42:	701a      	strb	r2, [r3, #0]
        mb_obj->sdata[i + 1] = fw;
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	3301      	adds	r3, #1
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	7afa      	ldrb	r2, [r7, #11]
 8008e4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        i += 2;
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	3302      	adds	r3, #2
 8008e56:	61fb      	str	r3, [r7, #28]
        addrData += 1;
 8008e58:	8afb      	ldrh	r3, [r7, #22]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	82fb      	strh	r3, [r7, #22]
    for(j = 0; j < sizeData; j++)
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	3301      	adds	r3, #1
 8008e62:	61bb      	str	r3, [r7, #24]
 8008e64:	89fb      	ldrh	r3, [r7, #14]
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	dbcc      	blt.n	8008e06 <ModbusCreateData+0x132>
    }
//    memcpy(&mb_obj->sdata[i], (uint16_t*)ptr_data + addrData, 2*sizeData);
//    i += 2*sizeData;
    crc = calcCRC(mb_obj->sdata, i);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	3370      	adds	r3, #112	; 0x70
 8008e70:	69fa      	ldr	r2, [r7, #28]
 8008e72:	b292      	uxth	r2, r2
 8008e74:	4611      	mov	r1, r2
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7ff fb5a 	bl	8008530 <calcCRC>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	81bb      	strh	r3, [r7, #12]
    mb_obj->sdata[i++] = (crc >> 8) & 0xFF;
 8008e80:	89bb      	ldrh	r3, [r7, #12]
 8008e82:	0a1b      	lsrs	r3, r3, #8
 8008e84:	b299      	uxth	r1, r3
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	61fa      	str	r2, [r7, #28]
 8008e8c:	b2c9      	uxtb	r1, r1
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	4413      	add	r3, r2
 8008e92:	460a      	mov	r2, r1
 8008e94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    mb_obj->sdata[i++] = crc & 0xFF;
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	61fa      	str	r2, [r7, #28]
 8008e9e:	89ba      	ldrh	r2, [r7, #12]
 8008ea0:	b2d1      	uxtb	r1, r2
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	460a      	mov	r2, r1
 8008ea8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    if(mb_obj->modbus.SetReDe != NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d003      	beq.n	8008ebc <ModbusCreateData+0x1e8>
    	mb_obj->modbus.SetReDe(0);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	2000      	movs	r0, #0
 8008eba:	4798      	blx	r3
    mb_obj->sSend = i;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    mb_obj->RcvTask = &ModbusSendData;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a09      	ldr	r2, [pc, #36]	; (8008eec <ModbusCreateData+0x218>)
 8008ec8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    mb_obj->tick = 0;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    mb_obj->scount = 0;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
}
 8008edc:	3724      	adds	r7, #36	; 0x24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd90      	pop	{r4, r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	080089cd 	.word	0x080089cd
 8008ee8:	20000800 	.word	0x20000800
 8008eec:	08008ef1 	.word	0x08008ef1

08008ef0 <ModbusSendData>:

static void ModbusSendData(m_modbus_obj *mb_obj) // Task 1
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
    if(mb_obj->tick >= TXTIMEOUT)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008efe:	2b09      	cmp	r3, #9
 8008f00:	dd13      	ble.n	8008f2a <ModbusSendData+0x3a>
    {
    	if(mb_obj->modbus.SetReDe != NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d003      	beq.n	8008f12 <ModbusSendData+0x22>
    		mb_obj->modbus.SetReDe(1);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	2001      	movs	r0, #1
 8008f10:	4798      	blx	r3
        mb_obj->RcvTask = &ModbusGetData;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a07      	ldr	r2, [pc, #28]	; (8008f34 <ModbusSendData+0x44>)
 8008f16:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        mb_obj->scount = 0;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
        mb_obj->tick = 0;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    }
}
 8008f2a:	bf00      	nop
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	080089cd 	.word	0x080089cd

08008f38 <ModbusSetReDe>:

static void ModbusSetReDe(uint32_t level)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
	if(1 == level)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d103      	bne.n	8008f4e <ModbusSetReDe+0x16>
		Pin_Func_TurnOn(CONTROL_485);
 8008f46:	2004      	movs	r0, #4
 8008f48:	f000 fb76 	bl	8009638 <Pin_Func_TurnOn>
	else
		Pin_Func_TurnOff(CONTROL_485);
}
 8008f4c:	e002      	b.n	8008f54 <ModbusSetReDe+0x1c>
		Pin_Func_TurnOff(CONTROL_485);
 8008f4e:	2004      	movs	r0, #4
 8008f50:	f000 fb9c 	bl	800968c <Pin_Func_TurnOff>
}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <create_modbus>:

modbus_master_obj* create_modbus(uint16_t id, serial_obj *serial)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	6039      	str	r1, [r7, #0]
 8008f66:	80fb      	strh	r3, [r7, #6]
	if(current_index_modbus_dev >= MAX_MODBUS_DEV)
 8008f68:	4b19      	ldr	r3, [pc, #100]	; (8008fd0 <create_modbus+0x74>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	dd00      	ble.n	8008f72 <create_modbus+0x16>
	{
		while(1); // no modbus more than
 8008f70:	e7fe      	b.n	8008f70 <create_modbus+0x14>
	}
	m_modbus_obj *modbus = malloc(sizeof(m_modbus_obj));
 8008f72:	20e8      	movs	r0, #232	; 0xe8
 8008f74:	f003 f8c2 	bl	800c0fc <malloc>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	60fb      	str	r3, [r7, #12]
	memset(modbus, 0, sizeof(m_modbus_obj));
 8008f7c:	22e8      	movs	r2, #232	; 0xe8
 8008f7e:	2100      	movs	r1, #0
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f003 f997 	bl	800c2b4 <memset>
	if(modbus != NULL)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d01c      	beq.n	8008fc6 <create_modbus+0x6a>
	{
		modbus->modbus.id = id;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	88fa      	ldrh	r2, [r7, #6]
 8008f90:	801a      	strh	r2, [r3, #0]
		modbus->modbus.serial_port = serial;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	605a      	str	r2, [r3, #4]
		modbus_list[current_index_modbus_dev] = modbus;
 8008f98:	4b0d      	ldr	r3, [pc, #52]	; (8008fd0 <create_modbus+0x74>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	490d      	ldr	r1, [pc, #52]	; (8008fd4 <create_modbus+0x78>)
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ModbusResetValue(modbus);
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f7ff fcdd 	bl	8008964 <ModbusResetValue>
		current_index_modbus_dev++;
 8008faa:	4b09      	ldr	r3, [pc, #36]	; (8008fd0 <create_modbus+0x74>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	4a07      	ldr	r2, [pc, #28]	; (8008fd0 <create_modbus+0x74>)
 8008fb2:	6013      	str	r3, [r2, #0]
		modbus->RcvTask = &ModbusGetData;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4a08      	ldr	r2, [pc, #32]	; (8008fd8 <create_modbus+0x7c>)
 8008fb8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		modbus->modbus.SetReDe = ModbusSetReDe;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4a07      	ldr	r2, [pc, #28]	; (8008fdc <create_modbus+0x80>)
 8008fc0:	609a      	str	r2, [r3, #8]
		return &(modbus->modbus);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	e000      	b.n	8008fc8 <create_modbus+0x6c>
	}
	return NULL;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	20000878 	.word	0x20000878
 8008fd4:	2000087c 	.word	0x2000087c
 8008fd8:	080089cd 	.word	0x080089cd
 8008fdc:	08008f39 	.word	0x08008f39

08008fe0 <Modbus1kHz>:


void Modbus1kHz(void)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
	int index_modbus_dev = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	607b      	str	r3, [r7, #4]
	for(index_modbus_dev = 0; index_modbus_dev < current_index_modbus_dev; index_modbus_dev++)
 8008fea:	2300      	movs	r3, #0
 8008fec:	607b      	str	r3, [r7, #4]
 8008fee:	e00e      	b.n	800900e <Modbus1kHz+0x2e>
	{
		m_modbus_obj *modbus = modbus_list[index_modbus_dev];
 8008ff0:	4a0d      	ldr	r2, [pc, #52]	; (8009028 <Modbus1kHz+0x48>)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ff8:	603b      	str	r3, [r7, #0]
		modbus->tick++;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009000:	1c5a      	adds	r2, r3, #1
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	for(index_modbus_dev = 0; index_modbus_dev < current_index_modbus_dev; index_modbus_dev++)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3301      	adds	r3, #1
 800900c:	607b      	str	r3, [r7, #4]
 800900e:	4b07      	ldr	r3, [pc, #28]	; (800902c <Modbus1kHz+0x4c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	429a      	cmp	r2, r3
 8009016:	dbeb      	blt.n	8008ff0 <Modbus1kHz+0x10>
	}
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	2000087c 	.word	0x2000087c
 800902c:	20000878 	.word	0x20000878

08009030 <ModbusBackground>:

void ModbusBackground(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
	int index_modbus_dev = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]
	for(index_modbus_dev = 0; index_modbus_dev < current_index_modbus_dev; index_modbus_dev++)
 800903a:	2300      	movs	r3, #0
 800903c:	60fb      	str	r3, [r7, #12]
 800903e:	e079      	b.n	8009134 <ModbusBackground+0x104>
	{
        if(modbus_list[index_modbus_dev]->RcvTask != NULL)
 8009040:	4a42      	ldr	r2, [pc, #264]	; (800914c <ModbusBackground+0x11c>)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009048:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00b      	beq.n	8009068 <ModbusBackground+0x38>
        {
        	modbus_list[index_modbus_dev]->RcvTask(modbus_list[index_modbus_dev]);
 8009050:	4a3e      	ldr	r2, [pc, #248]	; (800914c <ModbusBackground+0x11c>)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009058:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800905c:	493b      	ldr	r1, [pc, #236]	; (800914c <ModbusBackground+0x11c>)
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009064:	4610      	mov	r0, r2
 8009066:	4798      	blx	r3
        }

        m_modbus_obj *modbus = modbus_list[index_modbus_dev];
 8009068:	4a38      	ldr	r2, [pc, #224]	; (800914c <ModbusBackground+0x11c>)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009070:	60bb      	str	r3, [r7, #8]
		SerialHandle(modbus->modbus.serial_port);
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	4618      	mov	r0, r3
 8009078:	f001 fd5a 	bl	800ab30 <SerialHandle>
		while(modbus->modbus.serial_port->length_received > 0 && modbus->RcvTask == (void*)&ModbusGetData)	 // check if a char has been received
 800907c:	e020      	b.n	80090c0 <ModbusBackground+0x90>
		{
			if(modbus->rcount >= RXSIZE)
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009084:	2b63      	cmp	r3, #99	; 0x63
 8009086:	dd03      	ble.n	8009090 <ModbusBackground+0x60>
			{
				modbus->rcount = 0;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2200      	movs	r2, #0
 800908c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			}
			SerialReadBuf(modbus->modbus.serial_port,
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	6858      	ldr	r0, [r3, #4]
							&(modbus->rdata[modbus->rcount]),
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
			SerialReadBuf(modbus->modbus.serial_port,
 800909a:	3308      	adds	r3, #8
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	4413      	add	r3, r2
 80090a0:	3304      	adds	r3, #4
 80090a2:	2201      	movs	r2, #1
 80090a4:	4619      	mov	r1, r3
 80090a6:	f001 fe33 	bl	800ad10 <SerialReadBuf>
							1);
			modbus->rcount++;
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			modbus->tick = 0;
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		while(modbus->modbus.serial_port->length_received > 0 && modbus->RcvTask == (void*)&ModbusGetData)	 // check if a char has been received
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	8a1b      	ldrh	r3, [r3, #16]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <ModbusBackground+0xa6>
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80090d0:	4a1f      	ldr	r2, [pc, #124]	; (8009150 <ModbusBackground+0x120>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d0d3      	beq.n	800907e <ModbusBackground+0x4e>
		}
		send:
 80090d6:	bf00      	nop
		if(modbus->scount < modbus->sSend && modbus->RcvTask == (void*)&ModbusSendData)
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80090e4:	429a      	cmp	r2, r3
 80090e6:	da22      	bge.n	800912e <ModbusBackground+0xfe>
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80090ee:	4a19      	ldr	r2, [pc, #100]	; (8009154 <ModbusBackground+0x124>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d11c      	bne.n	800912e <ModbusBackground+0xfe>
		{
			bool ret;
			ret = SerialSendBuf(modbus->modbus.serial_port, &modbus->sdata[modbus->scount], 1);
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	6858      	ldr	r0, [r3, #4]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80090fe:	3370      	adds	r3, #112	; 0x70
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	4413      	add	r3, r2
 8009104:	2201      	movs	r2, #1
 8009106:	4619      	mov	r1, r3
 8009108:	f001 fddc 	bl	800acc4 <SerialSendBuf>
 800910c:	4603      	mov	r3, r0
 800910e:	71fb      	strb	r3, [r7, #7]
			if(ret == true)
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d014      	beq.n	8009140 <ModbusBackground+0x110>
			{
				modbus->tick = 0;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2200      	movs	r2, #0
 800911a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				modbus->scount++;
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				goto send;
 800912c:	e7d4      	b.n	80090d8 <ModbusBackground+0xa8>
	for(index_modbus_dev = 0; index_modbus_dev < current_index_modbus_dev; index_modbus_dev++)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3301      	adds	r3, #1
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	4b08      	ldr	r3, [pc, #32]	; (8009158 <ModbusBackground+0x128>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	429a      	cmp	r2, r3
 800913c:	db80      	blt.n	8009040 <ModbusBackground+0x10>
				break;
			}
		}

	}
}
 800913e:	e000      	b.n	8009142 <ModbusBackground+0x112>
				break;
 8009140:	bf00      	nop
}
 8009142:	bf00      	nop
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	2000087c 	.word	0x2000087c
 8009150:	080089cd 	.word	0x080089cd
 8009154:	08008ef1 	.word	0x08008ef1
 8009158:	20000878 	.word	0x20000878

0800915c <ModbusAddVariable>:

void ModbusAddVariable(modbus_master_obj *obj, uint16_t addr, void *data, uint16_t len)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	607a      	str	r2, [r7, #4]
 8009166:	461a      	mov	r2, r3
 8009168:	460b      	mov	r3, r1
 800916a:	817b      	strh	r3, [r7, #10]
 800916c:	4613      	mov	r3, r2
 800916e:	813b      	strh	r3, [r7, #8]
    if(current_index_list_var >= MAX_VAR_SHOW) return;
 8009170:	4b17      	ldr	r3, [pc, #92]	; (80091d0 <ModbusAddVariable+0x74>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b09      	cmp	r3, #9
 8009176:	dc25      	bgt.n	80091c4 <ModbusAddVariable+0x68>
    data_list[current_index_list_var].start_addr = addr;
 8009178:	4b15      	ldr	r3, [pc, #84]	; (80091d0 <ModbusAddVariable+0x74>)
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	4915      	ldr	r1, [pc, #84]	; (80091d4 <ModbusAddVariable+0x78>)
 800917e:	4613      	mov	r3, r2
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	440b      	add	r3, r1
 8009188:	897a      	ldrh	r2, [r7, #10]
 800918a:	801a      	strh	r2, [r3, #0]
    data_list[current_index_list_var].data = data;
 800918c:	4b10      	ldr	r3, [pc, #64]	; (80091d0 <ModbusAddVariable+0x74>)
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	4910      	ldr	r1, [pc, #64]	; (80091d4 <ModbusAddVariable+0x78>)
 8009192:	4613      	mov	r3, r2
 8009194:	005b      	lsls	r3, r3, #1
 8009196:	4413      	add	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	440b      	add	r3, r1
 800919c:	3304      	adds	r3, #4
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	601a      	str	r2, [r3, #0]
    data_list[current_index_list_var].len = len;
 80091a2:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <ModbusAddVariable+0x74>)
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	490b      	ldr	r1, [pc, #44]	; (80091d4 <ModbusAddVariable+0x78>)
 80091a8:	4613      	mov	r3, r2
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	4413      	add	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	440b      	add	r3, r1
 80091b2:	3308      	adds	r3, #8
 80091b4:	893a      	ldrh	r2, [r7, #8]
 80091b6:	801a      	strh	r2, [r3, #0]
    current_index_list_var++;
 80091b8:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <ModbusAddVariable+0x74>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3301      	adds	r3, #1
 80091be:	4a04      	ldr	r2, [pc, #16]	; (80091d0 <ModbusAddVariable+0x74>)
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	e000      	b.n	80091c6 <ModbusAddVariable+0x6a>
    if(current_index_list_var >= MAX_VAR_SHOW) return;
 80091c4:	bf00      	nop
}
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	200007fc 	.word	0x200007fc
 80091d4:	20000800 	.word	0x20000800

080091d8 <SetCompareCH3>:
	WRITE_REG(advancetimerobjX->advtimer->CCR2, CompareValue);
}


__STATIC_INLINE void SetCompareCH3(timer_advance_obj_t *advancetimerobjX, uint32_t CompareValue)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR3, CompareValue);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <SetCompareCH4>:
{
	WRITE_REG(advancetimerobjX->advtimer->CCR3, CompareValue);
}

__STATIC_INLINE void SetCompareCH4(timer_advance_obj_t *advancetimerobjX, uint32_t CompareValue)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR4, CompareValue);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	641a      	str	r2, [r3, #64]	; 0x40
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <DisableTimerChanel>:
{
	WRITE_REG(advancetimerobjX->advtimer->CCR4, CompareValue);
}

__STATIC_INLINE void DisableTimerChanel(timer_advance_obj_t *advancetimerobjX)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->BDTR, TIM_BDTR_MOE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800922a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <EnableTimerChanel>:
__STATIC_INLINE void EnableTimerChanel(timer_advance_obj_t *advancetimerobjX)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->BDTR, TIM_BDTR_MOE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800924e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <EnableCH1NOutput>:
{
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1);
}

__STATIC_INLINE void EnableCH1NOutput(timer_advance_obj_t *advancetimerobjX)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1N);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	6a1a      	ldr	r2, [r3, #32]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f042 0204 	orr.w	r2, r2, #4
 8009272:	621a      	str	r2, [r3, #32]
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <EnableCH2NOutput>:
{
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2);
}

__STATIC_INLINE void EnableCH2NOutput(timer_advance_obj_t *advancetimerobjX)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2N);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	6a1a      	ldr	r2, [r3, #32]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009296:	621a      	str	r2, [r3, #32]
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <DisableCH1NOutput>:
{
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1);
}

__STATIC_INLINE void DisableCH1NOutput(timer_advance_obj_t *advancetimerobjX)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1N);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	6a1a      	ldr	r2, [r3, #32]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f022 0204 	bic.w	r2, r2, #4
 80092ba:	621a      	str	r2, [r3, #32]
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <DisableCH2NOutput>:
{
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2);
}

__STATIC_INLINE void DisableCH2NOutput(timer_advance_obj_t *advancetimerobjX)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2N);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	6a1a      	ldr	r2, [r3, #32]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092de:	621a      	str	r2, [r3, #32]
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <DisableCH1NAndCH2NOutputs>:
{
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1|LL_TIM_CHANNEL_CH2);
}

__STATIC_INLINE void DisableCH1NAndCH2NOutputs(timer_advance_obj_t *advancetimerobjX)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH1N|LL_TIM_CHANNEL_CH2N);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	6a1a      	ldr	r2, [r3, #32]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 8009302:	621a      	str	r2, [r3, #32]
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <EnableCntTimer>:
						 |LL_TIM_CHANNEL_CH3N|LL_TIM_CHANNEL_CH4|LL_TIM_CHANNEL_CH4N);
}
//=======================================-END_DISABLE_OUTPUT-===============================================================//

__STATIC_INLINE void EnableCntTimer(timer_advance_obj_t *advancetimerobjX)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->CR1, TIM_CR1_CEN);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f042 0201 	orr.w	r2, r2, #1
 8009326:	601a      	str	r2, [r3, #0]
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <TIM_EnableIT_CC3>:

__STATIC_INLINE void TIM_EnableIT_CC3(timer_advance_obj_t *advancetimerobjX)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  SET_BIT(advancetimerobjX->advtimer->DIER, TIM_DIER_CC3IE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f042 0208 	orr.w	r2, r2, #8
 800934a:	60da      	str	r2, [r3, #12]
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <TIM_ClearFlag_CC3>:

__STATIC_INLINE void TIM_ClearFlag_CC3(timer_advance_obj_t *advancetimerobjX)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  WRITE_REG(advancetimerobjX->advtimer->SR, ~(TIM_SR_CC3IF));
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f06f 0208 	mvn.w	r2, #8
 8009368:	611a      	str	r2, [r3, #16]
}
 800936a:	bf00      	nop
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
	...

08009378 <PwmWindBoostInit>:
	TIM_ClearFlag_CC3(timeradvanceX);
	TIM_EnableIT_CC3(timeradvanceX);

}

void PwmWindBoostInit(timer_advance_obj_t *timeradvanceX, pTIMER_ADVANCE_EVENT_INT_HANDLE WindBoostCtrlFn){
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
	if(timeradvanceX->advance_timer_id == TIMER_ADVANCE_ID_1){
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d107      	bne.n	800939a <PwmWindBoostInit+0x22>
		Tim1CCIsr = WindBoostCtrlFn;
 800938a:	4a11      	ldr	r2, [pc, #68]	; (80093d0 <PwmWindBoostInit+0x58>)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	6013      	str	r3, [r2, #0]
//		SetCompareCH4(timeradvanceX, timeradvanceX->TimerPeriod - 1);
		SetCompareCH4(timeradvanceX, 0);
 8009390:	2100      	movs	r1, #0
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff ff2f 	bl	80091f6 <SetCompareCH4>
 8009398:	e006      	b.n	80093a8 <PwmWindBoostInit+0x30>
	}
	else if(timeradvanceX->advance_timer_id == TIMER_ADVANCE_ID_2){
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d102      	bne.n	80093a8 <PwmWindBoostInit+0x30>
		Tim15CCIsr = WindBoostCtrlFn;
 80093a2:	4a0c      	ldr	r2, [pc, #48]	; (80093d4 <PwmWindBoostInit+0x5c>)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	6013      	str	r3, [r2, #0]
	}
	PwmWindBuckBoostDisableAllOutput(timeradvanceX);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f815 	bl	80093d8 <PwmWindBuckBoostDisableAllOutput>
//	PwmWindBoostDisable(timeradvanceX);
	SetCompareCH3(timeradvanceX, 1);
 80093ae:	2101      	movs	r1, #1
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff ff11 	bl	80091d8 <SetCompareCH3>
	EnableCntTimer(timeradvanceX);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff ffaa 	bl	8009310 <EnableCntTimer>
	TIM_ClearFlag_CC3(timeradvanceX);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7ff ffcb 	bl	8009358 <TIM_ClearFlag_CC3>
	TIM_EnableIT_CC3(timeradvanceX);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7ff ffb6 	bl	8009334 <TIM_EnableIT_CC3>

}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	2000166c 	.word	0x2000166c
 80093d4:	20001670 	.word	0x20001670

080093d8 <PwmWindBuckBoostDisableAllOutput>:
void PwmWindBuckBoostEnableAllOutput(timer_advance_obj_t *timeradvanceX){
	EnableTimerChanel(timeradvanceX);
	EnableCH1NAndCH2NOutputs(timeradvanceX);
}

void PwmWindBuckBoostDisableAllOutput(timer_advance_obj_t *timeradvanceX){
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
	DisableTimerChanel(timeradvanceX);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7ff ff17 	bl	8009214 <DisableTimerChanel>
	DisableCH1NAndCH2NOutputs(timeradvanceX);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7ff ff80 	bl	80092ec <DisableCH1NAndCH2NOutputs>
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <PwmWindBuckEnable>:

void PwmWindBuckEnable(timer_advance_obj_t *timeradvanceX){
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
	EnableTimerChanel(timeradvanceX);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7ff ff1b 	bl	8009238 <EnableTimerChanel>
	EnableCH2NOutput(timeradvanceX);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7ff ff3c 	bl	8009280 <EnableCH2NOutput>
}
 8009408:	bf00      	nop
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <PwmWindBoostEnable>:

void PwmWindBoostEnable(timer_advance_obj_t *timeradvanceX){
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
	EnableTimerChanel(timeradvanceX);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7ff ff0d 	bl	8009238 <EnableTimerChanel>
	EnableCH1NOutput(timeradvanceX);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff ff1c 	bl	800925c <EnableCH1NOutput>
}
 8009424:	bf00      	nop
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <PwmWindBuckDisable>:

void PwmWindBuckDisable(timer_advance_obj_t *timeradvanceX)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
	DisableCH2NOutput(timeradvanceX);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff ff47 	bl	80092c8 <DisableCH2NOutput>
}
 800943a:	bf00      	nop
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <PwmWindBoostDisable>:
void PwmWindBoostDisable(timer_advance_obj_t *timeradvanceX)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b082      	sub	sp, #8
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
	DisableCH1NOutput(timeradvanceX);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7ff ff2a 	bl	80092a4 <DisableCH1NOutput>
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <DisableTimerChanel>:
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->BDTR, TIM_BDTR_MOE);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800946e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <EnableTimerChanel>:
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->BDTR, TIM_BDTR_MOE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009492:	645a      	str	r2, [r3, #68]	; 0x44
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <EnableCH2Output>:
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	SET_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	6a1a      	ldr	r2, [r3, #32]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	f042 0210 	orr.w	r2, r2, #16
 80094b6:	621a      	str	r2, [r3, #32]
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <DisableCH2Output>:
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(advancetimerobjX->advtimer->CCER, LL_TIM_CHANNEL_CH2);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	6a1a      	ldr	r2, [r3, #32]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f022 0210 	bic.w	r2, r2, #16
 80094da:	621a      	str	r2, [r3, #32]
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <PwmWindDumpLoadEnableOutput>:
//	TIM_ClearFlag_CC2(timeradvanceX);
//	TIM_EnableIT_CC2(timeradvanceX);

}
void PwmWindDumpLoadEnableOutput(timer_advance_obj_t *timeradvanceX)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
	EnableTimerChanel(timeradvanceX);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff ffc3 	bl	800947c <EnableTimerChanel>
	EnableCH2Output(timeradvanceX);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7ff ffd2 	bl	80094a0 <EnableCH2Output>
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <PwmWindDumpLoadDisableOutput>:

void PwmWindDumpLoadDisableOutput(timer_advance_obj_t *timeradvanceX)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
	DisableTimerChanel(timeradvanceX);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7ff ffa3 	bl	8009458 <DisableTimerChanel>
	DisableCH2Output(timeradvanceX);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff ffd6 	bl	80094c4 <DisableCH2Output>

}
 8009518:	bf00      	nop
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <Pin_Func_Init>:
		{RESET_4G	, 			PORT_B, 		PIN_13, 		OUTPUT, 		GPIO_LOW		},
		{POWER_4G, 			    PORT_B, 		PIN_9, 		    OUTPUT, 		GPIO_LOW		},
};

void Pin_Func_Init(void)
{
 8009520:	b590      	push	{r4, r7, lr}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
    pin_func_id_e id = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	71fb      	strb	r3, [r7, #7]
    for (id = 0; id < PIN_FUNC_MAX; id++)
 800952a:	2300      	movs	r3, #0
 800952c:	71fb      	strb	r3, [r7, #7]
 800952e:	e078      	b.n	8009622 <Pin_Func_Init+0x102>
    {
        if (pin_func_list[id].port_id != PORT_MAX)
 8009530:	79fa      	ldrb	r2, [r7, #7]
 8009532:	4940      	ldr	r1, [pc, #256]	; (8009634 <Pin_Func_Init+0x114>)
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	440b      	add	r3, r1
 800953c:	3301      	adds	r3, #1
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	2b07      	cmp	r3, #7
 8009542:	d06b      	beq.n	800961c <Pin_Func_Init+0xfc>
        {
            if (pin_func_list[id].dir == OUTPUT)
 8009544:	79fa      	ldrb	r2, [r7, #7]
 8009546:	493b      	ldr	r1, [pc, #236]	; (8009634 <Pin_Func_Init+0x114>)
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	440b      	add	r3, r1
 8009550:	3303      	adds	r3, #3
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d12e      	bne.n	80095b6 <Pin_Func_Init+0x96>
            {
                GPIO_SetPinOut(pin_func_list[id].port_id, pin_func_list[id].pin_id);
 8009558:	79fa      	ldrb	r2, [r7, #7]
 800955a:	4936      	ldr	r1, [pc, #216]	; (8009634 <Pin_Func_Init+0x114>)
 800955c:	4613      	mov	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	440b      	add	r3, r1
 8009564:	3301      	adds	r3, #1
 8009566:	7818      	ldrb	r0, [r3, #0]
 8009568:	79fa      	ldrb	r2, [r7, #7]
 800956a:	4932      	ldr	r1, [pc, #200]	; (8009634 <Pin_Func_Init+0x114>)
 800956c:	4613      	mov	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	440b      	add	r3, r1
 8009574:	3302      	adds	r3, #2
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	4619      	mov	r1, r3
 800957a:	f001 f965 	bl	800a848 <GPIO_SetPinOut>
                GPIO_WritePin(pin_func_list[id].port_id, pin_func_list[id].pin_id, pin_func_list[id].default_level);
 800957e:	79fa      	ldrb	r2, [r7, #7]
 8009580:	492c      	ldr	r1, [pc, #176]	; (8009634 <Pin_Func_Init+0x114>)
 8009582:	4613      	mov	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	440b      	add	r3, r1
 800958a:	3301      	adds	r3, #1
 800958c:	7818      	ldrb	r0, [r3, #0]
 800958e:	79fa      	ldrb	r2, [r7, #7]
 8009590:	4928      	ldr	r1, [pc, #160]	; (8009634 <Pin_Func_Init+0x114>)
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	440b      	add	r3, r1
 800959a:	3302      	adds	r3, #2
 800959c:	7819      	ldrb	r1, [r3, #0]
 800959e:	79fa      	ldrb	r2, [r7, #7]
 80095a0:	4c24      	ldr	r4, [pc, #144]	; (8009634 <Pin_Func_Init+0x114>)
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	4423      	add	r3, r4
 80095aa:	3304      	adds	r3, #4
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	461a      	mov	r2, r3
 80095b0:	f001 f998 	bl	800a8e4 <GPIO_WritePin>
 80095b4:	e032      	b.n	800961c <Pin_Func_Init+0xfc>
            }
            else if (pin_func_list[id].dir == INPUT_PULLDOWN)
 80095b6:	79fa      	ldrb	r2, [r7, #7]
 80095b8:	491e      	ldr	r1, [pc, #120]	; (8009634 <Pin_Func_Init+0x114>)
 80095ba:	4613      	mov	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	440b      	add	r3, r1
 80095c2:	3303      	adds	r3, #3
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d114      	bne.n	80095f4 <Pin_Func_Init+0xd4>
            {
                GPIO_SetPinIn(pin_func_list[id].port_id, pin_func_list[id].pin_id, PULL_DOWN);
 80095ca:	79fa      	ldrb	r2, [r7, #7]
 80095cc:	4919      	ldr	r1, [pc, #100]	; (8009634 <Pin_Func_Init+0x114>)
 80095ce:	4613      	mov	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	440b      	add	r3, r1
 80095d6:	3301      	adds	r3, #1
 80095d8:	7818      	ldrb	r0, [r3, #0]
 80095da:	79fa      	ldrb	r2, [r7, #7]
 80095dc:	4915      	ldr	r1, [pc, #84]	; (8009634 <Pin_Func_Init+0x114>)
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	440b      	add	r3, r1
 80095e6:	3302      	adds	r3, #2
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	2202      	movs	r2, #2
 80095ec:	4619      	mov	r1, r3
 80095ee:	f001 f951 	bl	800a894 <GPIO_SetPinIn>
 80095f2:	e013      	b.n	800961c <Pin_Func_Init+0xfc>
            }
            else
                GPIO_SetPinIn(pin_func_list[id].port_id, pin_func_list[id].pin_id, PULL_UP);
 80095f4:	79fa      	ldrb	r2, [r7, #7]
 80095f6:	490f      	ldr	r1, [pc, #60]	; (8009634 <Pin_Func_Init+0x114>)
 80095f8:	4613      	mov	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4413      	add	r3, r2
 80095fe:	440b      	add	r3, r1
 8009600:	3301      	adds	r3, #1
 8009602:	7818      	ldrb	r0, [r3, #0]
 8009604:	79fa      	ldrb	r2, [r7, #7]
 8009606:	490b      	ldr	r1, [pc, #44]	; (8009634 <Pin_Func_Init+0x114>)
 8009608:	4613      	mov	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	440b      	add	r3, r1
 8009610:	3302      	adds	r3, #2
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2201      	movs	r2, #1
 8009616:	4619      	mov	r1, r3
 8009618:	f001 f93c 	bl	800a894 <GPIO_SetPinIn>
    for (id = 0; id < PIN_FUNC_MAX; id++)
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	3301      	adds	r3, #1
 8009620:	71fb      	strb	r3, [r7, #7]
 8009622:	79fb      	ldrb	r3, [r7, #7]
 8009624:	2b06      	cmp	r3, #6
 8009626:	d983      	bls.n	8009530 <Pin_Func_Init+0x10>
        }
    }
}
 8009628:	bf00      	nop
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	bd90      	pop	{r4, r7, pc}
 8009632:	bf00      	nop
 8009634:	2000000c 	.word	0x2000000c

08009638 <Pin_Func_TurnOn>:

void Pin_Func_TurnOn(pin_func_id_e id)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	71fb      	strb	r3, [r7, #7]
    if (pin_func_list[id].port_id < PORT_MAX)
 8009642:	79fa      	ldrb	r2, [r7, #7]
 8009644:	4910      	ldr	r1, [pc, #64]	; (8009688 <Pin_Func_TurnOn+0x50>)
 8009646:	4613      	mov	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	440b      	add	r3, r1
 800964e:	3301      	adds	r3, #1
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	2b06      	cmp	r3, #6
 8009654:	d813      	bhi.n	800967e <Pin_Func_TurnOn+0x46>
    {
        GPIO_WritePin(pin_func_list[id].port_id, pin_func_list[id].pin_id, GPIO_HIGH);
 8009656:	79fa      	ldrb	r2, [r7, #7]
 8009658:	490b      	ldr	r1, [pc, #44]	; (8009688 <Pin_Func_TurnOn+0x50>)
 800965a:	4613      	mov	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	440b      	add	r3, r1
 8009662:	3301      	adds	r3, #1
 8009664:	7818      	ldrb	r0, [r3, #0]
 8009666:	79fa      	ldrb	r2, [r7, #7]
 8009668:	4907      	ldr	r1, [pc, #28]	; (8009688 <Pin_Func_TurnOn+0x50>)
 800966a:	4613      	mov	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	440b      	add	r3, r1
 8009672:	3302      	adds	r3, #2
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	2201      	movs	r2, #1
 8009678:	4619      	mov	r1, r3
 800967a:	f001 f933 	bl	800a8e4 <GPIO_WritePin>
    }
}
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	2000000c 	.word	0x2000000c

0800968c <Pin_Func_TurnOff>:

void Pin_Func_TurnOff(pin_func_id_e id)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	71fb      	strb	r3, [r7, #7]
    if (pin_func_list[id].port_id < PORT_MAX)
 8009696:	79fa      	ldrb	r2, [r7, #7]
 8009698:	4910      	ldr	r1, [pc, #64]	; (80096dc <Pin_Func_TurnOff+0x50>)
 800969a:	4613      	mov	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	440b      	add	r3, r1
 80096a2:	3301      	adds	r3, #1
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b06      	cmp	r3, #6
 80096a8:	d813      	bhi.n	80096d2 <Pin_Func_TurnOff+0x46>
    {
        GPIO_WritePin(pin_func_list[id].port_id, pin_func_list[id].pin_id, GPIO_LOW);
 80096aa:	79fa      	ldrb	r2, [r7, #7]
 80096ac:	490b      	ldr	r1, [pc, #44]	; (80096dc <Pin_Func_TurnOff+0x50>)
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	440b      	add	r3, r1
 80096b6:	3301      	adds	r3, #1
 80096b8:	7818      	ldrb	r0, [r3, #0]
 80096ba:	79fa      	ldrb	r2, [r7, #7]
 80096bc:	4907      	ldr	r1, [pc, #28]	; (80096dc <Pin_Func_TurnOff+0x50>)
 80096be:	4613      	mov	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4413      	add	r3, r2
 80096c4:	440b      	add	r3, r1
 80096c6:	3302      	adds	r3, #2
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	2200      	movs	r2, #0
 80096cc:	4619      	mov	r1, r3
 80096ce:	f001 f909 	bl	800a8e4 <GPIO_WritePin>
    }
}
 80096d2:	bf00      	nop
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	2000000c 	.word	0x2000000c

080096e0 <Signal_Init>:

//static double Convert_ADC_To_Val(uint16_t adc_val){
//	return 1;
//}

void Signal_Init(void){
 80096e0:	b590      	push	{r4, r7, lr}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	80fb      	strh	r3, [r7, #6]
	for(i = 0; i < ADC_ID_MAX; i++){
 80096ea:	2300      	movs	r3, #0
 80096ec:	80fb      	strh	r3, [r7, #6]
 80096ee:	e00c      	b.n	800970a <Signal_Init+0x2a>
		s_signal_obj[i] = ADC_DMA_CREATE(i);
 80096f0:	88fb      	ldrh	r3, [r7, #6]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	88fc      	ldrh	r4, [r7, #6]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f001 f818 	bl	800a72c <ADC_DMA_CREATE>
 80096fc:	4603      	mov	r3, r0
 80096fe:	4a07      	ldr	r2, [pc, #28]	; (800971c <Signal_Init+0x3c>)
 8009700:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(i = 0; i < ADC_ID_MAX; i++){
 8009704:	88fb      	ldrh	r3, [r7, #6]
 8009706:	3301      	adds	r3, #1
 8009708:	80fb      	strh	r3, [r7, #6]
 800970a:	88fb      	ldrh	r3, [r7, #6]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d9ef      	bls.n	80096f0 <Signal_Init+0x10>
	}
}
 8009710:	bf00      	nop
 8009712:	bf00      	nop
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	bd90      	pop	{r4, r7, pc}
 800971a:	bf00      	nop
 800971c:	20000884 	.word	0x20000884

08009720 <Signal_Update>:
		g_signal_value[i].val_control = (float)(Get_ADC_VAL_CH(s_signal_obj[g_signal_value[i].adc_id], g_signal_value[i].adc_ch) - g_signal_value[i].offset)/ADC_FULLSCALE_VALUE;
		*g_signal_value[i].real_value = g_signal_value[i].val_control*g_signal_value[i].gain;
	}
}

void Signal_Update(signal_type_e signal){
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	71fb      	strb	r3, [r7, #7]
	g_signal_value[signal].val_control = (float)(Get_ADC_VAL_CH(s_signal_obj[g_signal_value[signal].adc_id], g_signal_value[signal].adc_ch) - g_signal_value[signal].offset)/ADC_FULLSCALE_VALUE;
 800972a:	79fa      	ldrb	r2, [r7, #7]
 800972c:	492d      	ldr	r1, [pc, #180]	; (80097e4 <Signal_Update+0xc4>)
 800972e:	4613      	mov	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	440b      	add	r3, r1
 8009738:	3301      	adds	r3, #1
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	4b2a      	ldr	r3, [pc, #168]	; (80097e8 <Signal_Update+0xc8>)
 8009740:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009744:	79fa      	ldrb	r2, [r7, #7]
 8009746:	4927      	ldr	r1, [pc, #156]	; (80097e4 <Signal_Update+0xc4>)
 8009748:	4613      	mov	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	440b      	add	r3, r1
 8009752:	3302      	adds	r3, #2
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	4619      	mov	r1, r3
 8009758:	f001 f834 	bl	800a7c4 <Get_ADC_VAL_CH>
 800975c:	4603      	mov	r3, r0
 800975e:	ee07 3a90 	vmov	s15, r3
 8009762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009766:	79fa      	ldrb	r2, [r7, #7]
 8009768:	491e      	ldr	r1, [pc, #120]	; (80097e4 <Signal_Update+0xc4>)
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	440b      	add	r3, r1
 8009774:	330c      	adds	r3, #12
 8009776:	edd3 7a00 	vldr	s15, [r3]
 800977a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800977e:	79fa      	ldrb	r2, [r7, #7]
 8009780:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80097ec <Signal_Update+0xcc>
 8009784:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009788:	4916      	ldr	r1, [pc, #88]	; (80097e4 <Signal_Update+0xc4>)
 800978a:	4613      	mov	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	440b      	add	r3, r1
 8009794:	3304      	adds	r3, #4
 8009796:	edc3 7a00 	vstr	s15, [r3]
	*g_signal_value[signal].real_value = g_signal_value[signal].val_control*g_signal_value[signal].gain;
 800979a:	79fa      	ldrb	r2, [r7, #7]
 800979c:	4911      	ldr	r1, [pc, #68]	; (80097e4 <Signal_Update+0xc4>)
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	440b      	add	r3, r1
 80097a8:	3304      	adds	r3, #4
 80097aa:	ed93 7a00 	vldr	s14, [r3]
 80097ae:	79fa      	ldrb	r2, [r7, #7]
 80097b0:	490c      	ldr	r1, [pc, #48]	; (80097e4 <Signal_Update+0xc4>)
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	440b      	add	r3, r1
 80097bc:	3310      	adds	r3, #16
 80097be:	edd3 7a00 	vldr	s15, [r3]
 80097c2:	79fa      	ldrb	r2, [r7, #7]
 80097c4:	4907      	ldr	r1, [pc, #28]	; (80097e4 <Signal_Update+0xc4>)
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	440b      	add	r3, r1
 80097d0:	3308      	adds	r3, #8
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d8:	edc3 7a00 	vstr	s15, [r3]
}
 80097dc:	bf00      	nop
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000030 	.word	0x20000030
 80097e8:	20000884 	.word	0x20000884
 80097ec:	45800000 	.word	0x45800000

080097f0 <EC200_Delayms>:

extern uint8_t MQTT_Response_Command[COMMAND_SIZE];
extern uint8_t MQTT_Response_Server[COMMAND_SIZE];

void EC200_Delayms(uint32_t mili_sec) /* Abstract function */
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
    HAL_Delay(mili_sec);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7f8 fba3 	bl	8001f44 <HAL_Delay>
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <EC200_RESET>:

void EC200_RESET(void)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	af00      	add	r7, sp, #0
    /* Turn on the Power */
    EC200_POWER_PIN_LOW();
 800980a:	2006      	movs	r0, #6
 800980c:	f7ff ff3e 	bl	800968c <Pin_Func_TurnOff>
    EC200_Delayms(1000U);
 8009810:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009814:	f7ff ffec 	bl	80097f0 <EC200_Delayms>
    /* RESET EC200 */
    EC200_RESET_PIN_HIGH();
 8009818:	2005      	movs	r0, #5
 800981a:	f7ff ff0d 	bl	8009638 <Pin_Func_TurnOn>
    /* Delay 1000 ms */
    EC200_Delayms(1000U);
 800981e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009822:	f7ff ffe5 	bl	80097f0 <EC200_Delayms>
    EC200_RESET_PIN_LOW();
 8009826:	2005      	movs	r0, #5
 8009828:	f7ff ff30 	bl	800968c <Pin_Func_TurnOff>
}
 800982c:	bf00      	nop
 800982e:	bd80      	pop	{r7, pc}

08009830 <EC200_Init>:

void EC200_Init(void)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	af00      	add	r7, sp, #0
    EC200_UART_Init();
 8009834:	f000 fec8 	bl	800a5c8 <EC200_UART_Init>
    /* Reset EC200 module */
    EC200_RESET();
 8009838:	f7ff ffe5 	bl	8009806 <EC200_RESET>
}
 800983c:	bf00      	nop
 800983e:	bd80      	pop	{r7, pc}

08009840 <EC200_CompareCommand>:

/************************** EC200 data processing functions ********************************/
bool EC200_CompareCommand(uint8_t *compared_buffer, char *command)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
    if (strcmp((char *)compared_buffer, command) == 0)
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7f6 fce7 	bl	8000220 <strcmp>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <EC200_CompareCommand+0x1c>
    {
        return true;
 8009858:	2301      	movs	r3, #1
 800985a:	e000      	b.n	800985e <EC200_CompareCommand+0x1e>
    }
    return false;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
	...

08009868 <EC200_ReceiveCommand>:

bool EC200_ReceiveCommand(uint8_t *receiv_command_buffer)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
    uint8_t index = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
    bool return_function = false;
 8009874:	2300      	movs	r3, #0
 8009876:	73bb      	strb	r3, [r7, #14]

    if (EC200_preprocessing_data.Is_Receive_Done == true)
 8009878:	4b13      	ldr	r3, [pc, #76]	; (80098c8 <EC200_ReceiveCommand+0x60>)
 800987a:	789b      	ldrb	r3, [r3, #2]
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d01d      	beq.n	80098be <EC200_ReceiveCommand+0x56>
    {
        //memset(receiv_command_buffer, 0, RECEIVE_SIZE);
        memset(receiv_command_buffer, 0, strlen(receiv_command_buffer));
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7f6 fcd6 	bl	8000234 <strlen>
 8009888:	4603      	mov	r3, r0
 800988a:	461a      	mov	r2, r3
 800988c:	2100      	movs	r1, #0
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f002 fd10 	bl	800c2b4 <memset>
        while (MQTT_Response_Command[index] != NULL)
 8009894:	e009      	b.n	80098aa <EC200_ReceiveCommand+0x42>
        {
            receiv_command_buffer[index] = MQTT_Response_Command[index];
 8009896:	7bfa      	ldrb	r2, [r7, #15]
 8009898:	7bfb      	ldrb	r3, [r7, #15]
 800989a:	6879      	ldr	r1, [r7, #4]
 800989c:	440b      	add	r3, r1
 800989e:	490b      	ldr	r1, [pc, #44]	; (80098cc <EC200_ReceiveCommand+0x64>)
 80098a0:	5c8a      	ldrb	r2, [r1, r2]
 80098a2:	701a      	strb	r2, [r3, #0]
            index++;
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
 80098a6:	3301      	adds	r3, #1
 80098a8:	73fb      	strb	r3, [r7, #15]
        while (MQTT_Response_Command[index] != NULL)
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	4a07      	ldr	r2, [pc, #28]	; (80098cc <EC200_ReceiveCommand+0x64>)
 80098ae:	5cd3      	ldrb	r3, [r2, r3]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1f0      	bne.n	8009896 <EC200_ReceiveCommand+0x2e>
        }
        EC200_preprocessing_data.Is_Receive_Done = false;
 80098b4:	4b04      	ldr	r3, [pc, #16]	; (80098c8 <EC200_ReceiveCommand+0x60>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	709a      	strb	r2, [r3, #2]
        return_function = true;
 80098ba:	2301      	movs	r3, #1
 80098bc:	73bb      	strb	r3, [r7, #14]
    }
    return return_function;
 80098be:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	2000164c 	.word	0x2000164c
 80098cc:	20000e48 	.word	0x20000e48

080098d0 <EC200_SendCommand>:

void EC200_SendCommand(uint8_t *ec200_cmd)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
    EC200_UART_SendString(ec200_cmd);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fe89 	bl	800a5f0 <EC200_UART_SendString>
}
 80098de:	bf00      	nop
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <Is_Power_ON>:

/******************************************* Starting functions ***********************************************/
bool Is_Power_ON(void)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
    bool return_function = false;
 80098ee:	2300      	movs	r3, #0
 80098f0:	71fb      	strb	r3, [r7, #7]
    if (EC200_ReceiveCommand(EC200_Command_Buffer))
 80098f2:	480a      	ldr	r0, [pc, #40]	; (800991c <Is_Power_ON+0x34>)
 80098f4:	f7ff ffb8 	bl	8009868 <EC200_ReceiveCommand>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d008      	beq.n	8009910 <Is_Power_ON+0x28>
    {
        if (EC200_CompareCommand(EC200_Command_Buffer, "\r\nRDY\r\n"))
 80098fe:	4908      	ldr	r1, [pc, #32]	; (8009920 <Is_Power_ON+0x38>)
 8009900:	4806      	ldr	r0, [pc, #24]	; (800991c <Is_Power_ON+0x34>)
 8009902:	f7ff ff9d 	bl	8009840 <EC200_CompareCommand>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d001      	beq.n	8009910 <Is_Power_ON+0x28>
        {
            return_function = true;
 800990c:	2301      	movs	r3, #1
 800990e:	71fb      	strb	r3, [r7, #7]
        }
    }
    return return_function;
 8009910:	79fb      	ldrb	r3, [r7, #7]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	200008b0 	.word	0x200008b0
 8009920:	0800caa8 	.word	0x0800caa8

08009924 <OffEcho>:

/**
 * Disable corresponding response from EC200.
 */
boolean_3_state_e OffEcho(void)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
    boolean_3_state_e return_function = _NOT_DEFINE_;
 800992a:	2302      	movs	r3, #2
 800992c:	71fb      	strb	r3, [r7, #7]
    static uint8_t offEcho_step = 0;

    if (offEcho_step == 0)
 800992e:	4b14      	ldr	r3, [pc, #80]	; (8009980 <OffEcho+0x5c>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d106      	bne.n	8009944 <OffEcho+0x20>
    {
        EC200_SendCommand("ATE0\r");
 8009936:	4813      	ldr	r0, [pc, #76]	; (8009984 <OffEcho+0x60>)
 8009938:	f7ff ffca 	bl	80098d0 <EC200_SendCommand>
        offEcho_step = 1;
 800993c:	4b10      	ldr	r3, [pc, #64]	; (8009980 <OffEcho+0x5c>)
 800993e:	2201      	movs	r2, #1
 8009940:	701a      	strb	r2, [r3, #0]
 8009942:	e018      	b.n	8009976 <OffEcho+0x52>
    }
    else if (offEcho_step == 1)
 8009944:	4b0e      	ldr	r3, [pc, #56]	; (8009980 <OffEcho+0x5c>)
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d114      	bne.n	8009976 <OffEcho+0x52>
    {
        if (EC200_ReceiveCommand(EC200_Command_Buffer))
 800994c:	480e      	ldr	r0, [pc, #56]	; (8009988 <OffEcho+0x64>)
 800994e:	f7ff ff8b 	bl	8009868 <EC200_ReceiveCommand>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00e      	beq.n	8009976 <OffEcho+0x52>
        {
            if (EC200_CompareCommand(EC200_Command_Buffer, "ATE0\r\r\nOK\r\n"))
 8009958:	490c      	ldr	r1, [pc, #48]	; (800998c <OffEcho+0x68>)
 800995a:	480b      	ldr	r0, [pc, #44]	; (8009988 <OffEcho+0x64>)
 800995c:	f7ff ff70 	bl	8009840 <EC200_CompareCommand>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d002      	beq.n	800996c <OffEcho+0x48>
            {
                return_function = _TRUE_;
 8009966:	2301      	movs	r3, #1
 8009968:	71fb      	strb	r3, [r7, #7]
 800996a:	e001      	b.n	8009970 <OffEcho+0x4c>
            }
            else /* Error command */
            {
                return_function = _FALSE_;
 800996c:	2300      	movs	r3, #0
 800996e:	71fb      	strb	r3, [r7, #7]
            }
            offEcho_step = 0;
 8009970:	4b03      	ldr	r3, [pc, #12]	; (8009980 <OffEcho+0x5c>)
 8009972:	2200      	movs	r2, #0
 8009974:	701a      	strb	r2, [r3, #0]
        }
        /* TODO: Timeout should be added here */
    }
    return return_function;
 8009976:	79fb      	ldrb	r3, [r7, #7]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	20000a41 	.word	0x20000a41
 8009984:	0800cab0 	.word	0x0800cab0
 8009988:	200008b0 	.word	0x200008b0
 800998c:	0800cab8 	.word	0x0800cab8

08009990 <MQTT_SetKeepAlive_Time>:

/************************************** MQTT-connecting functions ***********************************************/
boolean_3_state_e MQTT_SetKeepAlive_Time(uint16_t keepalive_time, uint8_t client_id)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b090      	sub	sp, #64	; 0x40
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	460a      	mov	r2, r1
 800999a:	80fb      	strh	r3, [r7, #6]
 800999c:	4613      	mov	r3, r2
 800999e:	717b      	strb	r3, [r7, #5]
    boolean_3_state_e return_function = _NOT_DEFINE_;
 80099a0:	2302      	movs	r3, #2
 80099a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    static uint8_t setKeepalive_time_step = 0;
    uint8_t buff_temp[50];

    /* Send Keep alive command */
    if (setKeepalive_time_step == 0)
 80099a6:	4b1e      	ldr	r3, [pc, #120]	; (8009a20 <MQTT_SetKeepAlive_Time+0x90>)
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d116      	bne.n	80099dc <MQTT_SetKeepAlive_Time+0x4c>
    {
        memset(buff_temp, 0, 50);
 80099ae:	f107 030c 	add.w	r3, r7, #12
 80099b2:	2232      	movs	r2, #50	; 0x32
 80099b4:	2100      	movs	r1, #0
 80099b6:	4618      	mov	r0, r3
 80099b8:	f002 fc7c 	bl	800c2b4 <memset>
        sprintf(buff_temp, "AT+QMTCFG=\"keepalive\",%d,%d\r", client_id, keepalive_time);
 80099bc:	797a      	ldrb	r2, [r7, #5]
 80099be:	88fb      	ldrh	r3, [r7, #6]
 80099c0:	f107 000c 	add.w	r0, r7, #12
 80099c4:	4917      	ldr	r1, [pc, #92]	; (8009a24 <MQTT_SetKeepAlive_Time+0x94>)
 80099c6:	f002 fc55 	bl	800c274 <siprintf>
        EC200_SendCommand(buff_temp);
 80099ca:	f107 030c 	add.w	r3, r7, #12
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff ff7e 	bl	80098d0 <EC200_SendCommand>
        setKeepalive_time_step = 1;
 80099d4:	4b12      	ldr	r3, [pc, #72]	; (8009a20 <MQTT_SetKeepAlive_Time+0x90>)
 80099d6:	2201      	movs	r2, #1
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	e01a      	b.n	8009a12 <MQTT_SetKeepAlive_Time+0x82>
    }
    else if (setKeepalive_time_step == 1)
 80099dc:	4b10      	ldr	r3, [pc, #64]	; (8009a20 <MQTT_SetKeepAlive_Time+0x90>)
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d116      	bne.n	8009a12 <MQTT_SetKeepAlive_Time+0x82>
    {
        if (EC200_ReceiveCommand(EC200_Command_Buffer))
 80099e4:	4810      	ldr	r0, [pc, #64]	; (8009a28 <MQTT_SetKeepAlive_Time+0x98>)
 80099e6:	f7ff ff3f 	bl	8009868 <EC200_ReceiveCommand>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d010      	beq.n	8009a12 <MQTT_SetKeepAlive_Time+0x82>
        {
            if (EC200_CompareCommand(EC200_Command_Buffer, "\r\nOK\r\n"))
 80099f0:	490e      	ldr	r1, [pc, #56]	; (8009a2c <MQTT_SetKeepAlive_Time+0x9c>)
 80099f2:	480d      	ldr	r0, [pc, #52]	; (8009a28 <MQTT_SetKeepAlive_Time+0x98>)
 80099f4:	f7ff ff24 	bl	8009840 <EC200_CompareCommand>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d003      	beq.n	8009a06 <MQTT_SetKeepAlive_Time+0x76>
            {
                return_function = _TRUE_;
 80099fe:	2301      	movs	r3, #1
 8009a00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009a04:	e002      	b.n	8009a0c <MQTT_SetKeepAlive_Time+0x7c>
            }
            else /* Error command */
            {
                return_function = _FALSE_;
 8009a06:	2300      	movs	r3, #0
 8009a08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            }
            setKeepalive_time_step = 0;
 8009a0c:	4b04      	ldr	r3, [pc, #16]	; (8009a20 <MQTT_SetKeepAlive_Time+0x90>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	701a      	strb	r2, [r3, #0]
        }
        /* TODO: Timeout should be added here */
    }
    return return_function;
 8009a12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3740      	adds	r7, #64	; 0x40
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	20000a42 	.word	0x20000a42
 8009a24:	0800cac4 	.word	0x0800cac4
 8009a28:	200008b0 	.word	0x200008b0
 8009a2c:	0800cae4 	.word	0x0800cae4

08009a30 <MQTT_Receiving_Mode>:

boolean_3_state_e MQTT_Receiving_Mode(uint8_t client_id, uint8_t msg_recv_mode, uint8_t msg_len_enable)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b092      	sub	sp, #72	; 0x48
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	4603      	mov	r3, r0
 8009a38:	71fb      	strb	r3, [r7, #7]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	71bb      	strb	r3, [r7, #6]
 8009a3e:	4613      	mov	r3, r2
 8009a40:	717b      	strb	r3, [r7, #5]
    boolean_3_state_e return_function = _NOT_DEFINE_;
 8009a42:	2302      	movs	r3, #2
 8009a44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    static uint8_t setReceivingMode_step = 0;
    uint8_t buff_temp[50];

    /* Send Keep alive command */
    if (setReceivingMode_step == 0)
 8009a48:	4b1f      	ldr	r3, [pc, #124]	; (8009ac8 <MQTT_Receiving_Mode+0x98>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d119      	bne.n	8009a84 <MQTT_Receiving_Mode+0x54>
    {
        memset(buff_temp, 0, 50);
 8009a50:	f107 030c 	add.w	r3, r7, #12
 8009a54:	2232      	movs	r2, #50	; 0x32
 8009a56:	2100      	movs	r1, #0
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f002 fc2b 	bl	800c2b4 <memset>
        sprintf(buff_temp, "AT+QMTCFG=\"recv/mode\",%d,%d,%d\r", client_id, msg_recv_mode, msg_len_enable);
 8009a5e:	79fa      	ldrb	r2, [r7, #7]
 8009a60:	79b9      	ldrb	r1, [r7, #6]
 8009a62:	797b      	ldrb	r3, [r7, #5]
 8009a64:	f107 000c 	add.w	r0, r7, #12
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	4917      	ldr	r1, [pc, #92]	; (8009acc <MQTT_Receiving_Mode+0x9c>)
 8009a6e:	f002 fc01 	bl	800c274 <siprintf>
        EC200_SendCommand(buff_temp);
 8009a72:	f107 030c 	add.w	r3, r7, #12
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff ff2a 	bl	80098d0 <EC200_SendCommand>
        setReceivingMode_step = 1;
 8009a7c:	4b12      	ldr	r3, [pc, #72]	; (8009ac8 <MQTT_Receiving_Mode+0x98>)
 8009a7e:	2201      	movs	r2, #1
 8009a80:	701a      	strb	r2, [r3, #0]
 8009a82:	e01a      	b.n	8009aba <MQTT_Receiving_Mode+0x8a>
    }
    else if (setReceivingMode_step == 1)
 8009a84:	4b10      	ldr	r3, [pc, #64]	; (8009ac8 <MQTT_Receiving_Mode+0x98>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d116      	bne.n	8009aba <MQTT_Receiving_Mode+0x8a>
    {
        if (EC200_ReceiveCommand(EC200_Command_Buffer))
 8009a8c:	4810      	ldr	r0, [pc, #64]	; (8009ad0 <MQTT_Receiving_Mode+0xa0>)
 8009a8e:	f7ff feeb 	bl	8009868 <EC200_ReceiveCommand>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d010      	beq.n	8009aba <MQTT_Receiving_Mode+0x8a>
        {
            if (EC200_CompareCommand(EC200_Command_Buffer, "\r\nOK\r\n"))
 8009a98:	490e      	ldr	r1, [pc, #56]	; (8009ad4 <MQTT_Receiving_Mode+0xa4>)
 8009a9a:	480d      	ldr	r0, [pc, #52]	; (8009ad0 <MQTT_Receiving_Mode+0xa0>)
 8009a9c:	f7ff fed0 	bl	8009840 <EC200_CompareCommand>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d003      	beq.n	8009aae <MQTT_Receiving_Mode+0x7e>
            {
                return_function = _TRUE_;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009aac:	e002      	b.n	8009ab4 <MQTT_Receiving_Mode+0x84>
            }
            else /* Error command */
            {
                return_function = _FALSE_;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            }
            setReceivingMode_step = 0;
 8009ab4:	4b04      	ldr	r3, [pc, #16]	; (8009ac8 <MQTT_Receiving_Mode+0x98>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	701a      	strb	r2, [r3, #0]
        }
        /* TODO: Timeout should be added here */
    }
    return return_function;
 8009aba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3740      	adds	r7, #64	; 0x40
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20000a43 	.word	0x20000a43
 8009acc:	0800caec 	.word	0x0800caec
 8009ad0:	200008b0 	.word	0x200008b0
 8009ad4:	0800cae4 	.word	0x0800cae4

08009ad8 <MQTT_Open>:

boolean_3_state_e MQTT_Open(uint8_t client_id, char *host_name, uint16_t port)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b09a      	sub	sp, #104	; 0x68
 8009adc:	af02      	add	r7, sp, #8
 8009ade:	4603      	mov	r3, r0
 8009ae0:	6039      	str	r1, [r7, #0]
 8009ae2:	71fb      	strb	r3, [r7, #7]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	80bb      	strh	r3, [r7, #4]
    boolean_3_state_e return_function = _NOT_DEFINE_;
 8009ae8:	2302      	movs	r3, #2
 8009aea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    static uint8_t MQTT_open_step = 0;
    uint8_t buff_temp[50];
    uint8_t buff_temp1[30];

    if (MQTT_open_step == 0)
 8009aee:	4b37      	ldr	r3, [pc, #220]	; (8009bcc <MQTT_Open+0xf4>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d118      	bne.n	8009b28 <MQTT_Open+0x50>
    {
        memset(buff_temp, 0, 50);
 8009af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009afa:	2232      	movs	r2, #50	; 0x32
 8009afc:	2100      	movs	r1, #0
 8009afe:	4618      	mov	r0, r3
 8009b00:	f002 fbd8 	bl	800c2b4 <memset>
        sprintf(buff_temp, "AT+QMTOPEN=%d,%s,%d\r", client_id, host_name, port);
 8009b04:	79fa      	ldrb	r2, [r7, #7]
 8009b06:	88bb      	ldrh	r3, [r7, #4]
 8009b08:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	492f      	ldr	r1, [pc, #188]	; (8009bd0 <MQTT_Open+0xf8>)
 8009b12:	f002 fbaf 	bl	800c274 <siprintf>
        EC200_SendCommand(buff_temp);
 8009b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7ff fed8 	bl	80098d0 <EC200_SendCommand>

        MQTT_open_step = 1;
 8009b20:	4b2a      	ldr	r3, [pc, #168]	; (8009bcc <MQTT_Open+0xf4>)
 8009b22:	2201      	movs	r2, #1
 8009b24:	701a      	strb	r2, [r3, #0]
 8009b26:	e04b      	b.n	8009bc0 <MQTT_Open+0xe8>
    }

    else if (MQTT_open_step == 1)
 8009b28:	4b28      	ldr	r3, [pc, #160]	; (8009bcc <MQTT_Open+0xf4>)
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d147      	bne.n	8009bc0 <MQTT_Open+0xe8>
    {
        if (EC200_ReceiveCommand(EC200_Command_Buffer))
 8009b30:	4828      	ldr	r0, [pc, #160]	; (8009bd4 <MQTT_Open+0xfc>)
 8009b32:	f7ff fe99 	bl	8009868 <EC200_ReceiveCommand>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d041      	beq.n	8009bc0 <MQTT_Open+0xe8>
        {
            /* Case 1: Received full-response */
            memset(buff_temp, 0, 50);
 8009b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b40:	2232      	movs	r2, #50	; 0x32
 8009b42:	2100      	movs	r1, #0
 8009b44:	4618      	mov	r0, r3
 8009b46:	f002 fbb5 	bl	800c2b4 <memset>
            sprintf(buff_temp, "\r\nOK\r\n\r\n+QMTOPEN: %d,0\r\n", client_id);
 8009b4a:	79fa      	ldrb	r2, [r7, #7]
 8009b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b50:	4921      	ldr	r1, [pc, #132]	; (8009bd8 <MQTT_Open+0x100>)
 8009b52:	4618      	mov	r0, r3
 8009b54:	f002 fb8e 	bl	800c274 <siprintf>

            /* Case 2: Received half-response */
            memset(buff_temp1, 0, 30);
 8009b58:	f107 030c 	add.w	r3, r7, #12
 8009b5c:	221e      	movs	r2, #30
 8009b5e:	2100      	movs	r1, #0
 8009b60:	4618      	mov	r0, r3
 8009b62:	f002 fba7 	bl	800c2b4 <memset>
            sprintf(buff_temp1, "\r\n+QMTOPEN: %d,0\r\n", client_id);
 8009b66:	79fa      	ldrb	r2, [r7, #7]
 8009b68:	f107 030c 	add.w	r3, r7, #12
 8009b6c:	491b      	ldr	r1, [pc, #108]	; (8009bdc <MQTT_Open+0x104>)
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f002 fb80 	bl	800c274 <siprintf>
            if (EC200_CompareCommand(EC200_Command_Buffer, "\r\nOK\r\n"))
 8009b74:	491a      	ldr	r1, [pc, #104]	; (8009be0 <MQTT_Open+0x108>)
 8009b76:	4817      	ldr	r0, [pc, #92]	; (8009bd4 <MQTT_Open+0xfc>)
 8009b78:	f7ff fe62 	bl	8009840 <EC200_CompareCommand>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d11e      	bne.n	8009bc0 <MQTT_Open+0xe8>
            {
                /* Do nothing */
            }
            else if (EC200_CompareCommand(EC200_Command_Buffer, buff_temp) || EC200_CompareCommand(EC200_Command_Buffer, buff_temp1))
 8009b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b86:	4619      	mov	r1, r3
 8009b88:	4812      	ldr	r0, [pc, #72]	; (8009bd4 <MQTT_Open+0xfc>)
 8009b8a:	f7ff fe59 	bl	8009840 <EC200_CompareCommand>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d108      	bne.n	8009ba6 <MQTT_Open+0xce>
 8009b94:	f107 030c 	add.w	r3, r7, #12
 8009b98:	4619      	mov	r1, r3
 8009b9a:	480e      	ldr	r0, [pc, #56]	; (8009bd4 <MQTT_Open+0xfc>)
 8009b9c:	f7ff fe50 	bl	8009840 <EC200_CompareCommand>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d006      	beq.n	8009bb4 <MQTT_Open+0xdc>
            {
                return_function = _TRUE_;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                MQTT_open_step = 0;
 8009bac:	4b07      	ldr	r3, [pc, #28]	; (8009bcc <MQTT_Open+0xf4>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	701a      	strb	r2, [r3, #0]
 8009bb2:	e005      	b.n	8009bc0 <MQTT_Open+0xe8>
            }
            else /* Error command */
            {
                return_function = _FALSE_;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                MQTT_open_step = 0;
 8009bba:	4b04      	ldr	r3, [pc, #16]	; (8009bcc <MQTT_Open+0xf4>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	701a      	strb	r2, [r3, #0]
            }
        }
        /* TODO: Timeout should be added here */
    }
    return return_function;
 8009bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3760      	adds	r7, #96	; 0x60
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20000a44 	.word	0x20000a44
 8009bd0:	0800cb0c 	.word	0x0800cb0c
 8009bd4:	200008b0 	.word	0x200008b0
 8009bd8:	0800cb24 	.word	0x0800cb24
 8009bdc:	0800cb40 	.word	0x0800cb40
 8009be0:	0800cae4 	.word	0x0800cae4

08009be4 <MQTT_Connect>:
    }
    return return_function;
}

boolean_3_state_e MQTT_Connect(uint8_t client_id, char *client_name, char *username, char *password)
{
 8009be4:	b590      	push	{r4, r7, lr}
 8009be6:	b0cf      	sub	sp, #316	; 0x13c
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	4604      	mov	r4, r0
 8009bec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009bf0:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 8009bf4:	6001      	str	r1, [r0, #0]
 8009bf6:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8009bfa:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 8009bfe:	600a      	str	r2, [r1, #0]
 8009c00:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c04:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c0e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009c12:	4622      	mov	r2, r4
 8009c14:	701a      	strb	r2, [r3, #0]
    boolean_3_state_e return_function = _NOT_DEFINE_;
 8009c16:	2302      	movs	r3, #2
 8009c18:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    static uint8_t MQTT_connect_step = 0;
    uint8_t buff_temp[200];
    uint8_t buff_temp1[50];
    uint8_t buff_temp2[30];

    if (MQTT_connect_step == 0)
 8009c1c:	4b45      	ldr	r3, [pc, #276]	; (8009d34 <MQTT_Connect+0x150>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d12b      	bne.n	8009c7c <MQTT_Connect+0x98>
    {
        memset(buff_temp, 0, 200);
 8009c24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009c28:	22c8      	movs	r2, #200	; 0xc8
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f002 fb41 	bl	800c2b4 <memset>
        sprintf(buff_temp, "AT+QMTCONN=%d,%s,%s,%s\r", client_id, client_name, username, password);
 8009c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c36:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009c3a:	7819      	ldrb	r1, [r3, #0]
 8009c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c40:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009c44:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8009c48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c4c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009c50:	6812      	ldr	r2, [r2, #0]
 8009c52:	9201      	str	r2, [sp, #4]
 8009c54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c58:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009c5c:	6812      	ldr	r2, [r2, #0]
 8009c5e:	9200      	str	r2, [sp, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	460a      	mov	r2, r1
 8009c64:	4934      	ldr	r1, [pc, #208]	; (8009d38 <MQTT_Connect+0x154>)
 8009c66:	f002 fb05 	bl	800c274 <siprintf>
        EC200_SendCommand(buff_temp);
 8009c6a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7ff fe2e 	bl	80098d0 <EC200_SendCommand>

        MQTT_connect_step = 1;
 8009c74:	4b2f      	ldr	r3, [pc, #188]	; (8009d34 <MQTT_Connect+0x150>)
 8009c76:	2201      	movs	r2, #1
 8009c78:	701a      	strb	r2, [r3, #0]
 8009c7a:	e053      	b.n	8009d24 <MQTT_Connect+0x140>
    }

    else if (MQTT_connect_step == 1)
 8009c7c:	4b2d      	ldr	r3, [pc, #180]	; (8009d34 <MQTT_Connect+0x150>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d14f      	bne.n	8009d24 <MQTT_Connect+0x140>
    {
        if (EC200_ReceiveCommand(EC200_Command_Buffer))
 8009c84:	482d      	ldr	r0, [pc, #180]	; (8009d3c <MQTT_Connect+0x158>)
 8009c86:	f7ff fdef 	bl	8009868 <EC200_ReceiveCommand>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d049      	beq.n	8009d24 <MQTT_Connect+0x140>
        {
            /* Case 1: Received full response */
            memset(buff_temp1, 0, 50);
 8009c90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c94:	2232      	movs	r2, #50	; 0x32
 8009c96:	2100      	movs	r1, #0
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f002 fb0b 	bl	800c2b4 <memset>
            sprintf(buff_temp1, "\r\nOK\r\n\r\n+QMTCONN: %d,0,0\r\n", client_id);
 8009c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ca2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009ca6:	781a      	ldrb	r2, [r3, #0]
 8009ca8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cac:	4924      	ldr	r1, [pc, #144]	; (8009d40 <MQTT_Connect+0x15c>)
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f002 fae0 	bl	800c274 <siprintf>
            /* Case 2: Received half response */
            memset(buff_temp2, 0, 30);
 8009cb4:	f107 0310 	add.w	r3, r7, #16
 8009cb8:	221e      	movs	r2, #30
 8009cba:	2100      	movs	r1, #0
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f002 faf9 	bl	800c2b4 <memset>
            sprintf(buff_temp2, "\r\n+QMTCONN: %d,0,0\r\n", client_id);
 8009cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cc6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009cca:	781a      	ldrb	r2, [r3, #0]
 8009ccc:	f107 0310 	add.w	r3, r7, #16
 8009cd0:	491c      	ldr	r1, [pc, #112]	; (8009d44 <MQTT_Connect+0x160>)
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f002 face 	bl	800c274 <siprintf>

            if (EC200_CompareCommand(EC200_Command_Buffer, "\r\nOK\r\n"))
 8009cd8:	491b      	ldr	r1, [pc, #108]	; (8009d48 <MQTT_Connect+0x164>)
 8009cda:	4818      	ldr	r0, [pc, #96]	; (8009d3c <MQTT_Connect+0x158>)
 8009cdc:	f7ff fdb0 	bl	8009840 <EC200_CompareCommand>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d11e      	bne.n	8009d24 <MQTT_Connect+0x140>
            {
                /* Do nothing */
            }
            else if (EC200_CompareCommand(EC200_Command_Buffer, buff_temp1) || EC200_CompareCommand(EC200_Command_Buffer, buff_temp2))
 8009ce6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cea:	4619      	mov	r1, r3
 8009cec:	4813      	ldr	r0, [pc, #76]	; (8009d3c <MQTT_Connect+0x158>)
 8009cee:	f7ff fda7 	bl	8009840 <EC200_CompareCommand>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d108      	bne.n	8009d0a <MQTT_Connect+0x126>
 8009cf8:	f107 0310 	add.w	r3, r7, #16
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	480f      	ldr	r0, [pc, #60]	; (8009d3c <MQTT_Connect+0x158>)
 8009d00:	f7ff fd9e 	bl	8009840 <EC200_CompareCommand>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d006      	beq.n	8009d18 <MQTT_Connect+0x134>
            {
                return_function = _TRUE_;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
                MQTT_connect_step = 0;
 8009d10:	4b08      	ldr	r3, [pc, #32]	; (8009d34 <MQTT_Connect+0x150>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	701a      	strb	r2, [r3, #0]
 8009d16:	e005      	b.n	8009d24 <MQTT_Connect+0x140>
            }
            else /* Error command */
            {
                return_function = _FALSE_;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
                MQTT_connect_step = 0;
 8009d1e:	4b05      	ldr	r3, [pc, #20]	; (8009d34 <MQTT_Connect+0x150>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	701a      	strb	r2, [r3, #0]
            }
        }
        /* TODO: Timeout should be added here */
    }
    return return_function;
 8009d24:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd90      	pop	{r4, r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20000a45 	.word	0x20000a45
 8009d38:	0800cb94 	.word	0x0800cb94
 8009d3c:	200008b0 	.word	0x200008b0
 8009d40:	0800cbac 	.word	0x0800cbac
 8009d44:	0800cbc8 	.word	0x0800cbc8
 8009d48:	0800cae4 	.word	0x0800cae4

08009d4c <SIM_MQTT_pubTopic>:
/**
 * Publish data to particular topic.
 */
boolean_3_state_e SIM_MQTT_pubTopic(uint8_t client_id, uint8_t msgid, uint8_t qos, uint8_t retain, uint8_t *topic,
                                    uint16_t send_datalength, uint8_t *data)
{
 8009d4c:	b5b0      	push	{r4, r5, r7, lr}
 8009d4e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8009d52:	af04      	add	r7, sp, #16
 8009d54:	4605      	mov	r5, r0
 8009d56:	460c      	mov	r4, r1
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009d60:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8009d64:	462a      	mov	r2, r5
 8009d66:	701a      	strb	r2, [r3, #0]
 8009d68:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009d6c:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8009d70:	4622      	mov	r2, r4
 8009d72:	701a      	strb	r2, [r3, #0]
 8009d74:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009d78:	f2a3 13eb 	subw	r3, r3, #491	; 0x1eb
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	701a      	strb	r2, [r3, #0]
 8009d80:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009d84:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009d88:	460a      	mov	r2, r1
 8009d8a:	701a      	strb	r2, [r3, #0]
    boolean_3_state_e return_function = _NOT_DEFINE_;
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
    static uint8_t MQTT_pubTopic_step = 0;
    uint8_t buff_temp[400];
    uint8_t buff_temp1[50];
    uint8_t buff_temp2[30];

    if (MQTT_pubTopic_step == 0)
 8009d92:	4b61      	ldr	r3, [pc, #388]	; (8009f18 <SIM_MQTT_pubTopic+0x1cc>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d133      	bne.n	8009e02 <SIM_MQTT_pubTopic+0xb6>
    {
        memset(buff_temp, 0, 400);
 8009d9a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009d9e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009da2:	2100      	movs	r1, #0
 8009da4:	4618      	mov	r0, r3
 8009da6:	f002 fa85 	bl	800c2b4 <memset>
        sprintf(buff_temp, "AT+QMTPUBEX=%d,%d,%d,%d,%s,%d\r", client_id, msgid, qos, retain, topic, send_datalength);
 8009daa:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009dae:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8009db2:	781c      	ldrb	r4, [r3, #0]
 8009db4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009db8:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8009dbc:	781d      	ldrb	r5, [r3, #0]
 8009dbe:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009dc2:	f2a3 13eb 	subw	r3, r3, #491	; 0x1eb
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8009dcc:	f5a2 72f6 	sub.w	r2, r2, #492	; 0x1ec
 8009dd0:	7812      	ldrb	r2, [r2, #0]
 8009dd2:	f8b7 1204 	ldrh.w	r1, [r7, #516]	; 0x204
 8009dd6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8009dda:	9103      	str	r1, [sp, #12]
 8009ddc:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 8009de0:	9102      	str	r1, [sp, #8]
 8009de2:	9201      	str	r2, [sp, #4]
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	462b      	mov	r3, r5
 8009de8:	4622      	mov	r2, r4
 8009dea:	494c      	ldr	r1, [pc, #304]	; (8009f1c <SIM_MQTT_pubTopic+0x1d0>)
 8009dec:	f002 fa42 	bl	800c274 <siprintf>
        EC200_SendCommand(buff_temp);
 8009df0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7ff fd6b 	bl	80098d0 <EC200_SendCommand>

        MQTT_pubTopic_step = 1;
 8009dfa:	4b47      	ldr	r3, [pc, #284]	; (8009f18 <SIM_MQTT_pubTopic+0x1cc>)
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	701a      	strb	r2, [r3, #0]
 8009e00:	e083      	b.n	8009f0a <SIM_MQTT_pubTopic+0x1be>
    }

    else if (MQTT_pubTopic_step == 1)
 8009e02:	4b45      	ldr	r3, [pc, #276]	; (8009f18 <SIM_MQTT_pubTopic+0x1cc>)
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d117      	bne.n	8009e3a <SIM_MQTT_pubTopic+0xee>
    {
        if (EC200_ReceiveCommand(EC200_Command_Buffer))
 8009e0a:	4845      	ldr	r0, [pc, #276]	; (8009f20 <SIM_MQTT_pubTopic+0x1d4>)
 8009e0c:	f7ff fd2c 	bl	8009868 <EC200_ReceiveCommand>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d079      	beq.n	8009f0a <SIM_MQTT_pubTopic+0x1be>
        {
            if (EC200_CompareCommand(EC200_Command_Buffer, "\r\n> "))
 8009e16:	4943      	ldr	r1, [pc, #268]	; (8009f24 <SIM_MQTT_pubTopic+0x1d8>)
 8009e18:	4841      	ldr	r0, [pc, #260]	; (8009f20 <SIM_MQTT_pubTopic+0x1d4>)
 8009e1a:	f7ff fd11 	bl	8009840 <EC200_CompareCommand>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d003      	beq.n	8009e2c <SIM_MQTT_pubTopic+0xe0>
            {
                MQTT_pubTopic_step = 2;
 8009e24:	4b3c      	ldr	r3, [pc, #240]	; (8009f18 <SIM_MQTT_pubTopic+0x1cc>)
 8009e26:	2202      	movs	r2, #2
 8009e28:	701a      	strb	r2, [r3, #0]
 8009e2a:	e06e      	b.n	8009f0a <SIM_MQTT_pubTopic+0x1be>
            }
            else /* Error command */
            {
                return_function = _FALSE_;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
                MQTT_pubTopic_step = 0;
 8009e32:	4b39      	ldr	r3, [pc, #228]	; (8009f18 <SIM_MQTT_pubTopic+0x1cc>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	701a      	strb	r2, [r3, #0]
 8009e38:	e067      	b.n	8009f0a <SIM_MQTT_pubTopic+0x1be>
            }
        }
        /* TODO: Timeout should be added here */
    }

    else if (MQTT_pubTopic_step == 2)
 8009e3a:	4b37      	ldr	r3, [pc, #220]	; (8009f18 <SIM_MQTT_pubTopic+0x1cc>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d107      	bne.n	8009e52 <SIM_MQTT_pubTopic+0x106>
    {
        EC200_SendCommand(data);
 8009e42:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8009e46:	f7ff fd43 	bl	80098d0 <EC200_SendCommand>

        MQTT_pubTopic_step = 3;
 8009e4a:	4b33      	ldr	r3, [pc, #204]	; (8009f18 <SIM_MQTT_pubTopic+0x1cc>)
 8009e4c:	2203      	movs	r2, #3
 8009e4e:	701a      	strb	r2, [r3, #0]
 8009e50:	e05b      	b.n	8009f0a <SIM_MQTT_pubTopic+0x1be>
    }

    else if (MQTT_pubTopic_step == 3)
 8009e52:	4b31      	ldr	r3, [pc, #196]	; (8009f18 <SIM_MQTT_pubTopic+0x1cc>)
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d157      	bne.n	8009f0a <SIM_MQTT_pubTopic+0x1be>
    {
        if (EC200_ReceiveCommand(EC200_Command_Buffer))
 8009e5a:	4831      	ldr	r0, [pc, #196]	; (8009f20 <SIM_MQTT_pubTopic+0x1d4>)
 8009e5c:	f7ff fd04 	bl	8009868 <EC200_ReceiveCommand>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d051      	beq.n	8009f0a <SIM_MQTT_pubTopic+0x1be>
        {
            /* Case 1: Received full response */
            memset(buff_temp1, 0, 50);
 8009e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e6a:	2232      	movs	r2, #50	; 0x32
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f002 fa20 	bl	800c2b4 <memset>
            sprintf(buff_temp1, "\r\nOK\r\n\r\n+QMTPUBEX: %d,%d,0\r\n", client_id, msgid);
 8009e74:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009e78:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8009e7c:	781a      	ldrb	r2, [r3, #0]
 8009e7e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009e82:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009e8c:	4926      	ldr	r1, [pc, #152]	; (8009f28 <SIM_MQTT_pubTopic+0x1dc>)
 8009e8e:	f002 f9f1 	bl	800c274 <siprintf>
            /* Case 2: Received half response */
            memset(buff_temp2, 0, 30);
 8009e92:	f107 0308 	add.w	r3, r7, #8
 8009e96:	221e      	movs	r2, #30
 8009e98:	2100      	movs	r1, #0
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f002 fa0a 	bl	800c2b4 <memset>
            sprintf(buff_temp2, "\r\n+QMTPUBEX: %d,%d,0\r\n", client_id, msgid);
 8009ea0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009ea4:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8009ea8:	781a      	ldrb	r2, [r3, #0]
 8009eaa:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009eae:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	f107 0008 	add.w	r0, r7, #8
 8009eb8:	491c      	ldr	r1, [pc, #112]	; (8009f2c <SIM_MQTT_pubTopic+0x1e0>)
 8009eba:	f002 f9db 	bl	800c274 <siprintf>

            if (EC200_CompareCommand(EC200_Command_Buffer, "\r\nOK\r\n"))
 8009ebe:	491c      	ldr	r1, [pc, #112]	; (8009f30 <SIM_MQTT_pubTopic+0x1e4>)
 8009ec0:	4817      	ldr	r0, [pc, #92]	; (8009f20 <SIM_MQTT_pubTopic+0x1d4>)
 8009ec2:	f7ff fcbd 	bl	8009840 <EC200_CompareCommand>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d11e      	bne.n	8009f0a <SIM_MQTT_pubTopic+0x1be>
            {
                /* Do nothing */
            }
            else if (EC200_CompareCommand(EC200_Command_Buffer, buff_temp1) || EC200_CompareCommand(EC200_Command_Buffer, buff_temp2))
 8009ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4813      	ldr	r0, [pc, #76]	; (8009f20 <SIM_MQTT_pubTopic+0x1d4>)
 8009ed4:	f7ff fcb4 	bl	8009840 <EC200_CompareCommand>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d108      	bne.n	8009ef0 <SIM_MQTT_pubTopic+0x1a4>
 8009ede:	f107 0308 	add.w	r3, r7, #8
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	480e      	ldr	r0, [pc, #56]	; (8009f20 <SIM_MQTT_pubTopic+0x1d4>)
 8009ee6:	f7ff fcab 	bl	8009840 <EC200_CompareCommand>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d006      	beq.n	8009efe <SIM_MQTT_pubTopic+0x1b2>
            {
                return_function = _TRUE_;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
                MQTT_pubTopic_step = 0;
 8009ef6:	4b08      	ldr	r3, [pc, #32]	; (8009f18 <SIM_MQTT_pubTopic+0x1cc>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	701a      	strb	r2, [r3, #0]
 8009efc:	e005      	b.n	8009f0a <SIM_MQTT_pubTopic+0x1be>
            }
            else /* Error command */
            {
                return_function = _FALSE_;
 8009efe:	2300      	movs	r3, #0
 8009f00:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
                MQTT_pubTopic_step = 0;
 8009f04:	4b04      	ldr	r3, [pc, #16]	; (8009f18 <SIM_MQTT_pubTopic+0x1cc>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	701a      	strb	r2, [r3, #0]
            }
        }
        /* TODO: Timeout should be added here */
    }
    return return_function;
 8009f0a:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bdb0      	pop	{r4, r5, r7, pc}
 8009f18:	20000a46 	.word	0x20000a46
 8009f1c:	0800cc20 	.word	0x0800cc20
 8009f20:	200008b0 	.word	0x200008b0
 8009f24:	0800cc40 	.word	0x0800cc40
 8009f28:	0800cc48 	.word	0x0800cc48
 8009f2c:	0800cc68 	.word	0x0800cc68
 8009f30:	0800cae4 	.word	0x0800cae4

08009f34 <SIM_MQTT_subTopic>:

boolean_3_state_e SIM_MQTT_subTopic(uint8_t client_id, uint8_t msgid, char *topic, uint8_t qos)
{
 8009f34:	b590      	push	{r4, r7, lr}
 8009f36:	b0ff      	sub	sp, #508	; 0x1fc
 8009f38:	af02      	add	r7, sp, #8
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8009f42:	f5a1 71f8 	sub.w	r1, r1, #496	; 0x1f0
 8009f46:	600a      	str	r2, [r1, #0]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009f4e:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8009f52:	4622      	mov	r2, r4
 8009f54:	701a      	strb	r2, [r3, #0]
 8009f56:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009f5a:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8009f5e:	4602      	mov	r2, r0
 8009f60:	701a      	strb	r2, [r3, #0]
 8009f62:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009f66:	f2a3 13eb 	subw	r3, r3, #491	; 0x1eb
 8009f6a:	460a      	mov	r2, r1
 8009f6c:	701a      	strb	r2, [r3, #0]
    boolean_3_state_e return_function = _NOT_DEFINE_;
 8009f6e:	2302      	movs	r3, #2
 8009f70:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
    static uint8_t MQTT_subTopic_step = 0;
    char buff_temp[400];
    char buff_temp1[50];
    char buff_temp2[30];

    if (MQTT_subTopic_step == 0)
 8009f74:	4b49      	ldr	r3, [pc, #292]	; (800a09c <SIM_MQTT_subTopic+0x168>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d12c      	bne.n	8009fd6 <SIM_MQTT_subTopic+0xa2>
    {
        memset(buff_temp, 0, 400);
 8009f7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009f80:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009f84:	2100      	movs	r1, #0
 8009f86:	4618      	mov	r0, r3
 8009f88:	f002 f994 	bl	800c2b4 <memset>
        sprintf(buff_temp, "AT+QMTSUB=%d,%d,%s,%d\r", client_id, msgid, topic, qos);
 8009f8c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009f90:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8009f94:	781a      	ldrb	r2, [r3, #0]
 8009f96:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009f9a:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8009f9e:	7819      	ldrb	r1, [r3, #0]
 8009fa0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009fa4:	f2a3 13eb 	subw	r3, r3, #491	; 0x1eb
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009fb4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	4938      	ldr	r1, [pc, #224]	; (800a0a0 <SIM_MQTT_subTopic+0x16c>)
 8009fc0:	f002 f958 	bl	800c274 <siprintf>
        EC200_SendCommand(buff_temp);
 8009fc4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff fc81 	bl	80098d0 <EC200_SendCommand>

        MQTT_subTopic_step = 1;
 8009fce:	4b33      	ldr	r3, [pc, #204]	; (800a09c <SIM_MQTT_subTopic+0x168>)
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	701a      	strb	r2, [r3, #0]
 8009fd4:	e05b      	b.n	800a08e <SIM_MQTT_subTopic+0x15a>
    }

    else if (MQTT_subTopic_step == 1)
 8009fd6:	4b31      	ldr	r3, [pc, #196]	; (800a09c <SIM_MQTT_subTopic+0x168>)
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d157      	bne.n	800a08e <SIM_MQTT_subTopic+0x15a>
    {
        if (EC200_ReceiveCommand(EC200_Command_Buffer))
 8009fde:	4831      	ldr	r0, [pc, #196]	; (800a0a4 <SIM_MQTT_subTopic+0x170>)
 8009fe0:	f7ff fc42 	bl	8009868 <EC200_ReceiveCommand>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d051      	beq.n	800a08e <SIM_MQTT_subTopic+0x15a>
        {
            /* Case 1: Received full response */
            memset(buff_temp1, 0, 50);
 8009fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fee:	2232      	movs	r2, #50	; 0x32
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f002 f95e 	bl	800c2b4 <memset>
            sprintf(buff_temp1, "\r\nOK\r\n\r\n+QMTSUB: %d,%d,0,0\r\n", client_id, msgid);
 8009ff8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009ffc:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 800a000:	781a      	ldrb	r2, [r3, #0]
 800a002:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a006:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a010:	4925      	ldr	r1, [pc, #148]	; (800a0a8 <SIM_MQTT_subTopic+0x174>)
 800a012:	f002 f92f 	bl	800c274 <siprintf>
            /* Case 2: Received half response */
            memset(buff_temp2, 0, 30);
 800a016:	f107 0308 	add.w	r3, r7, #8
 800a01a:	221e      	movs	r2, #30
 800a01c:	2100      	movs	r1, #0
 800a01e:	4618      	mov	r0, r3
 800a020:	f002 f948 	bl	800c2b4 <memset>
            sprintf(buff_temp2, "\r\n+QMTSUB: %d,%d,0,0\r\n", client_id, msgid);
 800a024:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a028:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 800a02c:	781a      	ldrb	r2, [r3, #0]
 800a02e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a032:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	f107 0008 	add.w	r0, r7, #8
 800a03c:	491b      	ldr	r1, [pc, #108]	; (800a0ac <SIM_MQTT_subTopic+0x178>)
 800a03e:	f002 f919 	bl	800c274 <siprintf>

            if (EC200_CompareCommand(EC200_Command_Buffer, "\r\nOK\r\n"))
 800a042:	491b      	ldr	r1, [pc, #108]	; (800a0b0 <SIM_MQTT_subTopic+0x17c>)
 800a044:	4817      	ldr	r0, [pc, #92]	; (800a0a4 <SIM_MQTT_subTopic+0x170>)
 800a046:	f7ff fbfb 	bl	8009840 <EC200_CompareCommand>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d11e      	bne.n	800a08e <SIM_MQTT_subTopic+0x15a>
            {
                /* Do nothing */
            }
            else if ((strstr((char *)EC200_Command_Buffer, buff_temp1) != NULL) || ((strstr((char *)EC200_Command_Buffer, buff_temp2) != NULL)))
 800a050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a054:	4619      	mov	r1, r3
 800a056:	4813      	ldr	r0, [pc, #76]	; (800a0a4 <SIM_MQTT_subTopic+0x170>)
 800a058:	f002 f934 	bl	800c2c4 <strstr>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d108      	bne.n	800a074 <SIM_MQTT_subTopic+0x140>
 800a062:	f107 0308 	add.w	r3, r7, #8
 800a066:	4619      	mov	r1, r3
 800a068:	480e      	ldr	r0, [pc, #56]	; (800a0a4 <SIM_MQTT_subTopic+0x170>)
 800a06a:	f002 f92b 	bl	800c2c4 <strstr>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d006      	beq.n	800a082 <SIM_MQTT_subTopic+0x14e>
            {
                return_function = _TRUE_;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
                MQTT_subTopic_step = 0;
 800a07a:	4b08      	ldr	r3, [pc, #32]	; (800a09c <SIM_MQTT_subTopic+0x168>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	e005      	b.n	800a08e <SIM_MQTT_subTopic+0x15a>
            }
            else /* Error command */
            {
                return_function = _FALSE_;
 800a082:	2300      	movs	r3, #0
 800a084:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
                MQTT_subTopic_step = 0;
 800a088:	4b04      	ldr	r3, [pc, #16]	; (800a09c <SIM_MQTT_subTopic+0x168>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    /* TODO: Timeout should be added here */

    return return_function;
 800a08e:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
}
 800a092:	4618      	mov	r0, r3
 800a094:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd90      	pop	{r4, r7, pc}
 800a09c:	20000a47 	.word	0x20000a47
 800a0a0:	0800cc80 	.word	0x0800cc80
 800a0a4:	200008b0 	.word	0x200008b0
 800a0a8:	0800cc98 	.word	0x0800cc98
 800a0ac:	0800ccb8 	.word	0x0800ccb8
 800a0b0:	0800cae4 	.word	0x0800cae4

0800a0b4 <EC200_SIM_Start>:
/******************************************** Application sequence functions **********************************************/
/**
 * Initialize EC200 module after power-up.
 */
bool EC200_SIM_Start(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
    bool return_function = false;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	71fb      	strb	r3, [r7, #7]
    boolean_3_state_e check_result = _NOT_DEFINE_;
 800a0be:	2302      	movs	r3, #2
 800a0c0:	71bb      	strb	r3, [r7, #6]

    switch (ec200_simStart_state)
 800a0c2:	4b1c      	ldr	r3, [pc, #112]	; (800a134 <EC200_SIM_Start+0x80>)
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d829      	bhi.n	800a11e <EC200_SIM_Start+0x6a>
 800a0ca:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <EC200_SIM_Start+0x1c>)
 800a0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d0:	0800a0e1 	.word	0x0800a0e1
 800a0d4:	0800a0fb 	.word	0x0800a0fb
 800a0d8:	0800a119 	.word	0x0800a119
 800a0dc:	0800a11f 	.word	0x0800a11f
    {
    /* EC200_POWERED_OFF is the first state if the state rolls back */
    case EC200_POWER_OFF:
        if (Is_Power_ON())
 800a0e0:	f7ff fc02 	bl	80098e8 <Is_Power_ON>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d01b      	beq.n	800a122 <EC200_SIM_Start+0x6e>
        {
            ec200_simStart_state = EC200_POWERED_ON;
 800a0ea:	4b12      	ldr	r3, [pc, #72]	; (800a134 <EC200_SIM_Start+0x80>)
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	701a      	strb	r2, [r3, #0]
            EC200_Delayms(500); /* Delay after each state */
 800a0f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a0f4:	f7ff fb7c 	bl	80097f0 <EC200_Delayms>
        }
        break;
 800a0f8:	e013      	b.n	800a122 <EC200_SIM_Start+0x6e>
    case EC200_POWERED_ON:
        check_result = OffEcho();
 800a0fa:	f7ff fc13 	bl	8009924 <OffEcho>
 800a0fe:	4603      	mov	r3, r0
 800a100:	71bb      	strb	r3, [r7, #6]
        if (check_result == _TRUE_)
 800a102:	79bb      	ldrb	r3, [r7, #6]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d10e      	bne.n	800a126 <EC200_SIM_Start+0x72>
        {
            ec200_simStart_state = EC200_STARTING_DONE;
 800a108:	4b0a      	ldr	r3, [pc, #40]	; (800a134 <EC200_SIM_Start+0x80>)
 800a10a:	2202      	movs	r2, #2
 800a10c:	701a      	strb	r2, [r3, #0]
            EC200_Delayms(500); /* Delay after each state */
 800a10e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a112:	f7ff fb6d 	bl	80097f0 <EC200_Delayms>
        }
        break;
 800a116:	e006      	b.n	800a126 <EC200_SIM_Start+0x72>

    case EC200_STARTING_DONE: /* Starting completed */
        return_function = true;
 800a118:	2301      	movs	r3, #1
 800a11a:	71fb      	strb	r3, [r7, #7]
        break;
 800a11c:	e004      	b.n	800a128 <EC200_SIM_Start+0x74>
    case EC200_RESTART:
        /* TODO */
        break;

    default:
        break;
 800a11e:	bf00      	nop
 800a120:	e002      	b.n	800a128 <EC200_SIM_Start+0x74>
        break;
 800a122:	bf00      	nop
 800a124:	e000      	b.n	800a128 <EC200_SIM_Start+0x74>
        break;
 800a126:	bf00      	nop
    }
    return return_function;
 800a128:	79fb      	ldrb	r3, [r7, #7]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	200008ac 	.word	0x200008ac

0800a138 <EC200_SIM_Restart>:

void EC200_SIM_Restart(void)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
    /* Reset EC200 module using RESET PIN */
    EC200_RESET();
 800a13c:	f7ff fb63 	bl	8009806 <EC200_RESET>
    ec200_simConnectServer_state = MQTT_IDLE;
 800a140:	4b05      	ldr	r3, [pc, #20]	; (800a158 <EC200_SIM_Restart+0x20>)
 800a142:	2200      	movs	r2, #0
 800a144:	701a      	strb	r2, [r3, #0]
    ec200_simStart_state = EC200_POWER_OFF;
 800a146:	4b05      	ldr	r3, [pc, #20]	; (800a15c <EC200_SIM_Restart+0x24>)
 800a148:	2200      	movs	r2, #0
 800a14a:	701a      	strb	r2, [r3, #0]
    EC200_Delayms(1000);
 800a14c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a150:	f7ff fb4e 	bl	80097f0 <EC200_Delayms>
}
 800a154:	bf00      	nop
 800a156:	bd80      	pop	{r7, pc}
 800a158:	200008ad 	.word	0x200008ad
 800a15c:	200008ac 	.word	0x200008ac

0800a160 <EC200_MQTT_ConnectToServer>:

/**
 * MQTT client connects to Server.
 */
bool EC200_MQTT_ConnectToServer(void)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
    bool return_function = false;
 800a166:	2300      	movs	r3, #0
 800a168:	71fb      	strb	r3, [r7, #7]
    boolean_3_state_e check_result = _NOT_DEFINE_;
 800a16a:	2302      	movs	r3, #2
 800a16c:	71bb      	strb	r3, [r7, #6]
    static uint8_t reset_sim_countdown = EC200_RESET_COUNTDOWN; /* If MQTT reconnect greater than reset_sim_countdown then EC200 module is reset */

    if (EC200_SIM_Start()) /* If EC200 has been successfully started */
 800a16e:	f7ff ffa1 	bl	800a0b4 <EC200_SIM_Start>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 80ef 	beq.w	800a358 <EC200_MQTT_ConnectToServer+0x1f8>
    {
        switch (ec200_simConnectServer_state)
 800a17a:	4b7a      	ldr	r3, [pc, #488]	; (800a364 <EC200_MQTT_ConnectToServer+0x204>)
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	2b06      	cmp	r3, #6
 800a180:	f200 80df 	bhi.w	800a342 <EC200_MQTT_ConnectToServer+0x1e2>
 800a184:	a201      	add	r2, pc, #4	; (adr r2, 800a18c <EC200_MQTT_ConnectToServer+0x2c>)
 800a186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18a:	bf00      	nop
 800a18c:	0800a1a9 	.word	0x0800a1a9
 800a190:	0800a1f7 	.word	0x0800a1f7
 800a194:	0800a247 	.word	0x0800a247
 800a198:	0800a295 	.word	0x0800a295
 800a19c:	0800a2e3 	.word	0x0800a2e3
 800a1a0:	0800a331 	.word	0x0800a331
 800a1a4:	0800a337 	.word	0x0800a337
        {
        /* MQTT_IDLE is the first state if the state rolls back */
        case MQTT_IDLE:
            check_result = MQTT_SetKeepAlive_Time(KEEP_ALIVE_TIME, CLIENT_ID);
 800a1a8:	2102      	movs	r1, #2
 800a1aa:	2078      	movs	r0, #120	; 0x78
 800a1ac:	f7ff fbf0 	bl	8009990 <MQTT_SetKeepAlive_Time>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	71bb      	strb	r3, [r7, #6]
            if (check_result == _TRUE_)
 800a1b4:	79bb      	ldrb	r3, [r7, #6]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d10a      	bne.n	800a1d0 <EC200_MQTT_ConnectToServer+0x70>
            {
                ec200_simConnectServer_state = MQTT_SENT_KEEPALIVE;
 800a1ba:	4b6a      	ldr	r3, [pc, #424]	; (800a364 <EC200_MQTT_ConnectToServer+0x204>)
 800a1bc:	2201      	movs	r2, #1
 800a1be:	701a      	strb	r2, [r3, #0]
                reset_sim_countdown = EC200_RESET_COUNTDOWN;
 800a1c0:	4b69      	ldr	r3, [pc, #420]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a1c2:	2205      	movs	r2, #5
 800a1c4:	701a      	strb	r2, [r3, #0]
                EC200_Delayms(500); /* Delay after each state */
 800a1c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a1ca:	f7ff fb11 	bl	80097f0 <EC200_Delayms>
                if (reset_sim_countdown == 0)
                {
                    ec200_simConnectServer_state = MQTT_RESET;
                }
            }
            break;
 800a1ce:	e0ba      	b.n	800a346 <EC200_MQTT_ConnectToServer+0x1e6>
            else if (check_result == _FALSE_)
 800a1d0:	79bb      	ldrb	r3, [r7, #6]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f040 80b7 	bne.w	800a346 <EC200_MQTT_ConnectToServer+0x1e6>
                reset_sim_countdown--;
 800a1d8:	4b63      	ldr	r3, [pc, #396]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	4b61      	ldr	r3, [pc, #388]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a1e2:	701a      	strb	r2, [r3, #0]
                if (reset_sim_countdown == 0)
 800a1e4:	4b60      	ldr	r3, [pc, #384]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f040 80ac 	bne.w	800a346 <EC200_MQTT_ConnectToServer+0x1e6>
                    ec200_simConnectServer_state = MQTT_RESET;
 800a1ee:	4b5d      	ldr	r3, [pc, #372]	; (800a364 <EC200_MQTT_ConnectToServer+0x204>)
 800a1f0:	2206      	movs	r2, #6
 800a1f2:	701a      	strb	r2, [r3, #0]
            break;
 800a1f4:	e0a7      	b.n	800a346 <EC200_MQTT_ConnectToServer+0x1e6>

        case MQTT_SENT_KEEPALIVE:
            check_result = MQTT_Receiving_Mode(CLIENT_ID, 0, 0);
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	2002      	movs	r0, #2
 800a1fc:	f7ff fc18 	bl	8009a30 <MQTT_Receiving_Mode>
 800a200:	4603      	mov	r3, r0
 800a202:	71bb      	strb	r3, [r7, #6]
            if (check_result == _TRUE_)
 800a204:	79bb      	ldrb	r3, [r7, #6]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d10a      	bne.n	800a220 <EC200_MQTT_ConnectToServer+0xc0>
            {
                ec200_simConnectServer_state = MQTT_SENT_RECEIVING_MODE;
 800a20a:	4b56      	ldr	r3, [pc, #344]	; (800a364 <EC200_MQTT_ConnectToServer+0x204>)
 800a20c:	2202      	movs	r2, #2
 800a20e:	701a      	strb	r2, [r3, #0]
                reset_sim_countdown = EC200_RESET_COUNTDOWN;
 800a210:	4b55      	ldr	r3, [pc, #340]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a212:	2205      	movs	r2, #5
 800a214:	701a      	strb	r2, [r3, #0]
                EC200_Delayms(500); /* Delay after each state */
 800a216:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a21a:	f7ff fae9 	bl	80097f0 <EC200_Delayms>
                {
                    ec200_simConnectServer_state = MQTT_RESET;
                }
            }

            break;
 800a21e:	e094      	b.n	800a34a <EC200_MQTT_ConnectToServer+0x1ea>
            else if (check_result == _FALSE_)
 800a220:	79bb      	ldrb	r3, [r7, #6]
 800a222:	2b00      	cmp	r3, #0
 800a224:	f040 8091 	bne.w	800a34a <EC200_MQTT_ConnectToServer+0x1ea>
                reset_sim_countdown--;
 800a228:	4b4f      	ldr	r3, [pc, #316]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	4b4d      	ldr	r3, [pc, #308]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a232:	701a      	strb	r2, [r3, #0]
                if (reset_sim_countdown == 0)
 800a234:	4b4c      	ldr	r3, [pc, #304]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f040 8086 	bne.w	800a34a <EC200_MQTT_ConnectToServer+0x1ea>
                    ec200_simConnectServer_state = MQTT_RESET;
 800a23e:	4b49      	ldr	r3, [pc, #292]	; (800a364 <EC200_MQTT_ConnectToServer+0x204>)
 800a240:	2206      	movs	r2, #6
 800a242:	701a      	strb	r2, [r3, #0]
            break;
 800a244:	e081      	b.n	800a34a <EC200_MQTT_ConnectToServer+0x1ea>

        case MQTT_SENT_RECEIVING_MODE:
            check_result = MQTT_Open(CLIENT_ID, MQTT_BROKER, MQTT_PORT);
 800a246:	f240 725b 	movw	r2, #1883	; 0x75b
 800a24a:	4948      	ldr	r1, [pc, #288]	; (800a36c <EC200_MQTT_ConnectToServer+0x20c>)
 800a24c:	2002      	movs	r0, #2
 800a24e:	f7ff fc43 	bl	8009ad8 <MQTT_Open>
 800a252:	4603      	mov	r3, r0
 800a254:	71bb      	strb	r3, [r7, #6]
            if (check_result == _TRUE_)
 800a256:	79bb      	ldrb	r3, [r7, #6]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d10a      	bne.n	800a272 <EC200_MQTT_ConnectToServer+0x112>
            {
                ec200_simConnectServer_state = MQTT_OPENED;
 800a25c:	4b41      	ldr	r3, [pc, #260]	; (800a364 <EC200_MQTT_ConnectToServer+0x204>)
 800a25e:	2203      	movs	r2, #3
 800a260:	701a      	strb	r2, [r3, #0]
                reset_sim_countdown = EC200_RESET_COUNTDOWN;
 800a262:	4b41      	ldr	r3, [pc, #260]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a264:	2205      	movs	r2, #5
 800a266:	701a      	strb	r2, [r3, #0]
                EC200_Delayms(500); /* Delay after each state */
 800a268:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a26c:	f7ff fac0 	bl	80097f0 <EC200_Delayms>
                if (reset_sim_countdown == 0)
                {
                    ec200_simConnectServer_state = MQTT_RESET;
                }
            }
            break;
 800a270:	e06d      	b.n	800a34e <EC200_MQTT_ConnectToServer+0x1ee>
            else if (check_result == _FALSE_)
 800a272:	79bb      	ldrb	r3, [r7, #6]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d16a      	bne.n	800a34e <EC200_MQTT_ConnectToServer+0x1ee>
                reset_sim_countdown--;
 800a278:	4b3b      	ldr	r3, [pc, #236]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	4b39      	ldr	r3, [pc, #228]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a282:	701a      	strb	r2, [r3, #0]
                if (reset_sim_countdown == 0)
 800a284:	4b38      	ldr	r3, [pc, #224]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d160      	bne.n	800a34e <EC200_MQTT_ConnectToServer+0x1ee>
                    ec200_simConnectServer_state = MQTT_RESET;
 800a28c:	4b35      	ldr	r3, [pc, #212]	; (800a364 <EC200_MQTT_ConnectToServer+0x204>)
 800a28e:	2206      	movs	r2, #6
 800a290:	701a      	strb	r2, [r3, #0]
            break;
 800a292:	e05c      	b.n	800a34e <EC200_MQTT_ConnectToServer+0x1ee>


        case MQTT_OPENED:
            check_result = MQTT_Connect(CLIENT_ID, MQTT_CLIENT_NAME, MQTT_USER, MQTT_PASSWORD);
 800a294:	4b36      	ldr	r3, [pc, #216]	; (800a370 <EC200_MQTT_ConnectToServer+0x210>)
 800a296:	4a36      	ldr	r2, [pc, #216]	; (800a370 <EC200_MQTT_ConnectToServer+0x210>)
 800a298:	4936      	ldr	r1, [pc, #216]	; (800a374 <EC200_MQTT_ConnectToServer+0x214>)
 800a29a:	2002      	movs	r0, #2
 800a29c:	f7ff fca2 	bl	8009be4 <MQTT_Connect>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	71bb      	strb	r3, [r7, #6]
            if (check_result == _TRUE_)
 800a2a4:	79bb      	ldrb	r3, [r7, #6]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d10a      	bne.n	800a2c0 <EC200_MQTT_ConnectToServer+0x160>
            {
                ec200_simConnectServer_state = MQTT_CONNECTED_DONE;
 800a2aa:	4b2e      	ldr	r3, [pc, #184]	; (800a364 <EC200_MQTT_ConnectToServer+0x204>)
 800a2ac:	2204      	movs	r2, #4
 800a2ae:	701a      	strb	r2, [r3, #0]
                reset_sim_countdown = EC200_RESET_COUNTDOWN;
 800a2b0:	4b2d      	ldr	r3, [pc, #180]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a2b2:	2205      	movs	r2, #5
 800a2b4:	701a      	strb	r2, [r3, #0]
                EC200_Delayms(500); /* Delay after each state */
 800a2b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a2ba:	f7ff fa99 	bl	80097f0 <EC200_Delayms>
                if (reset_sim_countdown == 0)
                {
                    ec200_simConnectServer_state = MQTT_RESET;
                }
            }
            break;
 800a2be:	e048      	b.n	800a352 <EC200_MQTT_ConnectToServer+0x1f2>
            else if (check_result == _FALSE_)
 800a2c0:	79bb      	ldrb	r3, [r7, #6]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d145      	bne.n	800a352 <EC200_MQTT_ConnectToServer+0x1f2>
                reset_sim_countdown--;
 800a2c6:	4b28      	ldr	r3, [pc, #160]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	4b26      	ldr	r3, [pc, #152]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a2d0:	701a      	strb	r2, [r3, #0]
                if (reset_sim_countdown == 0)
 800a2d2:	4b25      	ldr	r3, [pc, #148]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d13b      	bne.n	800a352 <EC200_MQTT_ConnectToServer+0x1f2>
                    ec200_simConnectServer_state = MQTT_RESET;
 800a2da:	4b22      	ldr	r3, [pc, #136]	; (800a364 <EC200_MQTT_ConnectToServer+0x204>)
 800a2dc:	2206      	movs	r2, #6
 800a2de:	701a      	strb	r2, [r3, #0]
            break;
 800a2e0:	e037      	b.n	800a352 <EC200_MQTT_ConnectToServer+0x1f2>

        case MQTT_CONNECTED_DONE:
            check_result = SIM_MQTT_subTopic(CLIENT_ID, MQTT_MSG_ID, MQTT_SUB_TOPIC, MQTT_QOS_SUB);
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	4a24      	ldr	r2, [pc, #144]	; (800a378 <EC200_MQTT_ConnectToServer+0x218>)
 800a2e6:	2102      	movs	r1, #2
 800a2e8:	2002      	movs	r0, #2
 800a2ea:	f7ff fe23 	bl	8009f34 <SIM_MQTT_subTopic>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	71bb      	strb	r3, [r7, #6]
            if (check_result == _TRUE_)
 800a2f2:	79bb      	ldrb	r3, [r7, #6]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d10a      	bne.n	800a30e <EC200_MQTT_ConnectToServer+0x1ae>
            {
                ec200_simConnectServer_state = MQTT_SUBCRIBE;
 800a2f8:	4b1a      	ldr	r3, [pc, #104]	; (800a364 <EC200_MQTT_ConnectToServer+0x204>)
 800a2fa:	2205      	movs	r2, #5
 800a2fc:	701a      	strb	r2, [r3, #0]
                reset_sim_countdown = EC200_RESET_COUNTDOWN;
 800a2fe:	4b1a      	ldr	r3, [pc, #104]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a300:	2205      	movs	r2, #5
 800a302:	701a      	strb	r2, [r3, #0]
                EC200_Delayms(500); /* Delay after each state */
 800a304:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a308:	f7ff fa72 	bl	80097f0 <EC200_Delayms>
                {
                    ec200_simConnectServer_state = MQTT_RESET;
                }
            }

            break;
 800a30c:	e023      	b.n	800a356 <EC200_MQTT_ConnectToServer+0x1f6>
            else if (check_result == _FALSE_)
 800a30e:	79bb      	ldrb	r3, [r7, #6]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d120      	bne.n	800a356 <EC200_MQTT_ConnectToServer+0x1f6>
                reset_sim_countdown--;
 800a314:	4b14      	ldr	r3, [pc, #80]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	3b01      	subs	r3, #1
 800a31a:	b2da      	uxtb	r2, r3
 800a31c:	4b12      	ldr	r3, [pc, #72]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a31e:	701a      	strb	r2, [r3, #0]
                if (reset_sim_countdown == 0)
 800a320:	4b11      	ldr	r3, [pc, #68]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d116      	bne.n	800a356 <EC200_MQTT_ConnectToServer+0x1f6>
                    ec200_simConnectServer_state = MQTT_RESET;
 800a328:	4b0e      	ldr	r3, [pc, #56]	; (800a364 <EC200_MQTT_ConnectToServer+0x204>)
 800a32a:	2206      	movs	r2, #6
 800a32c:	701a      	strb	r2, [r3, #0]
            break;
 800a32e:	e012      	b.n	800a356 <EC200_MQTT_ConnectToServer+0x1f6>

        case MQTT_SUBCRIBE:
            return_function = true;
 800a330:	2301      	movs	r3, #1
 800a332:	71fb      	strb	r3, [r7, #7]

            break;
 800a334:	e010      	b.n	800a358 <EC200_MQTT_ConnectToServer+0x1f8>

        case MQTT_RESET:
            reset_sim_countdown = EC200_RESET_COUNTDOWN;
 800a336:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <EC200_MQTT_ConnectToServer+0x208>)
 800a338:	2205      	movs	r2, #5
 800a33a:	701a      	strb	r2, [r3, #0]
            EC200_SIM_Restart();
 800a33c:	f7ff fefc 	bl	800a138 <EC200_SIM_Restart>

            break;
 800a340:	e00a      	b.n	800a358 <EC200_MQTT_ConnectToServer+0x1f8>

        default:
            break;
 800a342:	bf00      	nop
 800a344:	e008      	b.n	800a358 <EC200_MQTT_ConnectToServer+0x1f8>
            break;
 800a346:	bf00      	nop
 800a348:	e006      	b.n	800a358 <EC200_MQTT_ConnectToServer+0x1f8>
            break;
 800a34a:	bf00      	nop
 800a34c:	e004      	b.n	800a358 <EC200_MQTT_ConnectToServer+0x1f8>
            break;
 800a34e:	bf00      	nop
 800a350:	e002      	b.n	800a358 <EC200_MQTT_ConnectToServer+0x1f8>
            break;
 800a352:	bf00      	nop
 800a354:	e000      	b.n	800a358 <EC200_MQTT_ConnectToServer+0x1f8>
            break;
 800a356:	bf00      	nop
        }
    }

    return return_function;
 800a358:	79fb      	ldrb	r3, [r7, #7]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	200008ad 	.word	0x200008ad
 800a368:	200000d0 	.word	0x200000d0
 800a36c:	0800ccd0 	.word	0x0800ccd0
 800a370:	0800cce4 	.word	0x0800cce4
 800a374:	0800cce8 	.word	0x0800cce8
 800a378:	0800ccec 	.word	0x0800ccec

0800a37c <MQTT_Transmit_Data>:

/**
 * Send data to server, this function's argument can be passed by the different data types.
 */
bool MQTT_Transmit_Data(void *mqtt_data_struct, mqtt_transferring_data_e transferring_data_type)
{
 800a37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a380:	b0a9      	sub	sp, #164	; 0xa4
 800a382:	af08      	add	r7, sp, #32
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	460b      	mov	r3, r1
 800a388:	70fb      	strb	r3, [r7, #3]
    bool return_function = false;
 800a38a:	2300      	movs	r3, #0
 800a38c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    boolean_3_state_e check_result = _NOT_DEFINE_;
 800a390:	2302      	movs	r3, #2
 800a392:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    
    if (mqtt_data_struct != NULL)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f000 80f8 	beq.w	800a58e <MQTT_Transmit_Data+0x212>
    {
        switch (transferring_data_type)
 800a39e:	78fb      	ldrb	r3, [r7, #3]
 800a3a0:	2b03      	cmp	r3, #3
 800a3a2:	f200 80ed 	bhi.w	800a580 <MQTT_Transmit_Data+0x204>
 800a3a6:	a201      	add	r2, pc, #4	; (adr r2, 800a3ac <MQTT_Transmit_Data+0x30>)
 800a3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ac:	0800a581 	.word	0x0800a581
 800a3b0:	0800a3bd 	.word	0x0800a3bd
 800a3b4:	0800a45b 	.word	0x0800a45b
 800a3b8:	0800a511 	.word	0x0800a511
        {
        case BATTERY_DATA:
        {
            battery_data_t *battery_data_temp = NULL;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	673b      	str	r3, [r7, #112]	; 0x70
            uint8_t battery_data_buffer[100];
            memset(battery_data_buffer, 0, 100);
 800a3c0:	f107 030c 	add.w	r3, r7, #12
 800a3c4:	2264      	movs	r2, #100	; 0x64
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f001 ff73 	bl	800c2b4 <memset>

            battery_data_temp = (battery_data_t *)mqtt_data_struct;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	673b      	str	r3, [r7, #112]	; 0x70
            sprintf(battery_data_buffer, "{\"type\":\"battery\",\"cap\":\"%d\",\"ov_vol\":\"%d\",\"ud_vol\":\"%d\"}", battery_data_temp->capacity, battery_data_temp->over_voltage, battery_data_temp->under_voltage);
 800a3d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7f6 f8ee 	bl	80005b8 <__aeabi_f2d>
 800a3dc:	4680      	mov	r8, r0
 800a3de:	4689      	mov	r9, r1
 800a3e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7f6 f8e7 	bl	80005b8 <__aeabi_f2d>
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	460d      	mov	r5, r1
 800a3ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7f6 f8e0 	bl	80005b8 <__aeabi_f2d>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	f107 000c 	add.w	r0, r7, #12
 800a400:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a404:	e9cd 4500 	strd	r4, r5, [sp]
 800a408:	4642      	mov	r2, r8
 800a40a:	464b      	mov	r3, r9
 800a40c:	4963      	ldr	r1, [pc, #396]	; (800a59c <MQTT_Transmit_Data+0x220>)
 800a40e:	f001 ff31 	bl	800c274 <siprintf>
            //sprintf(battery_data_buffer, "type:battery,cap:%d,ov_vol:%d,ud_vol:%d", battery_data_temp->capacity, battery_data_temp->over_voltage, battery_data_temp->under_voltage);

            while (check_result == _NOT_DEFINE_) /* _NOT_DEFINE_ means that is in progress */
 800a412:	e015      	b.n	800a440 <MQTT_Transmit_Data+0xc4>
            {
                check_result = SIM_MQTT_pubTopic(CLIENT_ID, MQTT_MSG_ID, MQTT_QOS_PUB, MQTT_RETAIN, MQTT_PUB_TOPIC,
                                                 strlen(battery_data_buffer), battery_data_buffer);
 800a414:	f107 030c 	add.w	r3, r7, #12
 800a418:	4618      	mov	r0, r3
 800a41a:	f7f5 ff0b 	bl	8000234 <strlen>
 800a41e:	4603      	mov	r3, r0
                check_result = SIM_MQTT_pubTopic(CLIENT_ID, MQTT_MSG_ID, MQTT_QOS_PUB, MQTT_RETAIN, MQTT_PUB_TOPIC,
 800a420:	b29b      	uxth	r3, r3
 800a422:	f107 020c 	add.w	r2, r7, #12
 800a426:	9202      	str	r2, [sp, #8]
 800a428:	9301      	str	r3, [sp, #4]
 800a42a:	4b5d      	ldr	r3, [pc, #372]	; (800a5a0 <MQTT_Transmit_Data+0x224>)
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	2300      	movs	r3, #0
 800a430:	2201      	movs	r2, #1
 800a432:	2102      	movs	r1, #2
 800a434:	2002      	movs	r0, #2
 800a436:	f7ff fc89 	bl	8009d4c <SIM_MQTT_pubTopic>
 800a43a:	4603      	mov	r3, r0
 800a43c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            while (check_result == _NOT_DEFINE_) /* _NOT_DEFINE_ means that is in progress */
 800a440:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800a444:	2b02      	cmp	r3, #2
 800a446:	d0e5      	beq.n	800a414 <MQTT_Transmit_Data+0x98>
            }

            if (check_result == _TRUE_)
 800a448:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	f040 8099 	bne.w	800a584 <MQTT_Transmit_Data+0x208>
            {
                return_function = true;
 800a452:	2301      	movs	r3, #1
 800a454:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }

            break;
 800a458:	e094      	b.n	800a584 <MQTT_Transmit_Data+0x208>
        }

        case WIND_DATA:
        {
            wind_data_t *wind_data_temp = NULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	677b      	str	r3, [r7, #116]	; 0x74
            uint8_t wind_data_buffer[100];
            memset(wind_data_buffer, 0, 100);
 800a45e:	f107 030c 	add.w	r3, r7, #12
 800a462:	2264      	movs	r2, #100	; 0x64
 800a464:	2100      	movs	r1, #0
 800a466:	4618      	mov	r0, r3
 800a468:	f001 ff24 	bl	800c2b4 <memset>

            wind_data_temp = (wind_data_t *)mqtt_data_struct;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	677b      	str	r3, [r7, #116]	; 0x74
            sprintf(wind_data_buffer, "{\"type\":\"wind\",\"max_vol\":\"%d\",\"max_cur\":\"%d\",\"pole\":\"%s\",\"chrg_vol\":\"%d\",\"max_spd\":\"%d\"}", wind_data_temp->max_voltage, wind_data_temp->max_current, wind_data_temp->generator_pole, wind_data_temp->start_charging_voltage, wind_data_temp->max_rotate_speed);
 800a470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4618      	mov	r0, r3
 800a476:	f7f6 f89f 	bl	80005b8 <__aeabi_f2d>
 800a47a:	4682      	mov	sl, r0
 800a47c:	468b      	mov	fp, r1
 800a47e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	4618      	mov	r0, r3
 800a484:	f7f6 f898 	bl	80005b8 <__aeabi_f2d>
 800a488:	4604      	mov	r4, r0
 800a48a:	460d      	mov	r5, r1
 800a48c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a48e:	f103 0608 	add.w	r6, r3, #8
 800a492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a496:	4618      	mov	r0, r3
 800a498:	f7f6 f88e 	bl	80005b8 <__aeabi_f2d>
 800a49c:	4680      	mov	r8, r0
 800a49e:	4689      	mov	r9, r1
 800a4a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7f6 f887 	bl	80005b8 <__aeabi_f2d>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	f107 000c 	add.w	r0, r7, #12
 800a4b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a4b6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800a4ba:	9602      	str	r6, [sp, #8]
 800a4bc:	e9cd 4500 	strd	r4, r5, [sp]
 800a4c0:	4652      	mov	r2, sl
 800a4c2:	465b      	mov	r3, fp
 800a4c4:	4937      	ldr	r1, [pc, #220]	; (800a5a4 <MQTT_Transmit_Data+0x228>)
 800a4c6:	f001 fed5 	bl	800c274 <siprintf>
            //sprintf(wind_data_buffer, "type:wind,max_vol:%d,max_cur:%d,pole:%s,chrg_vol:%d,max_spd:%d", wind_data_temp->max_voltage, wind_data_temp->max_current, wind_data_temp->generator_pole, wind_data_temp->start_charging_voltage, wind_data_temp->max_rotate_speed);

            while (check_result == _NOT_DEFINE_) /* _NOT_DEFINE_ means that is in progress */
 800a4ca:	e015      	b.n	800a4f8 <MQTT_Transmit_Data+0x17c>
            {
                check_result = SIM_MQTT_pubTopic(CLIENT_ID, MQTT_MSG_ID, MQTT_QOS_PUB, MQTT_RETAIN, MQTT_PUB_TOPIC,
                                                 strlen(wind_data_buffer), wind_data_buffer);
 800a4cc:	f107 030c 	add.w	r3, r7, #12
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7f5 feaf 	bl	8000234 <strlen>
 800a4d6:	4603      	mov	r3, r0
                check_result = SIM_MQTT_pubTopic(CLIENT_ID, MQTT_MSG_ID, MQTT_QOS_PUB, MQTT_RETAIN, MQTT_PUB_TOPIC,
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	f107 020c 	add.w	r2, r7, #12
 800a4de:	9202      	str	r2, [sp, #8]
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	4b2f      	ldr	r3, [pc, #188]	; (800a5a0 <MQTT_Transmit_Data+0x224>)
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	2102      	movs	r1, #2
 800a4ec:	2002      	movs	r0, #2
 800a4ee:	f7ff fc2d 	bl	8009d4c <SIM_MQTT_pubTopic>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            while (check_result == _NOT_DEFINE_) /* _NOT_DEFINE_ means that is in progress */
 800a4f8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d0e5      	beq.n	800a4cc <MQTT_Transmit_Data+0x150>
            }

            if (check_result == _TRUE_)
 800a500:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800a504:	2b01      	cmp	r3, #1
 800a506:	d13f      	bne.n	800a588 <MQTT_Transmit_Data+0x20c>
            {
                return_function = true;
 800a508:	2301      	movs	r3, #1
 800a50a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }

            break;
 800a50e:	e03b      	b.n	800a588 <MQTT_Transmit_Data+0x20c>
        }

        case SYSTEM_DATA:
        {
            system_data_t *system_data_temp = NULL;
 800a510:	2300      	movs	r3, #0
 800a512:	67bb      	str	r3, [r7, #120]	; 0x78
            uint8_t system_data_buffer[100];
            memset(system_data_buffer, 0, 100);
 800a514:	f107 030c 	add.w	r3, r7, #12
 800a518:	2264      	movs	r2, #100	; 0x64
 800a51a:	2100      	movs	r1, #0
 800a51c:	4618      	mov	r0, r3
 800a51e:	f001 fec9 	bl	800c2b4 <memset>

            system_data_temp = (system_data_t *)mqtt_data_struct;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	67bb      	str	r3, [r7, #120]	; 0x78
            sprintf(system_data_buffer, "{\"type\":\"system\",\"ov_out_vol\":\"%d\",\"add_ctler_mdbus\":\"%s\"}", system_data_temp->over_output_voltage, system_data_temp->address_controller_modbus);
 800a526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	461a      	mov	r2, r3
 800a52c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a52e:	3302      	adds	r3, #2
 800a530:	f107 000c 	add.w	r0, r7, #12
 800a534:	491c      	ldr	r1, [pc, #112]	; (800a5a8 <MQTT_Transmit_Data+0x22c>)
 800a536:	f001 fe9d 	bl	800c274 <siprintf>
            //sprintf(system_data_buffer, "type:system,ov_out_vol:%d,add_ctler_mdbus:%s", system_data_temp->over_output_voltage, system_data_temp->address_controller_modbus);

            while (check_result == _NOT_DEFINE_) /* _NOT_DEFINE_ means that is in progress */
 800a53a:	e015      	b.n	800a568 <MQTT_Transmit_Data+0x1ec>
            {
                check_result = SIM_MQTT_pubTopic(CLIENT_ID, MQTT_MSG_ID, MQTT_QOS_PUB, MQTT_RETAIN, MQTT_PUB_TOPIC,
                                                 strlen(system_data_buffer), system_data_buffer);
 800a53c:	f107 030c 	add.w	r3, r7, #12
 800a540:	4618      	mov	r0, r3
 800a542:	f7f5 fe77 	bl	8000234 <strlen>
 800a546:	4603      	mov	r3, r0
                check_result = SIM_MQTT_pubTopic(CLIENT_ID, MQTT_MSG_ID, MQTT_QOS_PUB, MQTT_RETAIN, MQTT_PUB_TOPIC,
 800a548:	b29b      	uxth	r3, r3
 800a54a:	f107 020c 	add.w	r2, r7, #12
 800a54e:	9202      	str	r2, [sp, #8]
 800a550:	9301      	str	r3, [sp, #4]
 800a552:	4b13      	ldr	r3, [pc, #76]	; (800a5a0 <MQTT_Transmit_Data+0x224>)
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	2300      	movs	r3, #0
 800a558:	2201      	movs	r2, #1
 800a55a:	2102      	movs	r1, #2
 800a55c:	2002      	movs	r0, #2
 800a55e:	f7ff fbf5 	bl	8009d4c <SIM_MQTT_pubTopic>
 800a562:	4603      	mov	r3, r0
 800a564:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            while (check_result == _NOT_DEFINE_) /* _NOT_DEFINE_ means that is in progress */
 800a568:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d0e5      	beq.n	800a53c <MQTT_Transmit_Data+0x1c0>
            }

            if (check_result == _TRUE_)
 800a570:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800a574:	2b01      	cmp	r3, #1
 800a576:	d109      	bne.n	800a58c <MQTT_Transmit_Data+0x210>
            {
                return_function = true;
 800a578:	2301      	movs	r3, #1
 800a57a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }

            break;
 800a57e:	e005      	b.n	800a58c <MQTT_Transmit_Data+0x210>

        case NONE_DATA:
            break;

        default:
            break;
 800a580:	bf00      	nop
 800a582:	e004      	b.n	800a58e <MQTT_Transmit_Data+0x212>
            break;
 800a584:	bf00      	nop
 800a586:	e002      	b.n	800a58e <MQTT_Transmit_Data+0x212>
            break;
 800a588:	bf00      	nop
 800a58a:	e000      	b.n	800a58e <MQTT_Transmit_Data+0x212>
            break;
 800a58c:	bf00      	nop
        }
    }
    return return_function;
 800a58e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a592:	4618      	mov	r0, r3
 800a594:	3784      	adds	r7, #132	; 0x84
 800a596:	46bd      	mov	sp, r7
 800a598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59c:	0800ccf4 	.word	0x0800ccf4
 800a5a0:	0800cd30 	.word	0x0800cd30
 800a5a4:	0800cd38 	.word	0x0800cd38
 800a5a8:	0800cd94 	.word	0x0800cd94

0800a5ac <EC200_UART_InitPins>:
 * Variables
 ******************************************************************************/
EC200_preprocessing_data_t EC200_preprocessing_data = { 0, false};

void EC200_UART_InitPins(void)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
    ;
}
 800a5b0:	bf00      	nop
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <EC200_RESET_InitPins>:

void EC200_RESET_InitPins(void)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	af00      	add	r7, sp, #0
    ;
}
 800a5be:	bf00      	nop
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <EC200_UART_Init>:

void EC200_UART_Init(void)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	af00      	add	r7, sp, #0
    /* Configure UART Pins */
    EC200_UART_InitPins();
 800a5cc:	f7ff ffee 	bl	800a5ac <EC200_UART_InitPins>
    /* Configure EC200-RESET Pins */
    EC200_RESET_InitPins();
 800a5d0:	f7ff fff3 	bl	800a5ba <EC200_RESET_InitPins>
    serial_EC200 = create_serial(0, EC200_UART_BAUDRATE, 64, 64); /* Data size=64 can be modified later */
 800a5d4:	2340      	movs	r3, #64	; 0x40
 800a5d6:	2240      	movs	r2, #64	; 0x40
 800a5d8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a5dc:	2000      	movs	r0, #0
 800a5de:	f000 fb0f 	bl	800ac00 <create_serial>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	4a01      	ldr	r2, [pc, #4]	; (800a5ec <EC200_UART_Init+0x24>)
 800a5e6:	6013      	str	r3, [r2, #0]
}
 800a5e8:	bf00      	nop
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	20001648 	.word	0x20001648

0800a5f0 <EC200_UART_SendString>:

void EC200_UART_SendString(uint8_t *dat)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
    SendStringUart2(dat);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f9cb 	bl	800a994 <SendStringUart2>
}
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <EC200_UART_Handler>:

void EC200_UART_Handler(uint8_t rx_char)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	71fb      	strb	r3, [r7, #7]
        /* Buffer save the data to check it's sent from Server or not */
        MQTT_DataProcessing_Array[EC200_preprocessing_data.Upcoming_Data_Count] = rx_char;
 800a612:	4b3e      	ldr	r3, [pc, #248]	; (800a70c <EC200_UART_Handler+0x104>)
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	4619      	mov	r1, r3
 800a618:	4a3d      	ldr	r2, [pc, #244]	; (800a710 <EC200_UART_Handler+0x108>)
 800a61a:	79fb      	ldrb	r3, [r7, #7]
 800a61c:	5453      	strb	r3, [r2, r1]
        EC200_preprocessing_data.Upcoming_Data_Count++;
 800a61e:	4b3b      	ldr	r3, [pc, #236]	; (800a70c <EC200_UART_Handler+0x104>)
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	3301      	adds	r3, #1
 800a624:	b29a      	uxth	r2, r3
 800a626:	4b39      	ldr	r3, [pc, #228]	; (800a70c <EC200_UART_Handler+0x104>)
 800a628:	801a      	strh	r2, [r3, #0]

        if ((EC200_preprocessing_data.Upcoming_Data_Count > 3) && ((rx_char == '\n') || ((strcmp((char *)MQTT_DataProcessing_Array, "\r\n> ") == 0)))) /* >3 to avoid the first end of line  */
 800a62a:	4b38      	ldr	r3, [pc, #224]	; (800a70c <EC200_UART_Handler+0x104>)
 800a62c:	881b      	ldrh	r3, [r3, #0]
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d968      	bls.n	800a704 <EC200_UART_Handler+0xfc>
 800a632:	79fb      	ldrb	r3, [r7, #7]
 800a634:	2b0a      	cmp	r3, #10
 800a636:	d006      	beq.n	800a646 <EC200_UART_Handler+0x3e>
 800a638:	4936      	ldr	r1, [pc, #216]	; (800a714 <EC200_UART_Handler+0x10c>)
 800a63a:	4835      	ldr	r0, [pc, #212]	; (800a710 <EC200_UART_Handler+0x108>)
 800a63c:	f7f5 fdf0 	bl	8000220 <strcmp>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d15e      	bne.n	800a704 <EC200_UART_Handler+0xfc>
        {
            /* Exception cases */
            if((strcmp((char *)MQTT_DataProcessing_Array, "ATE0\r\r\n") == 0))
 800a646:	4934      	ldr	r1, [pc, #208]	; (800a718 <EC200_UART_Handler+0x110>)
 800a648:	4831      	ldr	r0, [pc, #196]	; (800a710 <EC200_UART_Handler+0x108>)
 800a64a:	f7f5 fde9 	bl	8000220 <strcmp>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d056      	beq.n	800a702 <EC200_UART_Handler+0xfa>
            {
                return;
            }

            /* Receive data from Server */
            if (strstr(MQTT_DataProcessing_Array, "+QMTRECV:") != NULL)
 800a654:	4931      	ldr	r1, [pc, #196]	; (800a71c <EC200_UART_Handler+0x114>)
 800a656:	482e      	ldr	r0, [pc, #184]	; (800a710 <EC200_UART_Handler+0x108>)
 800a658:	f001 fe34 	bl	800c2c4 <strstr>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d021      	beq.n	800a6a6 <EC200_UART_Handler+0x9e>
            {
                Is_Data_From_Server = true;
 800a662:	4b2f      	ldr	r3, [pc, #188]	; (800a720 <EC200_UART_Handler+0x118>)
 800a664:	2201      	movs	r2, #1
 800a666:	701a      	strb	r2, [r3, #0]

                memset(MQTT_Response_Server, 0, strlen(MQTT_Response_Server));
 800a668:	482e      	ldr	r0, [pc, #184]	; (800a724 <EC200_UART_Handler+0x11c>)
 800a66a:	f7f5 fde3 	bl	8000234 <strlen>
 800a66e:	4603      	mov	r3, r0
 800a670:	461a      	mov	r2, r3
 800a672:	2100      	movs	r1, #0
 800a674:	482b      	ldr	r0, [pc, #172]	; (800a724 <EC200_UART_Handler+0x11c>)
 800a676:	f001 fe1d 	bl	800c2b4 <memset>

                for (int i = 0; i < EC200_preprocessing_data.Upcoming_Data_Count; i++)
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	e00b      	b.n	800a698 <EC200_UART_Handler+0x90>
                {
                    MQTT_Response_Server[i] = MQTT_DataProcessing_Array[i];
 800a680:	4a23      	ldr	r2, [pc, #140]	; (800a710 <EC200_UART_Handler+0x108>)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	4413      	add	r3, r2
 800a686:	7819      	ldrb	r1, [r3, #0]
 800a688:	4a26      	ldr	r2, [pc, #152]	; (800a724 <EC200_UART_Handler+0x11c>)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	4413      	add	r3, r2
 800a68e:	460a      	mov	r2, r1
 800a690:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < EC200_preprocessing_data.Upcoming_Data_Count; i++)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3301      	adds	r3, #1
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	4b1c      	ldr	r3, [pc, #112]	; (800a70c <EC200_UART_Handler+0x104>)
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	461a      	mov	r2, r3
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	dbed      	blt.n	800a680 <EC200_UART_Handler+0x78>
 800a6a4:	e020      	b.n	800a6e8 <EC200_UART_Handler+0xe0>
                }
            }
            else /* Receive data from Command response */
            {
                EC200_preprocessing_data.Is_Receive_Done = true;
 800a6a6:	4b19      	ldr	r3, [pc, #100]	; (800a70c <EC200_UART_Handler+0x104>)
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	709a      	strb	r2, [r3, #2]

                memset(MQTT_Response_Command, 0, strlen(MQTT_Response_Command));
 800a6ac:	481e      	ldr	r0, [pc, #120]	; (800a728 <EC200_UART_Handler+0x120>)
 800a6ae:	f7f5 fdc1 	bl	8000234 <strlen>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	481b      	ldr	r0, [pc, #108]	; (800a728 <EC200_UART_Handler+0x120>)
 800a6ba:	f001 fdfb 	bl	800c2b4 <memset>

                for (int i = 0; i < EC200_preprocessing_data.Upcoming_Data_Count; i++)
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60bb      	str	r3, [r7, #8]
 800a6c2:	e00b      	b.n	800a6dc <EC200_UART_Handler+0xd4>
                {
                    MQTT_Response_Command[i] = MQTT_DataProcessing_Array[i];
 800a6c4:	4a12      	ldr	r2, [pc, #72]	; (800a710 <EC200_UART_Handler+0x108>)
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	7819      	ldrb	r1, [r3, #0]
 800a6cc:	4a16      	ldr	r2, [pc, #88]	; (800a728 <EC200_UART_Handler+0x120>)
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	460a      	mov	r2, r1
 800a6d4:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < EC200_preprocessing_data.Upcoming_Data_Count; i++)
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	60bb      	str	r3, [r7, #8]
 800a6dc:	4b0b      	ldr	r3, [pc, #44]	; (800a70c <EC200_UART_Handler+0x104>)
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	dbed      	blt.n	800a6c4 <EC200_UART_Handler+0xbc>
                }
            }
            /* Clear unnecessary data in buffer */
            memset(MQTT_DataProcessing_Array, 0, strlen(MQTT_DataProcessing_Array));
 800a6e8:	4809      	ldr	r0, [pc, #36]	; (800a710 <EC200_UART_Handler+0x108>)
 800a6ea:	f7f5 fda3 	bl	8000234 <strlen>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	4806      	ldr	r0, [pc, #24]	; (800a710 <EC200_UART_Handler+0x108>)
 800a6f6:	f001 fddd 	bl	800c2b4 <memset>
            /* Done of data receiving process */
            EC200_preprocessing_data.Upcoming_Data_Count = 0;
 800a6fa:	4b04      	ldr	r3, [pc, #16]	; (800a70c <EC200_UART_Handler+0x104>)
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	801a      	strh	r2, [r3, #0]
 800a700:	e000      	b.n	800a704 <EC200_UART_Handler+0xfc>
                return;
 800a702:	bf00      	nop
        }
}
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	2000164c 	.word	0x2000164c
 800a710:	20000a48 	.word	0x20000a48
 800a714:	0800ce4c 	.word	0x0800ce4c
 800a718:	0800ce54 	.word	0x0800ce54
 800a71c:	0800ce5c 	.word	0x0800ce5c
 800a720:	20000a40 	.word	0x20000a40
 800a724:	20001248 	.word	0x20001248
 800a728:	20000e48 	.word	0x20000e48

0800a72c <ADC_DMA_CREATE>:
static adc_id_inf_t adc_id_inf[2] = {
	{ADC_ID_1, &hadc1, 1, {{ ADC_CH_1, RANK_1}, { ADC_CH_2, RANK_2}, {ADC_CH_3}, {ADC_CH_4}, {ADC_CH_5, RANK_3}, {ADC_CH_6}, {ADC_CH_7}, {ADC_CH_8},{ADC_CH_9},{ADC_CH_10},{ADC_CH_11},{ADC_CH_12},{ADC_CH_13},{ADC_CH_14},{ADC_CH_15,RANK_4},{ADC_CH_16},{ADC_CH_17} }},
	{ADC_ID_2, &hadc2, 1, {{ ADC_CH_1}, { ADC_CH_2}, {ADC_CH_3, RANK_1}, {ADC_CH_4, RANK_2}, {ADC_CH_5}, {ADC_CH_6}, {ADC_CH_7}, {ADC_CH_8},{ADC_CH_9},{ADC_CH_10},{ADC_CH_11},{ADC_CH_12},{ADC_CH_13, RANK_3},{ADC_CH_14},{ADC_CH_15},{ADC_CH_16},{ADC_CH_17,RANK_4} }},
};

adc_obj_t* ADC_DMA_CREATE(ADC_ID_e id){
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	71fb      	strb	r3, [r7, #7]
	uint16_t num_adc_val = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	82fb      	strh	r3, [r7, #22]
	ADC_HandleTypeDef* hadc = adc_id_inf[id].hadc;
 800a73a:	79fb      	ldrb	r3, [r7, #7]
 800a73c:	4a20      	ldr	r2, [pc, #128]	; (800a7c0 <ADC_DMA_CREATE+0x94>)
 800a73e:	2194      	movs	r1, #148	; 0x94
 800a740:	fb01 f303 	mul.w	r3, r1, r3
 800a744:	4413      	add	r3, r2
 800a746:	3304      	adds	r3, #4
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	613b      	str	r3, [r7, #16]

	adc_obj_t* adc_obj = malloc(sizeof(adc_obj_t));
 800a74c:	200e      	movs	r0, #14
 800a74e:	f001 fcd5 	bl	800c0fc <malloc>
 800a752:	4603      	mov	r3, r0
 800a754:	60fb      	str	r3, [r7, #12]
	memset(adc_obj, 0, sizeof(adc_obj_t));
 800a756:	220e      	movs	r2, #14
 800a758:	2100      	movs	r1, #0
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	f001 fdaa 	bl	800c2b4 <memset>

	if(NULL == adc_obj){
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d104      	bne.n	800a770 <ADC_DMA_CREATE+0x44>
		free(adc_obj);
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f001 fcd0 	bl	800c10c <free>
		return NULL;
 800a76c:	2300      	movs	r3, #0
 800a76e:	e023      	b.n	800a7b8 <ADC_DMA_CREATE+0x8c>
	}

	adc_obj->adc_id = id;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	79fa      	ldrb	r2, [r7, #7]
 800a774:	721a      	strb	r2, [r3, #8]
	adc_obj->sample_num = adc_id_inf[id].sample_num;
 800a776:	79fb      	ldrb	r3, [r7, #7]
 800a778:	4a11      	ldr	r2, [pc, #68]	; (800a7c0 <ADC_DMA_CREATE+0x94>)
 800a77a:	2194      	movs	r1, #148	; 0x94
 800a77c:	fb01 f303 	mul.w	r3, r1, r3
 800a780:	4413      	add	r3, r2
 800a782:	3308      	adds	r3, #8
 800a784:	881a      	ldrh	r2, [r3, #0]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	815a      	strh	r2, [r3, #10]
	adc_obj->ch_num = hadc->Init.NbrOfConversion;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	b29a      	uxth	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	819a      	strh	r2, [r3, #12]
	num_adc_val = adc_obj->sample_num * adc_obj->ch_num;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	895a      	ldrh	r2, [r3, #10]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	899b      	ldrh	r3, [r3, #12]
 800a79c:	fb12 f303 	smulbb	r3, r2, r3
 800a7a0:	82fb      	strh	r3, [r7, #22]

	HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED);
 800a7a2:	217f      	movs	r1, #127	; 0x7f
 800a7a4:	6938      	ldr	r0, [r7, #16]
 800a7a6:	f7f8 fe77 	bl	8003498 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t *)&adc_obj->val, num_adc_val);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	8afa      	ldrh	r2, [r7, #22]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6938      	ldr	r0, [r7, #16]
 800a7b2:	f7f8 f807 	bl	80027c4 <HAL_ADC_Start_DMA>
	return adc_obj;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3718      	adds	r7, #24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	200000d4 	.word	0x200000d4

0800a7c4 <Get_ADC_VAL_CH>:
uint16_t Get_ADC_VAL_CH(struct adc_obj_t* adc_obj, ADC_CH_e ch){
 800a7c4:	b490      	push	{r4, r7}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70fb      	strb	r3, [r7, #3]
	uint32_t sum = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	60fb      	str	r3, [r7, #12]
	uint16_t i = 0, val = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	817b      	strh	r3, [r7, #10]
 800a7d8:	2300      	movs	r3, #0
 800a7da:	813b      	strh	r3, [r7, #8]
	for(i = 0; i < adc_obj->sample_num; i++){
 800a7dc:	2300      	movs	r3, #0
 800a7de:	817b      	strh	r3, [r7, #10]
 800a7e0:	e01e      	b.n	800a820 <Get_ADC_VAL_CH+0x5c>
		sum += adc_obj->val[i * adc_obj->ch_num + adc_id_inf[adc_obj->adc_id].ch_rank[ch].rank];
 800a7e2:	897b      	ldrh	r3, [r7, #10]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	8992      	ldrh	r2, [r2, #12]
 800a7e8:	fb02 f303 	mul.w	r3, r2, r3
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	7a1b      	ldrb	r3, [r3, #8]
 800a7f2:	461c      	mov	r4, r3
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	4913      	ldr	r1, [pc, #76]	; (800a844 <Get_ADC_VAL_CH+0x80>)
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	00da      	lsls	r2, r3, #3
 800a7fc:	2394      	movs	r3, #148	; 0x94
 800a7fe:	fb04 f303 	mul.w	r3, r4, r3
 800a802:	4413      	add	r3, r2
 800a804:	440b      	add	r3, r1
 800a806:	3308      	adds	r3, #8
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	18c2      	adds	r2, r0, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a812:	461a      	mov	r2, r3
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	4413      	add	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < adc_obj->sample_num; i++){
 800a81a:	897b      	ldrh	r3, [r7, #10]
 800a81c:	3301      	adds	r3, #1
 800a81e:	817b      	strh	r3, [r7, #10]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	895b      	ldrh	r3, [r3, #10]
 800a824:	897a      	ldrh	r2, [r7, #10]
 800a826:	429a      	cmp	r2, r3
 800a828:	d3db      	bcc.n	800a7e2 <Get_ADC_VAL_CH+0x1e>
	}
	val = sum / adc_obj->sample_num;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	895b      	ldrh	r3, [r3, #10]
 800a82e:	461a      	mov	r2, r3
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	fbb3 f3f2 	udiv	r3, r3, r2
 800a836:	813b      	strh	r3, [r7, #8]
	return val;
 800a838:	893b      	ldrh	r3, [r7, #8]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bc90      	pop	{r4, r7}
 800a842:	4770      	bx	lr
 800a844:	200000d4 	.word	0x200000d4

0800a848 <GPIO_SetPinOut>:
		{PORT_E, GPIOE},
		{PORT_F, GPIOF},
		{PORT_G, GPIOG},
};

void GPIO_SetPinOut(gpio_port_id port_id, gpio_pin_id pin_id){
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	4603      	mov	r3, r0
 800a850:	460a      	mov	r2, r1
 800a852:	71fb      	strb	r3, [r7, #7]
 800a854:	4613      	mov	r3, r2
 800a856:	71bb      	strb	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;   /*!< Specifies the operating mode for the selected pins.
 800a858:	2301      	movs	r3, #1
 800a85a:	613b      	str	r3, [r7, #16]
                           	   	   	   	   	   	   	   This parameter can be a value of @ref GPIO_mode */
	GPIO_InitStruct.Pin = s_gpio_pin[pin_id].pin; /*!< Specifies the GPIO pins to be configured.
 800a85c:	79bb      	ldrb	r3, [r7, #6]
 800a85e:	4a0b      	ldr	r2, [pc, #44]	; (800a88c <GPIO_SetPinOut+0x44>)
 800a860:	00db      	lsls	r3, r3, #3
 800a862:	4413      	add	r3, r2
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	60fb      	str	r3, [r7, #12]
                           	   	   	   	   	   	   	   This parameter can be any value of @ref GPIO_pins */
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; /*!< Specifies the speed for the selected pins.
 800a868:	2302      	movs	r3, #2
 800a86a:	61bb      	str	r3, [r7, #24]
                           	   	   	   	   	   	   	   This parameter can be a value of @ref GPIO_speed */
	HAL_GPIO_Init(s_gpio_port[port_id].port, &GPIO_InitStruct);
 800a86c:	79fb      	ldrb	r3, [r7, #7]
 800a86e:	4a08      	ldr	r2, [pc, #32]	; (800a890 <GPIO_SetPinOut+0x48>)
 800a870:	00db      	lsls	r3, r3, #3
 800a872:	4413      	add	r3, r2
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	f107 020c 	add.w	r2, r7, #12
 800a87a:	4611      	mov	r1, r2
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7f9 fad7 	bl	8003e30 <HAL_GPIO_Init>
	return;
 800a882:	bf00      	nop
}
 800a884:	3720      	adds	r7, #32
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	200001fc 	.word	0x200001fc
 800a890:	2000027c 	.word	0x2000027c

0800a894 <GPIO_SetPinIn>:

void GPIO_SetPinIn(gpio_port_id port_id, gpio_pin_id pin_id, uint32_t PULLUPDOWN){
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	603a      	str	r2, [r7, #0]
 800a89e:	71fb      	strb	r3, [r7, #7]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	71bb      	strb	r3, [r7, #6]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;      	/*!< Input Floating Mode                   	*/
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull  = PULLUPDOWN;				/*!< Input state pull-up or pull-down		*/
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;	/*!< Specifies the speed for the selected pins.
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	61bb      	str	r3, [r7, #24]
                           	   	   	   	   	   	   	   This parameter can be a value of @ref GPIO_speed */
	GPIO_InitStruct.Pin = s_gpio_pin[pin_id].pin;
 800a8b0:	79bb      	ldrb	r3, [r7, #6]
 800a8b2:	4a0a      	ldr	r2, [pc, #40]	; (800a8dc <GPIO_SetPinIn+0x48>)
 800a8b4:	00db      	lsls	r3, r3, #3
 800a8b6:	4413      	add	r3, r2
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(s_gpio_port[port_id].port, &GPIO_InitStruct);
 800a8bc:	79fb      	ldrb	r3, [r7, #7]
 800a8be:	4a08      	ldr	r2, [pc, #32]	; (800a8e0 <GPIO_SetPinIn+0x4c>)
 800a8c0:	00db      	lsls	r3, r3, #3
 800a8c2:	4413      	add	r3, r2
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	f107 020c 	add.w	r2, r7, #12
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7f9 faaf 	bl	8003e30 <HAL_GPIO_Init>
	return;
 800a8d2:	bf00      	nop
}
 800a8d4:	3720      	adds	r7, #32
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	200001fc 	.word	0x200001fc
 800a8e0:	2000027c 	.word	0x2000027c

0800a8e4 <GPIO_WritePin>:

void GPIO_WritePin(gpio_port_id port_id, gpio_pin_id pin_id, gpio_state state){
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	71fb      	strb	r3, [r7, #7]
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	71bb      	strb	r3, [r7, #6]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(s_gpio_port[port_id].port, s_gpio_pin[pin_id].pin, state);
 800a8f6:	79fb      	ldrb	r3, [r7, #7]
 800a8f8:	4a08      	ldr	r2, [pc, #32]	; (800a91c <GPIO_WritePin+0x38>)
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	4413      	add	r3, r2
 800a8fe:	6858      	ldr	r0, [r3, #4]
 800a900:	79bb      	ldrb	r3, [r7, #6]
 800a902:	4a07      	ldr	r2, [pc, #28]	; (800a920 <GPIO_WritePin+0x3c>)
 800a904:	00db      	lsls	r3, r3, #3
 800a906:	4413      	add	r3, r2
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	797a      	ldrb	r2, [r7, #5]
 800a90e:	4619      	mov	r1, r3
 800a910:	f7f9 fcf2 	bl	80042f8 <HAL_GPIO_WritePin>
}
 800a914:	bf00      	nop
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	2000027c 	.word	0x2000027c
 800a920:	200001fc 	.word	0x200001fc

0800a924 <OpenUart2>:
	{{1, 9600, 0, 0, 0}, 1, &OpenUart3, &SendByteUart3, &ReceiveByteUart3, null, null}};

/*=============================================================UART 2=====================================================================*/

static bool OpenUart2(int baudrate)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
	huart2.Init.BaudRate = baudrate;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a0a      	ldr	r2, [pc, #40]	; (800a958 <OpenUart2+0x34>)
 800a930:	6053      	str	r3, [r2, #4]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800a932:	4809      	ldr	r0, [pc, #36]	; (800a958 <OpenUart2+0x34>)
 800a934:	f7fa fde6 	bl	8005504 <HAL_UART_Init>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <OpenUart2+0x1e>
		return false;
 800a93e:	2300      	movs	r3, #0
 800a940:	e005      	b.n	800a94e <OpenUart2+0x2a>
	HAL_UART_Receive_IT(&huart2, uart2_data_rx_isr_buff, 1);
 800a942:	2201      	movs	r2, #1
 800a944:	4905      	ldr	r1, [pc, #20]	; (800a95c <OpenUart2+0x38>)
 800a946:	4804      	ldr	r0, [pc, #16]	; (800a958 <OpenUart2+0x34>)
 800a948:	f7fa ffd2 	bl	80058f0 <HAL_UART_Receive_IT>

	return true;
 800a94c:	2301      	movs	r3, #1
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	200006d0 	.word	0x200006d0
 800a95c:	20001650 	.word	0x20001650

0800a960 <SendByteUart2>:

static bool SendByteUart2(uint8_t byte)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	ret = HAL_UART_Transmit(&huart2, &byte, 1, 10);
 800a96a:	1df9      	adds	r1, r7, #7
 800a96c:	230a      	movs	r3, #10
 800a96e:	2201      	movs	r2, #1
 800a970:	4807      	ldr	r0, [pc, #28]	; (800a990 <SendByteUart2+0x30>)
 800a972:	f7fa fe53 	bl	800561c <HAL_UART_Transmit>
 800a976:	4603      	mov	r3, r0
 800a978:	73fb      	strb	r3, [r7, #15]
	if (ret == HAL_OK)
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d101      	bne.n	800a984 <SendByteUart2+0x24>
		return true;
 800a980:	2301      	movs	r3, #1
 800a982:	e000      	b.n	800a986 <SendByteUart2+0x26>
	return false;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	200006d0 	.word	0x200006d0

0800a994 <SendStringUart2>:

void SendStringUart2(uint8_t *dat)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
	int i=0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	60fb      	str	r3, [r7, #12]
	while(dat[i] != null)
 800a9a0:	e009      	b.n	800a9b6 <SendStringUart2+0x22>
	{
		SendByteUart2(dat[i]);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7ff ffd8 	bl	800a960 <SendByteUart2>
		i++;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	60fb      	str	r3, [r7, #12]
	while(dat[i] != null)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1ef      	bne.n	800a9a2 <SendStringUart2+0xe>
	}
}
 800a9c2:	bf00      	nop
 800a9c4:	bf00      	nop
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <ReceiveByteUart2>:

// unuse funtion ReceiveByteUart1 to read, use HAL_UART_RxCpltCallback interrupt to receive and put to fifo
static bool ReceiveByteUart2(uint8_t *byte)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	ret = HAL_UART_Receive(&huart2, byte, 1, 0);
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	6879      	ldr	r1, [r7, #4]
 800a9da:	4807      	ldr	r0, [pc, #28]	; (800a9f8 <ReceiveByteUart2+0x2c>)
 800a9dc:	f7fa feb4 	bl	8005748 <HAL_UART_Receive>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]
	if (ret == HAL_OK)
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <ReceiveByteUart2+0x22>
		return true;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e000      	b.n	800a9f0 <ReceiveByteUart2+0x24>
	return false;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	200006d0 	.word	0x200006d0

0800a9fc <OpenUart3>:

/*=============================================================UART 3=====================================================================*/

static bool OpenUart3(int baudrate)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
	huart3.Init.BaudRate = baudrate;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a15      	ldr	r2, [pc, #84]	; (800aa5c <OpenUart3+0x60>)
 800aa08:	6053      	str	r3, [r2, #4]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800aa0a:	4814      	ldr	r0, [pc, #80]	; (800aa5c <OpenUart3+0x60>)
 800aa0c:	f7fa fd7a 	bl	8005504 <HAL_UART_Init>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <OpenUart3+0x1e>
		return false;
 800aa16:	2300      	movs	r3, #0
 800aa18:	e01b      	b.n	800aa52 <OpenUart3+0x56>
#ifdef USE_FIFO
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	480f      	ldr	r0, [pc, #60]	; (800aa5c <OpenUart3+0x60>)
 800aa1e:	f7fc fe2d 	bl	800767c <HAL_UARTEx_SetTxFifoThreshold>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <OpenUart3+0x30>
	{
		Error_Handler();
 800aa28:	f7f6 febe 	bl	80017a8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800aa2c:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800aa30:	480a      	ldr	r0, [pc, #40]	; (800aa5c <OpenUart3+0x60>)
 800aa32:	f7fc fe61 	bl	80076f8 <HAL_UARTEx_SetRxFifoThreshold>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <OpenUart3+0x44>
	{
		Error_Handler();
 800aa3c:	f7f6 feb4 	bl	80017a8 <Error_Handler>
	}
	if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 800aa40:	4806      	ldr	r0, [pc, #24]	; (800aa5c <OpenUart3+0x60>)
 800aa42:	f7fc fda7 	bl	8007594 <HAL_UARTEx_EnableFifoMode>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <OpenUart3+0x54>
	{
		Error_Handler();
 800aa4c:	f7f6 feac 	bl	80017a8 <Error_Handler>
	}
#else
	HAL_UART_Receive_IT(&huart3, uart3_data_rx_isr_buff, 1);
#endif
	return true;
 800aa50:	2301      	movs	r3, #1
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20000760 	.word	0x20000760

0800aa60 <SendByteUart3>:

static bool SendByteUart3(uint8_t byte)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4603      	mov	r3, r0
 800aa68:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	ret = HAL_UART_Transmit(&huart3, &byte, 1, 10);
 800aa6a:	1df9      	adds	r1, r7, #7
 800aa6c:	230a      	movs	r3, #10
 800aa6e:	2201      	movs	r2, #1
 800aa70:	4807      	ldr	r0, [pc, #28]	; (800aa90 <SendByteUart3+0x30>)
 800aa72:	f7fa fdd3 	bl	800561c <HAL_UART_Transmit>
 800aa76:	4603      	mov	r3, r0
 800aa78:	73fb      	strb	r3, [r7, #15]
	if (ret == HAL_OK)
 800aa7a:	7bfb      	ldrb	r3, [r7, #15]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <SendByteUart3+0x24>
		return true;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e000      	b.n	800aa86 <SendByteUart3+0x26>
	return false;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20000760 	.word	0x20000760

0800aa94 <ReceiveByteUart3>:

// unuse funtion ReceiveByteUart1 to read, use HAL_UART_RxCpltCallback interrupt to receive and put to fifo
static bool ReceiveByteUart3(uint8_t *byte)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	if ((huart3.Instance->ISR & USART_ISR_RXNE_RXFNE) != 0)
 800aa9c:	4b0c      	ldr	r3, [pc, #48]	; (800aad0 <ReceiveByteUart3+0x3c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	69db      	ldr	r3, [r3, #28]
 800aaa2:	f003 0320 	and.w	r3, r3, #32
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00c      	beq.n	800aac4 <ReceiveByteUart3+0x30>
	{
		ret = HAL_UART_Receive(&huart3, byte, 1, 0);
 800aaaa:	2300      	movs	r3, #0
 800aaac:	2201      	movs	r2, #1
 800aaae:	6879      	ldr	r1, [r7, #4]
 800aab0:	4807      	ldr	r0, [pc, #28]	; (800aad0 <ReceiveByteUart3+0x3c>)
 800aab2:	f7fa fe49 	bl	8005748 <HAL_UART_Receive>
 800aab6:	4603      	mov	r3, r0
 800aab8:	73fb      	strb	r3, [r7, #15]
		if (ret == HAL_OK)
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <ReceiveByteUart3+0x30>
			return true;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e000      	b.n	800aac6 <ReceiveByteUart3+0x32>
	}
	return false;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20000760 	.word	0x20000760

0800aad4 <HAL_UART_RxCpltCallback>:

/*==================================================================================================================================*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
		uart_list[1].serial_port.length_received = rx->data_len;
		return;
	}
#endif

	if (huart == &huart2)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a08      	ldr	r2, [pc, #32]	; (800ab00 <HAL_UART_RxCpltCallback+0x2c>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d109      	bne.n	800aaf8 <HAL_UART_RxCpltCallback+0x24>
	{
		EC200_UART_Handler(uart2_data_rx_isr_buff[0]);
 800aae4:	4b07      	ldr	r3, [pc, #28]	; (800ab04 <HAL_UART_RxCpltCallback+0x30>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7ff fd8d 	bl	800a608 <EC200_UART_Handler>
		HAL_UART_Receive_IT(huart, uart2_data_rx_isr_buff, 1);
 800aaee:	2201      	movs	r2, #1
 800aaf0:	4904      	ldr	r1, [pc, #16]	; (800ab04 <HAL_UART_RxCpltCallback+0x30>)
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7fa fefc 	bl	80058f0 <HAL_UART_Receive_IT>
	}

}
 800aaf8:	bf00      	nop
 800aafa:	3708      	adds	r7, #8
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	200006d0 	.word	0x200006d0
 800ab04:	20001650 	.word	0x20001650

0800ab08 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
		HAL_UART_DeInit(&huart3);
		HAL_UART_Init(&huart3);
		HAL_UART_Receive_IT(&huart3, uart3_data_rx_isr_buff, 1);
	}
#endif
	if (huart == &huart2)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a06      	ldr	r2, [pc, #24]	; (800ab2c <HAL_UART_ErrorCallback+0x24>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d105      	bne.n	800ab24 <HAL_UART_ErrorCallback+0x1c>
	{
		HAL_UART_DeInit(&huart2);
 800ab18:	4804      	ldr	r0, [pc, #16]	; (800ab2c <HAL_UART_ErrorCallback+0x24>)
 800ab1a:	f7fa fd43 	bl	80055a4 <HAL_UART_DeInit>
		HAL_UART_Init(&huart2);
 800ab1e:	4803      	ldr	r0, [pc, #12]	; (800ab2c <HAL_UART_ErrorCallback+0x24>)
 800ab20:	f7fa fcf0 	bl	8005504 <HAL_UART_Init>
	}

}
 800ab24:	bf00      	nop
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	200006d0 	.word	0x200006d0

0800ab30 <SerialHandle>:

void SerialHandle(serial_obj *serial)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
	uint8_t data;
	bool ret;
	fifo *tx = uart_list[serial->port].tx_buf;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	881b      	ldrh	r3, [r3, #0]
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4a2f      	ldr	r2, [pc, #188]	; (800abfc <SerialHandle+0xcc>)
 800ab40:	232c      	movs	r3, #44	; 0x2c
 800ab42:	fb01 f303 	mul.w	r3, r1, r3
 800ab46:	4413      	add	r3, r2
 800ab48:	3324      	adds	r3, #36	; 0x24
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	617b      	str	r3, [r7, #20]
	fifo *rx = uart_list[serial->port].rx_buf;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	4619      	mov	r1, r3
 800ab54:	4a29      	ldr	r2, [pc, #164]	; (800abfc <SerialHandle+0xcc>)
 800ab56:	232c      	movs	r3, #44	; 0x2c
 800ab58:	fb01 f303 	mul.w	r3, r1, r3
 800ab5c:	4413      	add	r3, r2
 800ab5e:	3328      	adds	r3, #40	; 0x28
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	613b      	str	r3, [r7, #16]
send:
	if (tx->data_len > 0)
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	891b      	ldrh	r3, [r3, #8]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d020      	beq.n	800abae <SerialHandle+0x7e>
	{
		tx->Peak(tx, &data);
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	699b      	ldr	r3, [r3, #24]
 800ab70:	f107 020e 	add.w	r2, r7, #14
 800ab74:	4611      	mov	r1, r2
 800ab76:	6978      	ldr	r0, [r7, #20]
 800ab78:	4798      	blx	r3
		ret = uart_list[serial->port].SendByte(data);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4a1e      	ldr	r2, [pc, #120]	; (800abfc <SerialHandle+0xcc>)
 800ab82:	232c      	movs	r3, #44	; 0x2c
 800ab84:	fb01 f303 	mul.w	r3, r1, r3
 800ab88:	4413      	add	r3, r2
 800ab8a:	331c      	adds	r3, #28
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	7bba      	ldrb	r2, [r7, #14]
 800ab90:	4610      	mov	r0, r2
 800ab92:	4798      	blx	r3
 800ab94:	4603      	mov	r3, r0
 800ab96:	73fb      	strb	r3, [r7, #15]
		if (ret == true)
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d007      	beq.n	800abae <SerialHandle+0x7e>
		{
			tx->Get(tx, &data);
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	f107 020e 	add.w	r2, r7, #14
 800aba6:	4611      	mov	r1, r2
 800aba8:	6978      	ldr	r0, [r7, #20]
 800abaa:	4798      	blx	r3
			goto send;
 800abac:	e7da      	b.n	800ab64 <SerialHandle+0x34>
		}
	}
#ifdef USE_FIFO
read:
 800abae:	bf00      	nop
	if (uart_list[serial->port].ReceiveByte(&data) == true)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	881b      	ldrh	r3, [r3, #0]
 800abb4:	4619      	mov	r1, r3
 800abb6:	4a11      	ldr	r2, [pc, #68]	; (800abfc <SerialHandle+0xcc>)
 800abb8:	232c      	movs	r3, #44	; 0x2c
 800abba:	fb01 f303 	mul.w	r3, r1, r3
 800abbe:	4413      	add	r3, r2
 800abc0:	3320      	adds	r3, #32
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f107 020e 	add.w	r2, r7, #14
 800abc8:	4610      	mov	r0, r2
 800abca:	4798      	blx	r3
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d007      	beq.n	800abe2 <SerialHandle+0xb2>
	{
		rx->Put(rx, &data);
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	f107 020e 	add.w	r2, r7, #14
 800abda:	4611      	mov	r1, r2
 800abdc:	6938      	ldr	r0, [r7, #16]
 800abde:	4798      	blx	r3
		goto read;
 800abe0:	e7e6      	b.n	800abb0 <SerialHandle+0x80>
	}
	serial->length_received = rx->data_len;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	891a      	ldrh	r2, [r3, #8]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	821a      	strh	r2, [r3, #16]
	serial->length_send = tx->data_len;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	891a      	ldrh	r2, [r3, #8]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	825a      	strh	r2, [r3, #18]
#endif
}
 800abf2:	bf00      	nop
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	200002b4 	.word	0x200002b4

0800ac00 <create_serial>:
// End porting hardware

serial_obj *create_serial(uint16_t port, uint32_t baudrate, uint16_t tx_size, uint16_t rx_size)
{
 800ac00:	b590      	push	{r4, r7, lr}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60b9      	str	r1, [r7, #8]
 800ac08:	4611      	mov	r1, r2
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	81fb      	strh	r3, [r7, #14]
 800ac10:	460b      	mov	r3, r1
 800ac12:	81bb      	strh	r3, [r7, #12]
 800ac14:	4613      	mov	r3, r2
 800ac16:	80fb      	strh	r3, [r7, #6]
	serial_obj *serial;
	serial = &(uart_list[port].serial_port);
 800ac18:	89fb      	ldrh	r3, [r7, #14]
 800ac1a:	222c      	movs	r2, #44	; 0x2c
 800ac1c:	fb02 f303 	mul.w	r3, r2, r3
 800ac20:	4a27      	ldr	r2, [pc, #156]	; (800acc0 <create_serial+0xc0>)
 800ac22:	4413      	add	r3, r2
 800ac24:	617b      	str	r3, [r7, #20]
	serial->port = port;
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	89fa      	ldrh	r2, [r7, #14]
 800ac2a:	801a      	strh	r2, [r3, #0]
	uart_list[port].tx_buf = create_fifo(tx_size, 1);
 800ac2c:	89fc      	ldrh	r4, [r7, #14]
 800ac2e:	89bb      	ldrh	r3, [r7, #12]
 800ac30:	2101      	movs	r1, #1
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fd fcc4 	bl	80085c0 <create_fifo>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	4921      	ldr	r1, [pc, #132]	; (800acc0 <create_serial+0xc0>)
 800ac3c:	232c      	movs	r3, #44	; 0x2c
 800ac3e:	fb04 f303 	mul.w	r3, r4, r3
 800ac42:	440b      	add	r3, r1
 800ac44:	3324      	adds	r3, #36	; 0x24
 800ac46:	601a      	str	r2, [r3, #0]
	uart_list[port].rx_buf = create_fifo(rx_size, 1);
 800ac48:	89fc      	ldrh	r4, [r7, #14]
 800ac4a:	88fb      	ldrh	r3, [r7, #6]
 800ac4c:	2101      	movs	r1, #1
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fd fcb6 	bl	80085c0 <create_fifo>
 800ac54:	4602      	mov	r2, r0
 800ac56:	491a      	ldr	r1, [pc, #104]	; (800acc0 <create_serial+0xc0>)
 800ac58:	232c      	movs	r3, #44	; 0x2c
 800ac5a:	fb04 f303 	mul.w	r3, r4, r3
 800ac5e:	440b      	add	r3, r1
 800ac60:	3328      	adds	r3, #40	; 0x28
 800ac62:	601a      	str	r2, [r3, #0]
	if (uart_list[port].tx_buf == null || uart_list[port].rx_buf == null)
 800ac64:	89fb      	ldrh	r3, [r7, #14]
 800ac66:	4a16      	ldr	r2, [pc, #88]	; (800acc0 <create_serial+0xc0>)
 800ac68:	212c      	movs	r1, #44	; 0x2c
 800ac6a:	fb01 f303 	mul.w	r3, r1, r3
 800ac6e:	4413      	add	r3, r2
 800ac70:	3324      	adds	r3, #36	; 0x24
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d009      	beq.n	800ac8c <create_serial+0x8c>
 800ac78:	89fb      	ldrh	r3, [r7, #14]
 800ac7a:	4a11      	ldr	r2, [pc, #68]	; (800acc0 <create_serial+0xc0>)
 800ac7c:	212c      	movs	r1, #44	; 0x2c
 800ac7e:	fb01 f303 	mul.w	r3, r1, r3
 800ac82:	4413      	add	r3, r2
 800ac84:	3328      	adds	r3, #40	; 0x28
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d100      	bne.n	800ac8e <create_serial+0x8e>
		while (1)
 800ac8c:	e7fe      	b.n	800ac8c <create_serial+0x8c>
			;

	serial->tx_size = tx_size;
 800ac8e:	89ba      	ldrh	r2, [r7, #12]
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	609a      	str	r2, [r3, #8]
	serial->rx_size = rx_size;
 800ac94:	88fa      	ldrh	r2, [r7, #6]
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	60da      	str	r2, [r3, #12]
	serial->baudrate = baudrate;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	605a      	str	r2, [r3, #4]
	uart_list[port].OpenUart(baudrate);
 800aca0:	89fb      	ldrh	r3, [r7, #14]
 800aca2:	4a07      	ldr	r2, [pc, #28]	; (800acc0 <create_serial+0xc0>)
 800aca4:	212c      	movs	r1, #44	; 0x2c
 800aca6:	fb01 f303 	mul.w	r3, r1, r3
 800acaa:	4413      	add	r3, r2
 800acac:	3318      	adds	r3, #24
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	4610      	mov	r0, r2
 800acb4:	4798      	blx	r3
	return serial;
 800acb6:	697b      	ldr	r3, [r7, #20]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	371c      	adds	r7, #28
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd90      	pop	{r4, r7, pc}
 800acc0:	200002b4 	.word	0x200002b4

0800acc4 <SerialSendBuf>:

bool SerialSendBuf(serial_obj *serial, uint8_t *data, uint16_t len)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	4613      	mov	r3, r2
 800acd0:	80fb      	strh	r3, [r7, #6]
	bool ret;
	fifo *tx = uart_list[serial->port].tx_buf;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	4619      	mov	r1, r3
 800acd8:	4a0c      	ldr	r2, [pc, #48]	; (800ad0c <SerialSendBuf+0x48>)
 800acda:	232c      	movs	r3, #44	; 0x2c
 800acdc:	fb01 f303 	mul.w	r3, r1, r3
 800ace0:	4413      	add	r3, r2
 800ace2:	3324      	adds	r3, #36	; 0x24
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	617b      	str	r3, [r7, #20]
	ret = tx->Puts(tx, data, len);
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	88fa      	ldrh	r2, [r7, #6]
 800acee:	68b9      	ldr	r1, [r7, #8]
 800acf0:	6978      	ldr	r0, [r7, #20]
 800acf2:	4798      	blx	r3
 800acf4:	4603      	mov	r3, r0
 800acf6:	74fb      	strb	r3, [r7, #19]
	serial->length_send = tx->data_len;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	891a      	ldrh	r2, [r3, #8]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	825a      	strh	r2, [r3, #18]

	return ret;
 800ad00:	7cfb      	ldrb	r3, [r7, #19]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	200002b4 	.word	0x200002b4

0800ad10 <SerialReadBuf>:

uint16_t SerialReadBuf(serial_obj *serial, uint8_t *data, uint16_t len)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	80fb      	strh	r3, [r7, #6]
	fifo *rx = uart_list[serial->port].rx_buf;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	881b      	ldrh	r3, [r3, #0]
 800ad22:	4619      	mov	r1, r3
 800ad24:	4a0d      	ldr	r2, [pc, #52]	; (800ad5c <SerialReadBuf+0x4c>)
 800ad26:	232c      	movs	r3, #44	; 0x2c
 800ad28:	fb01 f303 	mul.w	r3, r1, r3
 800ad2c:	4413      	add	r3, r2
 800ad2e:	3328      	adds	r3, #40	; 0x28
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	617b      	str	r3, [r7, #20]
	if (rx->Gets(rx, data, len) == true)
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad38:	88fa      	ldrh	r2, [r7, #6]
 800ad3a:	68b9      	ldr	r1, [r7, #8]
 800ad3c:	6978      	ldr	r0, [r7, #20]
 800ad3e:	4798      	blx	r3
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d005      	beq.n	800ad52 <SerialReadBuf+0x42>
	{
		serial->length_received = rx->data_len;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	891a      	ldrh	r2, [r3, #8]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	821a      	strh	r2, [r3, #16]
		return len;
 800ad4e:	88fb      	ldrh	r3, [r7, #6]
 800ad50:	e000      	b.n	800ad54 <SerialReadBuf+0x44>
	}
	return 0;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3718      	adds	r7, #24
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	200002b4 	.word	0x200002b4

0800ad60 <Timer1kHzAddCallback>:


static int current_index_callback_1k_fn = 0;

bool Timer1kHzAddCallback(TimerfuncCb fn)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
	if(current_index_callback_1k_fn < MAX_TIMER_SERVICE)
 800ad68:	4b0b      	ldr	r3, [pc, #44]	; (800ad98 <Timer1kHzAddCallback+0x38>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b04      	cmp	r3, #4
 800ad6e:	dc0c      	bgt.n	800ad8a <Timer1kHzAddCallback+0x2a>
	{
		fnFunctionTimer1kHzISR[current_index_callback_1k_fn] = fn;
 800ad70:	4b09      	ldr	r3, [pc, #36]	; (800ad98 <Timer1kHzAddCallback+0x38>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4909      	ldr	r1, [pc, #36]	; (800ad9c <Timer1kHzAddCallback+0x3c>)
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		current_index_callback_1k_fn++;
 800ad7c:	4b06      	ldr	r3, [pc, #24]	; (800ad98 <Timer1kHzAddCallback+0x38>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3301      	adds	r3, #1
 800ad82:	4a05      	ldr	r2, [pc, #20]	; (800ad98 <Timer1kHzAddCallback+0x38>)
 800ad84:	6013      	str	r3, [r2, #0]
		return true;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e000      	b.n	800ad8c <Timer1kHzAddCallback+0x2c>
	}
	return false;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	20001668 	.word	0x20001668
 800ad9c:	20001654 	.word	0x20001654

0800ada0 <TimerTick1kHz>:

void TimerTick1kHz()
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
	int i = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	607b      	str	r3, [r7, #4]
	for (i=0; i < current_index_callback_1k_fn; i++)
 800adaa:	2300      	movs	r3, #0
 800adac:	607b      	str	r3, [r7, #4]
 800adae:	e00d      	b.n	800adcc <TimerTick1kHz+0x2c>
	{
		if (fnFunctionTimer1kHzISR[i] != NULL)
 800adb0:	4a0b      	ldr	r2, [pc, #44]	; (800ade0 <TimerTick1kHz+0x40>)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d004      	beq.n	800adc6 <TimerTick1kHz+0x26>
		{
			fnFunctionTimer1kHzISR[i]();
 800adbc:	4a08      	ldr	r2, [pc, #32]	; (800ade0 <TimerTick1kHz+0x40>)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adc4:	4798      	blx	r3
	for (i=0; i < current_index_callback_1k_fn; i++)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3301      	adds	r3, #1
 800adca:	607b      	str	r3, [r7, #4]
 800adcc:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <TimerTick1kHz+0x44>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	429a      	cmp	r2, r3
 800add4:	dbec      	blt.n	800adb0 <TimerTick1kHz+0x10>
		}
	}
}
 800add6:	bf00      	nop
 800add8:	bf00      	nop
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	20001654 	.word	0x20001654
 800ade4:	20001668 	.word	0x20001668

0800ade8 <TIM_GetCounterMode>:
//{
//  WRITE_REG(advancetimerobjX->advtimer->SR, ~(TIM_SR_B2IF));
//}

__STATIC_INLINE uint32_t TIM_GetCounterMode(timer_advance_obj_t *advancetimerobjX)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  uint32_t counter_mode;

  counter_mode = (uint32_t)(READ_BIT(advancetimerobjX->advtimer->CR1, TIM_CR1_CMS));
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adfa:	60fb      	str	r3, [r7, #12]
  return counter_mode;
 800adfc:	68fb      	ldr	r3, [r7, #12]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <TIM_SetAutoReload>:

__STATIC_INLINE void TIM_SetAutoReload(timer_advance_obj_t *advancetimerobjX, uint32_t AutoReload)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	6039      	str	r1, [r7, #0]
  WRITE_REG(advancetimerobjX->advtimer->ARR, AutoReload);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <create_advance_timer>:
static timeradvanceTable_t timeradvanceTable[2] = {
		{TIMER_ADVANCE_ID_1, (TIM_TypeDef*)TIM1},
		{TIMER_ADVANCE_ID_2, (TIM_TypeDef*)TIM15},
};

timer_advance_obj_t* create_advance_timer(TIMER_ADVANCE_ID_E id, uint32_t Frequency){
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	4603      	mov	r3, r0
 800ae30:	6039      	str	r1, [r7, #0]
 800ae32:	71fb      	strb	r3, [r7, #7]
	timer_advance_obj_t* timer_advance_obj= malloc(sizeof(timer_advance_obj_t));
 800ae34:	2008      	movs	r0, #8
 800ae36:	f001 f961 	bl	800c0fc <malloc>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	60bb      	str	r3, [r7, #8]
	memset(timer_advance_obj, 0 ,sizeof(timer_advance_obj_t));
 800ae3e:	2208      	movs	r2, #8
 800ae40:	2100      	movs	r1, #0
 800ae42:	68b8      	ldr	r0, [r7, #8]
 800ae44:	f001 fa36 	bl	800c2b4 <memset>

	if(id >= 0 && id <= 2){
 800ae48:	79fb      	ldrb	r3, [r7, #7]
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	d80a      	bhi.n	800ae64 <create_advance_timer+0x3c>
		timer_advance_obj->advtimer 		= timeradvanceTable[id].timeradvance;
 800ae4e:	79fb      	ldrb	r3, [r7, #7]
 800ae50:	4a35      	ldr	r2, [pc, #212]	; (800af28 <create_advance_timer+0x100>)
 800ae52:	00db      	lsls	r3, r3, #3
 800ae54:	4413      	add	r3, r2
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	605a      	str	r2, [r3, #4]
		timer_advance_obj->advance_timer_id = (TIMER_ADVANCE_ID_E)id;
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	79fa      	ldrb	r2, [r7, #7]
 800ae60:	701a      	strb	r2, [r3, #0]
 800ae62:	e005      	b.n	800ae70 <create_advance_timer+0x48>
	}
	else{
		timer_advance_obj->advtimer 		= NULL;
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	2200      	movs	r2, #0
 800ae68:	605a      	str	r2, [r3, #4]
		timer_advance_obj->advance_timer_id = 0;
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	701a      	strb	r2, [r3, #0]
	}
	float PeriodTemp = 0;
 800ae70:	f04f 0300 	mov.w	r3, #0
 800ae74:	60fb      	str	r3, [r7, #12]
	if(TIM_GetCounterMode(timer_advance_obj) == 0){
 800ae76:	68b8      	ldr	r0, [r7, #8]
 800ae78:	f7ff ffb6 	bl	800ade8 <TIM_GetCounterMode>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d11a      	bne.n	800aeb8 <create_advance_timer+0x90>
		PeriodTemp = ((float)TIMER_ADVANCE_TIMEBASE_CLOCK/(float)Frequency) + 0.7;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	ee07 3a90 	vmov	s15, r3
 800ae88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800af2c <create_advance_timer+0x104>
 800ae90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ae94:	ee16 0a90 	vmov	r0, s13
 800ae98:	f7f5 fb8e 	bl	80005b8 <__aeabi_f2d>
 800ae9c:	a320      	add	r3, pc, #128	; (adr r3, 800af20 <create_advance_timer+0xf8>)
 800ae9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea2:	f7f5 fa2b 	bl	80002fc <__adddf3>
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
 800aeaa:	4610      	mov	r0, r2
 800aeac:	4619      	mov	r1, r3
 800aeae:	f7f5 fbdb 	bl	8000668 <__aeabi_d2f>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	60fb      	str	r3, [r7, #12]
 800aeb6:	e01a      	b.n	800aeee <create_advance_timer+0xc6>
	}
	else{
		PeriodTemp = (float)TIMER_ADVANCE_TIMEBASE_CLOCK/(float)(Frequency*2) + 0.7;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	005b      	lsls	r3, r3, #1
 800aebc:	ee07 3a90 	vmov	s15, r3
 800aec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800af2c <create_advance_timer+0x104>
 800aec8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800aecc:	ee16 0a90 	vmov	r0, s13
 800aed0:	f7f5 fb72 	bl	80005b8 <__aeabi_f2d>
 800aed4:	a312      	add	r3, pc, #72	; (adr r3, 800af20 <create_advance_timer+0xf8>)
 800aed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeda:	f7f5 fa0f 	bl	80002fc <__adddf3>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	4610      	mov	r0, r2
 800aee4:	4619      	mov	r1, r3
 800aee6:	f7f5 fbbf 	bl	8000668 <__aeabi_d2f>
 800aeea:	4603      	mov	r3, r0
 800aeec:	60fb      	str	r3, [r7, #12]
	}
	TIM_SetAutoReload(timer_advance_obj , (uint32_t)PeriodTemp);
 800aeee:	edd7 7a03 	vldr	s15, [r7, #12]
 800aef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aef6:	ee17 1a90 	vmov	r1, s15
 800aefa:	68b8      	ldr	r0, [r7, #8]
 800aefc:	f7ff ff85 	bl	800ae0a <TIM_SetAutoReload>
	timer_advance_obj->TimerPeriod = (uint32_t)PeriodTemp;
 800af00:	edd7 7a03 	vldr	s15, [r7, #12]
 800af04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af08:	ee17 3a90 	vmov	r3, s15
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	805a      	strh	r2, [r3, #2]
	return timer_advance_obj;
 800af12:	68bb      	ldr	r3, [r7, #8]
}
 800af14:	4618      	mov	r0, r3
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	f3af 8000 	nop.w
 800af20:	66666666 	.word	0x66666666
 800af24:	3fe66666 	.word	0x3fe66666
 800af28:	2000030c 	.word	0x2000030c
 800af2c:	4d221fe8 	.word	0x4d221fe8

0800af30 <AppMainInit>:
static BackgroundCb BackgroundTask[MAX_BACKGOUND_TASK] = {NULL};
static int current_index_background = 0;
static void MainAddBackgroundProcess(BackgroundCb fn);


void AppMainInit(){
 800af30:	b580      	push	{r7, lr}
 800af32:	af00      	add	r7, sp, #0

		serial_init();
 800af34:	f000 fc3c 	bl	800b7b0 <serial_init>
//	  	serial_test_1 = create_serial(1, 115200, 512, 512);
		debug_modbus = create_modbus(118, serial_test_1);
 800af38:	4b0f      	ldr	r3, [pc, #60]	; (800af78 <AppMainInit+0x48>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4619      	mov	r1, r3
 800af3e:	2076      	movs	r0, #118	; 0x76
 800af40:	f7fe f80c 	bl	8008f5c <create_modbus>
 800af44:	4603      	mov	r3, r0
 800af46:	4a0d      	ldr	r2, [pc, #52]	; (800af7c <AppMainInit+0x4c>)
 800af48:	6013      	str	r3, [r2, #0]
		EC200_Init();
 800af4a:	f7fe fc71 	bl	8009830 <EC200_Init>
		initGlobalVariables();
 800af4e:	f000 fc41 	bl	800b7d4 <initGlobalVariables>
		MainAddBackgroundProcess(&ModbusBackground);
 800af52:	480b      	ldr	r0, [pc, #44]	; (800af80 <AppMainInit+0x50>)
 800af54:	f000 f838 	bl	800afc8 <MainAddBackgroundProcess>
		MainAddBackgroundProcess(&UpdateAllVariable);
 800af58:	480a      	ldr	r0, [pc, #40]	; (800af84 <AppMainInit+0x54>)
 800af5a:	f000 f835 	bl	800afc8 <MainAddBackgroundProcess>

//		MainAddBackgroundProcess(&TEST);
//		send_data();
//		MainAddBackgroundProcess(&receive_string_data);
		Timer1kHzAddCallback(&Modbus1kHz);
 800af5e:	480a      	ldr	r0, [pc, #40]	; (800af88 <AppMainInit+0x58>)
 800af60:	f7ff fefe 	bl	800ad60 <Timer1kHzAddCallback>

		Pin_Func_Init();
 800af64:	f7fe fadc 	bl	8009520 <Pin_Func_Init>
		Signal_Init();
 800af68:	f7fe fbba 	bl	80096e0 <Signal_Init>
		ControlDcDcBoostInit();
 800af6c:	f000 f878 	bl	800b060 <ControlDcDcBoostInit>
//		ControlDcDcBuckInit();
//		ControlDcDcDumpInit();
		StateInit();
 800af70:	f000 fcb8 	bl	800b8e4 <StateInit>


}
 800af74:	bf00      	nop
 800af76:	bd80      	pop	{r7, pc}
 800af78:	20001678 	.word	0x20001678
 800af7c:	20001674 	.word	0x20001674
 800af80:	08009031 	.word	0x08009031
 800af84:	0800b7fd 	.word	0x0800b7fd
 800af88:	08008fe1 	.word	0x08008fe1

0800af8c <AppMainProcess>:

void AppMainProcess(){
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < MAX_BACKGOUND_TASK; i++){
 800af92:	2300      	movs	r3, #0
 800af94:	607b      	str	r3, [r7, #4]
 800af96:	e00d      	b.n	800afb4 <AppMainProcess+0x28>
		if(BackgroundTask[i] != NULL){
 800af98:	4a0a      	ldr	r2, [pc, #40]	; (800afc4 <AppMainProcess+0x38>)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d004      	beq.n	800afae <AppMainProcess+0x22>
			BackgroundTask[i]();
 800afa4:	4a07      	ldr	r2, [pc, #28]	; (800afc4 <AppMainProcess+0x38>)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afac:	4798      	blx	r3
	for(i = 0; i < MAX_BACKGOUND_TASK; i++){
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3301      	adds	r3, #1
 800afb2:	607b      	str	r3, [r7, #4]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b05      	cmp	r3, #5
 800afb8:	ddee      	ble.n	800af98 <AppMainProcess+0xc>
		}
	}
}
 800afba:	bf00      	nop
 800afbc:	bf00      	nop
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	2000167c 	.word	0x2000167c

0800afc8 <MainAddBackgroundProcess>:

static void MainAddBackgroundProcess(BackgroundCb fn){
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
	if(current_index_background < MAX_BACKGOUND_TASK){
 800afd0:	4b0a      	ldr	r3, [pc, #40]	; (800affc <MainAddBackgroundProcess+0x34>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b05      	cmp	r3, #5
 800afd6:	dc0a      	bgt.n	800afee <MainAddBackgroundProcess+0x26>
		BackgroundTask[current_index_background] = fn;
 800afd8:	4b08      	ldr	r3, [pc, #32]	; (800affc <MainAddBackgroundProcess+0x34>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4908      	ldr	r1, [pc, #32]	; (800b000 <MainAddBackgroundProcess+0x38>)
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		current_index_background++;
 800afe4:	4b05      	ldr	r3, [pc, #20]	; (800affc <MainAddBackgroundProcess+0x34>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	3301      	adds	r3, #1
 800afea:	4a04      	ldr	r2, [pc, #16]	; (800affc <MainAddBackgroundProcess+0x34>)
 800afec:	6013      	str	r3, [r2, #0]
	}
}
 800afee:	bf00      	nop
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	20001694 	.word	0x20001694
 800b000:	2000167c 	.word	0x2000167c

0800b004 <SetCompareCH1>:
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR1, CompareValue);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b016:	bf00      	nop
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <SetCompareCH2>:
{
 800b022:	b480      	push	{r7}
 800b024:	b083      	sub	sp, #12
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR2, CompareValue);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <SetCompareCH4>:
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR4, CompareValue);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b052:	bf00      	nop
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr
	...

0800b060 <ControlDcDcBoostInit>:
	s_ptimer_pwm = create_advance_timer(TIMER_ADVANCE_ID_1, FREQUENCY_SAMPLE_WIND_BUCK_BOOST);
	PwmWindBuckInit(s_ptimer_pwm, &DcDcProcess);
}

void ControlDcDcBoostInit(void)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	af00      	add	r7, sp, #0
	s_ptimer_pwm = create_advance_timer(TIMER_ADVANCE_ID_1, FREQUENCY_SAMPLE_WIND_BUCK_BOOST);
 800b064:	f24c 3150 	movw	r1, #50000	; 0xc350
 800b068:	2000      	movs	r0, #0
 800b06a:	f7ff fedd 	bl	800ae28 <create_advance_timer>
 800b06e:	4603      	mov	r3, r0
 800b070:	4a04      	ldr	r2, [pc, #16]	; (800b084 <ControlDcDcBoostInit+0x24>)
 800b072:	6013      	str	r3, [r2, #0]
	PwmWindBoostInit(s_ptimer_pwm, &DcDcProcess);
 800b074:	4b03      	ldr	r3, [pc, #12]	; (800b084 <ControlDcDcBoostInit+0x24>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4903      	ldr	r1, [pc, #12]	; (800b088 <ControlDcDcBoostInit+0x28>)
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fe f97c 	bl	8009378 <PwmWindBoostInit>
}
 800b080:	bf00      	nop
 800b082:	bd80      	pop	{r7, pc}
 800b084:	2000169c 	.word	0x2000169c
 800b088:	0800b08d 	.word	0x0800b08d

0800b08c <DcDcProcess>:



static void DcDcProcess(void)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	af00      	add	r7, sp, #0
	Signal_Update(VIN);
 800b090:	2000      	movs	r0, #0
 800b092:	f7fe fb45 	bl	8009720 <Signal_Update>
	Signal_Update(ILOAD);
 800b096:	2002      	movs	r0, #2
 800b098:	f7fe fb42 	bl	8009720 <Signal_Update>
	Signal_Update(VOUT);
 800b09c:	2001      	movs	r0, #1
 800b09e:	f7fe fb3f 	bl	8009720 <Signal_Update>
//	count++;
//	if(count >= 1000000)
//	{
//		count = 0;
//	}
	WindControlUpdate(&g_wind, g_iload, g_vin);
 800b0a2:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <DcDcProcess+0x34>)
 800b0a4:	edd3 7a00 	vldr	s15, [r3]
 800b0a8:	4b06      	ldr	r3, [pc, #24]	; (800b0c4 <DcDcProcess+0x38>)
 800b0aa:	ed93 7a00 	vldr	s14, [r3]
 800b0ae:	eef0 0a47 	vmov.f32	s1, s14
 800b0b2:	eeb0 0a67 	vmov.f32	s0, s15
 800b0b6:	4804      	ldr	r0, [pc, #16]	; (800b0c8 <DcDcProcess+0x3c>)
 800b0b8:	f000 fec9 	bl	800be4e <WindControlUpdate>
}
 800b0bc:	bf00      	nop
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20000894 	.word	0x20000894
 800b0c4:	2000088c 	.word	0x2000088c
 800b0c8:	20001750 	.word	0x20001750

0800b0cc <DC_StopPWM_Boost>:
//static CNTL_2P2Z_F_C_Vars dc_no_mppt_pi_cur_var;



void DC_StopPWM_Boost(void)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	af00      	add	r7, sp, #0
	PwmWindBoostDisable(s_ptimer_pwm);
 800b0d0:	4b03      	ldr	r3, [pc, #12]	; (800b0e0 <DC_StopPWM_Boost+0x14>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fe f9b4 	bl	8009442 <PwmWindBoostDisable>
}
 800b0da:	bf00      	nop
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	2000169c 	.word	0x2000169c

0800b0e4 <DC_StartPWM_Boost>:

void DC_StartPWM_Boost(void)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	af00      	add	r7, sp, #0
	if (g_wind.is_plugin == true)
 800b0e8:	4b05      	ldr	r3, [pc, #20]	; (800b100 <DC_StartPWM_Boost+0x1c>)
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d004      	beq.n	800b0fa <DC_StartPWM_Boost+0x16>
	{
		 PwmWindBoostEnable(s_ptimer_pwm);
 800b0f0:	4b04      	ldr	r3, [pc, #16]	; (800b104 <DC_StartPWM_Boost+0x20>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7fe f98b 	bl	8009410 <PwmWindBoostEnable>
	}
}
 800b0fa:	bf00      	nop
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	20001750 	.word	0x20001750
 800b104:	2000169c 	.word	0x2000169c

0800b108 <DC_StopPWM_Buck>:

void DC_StopPWM_Buck(void)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	af00      	add	r7, sp, #0
	PwmWindBuckDisable(s_ptimer_pwm);
 800b10c:	4b03      	ldr	r3, [pc, #12]	; (800b11c <DC_StopPWM_Buck+0x14>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4618      	mov	r0, r3
 800b112:	f7fe f98b 	bl	800942c <PwmWindBuckDisable>
}
 800b116:	bf00      	nop
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	2000169c 	.word	0x2000169c

0800b120 <DC_StartPWM_Buck>:

void DC_StartPWM_Buck(void)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	af00      	add	r7, sp, #0
//	PwmWindBuckEnable(s_ptimer_pwm);
	if (g_wind.is_plugin == true)
 800b124:	4b05      	ldr	r3, [pc, #20]	; (800b13c <DC_StartPWM_Buck+0x1c>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d004      	beq.n	800b136 <DC_StartPWM_Buck+0x16>
	{
		 PwmWindBuckEnable(s_ptimer_pwm);
 800b12c:	4b04      	ldr	r3, [pc, #16]	; (800b140 <DC_StartPWM_Buck+0x20>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4618      	mov	r0, r3
 800b132:	f7fe f95f 	bl	80093f4 <PwmWindBuckEnable>
	}
}
 800b136:	bf00      	nop
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	20001750 	.word	0x20001750
 800b140:	2000169c 	.word	0x2000169c

0800b144 <DcDc_ControllerMppt>:
		PwmWindBoostSetDuty(s_ptimer_pwm, (i-1));
	}
}


void DcDc_ControllerMppt(void){
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
	flag = true;
 800b14a:	4b4d      	ldr	r3, [pc, #308]	; (800b280 <DcDc_ControllerMppt+0x13c>)
 800b14c:	2201      	movs	r2, #1
 800b14e:	701a      	strb	r2, [r3, #0]
	static float duty;

	TestMPPTUpdate(&g_wind.mppt, g_wind.iwt, g_wind.vwt);
 800b150:	4b4c      	ldr	r3, [pc, #304]	; (800b284 <DcDc_ControllerMppt+0x140>)
 800b152:	edd3 7a02 	vldr	s15, [r3, #8]
 800b156:	4b4b      	ldr	r3, [pc, #300]	; (800b284 <DcDc_ControllerMppt+0x140>)
 800b158:	ed93 7a01 	vldr	s14, [r3, #4]
 800b15c:	eef0 0a47 	vmov.f32	s1, s14
 800b160:	eeb0 0a67 	vmov.f32	s0, s15
 800b164:	4848      	ldr	r0, [pc, #288]	; (800b288 <DcDc_ControllerMppt+0x144>)
 800b166:	f000 ff8f 	bl	800c088 <TestMPPTUpdate>
	WindControlMppt(&g_wind);
 800b16a:	4846      	ldr	r0, [pc, #280]	; (800b284 <DcDc_ControllerMppt+0x140>)
 800b16c:	f000 fe62 	bl	800be34 <WindControlMppt>


	duty = g_wind.mppt.D_ref;
 800b170:	4b44      	ldr	r3, [pc, #272]	; (800b284 <DcDc_ControllerMppt+0x140>)
 800b172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b174:	4a45      	ldr	r2, [pc, #276]	; (800b28c <DcDc_ControllerMppt+0x148>)
 800b176:	6013      	str	r3, [r2, #0]
	if (duty >= 0 && duty <= 1){
 800b178:	4b44      	ldr	r3, [pc, #272]	; (800b28c <DcDc_ControllerMppt+0x148>)
 800b17a:	edd3 7a00 	vldr	s15, [r3]
 800b17e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b186:	db3d      	blt.n	800b204 <DcDc_ControllerMppt+0xc0>
 800b188:	4b40      	ldr	r3, [pc, #256]	; (800b28c <DcDc_ControllerMppt+0x148>)
 800b18a:	edd3 7a00 	vldr	s15, [r3]
 800b18e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b192:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b19a:	d833      	bhi.n	800b204 <DcDc_ControllerMppt+0xc0>
		PwmWindBuckSetDuty(s_ptimer_pwm, duty);
 800b19c:	2300      	movs	r3, #0
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	4b3b      	ldr	r3, [pc, #236]	; (800b290 <DcDc_ControllerMppt+0x14c>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	885b      	ldrh	r3, [r3, #2]
 800b1a6:	ee07 3a90 	vmov	s15, r3
 800b1aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b1ae:	4b37      	ldr	r3, [pc, #220]	; (800b28c <DcDc_ControllerMppt+0x148>)
 800b1b0:	edd3 7a00 	vldr	s15, [r3]
 800b1b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1bc:	ee17 3a90 	vmov	r3, s15
 800b1c0:	60fb      	str	r3, [r7, #12]
 800b1c2:	4b33      	ldr	r3, [pc, #204]	; (800b290 <DcDc_ControllerMppt+0x14c>)
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	085b      	lsrs	r3, r3, #1
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	f7ff ff28 	bl	800b022 <SetCompareCH2>
 800b1d2:	4b2f      	ldr	r3, [pc, #188]	; (800b290 <DcDc_ControllerMppt+0x14c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68f9      	ldr	r1, [r7, #12]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff ff13 	bl	800b004 <SetCompareCH1>
		PwmWindBoostSetDuty(s_ptimer_pwm, 0);
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60bb      	str	r3, [r7, #8]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	60bb      	str	r3, [r7, #8]
 800b1e6:	4b2a      	ldr	r3, [pc, #168]	; (800b290 <DcDc_ControllerMppt+0x14c>)
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	085b      	lsrs	r3, r3, #1
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	f7ff ff16 	bl	800b022 <SetCompareCH2>
 800b1f6:	4b26      	ldr	r3, [pc, #152]	; (800b290 <DcDc_ControllerMppt+0x14c>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68b9      	ldr	r1, [r7, #8]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7ff ff1f 	bl	800b040 <SetCompareCH4>
	if (duty >= 0 && duty <= 1){
 800b202:	e039      	b.n	800b278 <DcDc_ControllerMppt+0x134>
	}
	else{
		PwmWindBuckSetDuty(s_ptimer_pwm, 1);
 800b204:	2300      	movs	r3, #0
 800b206:	607b      	str	r3, [r7, #4]
 800b208:	4b21      	ldr	r3, [pc, #132]	; (800b290 <DcDc_ControllerMppt+0x14c>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	885b      	ldrh	r3, [r3, #2]
 800b20e:	607b      	str	r3, [r7, #4]
 800b210:	4b1f      	ldr	r3, [pc, #124]	; (800b290 <DcDc_ControllerMppt+0x14c>)
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	085b      	lsrs	r3, r3, #1
 800b218:	4619      	mov	r1, r3
 800b21a:	4610      	mov	r0, r2
 800b21c:	f7ff ff01 	bl	800b022 <SetCompareCH2>
 800b220:	4b1b      	ldr	r3, [pc, #108]	; (800b290 <DcDc_ControllerMppt+0x14c>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6879      	ldr	r1, [r7, #4]
 800b226:	4618      	mov	r0, r3
 800b228:	f7ff feec 	bl	800b004 <SetCompareCH1>
		PwmWindBoostSetDuty(s_ptimer_pwm, (duty-1));
 800b22c:	2300      	movs	r3, #0
 800b22e:	603b      	str	r3, [r7, #0]
 800b230:	4b16      	ldr	r3, [pc, #88]	; (800b28c <DcDc_ControllerMppt+0x148>)
 800b232:	edd3 7a00 	vldr	s15, [r3]
 800b236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b23a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b23e:	4b14      	ldr	r3, [pc, #80]	; (800b290 <DcDc_ControllerMppt+0x14c>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	885b      	ldrh	r3, [r3, #2]
 800b244:	ee07 3a90 	vmov	s15, r3
 800b248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b254:	ee17 3a90 	vmov	r3, s15
 800b258:	603b      	str	r3, [r7, #0]
 800b25a:	4b0d      	ldr	r3, [pc, #52]	; (800b290 <DcDc_ControllerMppt+0x14c>)
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	085b      	lsrs	r3, r3, #1
 800b262:	4619      	mov	r1, r3
 800b264:	4610      	mov	r0, r2
 800b266:	f7ff fedc 	bl	800b022 <SetCompareCH2>
 800b26a:	4b09      	ldr	r3, [pc, #36]	; (800b290 <DcDc_ControllerMppt+0x14c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	4618      	mov	r0, r3
 800b272:	f7ff fee5 	bl	800b040 <SetCompareCH4>
	}
}
 800b276:	bf00      	nop
 800b278:	bf00      	nop
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	20001698 	.word	0x20001698
 800b284:	20001750 	.word	0x20001750
 800b288:	20001778 	.word	0x20001778
 800b28c:	200016a0 	.word	0x200016a0
 800b290:	2000169c 	.word	0x2000169c

0800b294 <SetCompareCH2>:
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
	WRITE_REG(advancetimerobjX->advtimer->CCR2, CompareValue);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b2a6:	bf00      	nop
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
	...

0800b2b4 <Start_PWM_Dumpload>:
	s_ptimer_pwm = create_advance_timer(TIMER_ADVANCE_ID_1, FREQUENCY_SAMPLE_WIND_DUMPLOAD);
	PwmWindDumpLoadInit(s_ptimer_pwm);
}

void Start_PWM_Dumpload(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	af00      	add	r7, sp, #0
	PwmWindDumpLoadEnableOutput(s_ptimer_pwm);
 800b2b8:	4b03      	ldr	r3, [pc, #12]	; (800b2c8 <Start_PWM_Dumpload+0x14>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7fe f913 	bl	80094e8 <PwmWindDumpLoadEnableOutput>
}
 800b2c2:	bf00      	nop
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	200016a4 	.word	0x200016a4

0800b2cc <Stop_PWM_Dumpload>:

void Stop_PWM_Dumpload(void)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	af00      	add	r7, sp, #0
	PwmWindDumpLoadDisableOutput(s_ptimer_pwm);
 800b2d0:	4b03      	ldr	r3, [pc, #12]	; (800b2e0 <Stop_PWM_Dumpload+0x14>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fe f915 	bl	8009504 <PwmWindDumpLoadDisableOutput>
}
 800b2da:	bf00      	nop
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	200016a4 	.word	0x200016a4

0800b2e4 <Dumpload_controller>:

void Dumpload_controller(void)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
	if(g_vin > DC_MAX_INPUT)
 800b2ea:	4b1f      	ldr	r3, [pc, #124]	; (800b368 <Dumpload_controller+0x84>)
 800b2ec:	edd3 7a00 	vldr	s15, [r3]
 800b2f0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800b36c <Dumpload_controller+0x88>
 800b2f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2fc:	dd24      	ble.n	800b348 <Dumpload_controller+0x64>
	{
		PwmWindDumpLoadSetDuty(s_ptimer_pwm, (g_vin - MAX_VIN)/g_vin);
 800b2fe:	2300      	movs	r3, #0
 800b300:	603b      	str	r3, [r7, #0]
 800b302:	4b19      	ldr	r3, [pc, #100]	; (800b368 <Dumpload_controller+0x84>)
 800b304:	edd3 7a00 	vldr	s15, [r3]
 800b308:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800b370 <Dumpload_controller+0x8c>
 800b30c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b310:	4b15      	ldr	r3, [pc, #84]	; (800b368 <Dumpload_controller+0x84>)
 800b312:	edd3 7a00 	vldr	s15, [r3]
 800b316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31a:	4b16      	ldr	r3, [pc, #88]	; (800b374 <Dumpload_controller+0x90>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	885b      	ldrh	r3, [r3, #2]
 800b320:	ee07 3a90 	vmov	s15, r3
 800b324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b330:	ee17 3a90 	vmov	r3, s15
 800b334:	603b      	str	r3, [r7, #0]
 800b336:	4b0f      	ldr	r3, [pc, #60]	; (800b374 <Dumpload_controller+0x90>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7ff ffa9 	bl	800b294 <SetCompareCH2>
		Start_PWM_Dumpload();
 800b342:	f7ff ffb7 	bl	800b2b4 <Start_PWM_Dumpload>
	else
	{
		PwmWindDumpLoadSetDuty(s_ptimer_pwm, 0);
		Stop_PWM_Dumpload();
	}
}
 800b346:	e00b      	b.n	800b360 <Dumpload_controller+0x7c>
		PwmWindDumpLoadSetDuty(s_ptimer_pwm, 0);
 800b348:	2300      	movs	r3, #0
 800b34a:	607b      	str	r3, [r7, #4]
 800b34c:	2300      	movs	r3, #0
 800b34e:	607b      	str	r3, [r7, #4]
 800b350:	4b08      	ldr	r3, [pc, #32]	; (800b374 <Dumpload_controller+0x90>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	6879      	ldr	r1, [r7, #4]
 800b356:	4618      	mov	r0, r3
 800b358:	f7ff ff9c 	bl	800b294 <SetCompareCH2>
		Stop_PWM_Dumpload();
 800b35c:	f7ff ffb6 	bl	800b2cc <Stop_PWM_Dumpload>
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	2000088c 	.word	0x2000088c
 800b36c:	43160000 	.word	0x43160000
 800b370:	42400000 	.word	0x42400000
 800b374:	200016a4 	.word	0x200016a4

0800b378 <ErrorCheckInit>:
//		{ID_OIBAT_DCHAR,	CODE_OIBAT_CHAR,		STATE_ALL,				1,							TYPE_UP,				0,										0,									0,							&s_mError[ID_OIBAT_DCHAR],		NULL,			false,			ACTIVE},
//		{ID_UIBAT_DCHAR,	CODE_UIBAT_CHAR,		STATE_ALL,				1,							TYPE_UP,				0,										0,									0,							&s_mError[ID_UIBAT_DCHAR],		NULL,			false,			ACTIVE},

};

void ErrorCheckInit(void){
 800b378:	b480      	push	{r7}
 800b37a:	af00      	add	r7, sp, #0
	for(countList = 0; countList < ID_MAX; countList++){
 800b37c:	4b22      	ldr	r3, [pc, #136]	; (800b408 <ErrorCheckInit+0x90>)
 800b37e:	2200      	movs	r2, #0
 800b380:	601a      	str	r2, [r3, #0]
 800b382:	e025      	b.n	800b3d0 <ErrorCheckInit+0x58>
		listError[countList].time_count 	= 0;
 800b384:	4b20      	ldr	r3, [pc, #128]	; (800b408 <ErrorCheckInit+0x90>)
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	4920      	ldr	r1, [pc, #128]	; (800b40c <ErrorCheckInit+0x94>)
 800b38a:	4613      	mov	r3, r2
 800b38c:	00db      	lsls	r3, r3, #3
 800b38e:	4413      	add	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	440b      	add	r3, r1
 800b394:	3310      	adds	r3, #16
 800b396:	2200      	movs	r2, #0
 800b398:	601a      	str	r2, [r3, #0]
		listError[countList].error_state 	= false;
 800b39a:	4b1b      	ldr	r3, [pc, #108]	; (800b408 <ErrorCheckInit+0x90>)
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	491b      	ldr	r1, [pc, #108]	; (800b40c <ErrorCheckInit+0x94>)
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	00db      	lsls	r3, r3, #3
 800b3a4:	4413      	add	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	440b      	add	r3, r1
 800b3aa:	3320      	adds	r3, #32
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	701a      	strb	r2, [r3, #0]
		listError[countList].active_err		= ACTIVE;
 800b3b0:	4b15      	ldr	r3, [pc, #84]	; (800b408 <ErrorCheckInit+0x90>)
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	4915      	ldr	r1, [pc, #84]	; (800b40c <ErrorCheckInit+0x94>)
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	00db      	lsls	r3, r3, #3
 800b3ba:	4413      	add	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	440b      	add	r3, r1
 800b3c0:	3321      	adds	r3, #33	; 0x21
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	701a      	strb	r2, [r3, #0]
	for(countList = 0; countList < ID_MAX; countList++){
 800b3c6:	4b10      	ldr	r3, [pc, #64]	; (800b408 <ErrorCheckInit+0x90>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	4a0e      	ldr	r2, [pc, #56]	; (800b408 <ErrorCheckInit+0x90>)
 800b3ce:	6013      	str	r3, [r2, #0]
 800b3d0:	4b0d      	ldr	r3, [pc, #52]	; (800b408 <ErrorCheckInit+0x90>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b06      	cmp	r3, #6
 800b3d6:	d9d5      	bls.n	800b384 <ErrorCheckInit+0xc>
	}
	listError[ID_OVDC1].active_err = DEACTIVE;
 800b3d8:	4b0c      	ldr	r3, [pc, #48]	; (800b40c <ErrorCheckInit+0x94>)
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	listError[ID_OVDC2].active_err = DEACTIVE;
 800b3e0:	4b0a      	ldr	r3, [pc, #40]	; (800b40c <ErrorCheckInit+0x94>)
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	listError[ID_OCDC1].active_err = DEACTIVE;
 800b3e8:	4b08      	ldr	r3, [pc, #32]	; (800b40c <ErrorCheckInit+0x94>)
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	listError[ID_OCDC2].active_err = DEACTIVE;
 800b3f0:	4b06      	ldr	r3, [pc, #24]	; (800b40c <ErrorCheckInit+0x94>)
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
	countList = 0;
 800b3f8:	4b03      	ldr	r3, [pc, #12]	; (800b408 <ErrorCheckInit+0x90>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	601a      	str	r2, [r3, #0]
}
 800b3fe:	bf00      	nop
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	200016a8 	.word	0x200016a8
 800b40c:	2000031c 	.word	0x2000031c

0800b410 <ErrorCheck_Running>:

void ErrorCheck_Running(void){
 800b410:	b580      	push	{r7, lr}
 800b412:	af00      	add	r7, sp, #0
	UpdateCalc();
 800b414:	f000 f96a 	bl	800b6ec <UpdateCalc>
	for(countList = 1; countList < ID_MAX; countList++){
 800b418:	4ba7      	ldr	r3, [pc, #668]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b41a:	2201      	movs	r2, #1
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	e15b      	b.n	800b6d8 <ErrorCheck_Running+0x2c8>
		if(listError[countList].state_valid == STATE_MAX){
 800b420:	4ba5      	ldr	r3, [pc, #660]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	49a5      	ldr	r1, [pc, #660]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b426:	4613      	mov	r3, r2
 800b428:	00db      	lsls	r3, r3, #3
 800b42a:	4413      	add	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	440b      	add	r3, r1
 800b430:	3302      	adds	r3, #2
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b05      	cmp	r3, #5
 800b436:	d117      	bne.n	800b468 <ErrorCheck_Running+0x58>
			if(listError[countList].func_check != NULL){
 800b438:	4b9f      	ldr	r3, [pc, #636]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	499f      	ldr	r1, [pc, #636]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b43e:	4613      	mov	r3, r2
 800b440:	00db      	lsls	r3, r3, #3
 800b442:	4413      	add	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	440b      	add	r3, r1
 800b448:	331c      	adds	r3, #28
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d032      	beq.n	800b4b6 <ErrorCheck_Running+0xa6>
				listError[countList].func_check();
 800b450:	4b99      	ldr	r3, [pc, #612]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	4999      	ldr	r1, [pc, #612]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b456:	4613      	mov	r3, r2
 800b458:	00db      	lsls	r3, r3, #3
 800b45a:	4413      	add	r3, r2
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	440b      	add	r3, r1
 800b460:	331c      	adds	r3, #28
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4798      	blx	r3
				}
				else
					goto run_all;
			}
		}
		continue;
 800b466:	e125      	b.n	800b6b4 <ErrorCheck_Running+0x2a4>
			if(listError[countList].state_valid == g_current_state){
 800b468:	4b93      	ldr	r3, [pc, #588]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	4993      	ldr	r1, [pc, #588]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b46e:	4613      	mov	r3, r2
 800b470:	00db      	lsls	r3, r3, #3
 800b472:	4413      	add	r3, r2
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	440b      	add	r3, r1
 800b478:	3302      	adds	r3, #2
 800b47a:	781a      	ldrb	r2, [r3, #0]
 800b47c:	4b90      	ldr	r3, [pc, #576]	; (800b6c0 <ErrorCheck_Running+0x2b0>)
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	429a      	cmp	r2, r3
 800b482:	f040 8117 	bne.w	800b6b4 <ErrorCheck_Running+0x2a4>
				if(listError[countList].func_check != NULL){
 800b486:	4b8c      	ldr	r3, [pc, #560]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	498c      	ldr	r1, [pc, #560]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b48c:	4613      	mov	r3, r2
 800b48e:	00db      	lsls	r3, r3, #3
 800b490:	4413      	add	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	440b      	add	r3, r1
 800b496:	331c      	adds	r3, #28
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00d      	beq.n	800b4ba <ErrorCheck_Running+0xaa>
					listError[countList].func_check();
 800b49e:	4b86      	ldr	r3, [pc, #536]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	4986      	ldr	r1, [pc, #536]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	00db      	lsls	r3, r3, #3
 800b4a8:	4413      	add	r3, r2
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	440b      	add	r3, r1
 800b4ae:	331c      	adds	r3, #28
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4798      	blx	r3
		continue;
 800b4b4:	e0fe      	b.n	800b6b4 <ErrorCheck_Running+0x2a4>
				goto run_all;
 800b4b6:	bf00      	nop
 800b4b8:	e000      	b.n	800b4bc <ErrorCheck_Running+0xac>
					goto run_all;
 800b4ba:	bf00      	nop
		run_all:
		switch(listError[countList].type_check){
 800b4bc:	4b7e      	ldr	r3, [pc, #504]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	497e      	ldr	r1, [pc, #504]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	00db      	lsls	r3, r3, #3
 800b4c6:	4413      	add	r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	440b      	add	r3, r1
 800b4cc:	3308      	adds	r3, #8
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 808f 	beq.w	800b5f4 <ErrorCheck_Running+0x1e4>
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	f040 80f8 	bne.w	800b6cc <ErrorCheck_Running+0x2bc>
			case TYPE_DOWN:
				if(fabs(*listError[countList].value_addr) <= listError[countList].value_limit){
 800b4dc:	4b76      	ldr	r3, [pc, #472]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	4976      	ldr	r1, [pc, #472]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	00db      	lsls	r3, r3, #3
 800b4e6:	4413      	add	r3, r2
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	440b      	add	r3, r1
 800b4ec:	3318      	adds	r3, #24
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	edd3 7a00 	vldr	s15, [r3]
 800b4f4:	eeb0 7ae7 	vabs.f32	s14, s15
 800b4f8:	4b6f      	ldr	r3, [pc, #444]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	496f      	ldr	r1, [pc, #444]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b4fe:	4613      	mov	r3, r2
 800b500:	00db      	lsls	r3, r3, #3
 800b502:	4413      	add	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	440b      	add	r3, r1
 800b508:	3304      	adds	r3, #4
 800b50a:	edd3 7a00 	vldr	s15, [r3]
 800b50e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b516:	d84b      	bhi.n	800b5b0 <ErrorCheck_Running+0x1a0>
					if(listError[countList].time_count < listError[countList].time_limit)
 800b518:	4b67      	ldr	r3, [pc, #412]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	4967      	ldr	r1, [pc, #412]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b51e:	4613      	mov	r3, r2
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	4413      	add	r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	440b      	add	r3, r1
 800b528:	3310      	adds	r3, #16
 800b52a:	6819      	ldr	r1, [r3, #0]
 800b52c:	4b62      	ldr	r3, [pc, #392]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	4862      	ldr	r0, [pc, #392]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b532:	4613      	mov	r3, r2
 800b534:	00db      	lsls	r3, r3, #3
 800b536:	4413      	add	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4403      	add	r3, r0
 800b53c:	330c      	adds	r3, #12
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4299      	cmp	r1, r3
 800b542:	d213      	bcs.n	800b56c <ErrorCheck_Running+0x15c>
					 {
							 listError[countList].time_count++;
 800b544:	4b5c      	ldr	r3, [pc, #368]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	495c      	ldr	r1, [pc, #368]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b54a:	4613      	mov	r3, r2
 800b54c:	00db      	lsls	r3, r3, #3
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	440b      	add	r3, r1
 800b554:	3310      	adds	r3, #16
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	1c59      	adds	r1, r3, #1
 800b55a:	4858      	ldr	r0, [pc, #352]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b55c:	4613      	mov	r3, r2
 800b55e:	00db      	lsls	r3, r3, #3
 800b560:	4413      	add	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4403      	add	r3, r0
 800b566:	3310      	adds	r3, #16
 800b568:	6019      	str	r1, [r3, #0]
							 if(countList == ID_UVDC1) g_state_vin 	= true;
							 if(countList == ID_UVDC2) g_state_vout = true;
					 }
					 listError[countList].time_count = 0;
				}
				break;
 800b56a:	e0b0      	b.n	800b6ce <ErrorCheck_Running+0x2be>
							 if(countList == ID_UVDC1 || countList == ID_UVDC2)
 800b56c:	4b52      	ldr	r3, [pc, #328]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b03      	cmp	r3, #3
 800b572:	d003      	beq.n	800b57c <ErrorCheck_Running+0x16c>
 800b574:	4b50      	ldr	r3, [pc, #320]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b04      	cmp	r3, #4
 800b57a:	d10d      	bne.n	800b598 <ErrorCheck_Running+0x188>
									 if(countList == ID_UVDC1) g_state_vin 	= false;
 800b57c:	4b4e      	ldr	r3, [pc, #312]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b03      	cmp	r3, #3
 800b582:	d102      	bne.n	800b58a <ErrorCheck_Running+0x17a>
 800b584:	4b4f      	ldr	r3, [pc, #316]	; (800b6c4 <ErrorCheck_Running+0x2b4>)
 800b586:	2200      	movs	r2, #0
 800b588:	701a      	strb	r2, [r3, #0]
									 if(countList == ID_UVDC2) g_state_vout = false;
 800b58a:	4b4b      	ldr	r3, [pc, #300]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b04      	cmp	r3, #4
 800b590:	d102      	bne.n	800b598 <ErrorCheck_Running+0x188>
 800b592:	4b4d      	ldr	r3, [pc, #308]	; (800b6c8 <ErrorCheck_Running+0x2b8>)
 800b594:	2200      	movs	r2, #0
 800b596:	701a      	strb	r2, [r3, #0]
							 listError[countList].error_state = true;
 800b598:	4b47      	ldr	r3, [pc, #284]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	4947      	ldr	r1, [pc, #284]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b59e:	4613      	mov	r3, r2
 800b5a0:	00db      	lsls	r3, r3, #3
 800b5a2:	4413      	add	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	440b      	add	r3, r1
 800b5a8:	3320      	adds	r3, #32
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	701a      	strb	r2, [r3, #0]
				break;
 800b5ae:	e08e      	b.n	800b6ce <ErrorCheck_Running+0x2be>
					 if(countList == ID_UVDC1 || countList == ID_UVDC2)
 800b5b0:	4b41      	ldr	r3, [pc, #260]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b03      	cmp	r3, #3
 800b5b6:	d003      	beq.n	800b5c0 <ErrorCheck_Running+0x1b0>
 800b5b8:	4b3f      	ldr	r3, [pc, #252]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b04      	cmp	r3, #4
 800b5be:	d10d      	bne.n	800b5dc <ErrorCheck_Running+0x1cc>
							 if(countList == ID_UVDC1) g_state_vin 	= true;
 800b5c0:	4b3d      	ldr	r3, [pc, #244]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b03      	cmp	r3, #3
 800b5c6:	d102      	bne.n	800b5ce <ErrorCheck_Running+0x1be>
 800b5c8:	4b3e      	ldr	r3, [pc, #248]	; (800b6c4 <ErrorCheck_Running+0x2b4>)
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	701a      	strb	r2, [r3, #0]
							 if(countList == ID_UVDC2) g_state_vout = true;
 800b5ce:	4b3a      	ldr	r3, [pc, #232]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b04      	cmp	r3, #4
 800b5d4:	d102      	bne.n	800b5dc <ErrorCheck_Running+0x1cc>
 800b5d6:	4b3c      	ldr	r3, [pc, #240]	; (800b6c8 <ErrorCheck_Running+0x2b8>)
 800b5d8:	2201      	movs	r2, #1
 800b5da:	701a      	strb	r2, [r3, #0]
					 listError[countList].time_count = 0;
 800b5dc:	4b36      	ldr	r3, [pc, #216]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	4936      	ldr	r1, [pc, #216]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	00db      	lsls	r3, r3, #3
 800b5e6:	4413      	add	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	440b      	add	r3, r1
 800b5ec:	3310      	adds	r3, #16
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	601a      	str	r2, [r3, #0]
				break;
 800b5f2:	e06c      	b.n	800b6ce <ErrorCheck_Running+0x2be>

			case TYPE_UP:
				if(fabs(*listError[countList].value_addr) >= listError[countList].value_limit)
 800b5f4:	4b30      	ldr	r3, [pc, #192]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	4930      	ldr	r1, [pc, #192]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	4413      	add	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	440b      	add	r3, r1
 800b604:	3318      	adds	r3, #24
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	edd3 7a00 	vldr	s15, [r3]
 800b60c:	eeb0 7ae7 	vabs.f32	s14, s15
 800b610:	4b29      	ldr	r3, [pc, #164]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	4929      	ldr	r1, [pc, #164]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b616:	4613      	mov	r3, r2
 800b618:	00db      	lsls	r3, r3, #3
 800b61a:	4413      	add	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	440b      	add	r3, r1
 800b620:	3304      	adds	r3, #4
 800b622:	edd3 7a00 	vldr	s15, [r3]
 800b626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b62e:	db35      	blt.n	800b69c <ErrorCheck_Running+0x28c>
				 {
						 if(listError[countList].time_count < listError[countList].time_limit)
 800b630:	4b21      	ldr	r3, [pc, #132]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	4921      	ldr	r1, [pc, #132]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b636:	4613      	mov	r3, r2
 800b638:	00db      	lsls	r3, r3, #3
 800b63a:	4413      	add	r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	440b      	add	r3, r1
 800b640:	3310      	adds	r3, #16
 800b642:	6819      	ldr	r1, [r3, #0]
 800b644:	4b1c      	ldr	r3, [pc, #112]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	481c      	ldr	r0, [pc, #112]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b64a:	4613      	mov	r3, r2
 800b64c:	00db      	lsls	r3, r3, #3
 800b64e:	4413      	add	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4403      	add	r3, r0
 800b654:	330c      	adds	r3, #12
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4299      	cmp	r1, r3
 800b65a:	d213      	bcs.n	800b684 <ErrorCheck_Running+0x274>
						 {
								 listError[countList].time_count++;
 800b65c:	4b16      	ldr	r3, [pc, #88]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	4916      	ldr	r1, [pc, #88]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b662:	4613      	mov	r3, r2
 800b664:	00db      	lsls	r3, r3, #3
 800b666:	4413      	add	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	440b      	add	r3, r1
 800b66c:	3310      	adds	r3, #16
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	1c59      	adds	r1, r3, #1
 800b672:	4812      	ldr	r0, [pc, #72]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b674:	4613      	mov	r3, r2
 800b676:	00db      	lsls	r3, r3, #3
 800b678:	4413      	add	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	4403      	add	r3, r0
 800b67e:	3310      	adds	r3, #16
 800b680:	6019      	str	r1, [r3, #0]
				 }
				 else
				 {
						 listError[countList].time_count = 0;
				 }
				 break;
 800b682:	e024      	b.n	800b6ce <ErrorCheck_Running+0x2be>
								 listError[countList].error_state = true;
 800b684:	4b0c      	ldr	r3, [pc, #48]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	490c      	ldr	r1, [pc, #48]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b68a:	4613      	mov	r3, r2
 800b68c:	00db      	lsls	r3, r3, #3
 800b68e:	4413      	add	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	440b      	add	r3, r1
 800b694:	3320      	adds	r3, #32
 800b696:	2201      	movs	r2, #1
 800b698:	701a      	strb	r2, [r3, #0]
				 break;
 800b69a:	e018      	b.n	800b6ce <ErrorCheck_Running+0x2be>
						 listError[countList].time_count = 0;
 800b69c:	4b06      	ldr	r3, [pc, #24]	; (800b6b8 <ErrorCheck_Running+0x2a8>)
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	4906      	ldr	r1, [pc, #24]	; (800b6bc <ErrorCheck_Running+0x2ac>)
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	00db      	lsls	r3, r3, #3
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	440b      	add	r3, r1
 800b6ac:	3310      	adds	r3, #16
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	601a      	str	r2, [r3, #0]
				 break;
 800b6b2:	e00c      	b.n	800b6ce <ErrorCheck_Running+0x2be>
		continue;
 800b6b4:	bf00      	nop
 800b6b6:	e00a      	b.n	800b6ce <ErrorCheck_Running+0x2be>
 800b6b8:	200016a8 	.word	0x200016a8
 800b6bc:	2000031c 	.word	0x2000031c
 800b6c0:	20001738 	.word	0x20001738
 800b6c4:	2000173b 	.word	0x2000173b
 800b6c8:	2000173c 	.word	0x2000173c

		 default:
				 break;
 800b6cc:	bf00      	nop
	for(countList = 1; countList < ID_MAX; countList++){
 800b6ce:	4b06      	ldr	r3, [pc, #24]	; (800b6e8 <ErrorCheck_Running+0x2d8>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	4a04      	ldr	r2, [pc, #16]	; (800b6e8 <ErrorCheck_Running+0x2d8>)
 800b6d6:	6013      	str	r3, [r2, #0]
 800b6d8:	4b03      	ldr	r3, [pc, #12]	; (800b6e8 <ErrorCheck_Running+0x2d8>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b06      	cmp	r3, #6
 800b6de:	f67f ae9f 	bls.w	800b420 <ErrorCheck_Running+0x10>
		}
	}
}
 800b6e2:	bf00      	nop
 800b6e4:	bf00      	nop
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	200016a8 	.word	0x200016a8

0800b6ec <UpdateCalc>:

static void UpdateCalc(void){
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0
	s_mError[ID_OCDC1]	= g_iload;
 800b6f0:	4b0a      	ldr	r3, [pc, #40]	; (800b71c <UpdateCalc+0x30>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a0a      	ldr	r2, [pc, #40]	; (800b720 <UpdateCalc+0x34>)
 800b6f6:	6153      	str	r3, [r2, #20]
	s_mError[ID_OCDC2]	= g_idumpload;
 800b6f8:	4b0a      	ldr	r3, [pc, #40]	; (800b724 <UpdateCalc+0x38>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a08      	ldr	r2, [pc, #32]	; (800b720 <UpdateCalc+0x34>)
 800b6fe:	6193      	str	r3, [r2, #24]
	s_mError[ID_OVDC1]	= g_vin;
 800b700:	4b09      	ldr	r3, [pc, #36]	; (800b728 <UpdateCalc+0x3c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a06      	ldr	r2, [pc, #24]	; (800b720 <UpdateCalc+0x34>)
 800b706:	6053      	str	r3, [r2, #4]
//	s_mError[ID_UVDC1]	= g_vin;
	s_mError[ID_OVDC2]	= g_vout;
 800b708:	4b08      	ldr	r3, [pc, #32]	; (800b72c <UpdateCalc+0x40>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a04      	ldr	r2, [pc, #16]	; (800b720 <UpdateCalc+0x34>)
 800b70e:	6093      	str	r3, [r2, #8]
//	s_mError[ID_UVDC2]	= g_vout;

}
 800b710:	bf00      	nop
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	20000894 	.word	0x20000894
 800b720:	200016ac 	.word	0x200016ac
 800b724:	20000898 	.word	0x20000898
 800b728:	2000088c 	.word	0x2000088c
 800b72c:	20000890 	.word	0x20000890

0800b730 <getFaultInfo>:

ERROR_CODE getFaultInfo(){
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < ID_MAX; i++){
 800b736:	2300      	movs	r3, #0
 800b738:	607b      	str	r3, [r7, #4]
 800b73a:	e02d      	b.n	800b798 <getFaultInfo+0x68>
		if(listError[i].error_state == true && listError[i].active_err == ACTIVE){
 800b73c:	491b      	ldr	r1, [pc, #108]	; (800b7ac <getFaultInfo+0x7c>)
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	4613      	mov	r3, r2
 800b742:	00db      	lsls	r3, r3, #3
 800b744:	4413      	add	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	440b      	add	r3, r1
 800b74a:	3320      	adds	r3, #32
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d01f      	beq.n	800b792 <getFaultInfo+0x62>
 800b752:	4916      	ldr	r1, [pc, #88]	; (800b7ac <getFaultInfo+0x7c>)
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	4613      	mov	r3, r2
 800b758:	00db      	lsls	r3, r3, #3
 800b75a:	4413      	add	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	440b      	add	r3, r1
 800b760:	3321      	adds	r3, #33	; 0x21
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d114      	bne.n	800b792 <getFaultInfo+0x62>
			if(listError[i].code_err != CODE_OK){
 800b768:	4910      	ldr	r1, [pc, #64]	; (800b7ac <getFaultInfo+0x7c>)
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	4613      	mov	r3, r2
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	4413      	add	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	440b      	add	r3, r1
 800b776:	3301      	adds	r3, #1
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d009      	beq.n	800b792 <getFaultInfo+0x62>
				return listError[i].code_err;
 800b77e:	490b      	ldr	r1, [pc, #44]	; (800b7ac <getFaultInfo+0x7c>)
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	4613      	mov	r3, r2
 800b784:	00db      	lsls	r3, r3, #3
 800b786:	4413      	add	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	440b      	add	r3, r1
 800b78c:	3301      	adds	r3, #1
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	e006      	b.n	800b7a0 <getFaultInfo+0x70>
	for(i = 0; i < ID_MAX; i++){
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	3301      	adds	r3, #1
 800b796:	607b      	str	r3, [r7, #4]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2b06      	cmp	r3, #6
 800b79c:	ddce      	ble.n	800b73c <getFaultInfo+0xc>
			}
		}
	}
	return CODE_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	2000031c 	.word	0x2000031c

0800b7b0 <serial_init>:

extern serial_obj *serial_test_1;
volatile ManagerVariable g_guiValue;
MPPT_PNO mppt_pno;

void serial_init(){
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	af00      	add	r7, sp, #0
	serial_test_1 = create_serial(1, 9600, 512, 512);
 800b7b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7bc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800b7c0:	2001      	movs	r0, #1
 800b7c2:	f7ff fa1d 	bl	800ac00 <create_serial>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	4a01      	ldr	r2, [pc, #4]	; (800b7d0 <serial_init+0x20>)
 800b7ca:	6013      	str	r3, [r2, #0]
}
 800b7cc:	bf00      	nop
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	20001678 	.word	0x20001678

0800b7d4 <initGlobalVariables>:

void initGlobalVariables(void){
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	af00      	add	r7, sp, #0
	memset((void*)&g_guiValue, 0, sizeof(g_guiValue));
 800b7d8:	2220      	movs	r2, #32
 800b7da:	2100      	movs	r1, #0
 800b7dc:	4805      	ldr	r0, [pc, #20]	; (800b7f4 <initGlobalVariables+0x20>)
 800b7de:	f000 fd69 	bl	800c2b4 <memset>
	ModbusAddVariable(debug_modbus, MONITOR_VAR_ADDR, (void*)&g_guiValue, sizeof(g_guiValue));
 800b7e2:	4b05      	ldr	r3, [pc, #20]	; (800b7f8 <initGlobalVariables+0x24>)
 800b7e4:	6818      	ldr	r0, [r3, #0]
 800b7e6:	2320      	movs	r3, #32
 800b7e8:	4a02      	ldr	r2, [pc, #8]	; (800b7f4 <initGlobalVariables+0x20>)
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	f7fd fcb6 	bl	800915c <ModbusAddVariable>
}
 800b7f0:	bf00      	nop
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	200016c8 	.word	0x200016c8
 800b7f8:	20001674 	.word	0x20001674

0800b7fc <UpdateAllVariable>:

void UpdateAllVariable(void){
 800b7fc:	b480      	push	{r7}
 800b7fe:	af00      	add	r7, sp, #0
	g_guiValue.guiVin 	= g_signal_value[VIN].val_control 	* g_signal_value[VIN].gain;
 800b800:	4b28      	ldr	r3, [pc, #160]	; (800b8a4 <UpdateAllVariable+0xa8>)
 800b802:	ed93 7a01 	vldr	s14, [r3, #4]
 800b806:	4b27      	ldr	r3, [pc, #156]	; (800b8a4 <UpdateAllVariable+0xa8>)
 800b808:	edd3 7a04 	vldr	s15, [r3, #16]
 800b80c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b810:	4b25      	ldr	r3, [pc, #148]	; (800b8a8 <UpdateAllVariable+0xac>)
 800b812:	edc3 7a00 	vstr	s15, [r3]
	g_guiValue.guiVout	= g_signal_value[VOUT].val_control 	* g_signal_value[VOUT].gain;
 800b816:	4b23      	ldr	r3, [pc, #140]	; (800b8a4 <UpdateAllVariable+0xa8>)
 800b818:	ed93 7a06 	vldr	s14, [r3, #24]
 800b81c:	4b21      	ldr	r3, [pc, #132]	; (800b8a4 <UpdateAllVariable+0xa8>)
 800b81e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b822:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b826:	4b20      	ldr	r3, [pc, #128]	; (800b8a8 <UpdateAllVariable+0xac>)
 800b828:	edc3 7a01 	vstr	s15, [r3, #4]
	g_guiValue.guiIload	= g_signal_value[ILOAD].val_control * g_signal_value[ILOAD].gain;
 800b82c:	4b1d      	ldr	r3, [pc, #116]	; (800b8a4 <UpdateAllVariable+0xa8>)
 800b82e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b832:	4b1c      	ldr	r3, [pc, #112]	; (800b8a4 <UpdateAllVariable+0xa8>)
 800b834:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b83c:	4b1a      	ldr	r3, [pc, #104]	; (800b8a8 <UpdateAllVariable+0xac>)
 800b83e:	edc3 7a02 	vstr	s15, [r3, #8]
	g_guiValue.guiIdump	= g_signal_value[IDUMP].val_control * g_signal_value[IDUMP].gain;
 800b842:	4b18      	ldr	r3, [pc, #96]	; (800b8a4 <UpdateAllVariable+0xa8>)
 800b844:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800b848:	4b16      	ldr	r3, [pc, #88]	; (800b8a4 <UpdateAllVariable+0xa8>)
 800b84a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800b84e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b852:	4b15      	ldr	r3, [pc, #84]	; (800b8a8 <UpdateAllVariable+0xac>)
 800b854:	edc3 7a03 	vstr	s15, [r3, #12]
	g_guiValue.guiPwind = g_guiValue.guiVin * g_guiValue.guiIload;
 800b858:	4b13      	ldr	r3, [pc, #76]	; (800b8a8 <UpdateAllVariable+0xac>)
 800b85a:	ed93 7a00 	vldr	s14, [r3]
 800b85e:	4b12      	ldr	r3, [pc, #72]	; (800b8a8 <UpdateAllVariable+0xac>)
 800b860:	edd3 7a02 	vldr	s15, [r3, #8]
 800b864:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b868:	4b0f      	ldr	r3, [pc, #60]	; (800b8a8 <UpdateAllVariable+0xac>)
 800b86a:	edc3 7a04 	vstr	s15, [r3, #16]
	g_guiValue.guiDref 	= mppt_pno.D_ref;
 800b86e:	4b0f      	ldr	r3, [pc, #60]	; (800b8ac <UpdateAllVariable+0xb0>)
 800b870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b872:	4a0d      	ldr	r2, [pc, #52]	; (800b8a8 <UpdateAllVariable+0xac>)
 800b874:	6153      	str	r3, [r2, #20]
	g_guiValue.guiErrCode = faultInfo;
 800b876:	4b0e      	ldr	r3, [pc, #56]	; (800b8b0 <UpdateAllVariable+0xb4>)
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	ee07 3a90 	vmov	s15, r3
 800b87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b882:	4b09      	ldr	r3, [pc, #36]	; (800b8a8 <UpdateAllVariable+0xac>)
 800b884:	edc3 7a06 	vstr	s15, [r3, #24]
	g_guiValue.guiStatus = g_current_state;
 800b888:	4b0a      	ldr	r3, [pc, #40]	; (800b8b4 <UpdateAllVariable+0xb8>)
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	ee07 3a90 	vmov	s15, r3
 800b890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b894:	4b04      	ldr	r3, [pc, #16]	; (800b8a8 <UpdateAllVariable+0xac>)
 800b896:	edc3 7a07 	vstr	s15, [r3, #28]
//	g_guiValue.guiIdump = 22;
//	g_guiValue.guiPwind = 2;
//	g_guiValue.guiDref 	= 1;
//	g_guiValue.guiErrCode = 6;
//	g_guiValue.guiStatus = 7;
}
 800b89a:	bf00      	nop
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	20000030 	.word	0x20000030
 800b8a8:	200016c8 	.word	0x200016c8
 800b8ac:	200016e8 	.word	0x200016e8
 800b8b0:	2000173a 	.word	0x2000173a
 800b8b4:	20001738 	.word	0x20001738

0800b8b8 <TEST>:
	1,
	3
};


void TEST(void){
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0
	if(EC200_MQTT_ConnectToServer()){
 800b8bc:	f7fe fc50 	bl	800a160 <EC200_MQTT_ConnectToServer>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d006      	beq.n	800b8d4 <TEST+0x1c>
		MQTT_Transmit_Data(&BAT_DAT, BATTERY_DATA);
 800b8c6:	2101      	movs	r1, #1
 800b8c8:	4805      	ldr	r0, [pc, #20]	; (800b8e0 <TEST+0x28>)
 800b8ca:	f7fe fd57 	bl	800a37c <MQTT_Transmit_Data>
		Pin_Func_TurnOff(LED1);
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	f7fd fedc 	bl	800968c <Pin_Func_TurnOff>
	}
	HAL_Delay(500);
 800b8d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b8d8:	f7f6 fb34 	bl	8001f44 <HAL_Delay>
}
 800b8dc:	bf00      	nop
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	20000418 	.word	0x20000418

0800b8e4 <StateInit>:
        {STATE_CLOSE_LOOP,                      STATE_CLOSE_LOOP,                       STATE_RESET,                        100,               &CloseLoop,                 true,                   CODE_OK},
        {STATE_RESET,                           STATE_WIND_OFF,                         STATE_ERR,                          100,               &StateReset,                true,                   CODE_ERR},
        {STATE_ERR,                             STATE_ERR,                              STATE_ERR,                          100,               &ErrorFunction,             false,                  CODE_ERR}};

void StateInit(void)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	af00      	add	r7, sp, #0
    g_current_state = STATE_WIND_OFF;
 800b8e8:	4b03      	ldr	r3, [pc, #12]	; (800b8f8 <StateInit+0x14>)
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	701a      	strb	r2, [r3, #0]
    Timer1kHzAddCallback(&StateMachineRunning);
 800b8ee:	4803      	ldr	r0, [pc, #12]	; (800b8fc <StateInit+0x18>)
 800b8f0:	f7ff fa36 	bl	800ad60 <Timer1kHzAddCallback>
//		Timer1kHzAddCallBack(&Run_Mode_Dumpload);
}
 800b8f4:	bf00      	nop
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	20001738 	.word	0x20001738
 800b8fc:	0800b901 	.word	0x0800b901

0800b900 <StateMachineRunning>:

static void StateMachineRunning()
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
    static uint32_t tick = 0, loop_check_err = 0;
    static ERROR_CODE protect_ret;
    static FUNCTION_RETURN ret;
    int i;
    tick++;
 800b906:	4b74      	ldr	r3, [pc, #464]	; (800bad8 <StateMachineRunning+0x1d8>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	3301      	adds	r3, #1
 800b90c:	4a72      	ldr	r2, [pc, #456]	; (800bad8 <StateMachineRunning+0x1d8>)
 800b90e:	6013      	str	r3, [r2, #0]
    loop_check_err++;
 800b910:	4b72      	ldr	r3, [pc, #456]	; (800badc <StateMachineRunning+0x1dc>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	3301      	adds	r3, #1
 800b916:	4a71      	ldr	r2, [pc, #452]	; (800badc <StateMachineRunning+0x1dc>)
 800b918:	6013      	str	r3, [r2, #0]
    if (loop_check_err >= ERR_LOOP_DIV)
 800b91a:	4b70      	ldr	r3, [pc, #448]	; (800badc <StateMachineRunning+0x1dc>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b04      	cmp	r3, #4
 800b920:	d92b      	bls.n	800b97a <StateMachineRunning+0x7a>
    {
        loop_check_err = 0;
 800b922:	4b6e      	ldr	r3, [pc, #440]	; (800badc <StateMachineRunning+0x1dc>)
 800b924:	2200      	movs	r2, #0
 800b926:	601a      	str	r2, [r3, #0]
        if (g_current_state != STATE_WIND_OFF && g_current_state != STATE_RESET)
 800b928:	4b6d      	ldr	r3, [pc, #436]	; (800bae0 <StateMachineRunning+0x1e0>)
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d024      	beq.n	800b97a <StateMachineRunning+0x7a>
 800b930:	4b6b      	ldr	r3, [pc, #428]	; (800bae0 <StateMachineRunning+0x1e0>)
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	2b03      	cmp	r3, #3
 800b936:	d020      	beq.n	800b97a <StateMachineRunning+0x7a>
        {
            ErrorCheck_Running();
 800b938:	f7ff fd6a 	bl	800b410 <ErrorCheck_Running>
            protect_ret = getFaultInfo();
 800b93c:	f7ff fef8 	bl	800b730 <getFaultInfo>
 800b940:	4603      	mov	r3, r0
 800b942:	461a      	mov	r2, r3
 800b944:	4b67      	ldr	r3, [pc, #412]	; (800bae4 <StateMachineRunning+0x1e4>)
 800b946:	701a      	strb	r2, [r3, #0]
            if (protect_ret != CODE_OK && faultInfo == CODE_OK)
 800b948:	4b66      	ldr	r3, [pc, #408]	; (800bae4 <StateMachineRunning+0x1e4>)
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d014      	beq.n	800b97a <StateMachineRunning+0x7a>
 800b950:	4b65      	ldr	r3, [pc, #404]	; (800bae8 <StateMachineRunning+0x1e8>)
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d110      	bne.n	800b97a <StateMachineRunning+0x7a>
            {
                faultInfo = protect_ret;
 800b958:	4b62      	ldr	r3, [pc, #392]	; (800bae4 <StateMachineRunning+0x1e4>)
 800b95a:	781a      	ldrb	r2, [r3, #0]
 800b95c:	4b62      	ldr	r3, [pc, #392]	; (800bae8 <StateMachineRunning+0x1e8>)
 800b95e:	701a      	strb	r2, [r3, #0]
                g_current_state = STATE_RESET;
 800b960:	4b5f      	ldr	r3, [pc, #380]	; (800bae0 <StateMachineRunning+0x1e0>)
 800b962:	2203      	movs	r2, #3
 800b964:	701a      	strb	r2, [r3, #0]
                tick = 0;
 800b966:	4b5c      	ldr	r3, [pc, #368]	; (800bad8 <StateMachineRunning+0x1d8>)
 800b968:	2200      	movs	r2, #0
 800b96a:	601a      	str	r2, [r3, #0]
                prv_state = g_current_state;
 800b96c:	4b5c      	ldr	r3, [pc, #368]	; (800bae0 <StateMachineRunning+0x1e0>)
 800b96e:	781a      	ldrb	r2, [r3, #0]
 800b970:	4b5e      	ldr	r3, [pc, #376]	; (800baec <StateMachineRunning+0x1ec>)
 800b972:	701a      	strb	r2, [r3, #0]
                IsStartState = true;
 800b974:	4b5e      	ldr	r3, [pc, #376]	; (800baf0 <StateMachineRunning+0x1f0>)
 800b976:	2201      	movs	r2, #1
 800b978:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    for (i = 0; i < STATE_MAX; i++)
 800b97a:	2300      	movs	r3, #0
 800b97c:	607b      	str	r3, [r7, #4]
 800b97e:	e090      	b.n	800baa2 <StateMachineRunning+0x1a2>
    {
        if (g_current_state == state_list[i].id)
 800b980:	4a5c      	ldr	r2, [pc, #368]	; (800baf4 <StateMachineRunning+0x1f4>)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	011b      	lsls	r3, r3, #4
 800b986:	4413      	add	r3, r2
 800b988:	781a      	ldrb	r2, [r3, #0]
 800b98a:	4b55      	ldr	r3, [pc, #340]	; (800bae0 <StateMachineRunning+0x1e0>)
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	429a      	cmp	r2, r3
 800b990:	f040 8084 	bne.w	800ba9c <StateMachineRunning+0x19c>
        {
            if (tick < state_list[i].time_running)
 800b994:	4a57      	ldr	r2, [pc, #348]	; (800baf4 <StateMachineRunning+0x1f4>)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	011b      	lsls	r3, r3, #4
 800b99a:	4413      	add	r3, r2
 800b99c:	3304      	adds	r3, #4
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	4b4d      	ldr	r3, [pc, #308]	; (800bad8 <StateMachineRunning+0x1d8>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d94d      	bls.n	800ba44 <StateMachineRunning+0x144>
            {
                if (state_list[i].fn != NULL)
 800b9a8:	4a52      	ldr	r2, [pc, #328]	; (800baf4 <StateMachineRunning+0x1f4>)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	011b      	lsls	r3, r3, #4
 800b9ae:	4413      	add	r3, r2
 800b9b0:	3308      	adds	r3, #8
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d079      	beq.n	800baac <StateMachineRunning+0x1ac>
                {
                    ret = state_list[i].fn();
 800b9b8:	4a4e      	ldr	r2, [pc, #312]	; (800baf4 <StateMachineRunning+0x1f4>)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	011b      	lsls	r3, r3, #4
 800b9be:	4413      	add	r3, r2
 800b9c0:	3308      	adds	r3, #8
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4798      	blx	r3
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	4b4b      	ldr	r3, [pc, #300]	; (800baf8 <StateMachineRunning+0x1f8>)
 800b9cc:	701a      	strb	r2, [r3, #0]
                    IsStartState = false;
 800b9ce:	4b48      	ldr	r3, [pc, #288]	; (800baf0 <StateMachineRunning+0x1f0>)
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	701a      	strb	r2, [r3, #0]
                    if (state_list[i].is_always_true == true)
 800b9d4:	4a47      	ldr	r2, [pc, #284]	; (800baf4 <StateMachineRunning+0x1f4>)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	011b      	lsls	r3, r3, #4
 800b9da:	4413      	add	r3, r2
 800b9dc:	330c      	adds	r3, #12
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d01f      	beq.n	800ba24 <StateMachineRunning+0x124>
                    {
                        if (ret == FUNCTION_FAIL)
 800b9e4:	4b44      	ldr	r3, [pc, #272]	; (800baf8 <StateMachineRunning+0x1f8>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d15f      	bne.n	800baac <StateMachineRunning+0x1ac>
                        {
                            g_current_state = state_list[i].back;
 800b9ec:	4a41      	ldr	r2, [pc, #260]	; (800baf4 <StateMachineRunning+0x1f4>)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	011b      	lsls	r3, r3, #4
 800b9f2:	4413      	add	r3, r2
 800b9f4:	3302      	adds	r3, #2
 800b9f6:	781a      	ldrb	r2, [r3, #0]
 800b9f8:	4b39      	ldr	r3, [pc, #228]	; (800bae0 <StateMachineRunning+0x1e0>)
 800b9fa:	701a      	strb	r2, [r3, #0]
                            tick = 0;
 800b9fc:	4b36      	ldr	r3, [pc, #216]	; (800bad8 <StateMachineRunning+0x1d8>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	601a      	str	r2, [r3, #0]
                            if (state_list[i].code_fault != CODE_OK)
 800ba02:	4a3c      	ldr	r2, [pc, #240]	; (800baf4 <StateMachineRunning+0x1f4>)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	011b      	lsls	r3, r3, #4
 800ba08:	4413      	add	r3, r2
 800ba0a:	330d      	adds	r3, #13
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d04c      	beq.n	800baac <StateMachineRunning+0x1ac>
                                faultInfo = state_list[i].code_fault;
 800ba12:	4a38      	ldr	r2, [pc, #224]	; (800baf4 <StateMachineRunning+0x1f4>)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	011b      	lsls	r3, r3, #4
 800ba18:	4413      	add	r3, r2
 800ba1a:	330d      	adds	r3, #13
 800ba1c:	781a      	ldrb	r2, [r3, #0]
 800ba1e:	4b32      	ldr	r3, [pc, #200]	; (800bae8 <StateMachineRunning+0x1e8>)
 800ba20:	701a      	strb	r2, [r3, #0]
                    tick = 0;
                    if (state_list[i].code_fault != CODE_OK)
                        faultInfo = state_list[i].code_fault;
                }
            }
            break;
 800ba22:	e043      	b.n	800baac <StateMachineRunning+0x1ac>
                        if (ret == FUNCTION_DONE)
 800ba24:	4b34      	ldr	r3, [pc, #208]	; (800baf8 <StateMachineRunning+0x1f8>)
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d13f      	bne.n	800baac <StateMachineRunning+0x1ac>
                            g_current_state = state_list[i].next;
 800ba2c:	4a31      	ldr	r2, [pc, #196]	; (800baf4 <StateMachineRunning+0x1f4>)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	011b      	lsls	r3, r3, #4
 800ba32:	4413      	add	r3, r2
 800ba34:	3301      	adds	r3, #1
 800ba36:	781a      	ldrb	r2, [r3, #0]
 800ba38:	4b29      	ldr	r3, [pc, #164]	; (800bae0 <StateMachineRunning+0x1e0>)
 800ba3a:	701a      	strb	r2, [r3, #0]
                            tick = 0;
 800ba3c:	4b26      	ldr	r3, [pc, #152]	; (800bad8 <StateMachineRunning+0x1d8>)
 800ba3e:	2200      	movs	r2, #0
 800ba40:	601a      	str	r2, [r3, #0]
            break;
 800ba42:	e033      	b.n	800baac <StateMachineRunning+0x1ac>
                if (ret == FUNCTION_DONE)
 800ba44:	4b2c      	ldr	r3, [pc, #176]	; (800baf8 <StateMachineRunning+0x1f8>)
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d10b      	bne.n	800ba64 <StateMachineRunning+0x164>
                    g_current_state = state_list[i].next;
 800ba4c:	4a29      	ldr	r2, [pc, #164]	; (800baf4 <StateMachineRunning+0x1f4>)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	011b      	lsls	r3, r3, #4
 800ba52:	4413      	add	r3, r2
 800ba54:	3301      	adds	r3, #1
 800ba56:	781a      	ldrb	r2, [r3, #0]
 800ba58:	4b21      	ldr	r3, [pc, #132]	; (800bae0 <StateMachineRunning+0x1e0>)
 800ba5a:	701a      	strb	r2, [r3, #0]
                    tick = 0;
 800ba5c:	4b1e      	ldr	r3, [pc, #120]	; (800bad8 <StateMachineRunning+0x1d8>)
 800ba5e:	2200      	movs	r2, #0
 800ba60:	601a      	str	r2, [r3, #0]
            break;
 800ba62:	e023      	b.n	800baac <StateMachineRunning+0x1ac>
                    g_current_state = state_list[i].back;
 800ba64:	4a23      	ldr	r2, [pc, #140]	; (800baf4 <StateMachineRunning+0x1f4>)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	011b      	lsls	r3, r3, #4
 800ba6a:	4413      	add	r3, r2
 800ba6c:	3302      	adds	r3, #2
 800ba6e:	781a      	ldrb	r2, [r3, #0]
 800ba70:	4b1b      	ldr	r3, [pc, #108]	; (800bae0 <StateMachineRunning+0x1e0>)
 800ba72:	701a      	strb	r2, [r3, #0]
                    tick = 0;
 800ba74:	4b18      	ldr	r3, [pc, #96]	; (800bad8 <StateMachineRunning+0x1d8>)
 800ba76:	2200      	movs	r2, #0
 800ba78:	601a      	str	r2, [r3, #0]
                    if (state_list[i].code_fault != CODE_OK)
 800ba7a:	4a1e      	ldr	r2, [pc, #120]	; (800baf4 <StateMachineRunning+0x1f4>)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	011b      	lsls	r3, r3, #4
 800ba80:	4413      	add	r3, r2
 800ba82:	330d      	adds	r3, #13
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d010      	beq.n	800baac <StateMachineRunning+0x1ac>
                        faultInfo = state_list[i].code_fault;
 800ba8a:	4a1a      	ldr	r2, [pc, #104]	; (800baf4 <StateMachineRunning+0x1f4>)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	011b      	lsls	r3, r3, #4
 800ba90:	4413      	add	r3, r2
 800ba92:	330d      	adds	r3, #13
 800ba94:	781a      	ldrb	r2, [r3, #0]
 800ba96:	4b14      	ldr	r3, [pc, #80]	; (800bae8 <StateMachineRunning+0x1e8>)
 800ba98:	701a      	strb	r2, [r3, #0]
            break;
 800ba9a:	e007      	b.n	800baac <StateMachineRunning+0x1ac>
    for (i = 0; i < STATE_MAX; i++)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	607b      	str	r3, [r7, #4]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2b04      	cmp	r3, #4
 800baa6:	f77f af6b 	ble.w	800b980 <StateMachineRunning+0x80>
 800baaa:	e000      	b.n	800baae <StateMachineRunning+0x1ae>
            break;
 800baac:	bf00      	nop
        }
    }

    if (prv_state != g_current_state)
 800baae:	4b0f      	ldr	r3, [pc, #60]	; (800baec <StateMachineRunning+0x1ec>)
 800bab0:	781a      	ldrb	r2, [r3, #0]
 800bab2:	4b0b      	ldr	r3, [pc, #44]	; (800bae0 <StateMachineRunning+0x1e0>)
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d009      	beq.n	800bace <StateMachineRunning+0x1ce>
    {
        tick = 0;
 800baba:	4b07      	ldr	r3, [pc, #28]	; (800bad8 <StateMachineRunning+0x1d8>)
 800babc:	2200      	movs	r2, #0
 800babe:	601a      	str	r2, [r3, #0]
        prv_state = g_current_state;
 800bac0:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <StateMachineRunning+0x1e0>)
 800bac2:	781a      	ldrb	r2, [r3, #0]
 800bac4:	4b09      	ldr	r3, [pc, #36]	; (800baec <StateMachineRunning+0x1ec>)
 800bac6:	701a      	strb	r2, [r3, #0]
        IsStartState = true;
 800bac8:	4b09      	ldr	r3, [pc, #36]	; (800baf0 <StateMachineRunning+0x1f0>)
 800baca:	2201      	movs	r2, #1
 800bacc:	701a      	strb	r2, [r3, #0]
    }
}
 800bace:	bf00      	nop
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	20001740 	.word	0x20001740
 800badc:	20001744 	.word	0x20001744
 800bae0:	20001738 	.word	0x20001738
 800bae4:	20001748 	.word	0x20001748
 800bae8:	2000173a 	.word	0x2000173a
 800baec:	20001739 	.word	0x20001739
 800baf0:	20000424 	.word	0x20000424
 800baf4:	20000428 	.word	0x20000428
 800baf8:	20001749 	.word	0x20001749

0800bafc <WindOff>:

static FUNCTION_RETURN WindOff(void)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	af00      	add	r7, sp, #0
    if (IsStartState == true)
 800bb00:	4b05      	ldr	r3, [pc, #20]	; (800bb18 <WindOff+0x1c>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d004      	beq.n	800bb12 <WindOff+0x16>
    {
        ErrorCheckInit();
 800bb08:	f7ff fc36 	bl	800b378 <ErrorCheckInit>
        faultInfo = CODE_OK;
 800bb0c:	4b03      	ldr	r3, [pc, #12]	; (800bb1c <WindOff+0x20>)
 800bb0e:	2200      	movs	r2, #0
 800bb10:	701a      	strb	r2, [r3, #0]
    }
    return FUNCTION_DONE;
 800bb12:	2302      	movs	r3, #2
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	20000424 	.word	0x20000424
 800bb1c:	2000173a 	.word	0x2000173a

0800bb20 <CheckWind>:

static FUNCTION_RETURN CheckWind(void)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	af00      	add	r7, sp, #0
    if (g_wind.vwt > DC_MIN_INPUT && g_wind.vwt < DC_MAX_INPUT)
 800bb24:	4b33      	ldr	r3, [pc, #204]	; (800bbf4 <CheckWind+0xd4>)
 800bb26:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb32:	dd0c      	ble.n	800bb4e <CheckWind+0x2e>
 800bb34:	4b2f      	ldr	r3, [pc, #188]	; (800bbf4 <CheckWind+0xd4>)
 800bb36:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb3a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800bbf8 <CheckWind+0xd8>
 800bb3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb46:	d502      	bpl.n	800bb4e <CheckWind+0x2e>
    {
        WindControlInit(&g_wind);
 800bb48:	482a      	ldr	r0, [pc, #168]	; (800bbf4 <CheckWind+0xd4>)
 800bb4a:	f000 f963 	bl	800be14 <WindControlInit>
    }

    if (g_wind.is_plugin == true)
 800bb4e:	4b29      	ldr	r3, [pc, #164]	; (800bbf4 <CheckWind+0xd4>)
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <CheckWind+0x3a>
    {
        return FUNCTION_DONE;
 800bb56:	2302      	movs	r3, #2
 800bb58:	e049      	b.n	800bbee <CheckWind+0xce>
    }
    else
    {
        if(g_wind.vwt > DC_MAX_INPUT)
 800bb5a:	4b26      	ldr	r3, [pc, #152]	; (800bbf4 <CheckWind+0xd4>)
 800bb5c:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb60:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800bbf8 <CheckWind+0xd8>
 800bb64:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb6c:	dd06      	ble.n	800bb7c <CheckWind+0x5c>
        {
            faultInfo = CODE_OVDC1;
 800bb6e:	4b23      	ldr	r3, [pc, #140]	; (800bbfc <CheckWind+0xdc>)
 800bb70:	2208      	movs	r2, #8
 800bb72:	701a      	strb	r2, [r3, #0]
            Pin_Func_TurnOff(LED1);
 800bb74:	2000      	movs	r0, #0
 800bb76:	f7fd fd89 	bl	800968c <Pin_Func_TurnOff>
 800bb7a:	e013      	b.n	800bba4 <CheckWind+0x84>
        }
        else if(g_wind.vwt <= DC_MIN_INPUT)
 800bb7c:	4b1d      	ldr	r3, [pc, #116]	; (800bbf4 <CheckWind+0xd4>)
 800bb7e:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb8a:	d80b      	bhi.n	800bba4 <CheckWind+0x84>
        {
            faultInfo = NoWindInput;
 800bb8c:	4b1b      	ldr	r3, [pc, #108]	; (800bbfc <CheckWind+0xdc>)
 800bb8e:	2202      	movs	r2, #2
 800bb90:	701a      	strb	r2, [r3, #0]
            Pin_Func_TurnOff(LED1);
 800bb92:	2000      	movs	r0, #0
 800bb94:	f7fd fd7a 	bl	800968c <Pin_Func_TurnOff>
            Pin_Func_TurnOff(LED2);
 800bb98:	2001      	movs	r0, #1
 800bb9a:	f7fd fd77 	bl	800968c <Pin_Func_TurnOff>
            Pin_Func_TurnOff(LED3);
 800bb9e:	2002      	movs	r0, #2
 800bba0:	f7fd fd74 	bl	800968c <Pin_Func_TurnOff>
        }
    }
		if(g_vout > BAT_MIN_INPUT && g_vout < BAT_MAX_INPUT )
 800bba4:	4b16      	ldr	r3, [pc, #88]	; (800bc00 <CheckWind+0xe0>)
 800bba6:	edd3 7a00 	vldr	s15, [r3]
 800bbaa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800bc04 <CheckWind+0xe4>
 800bbae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbb6:	dd0d      	ble.n	800bbd4 <CheckWind+0xb4>
 800bbb8:	4b11      	ldr	r3, [pc, #68]	; (800bc00 <CheckWind+0xe0>)
 800bbba:	edd3 7a00 	vldr	s15, [r3]
 800bbbe:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800bc08 <CheckWind+0xe8>
 800bbc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbca:	d503      	bpl.n	800bbd4 <CheckWind+0xb4>
		{
				g_state_bat = true;
 800bbcc:	4b0f      	ldr	r3, [pc, #60]	; (800bc0c <CheckWind+0xec>)
 800bbce:	2201      	movs	r2, #1
 800bbd0:	701a      	strb	r2, [r3, #0]
 800bbd2:	e002      	b.n	800bbda <CheckWind+0xba>
		}
		else
		{
				g_state_bat = false;
 800bbd4:	4b0d      	ldr	r3, [pc, #52]	; (800bc0c <CheckWind+0xec>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	701a      	strb	r2, [r3, #0]
		}
		if(g_state_bat == true)
 800bbda:	4b0c      	ldr	r3, [pc, #48]	; (800bc0c <CheckWind+0xec>)
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d001      	beq.n	800bbe6 <CheckWind+0xc6>
		{
				return FUNCTION_DONE;
 800bbe2:	2302      	movs	r3, #2
 800bbe4:	e003      	b.n	800bbee <CheckWind+0xce>
		}
		else
		{
				faultInfo = NoBatInput;
 800bbe6:	4b05      	ldr	r3, [pc, #20]	; (800bbfc <CheckWind+0xdc>)
 800bbe8:	2203      	movs	r2, #3
 800bbea:	701a      	strb	r2, [r3, #0]
		}
    return FUNCTION_FAIL;
 800bbec:	2303      	movs	r3, #3
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	20001750 	.word	0x20001750
 800bbf8:	43160000 	.word	0x43160000
 800bbfc:	2000173a 	.word	0x2000173a
 800bc00:	20000890 	.word	0x20000890
 800bc04:	42140000 	.word	0x42140000
 800bc08:	42700000 	.word	0x42700000
 800bc0c:	2000173d 	.word	0x2000173d

0800bc10 <CloseLoop>:

static FUNCTION_RETURN CloseLoop(void)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	af00      	add	r7, sp, #0
    static uint32_t count_wind = 0;
    if(g_wind.vwt > DC_MIN_INPUT && g_wind.vwt < DC_MAX_INPUT && g_state_bat == true)
 800bc14:	4b5c      	ldr	r3, [pc, #368]	; (800bd88 <CloseLoop+0x178>)
 800bc16:	edd3 7a01 	vldr	s15, [r3, #4]
 800bc1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc22:	dd14      	ble.n	800bc4e <CloseLoop+0x3e>
 800bc24:	4b58      	ldr	r3, [pc, #352]	; (800bd88 <CloseLoop+0x178>)
 800bc26:	edd3 7a01 	vldr	s15, [r3, #4]
 800bc2a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800bd8c <CloseLoop+0x17c>
 800bc2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc36:	d50a      	bpl.n	800bc4e <CloseLoop+0x3e>
 800bc38:	4b55      	ldr	r3, [pc, #340]	; (800bd90 <CloseLoop+0x180>)
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d006      	beq.n	800bc4e <CloseLoop+0x3e>
    {
        g_wind.is_plugin = true;
 800bc40:	4b51      	ldr	r3, [pc, #324]	; (800bd88 <CloseLoop+0x178>)
 800bc42:	2201      	movs	r2, #1
 800bc44:	701a      	strb	r2, [r3, #0]
        faultInfo = CODE_OK;
 800bc46:	4b53      	ldr	r3, [pc, #332]	; (800bd94 <CloseLoop+0x184>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	701a      	strb	r2, [r3, #0]
 800bc4c:	e002      	b.n	800bc54 <CloseLoop+0x44>
    }
    else{
        g_wind.is_plugin = false;
 800bc4e:	4b4e      	ldr	r3, [pc, #312]	; (800bd88 <CloseLoop+0x178>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	701a      	strb	r2, [r3, #0]
    }

    if(g_wind.is_plugin == true)
 800bc54:	4b4c      	ldr	r3, [pc, #304]	; (800bd88 <CloseLoop+0x178>)
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d049      	beq.n	800bcf0 <CloseLoop+0xe0>
    {
        if(g_vout < MAX_VOUT && g_iload < MAX_ILOAD)
 800bc5c:	4b4e      	ldr	r3, [pc, #312]	; (800bd98 <CloseLoop+0x188>)
 800bc5e:	edd3 7a00 	vldr	s15, [r3]
 800bc62:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800bd9c <CloseLoop+0x18c>
 800bc66:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc6e:	d514      	bpl.n	800bc9a <CloseLoop+0x8a>
 800bc70:	4b4b      	ldr	r3, [pc, #300]	; (800bda0 <CloseLoop+0x190>)
 800bc72:	edd3 7a00 	vldr	s15, [r3]
 800bc76:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800bc7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc82:	d50a      	bpl.n	800bc9a <CloseLoop+0x8a>
        {
            faultInfo = CODE_OK;
 800bc84:	4b43      	ldr	r3, [pc, #268]	; (800bd94 <CloseLoop+0x184>)
 800bc86:	2200      	movs	r2, #0
 800bc88:	701a      	strb	r2, [r3, #0]
            DcDc_ControllerMppt();
 800bc8a:	f7ff fa5b 	bl	800b144 <DcDc_ControllerMppt>
			DC_StartPWM_Boost();
 800bc8e:	f7ff fa29 	bl	800b0e4 <DC_StartPWM_Boost>
			DC_StartPWM_Buck();
 800bc92:	f7ff fa45 	bl	800b120 <DC_StartPWM_Buck>
		{
			faultInfo = CODE_OCDC1;
		}
        return FUNCTION_FAIL;
    }
    return FUNCTION_DONE;
 800bc96:	2302      	movs	r3, #2
 800bc98:	e073      	b.n	800bd82 <CloseLoop+0x172>
            if(g_vout > MAX_VOUT)
 800bc9a:	4b3f      	ldr	r3, [pc, #252]	; (800bd98 <CloseLoop+0x188>)
 800bc9c:	edd3 7a00 	vldr	s15, [r3]
 800bca0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800bd9c <CloseLoop+0x18c>
 800bca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcac:	dd0a      	ble.n	800bcc4 <CloseLoop+0xb4>
                faultInfo = CODE_OVDC2;
 800bcae:	4b39      	ldr	r3, [pc, #228]	; (800bd94 <CloseLoop+0x184>)
 800bcb0:	2209      	movs	r2, #9
 800bcb2:	701a      	strb	r2, [r3, #0]
                DC_StopPWM_Buck();
 800bcb4:	f7ff fa28 	bl	800b108 <DC_StopPWM_Buck>
                DC_StopPWM_Boost();
 800bcb8:	f7ff fa08 	bl	800b0cc <DC_StopPWM_Boost>
                Pin_Func_TurnOn(LED2);
 800bcbc:	2001      	movs	r0, #1
 800bcbe:	f7fd fcbb 	bl	8009638 <Pin_Func_TurnOn>
 800bcc2:	e013      	b.n	800bcec <CloseLoop+0xdc>
            else if(g_iload > MAX_ILOAD)
 800bcc4:	4b36      	ldr	r3, [pc, #216]	; (800bda0 <CloseLoop+0x190>)
 800bcc6:	edd3 7a00 	vldr	s15, [r3]
 800bcca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800bcce:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bcd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcd6:	dd09      	ble.n	800bcec <CloseLoop+0xdc>
                faultInfo = CODE_OCDC1;
 800bcd8:	4b2e      	ldr	r3, [pc, #184]	; (800bd94 <CloseLoop+0x184>)
 800bcda:	220c      	movs	r2, #12
 800bcdc:	701a      	strb	r2, [r3, #0]
                DC_StopPWM_Buck();
 800bcde:	f7ff fa13 	bl	800b108 <DC_StopPWM_Buck>
                DC_StopPWM_Boost();
 800bce2:	f7ff f9f3 	bl	800b0cc <DC_StopPWM_Boost>
                Pin_Func_TurnOn(LED3);
 800bce6:	2002      	movs	r0, #2
 800bce8:	f7fd fca6 	bl	8009638 <Pin_Func_TurnOn>
            return FUNCTION_FAIL;
 800bcec:	2303      	movs	r3, #3
 800bcee:	e048      	b.n	800bd82 <CloseLoop+0x172>
        if(g_wind.vwt > DC_MAX_INPUT)
 800bcf0:	4b25      	ldr	r3, [pc, #148]	; (800bd88 <CloseLoop+0x178>)
 800bcf2:	edd3 7a01 	vldr	s15, [r3, #4]
 800bcf6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800bd8c <CloseLoop+0x17c>
 800bcfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd02:	dd17      	ble.n	800bd34 <CloseLoop+0x124>
			count_wind++;
 800bd04:	4b27      	ldr	r3, [pc, #156]	; (800bda4 <CloseLoop+0x194>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	4a26      	ldr	r2, [pc, #152]	; (800bda4 <CloseLoop+0x194>)
 800bd0c:	6013      	str	r3, [r2, #0]
			if(count_wind > 300)
 800bd0e:	4b25      	ldr	r3, [pc, #148]	; (800bda4 <CloseLoop+0x194>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bd16:	d90a      	bls.n	800bd2e <CloseLoop+0x11e>
				faultInfo = CODE_OVDC1;
 800bd18:	4b1e      	ldr	r3, [pc, #120]	; (800bd94 <CloseLoop+0x184>)
 800bd1a:	2208      	movs	r2, #8
 800bd1c:	701a      	strb	r2, [r3, #0]
				DC_StopPWM_Buck();
 800bd1e:	f7ff f9f3 	bl	800b108 <DC_StopPWM_Buck>
				DC_StopPWM_Boost();
 800bd22:	f7ff f9d3 	bl	800b0cc <DC_StopPWM_Boost>
				Pin_Func_TurnOn(LED1);
 800bd26:	2000      	movs	r0, #0
 800bd28:	f7fd fc86 	bl	8009638 <Pin_Func_TurnOn>
 800bd2c:	e028      	b.n	800bd80 <CloseLoop+0x170>
				Dumpload_controller();
 800bd2e:	f7ff fad9 	bl	800b2e4 <Dumpload_controller>
 800bd32:	e025      	b.n	800bd80 <CloseLoop+0x170>
        else if(g_wind.vwt <= DC_MIN_INPUT)
 800bd34:	4b14      	ldr	r3, [pc, #80]	; (800bd88 <CloseLoop+0x178>)
 800bd36:	edd3 7a01 	vldr	s15, [r3, #4]
 800bd3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd42:	d810      	bhi.n	800bd66 <CloseLoop+0x156>
            faultInfo = NoWindInput;
 800bd44:	4b13      	ldr	r3, [pc, #76]	; (800bd94 <CloseLoop+0x184>)
 800bd46:	2202      	movs	r2, #2
 800bd48:	701a      	strb	r2, [r3, #0]
            DC_StopPWM_Buck();
 800bd4a:	f7ff f9dd 	bl	800b108 <DC_StopPWM_Buck>
            DC_StopPWM_Boost();
 800bd4e:	f7ff f9bd 	bl	800b0cc <DC_StopPWM_Boost>
            Pin_Func_TurnOn(LED1);
 800bd52:	2000      	movs	r0, #0
 800bd54:	f7fd fc70 	bl	8009638 <Pin_Func_TurnOn>
            Pin_Func_TurnOn(LED2);
 800bd58:	2001      	movs	r0, #1
 800bd5a:	f7fd fc6d 	bl	8009638 <Pin_Func_TurnOn>
            Pin_Func_TurnOn(LED3);
 800bd5e:	2002      	movs	r0, #2
 800bd60:	f7fd fc6a 	bl	8009638 <Pin_Func_TurnOn>
 800bd64:	e00c      	b.n	800bd80 <CloseLoop+0x170>
		else if(g_wind.iwt > MAX_ILOAD)
 800bd66:	4b08      	ldr	r3, [pc, #32]	; (800bd88 <CloseLoop+0x178>)
 800bd68:	edd3 7a02 	vldr	s15, [r3, #8]
 800bd6c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800bd70:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd78:	dd02      	ble.n	800bd80 <CloseLoop+0x170>
			faultInfo = CODE_OCDC1;
 800bd7a:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <CloseLoop+0x184>)
 800bd7c:	220c      	movs	r2, #12
 800bd7e:	701a      	strb	r2, [r3, #0]
        return FUNCTION_FAIL;
 800bd80:	2303      	movs	r3, #3
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	20001750 	.word	0x20001750
 800bd8c:	43160000 	.word	0x43160000
 800bd90:	2000173d 	.word	0x2000173d
 800bd94:	2000173a 	.word	0x2000173a
 800bd98:	20000890 	.word	0x20000890
 800bd9c:	42480000 	.word	0x42480000
 800bda0:	20000894 	.word	0x20000894
 800bda4:	2000174c 	.word	0x2000174c

0800bda8 <ErrorFunction>:

static FUNCTION_RETURN ErrorFunction(void)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	af00      	add	r7, sp, #0
    if (IsStartState == true)
 800bdac:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <ErrorFunction+0x44>)
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d003      	beq.n	800bdbc <ErrorFunction+0x14>
    {
        DC_StopPWM_Buck();
 800bdb4:	f7ff f9a8 	bl	800b108 <DC_StopPWM_Buck>
        DC_StopPWM_Boost();
 800bdb8:	f7ff f988 	bl	800b0cc <DC_StopPWM_Boost>
    }
    if (faultInfo == CODE_OVDC1)
 800bdbc:	4b0c      	ldr	r3, [pc, #48]	; (800bdf0 <ErrorFunction+0x48>)
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	2b08      	cmp	r3, #8
 800bdc2:	d102      	bne.n	800bdca <ErrorFunction+0x22>
    {
    	Pin_Func_TurnOn(LED1);
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	f7fd fc37 	bl	8009638 <Pin_Func_TurnOn>
    }
    if (faultInfo == CODE_OVDC2)
 800bdca:	4b09      	ldr	r3, [pc, #36]	; (800bdf0 <ErrorFunction+0x48>)
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b09      	cmp	r3, #9
 800bdd0:	d102      	bne.n	800bdd8 <ErrorFunction+0x30>
    {
    	Pin_Func_TurnOn(LED2);
 800bdd2:	2001      	movs	r0, #1
 800bdd4:	f7fd fc30 	bl	8009638 <Pin_Func_TurnOn>
    }
    if (faultInfo == CODE_OCDC1)
 800bdd8:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <ErrorFunction+0x48>)
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	2b0c      	cmp	r3, #12
 800bdde:	d102      	bne.n	800bde6 <ErrorFunction+0x3e>
    {
    	Pin_Func_TurnOn(LED3);
 800bde0:	2002      	movs	r0, #2
 800bde2:	f7fd fc29 	bl	8009638 <Pin_Func_TurnOn>
    }
    return FUNCTION_FAIL;
 800bde6:	2303      	movs	r3, #3
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	20000424 	.word	0x20000424
 800bdf0:	2000173a 	.word	0x2000173a

0800bdf4 <StateReset>:

static FUNCTION_RETURN StateReset(void)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	af00      	add	r7, sp, #0
    if (IsStartState == true)
 800bdf8:	4b05      	ldr	r3, [pc, #20]	; (800be10 <StateReset+0x1c>)
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d003      	beq.n	800be08 <StateReset+0x14>
    {
        DC_StopPWM_Buck();
 800be00:	f7ff f982 	bl	800b108 <DC_StopPWM_Buck>
        DC_StopPWM_Boost();
 800be04:	f7ff f962 	bl	800b0cc <DC_StopPWM_Boost>
    }
    return FUNCTION_DONE;
 800be08:	2302      	movs	r3, #2
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	20000424 	.word	0x20000424

0800be14 <WindControlInit>:

WIND g_wind;



void WindControlInit(WIND *wind){
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
	wind->is_plugin 			= true;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	701a      	strb	r2, [r3, #0]
//	wind->boost_state 			= false;
//	wind->is_dumpload 			= false;
//	wind->vwt_oc 				= wind->vwt;
	TestMPPTInit(&wind->mppt);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3328      	adds	r3, #40	; 0x28
 800be26:	4618      	mov	r0, r3
 800be28:	f000 f826 	bl	800be78 <TestMPPTInit>
//	wind->mppt.mppt_enable 		= 1;
//	wind->mppt.VmppOut 			= wind->vwt_oc - 5;
//	wind->mppt.MinVolt 			= wind->vwt_oc * 0.5f;
}
 800be2c:	bf00      	nop
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <WindControlMppt>:

void WindControlMppt(WIND *wind){
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
	TestMPPTProcess(&wind->mppt);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3328      	adds	r3, #40	; 0x28
 800be40:	4618      	mov	r0, r3
 800be42:	f000 f86b 	bl	800bf1c <TestMPPTProcess>
//
////		if(fabs(wind->mppt.Vwt - wind->mppt.VmppOut) > 5.0){
////			wind->mppt.VmppOut = wind->mppt.Vwt - 1.0;
////		}
//	}
}
 800be46:	bf00      	nop
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <WindControlUpdate>:

void WindControlUpdate(WIND *wind, float wind_cur, float wind_vol){
 800be4e:	b480      	push	{r7}
 800be50:	b085      	sub	sp, #20
 800be52:	af00      	add	r7, sp, #0
 800be54:	60f8      	str	r0, [r7, #12]
 800be56:	ed87 0a02 	vstr	s0, [r7, #8]
 800be5a:	edc7 0a01 	vstr	s1, [r7, #4]

	wind->vwt = wind_vol;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	605a      	str	r2, [r3, #4]
	wind->iwt = wind_cur;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	68ba      	ldr	r2, [r7, #8]
 800be68:	609a      	str	r2, [r3, #8]
}
 800be6a:	bf00      	nop
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
	...

0800be78 <TestMPPTInit>:

bool flag_check_mppt = false;

//static timer_advance_obj_t *s_ptimer_pwm;

void TestMPPTInit(MPPT_PNO *v){
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
	v->Iwt = 0;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f04f 0200 	mov.w	r2, #0
 800be86:	601a      	str	r2, [r3, #0]
	v->Iwt_prev = 0;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f04f 0200 	mov.w	r2, #0
 800be8e:	605a      	str	r2, [r3, #4]
	v->Vwt = 0;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f04f 0200 	mov.w	r2, #0
 800be96:	609a      	str	r2, [r3, #8]
	v->Vwt_prev = 0;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f04f 0200 	mov.w	r2, #0
 800be9e:	60da      	str	r2, [r3, #12]
	v->Delta_V = 0;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f04f 0200 	mov.w	r2, #0
 800bea6:	611a      	str	r2, [r3, #16]
	v->Delta_P = 0;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f04f 0200 	mov.w	r2, #0
 800beae:	615a      	str	r2, [r3, #20]
	v->Stepsize = 0;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f04f 0200 	mov.w	r2, #0
 800beb6:	619a      	str	r2, [r3, #24]
	v->K_factor = 1;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bebe:	61da      	str	r2, [r3, #28]
	v->Power_wind = 0.1;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a12      	ldr	r2, [pc, #72]	; (800bf0c <TestMPPTInit+0x94>)
 800bec4:	621a      	str	r2, [r3, #32]
	v->Power_wind_prev = 0;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f04f 0200 	mov.w	r2, #0
 800becc:	625a      	str	r2, [r3, #36]	; 0x24
//	v->VmppOut = 0;
//	v->VmppOut_prev = 0;
//	v->VmppOutMax	= 2;
//	v->VmppOutMin = 0.005;
	v-> D_ref = 0 ;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f04f 0200 	mov.w	r2, #0
 800bed4:	639a      	str	r2, [r3, #56]	; 0x38
	v-> D_prev  = 0.01 ;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4a0d      	ldr	r2, [pc, #52]	; (800bf10 <TestMPPTInit+0x98>)
 800beda:	63da      	str	r2, [r3, #60]	; 0x3c
	v-> Delta_D = 0.001;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a0d      	ldr	r2, [pc, #52]	; (800bf14 <TestMPPTInit+0x9c>)
 800bee0:	641a      	str	r2, [r3, #64]	; 0x40
	v->	D_refMin = 0.005 ;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a0c      	ldr	r2, [pc, #48]	; (800bf18 <TestMPPTInit+0xa0>)
 800bee6:	649a      	str	r2, [r3, #72]	; 0x48
	v->	D_refMax = 1.5 ;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800beee:	645a      	str	r2, [r3, #68]	; 0x44
	v->mppt_enable = 1;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	v->mppt_first = 1;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800bf00:	bf00      	nop
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	3dcccccd 	.word	0x3dcccccd
 800bf10:	3c23d70a 	.word	0x3c23d70a
 800bf14:	3a83126f 	.word	0x3a83126f
 800bf18:	3ba3d70a 	.word	0x3ba3d70a

0800bf1c <TestMPPTProcess>:

void TestMPPTProcess(MPPT_PNO *v){
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]

//	flag_check_mppt = true;
	v->Delta_V 		= v->Vwt - v->Vwt_prev;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	ed93 7a02 	vldr	s14, [r3, #8]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	edd3 7a03 	vldr	s15, [r3, #12]
 800bf30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	edc3 7a04 	vstr	s15, [r3, #16]
	v->Power_wind 	= v->Vwt * v->Iwt;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	ed93 7a02 	vldr	s14, [r3, #8]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	edd3 7a00 	vldr	s15, [r3]
 800bf46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	edc3 7a08 	vstr	s15, [r3, #32]
	v->Delta_P 		= v->Power_wind - v->Power_wind_prev;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	ed93 7a08 	vldr	s14, [r3, #32]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800bf5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	edc3 7a05 	vstr	s15, [r3, #20]
	v->K_factor		= 1;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bf6c:	61da      	str	r2, [r3, #28]

	if ( v->mppt_enable == 1){
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d15a      	bne.n	800c02e <TestMPPTProcess+0x112>
		if (v->Delta_P > 0){
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	edd3 7a05 	vldr	s15, [r3, #20]
 800bf7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf86:	dd29      	ble.n	800bfdc <TestMPPTProcess+0xc0>
			if(v->Delta_V >0){
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	edd3 7a04 	vldr	s15, [r3, #16]
 800bf8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf96:	dd10      	ble.n	800bfba <TestMPPTProcess+0x9e>
				v->D_ref = v->D_prev - v->Delta_D	*	v->K_factor;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	edd3 7a07 	vldr	s15, [r3, #28]
 800bfaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bfae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 800bfb8:	e039      	b.n	800c02e <TestMPPTProcess+0x112>
			}
			else{
				v->D_ref = v->D_prev + v->Delta_D	*	v->K_factor;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	edd3 7a07 	vldr	s15, [r3, #28]
 800bfcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bfd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 800bfda:	e028      	b.n	800c02e <TestMPPTProcess+0x112>
			}
		}
		else{
			if(v->Delta_V >0){
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	edd3 7a04 	vldr	s15, [r3, #16]
 800bfe2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfea:	dd10      	ble.n	800c00e <TestMPPTProcess+0xf2>
				v->D_ref = v->D_prev + v->Delta_D	*	v->K_factor;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	edd3 7a07 	vldr	s15, [r3, #28]
 800bffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c002:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 800c00c:	e00f      	b.n	800c02e <TestMPPTProcess+0x112>
			}
			else{
				v->D_ref = v->D_prev - v->Delta_D	*	v->K_factor;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	edd3 7a07 	vldr	s15, [r3, #28]
 800c020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c024:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			}
		}
	}

	if (v->D_ref > v->D_refMax || v->D_ref < v->D_refMin ){
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800c03a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c042:	dc0a      	bgt.n	800c05a <TestMPPTProcess+0x13e>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800c050:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c058:	d503      	bpl.n	800c062 <TestMPPTProcess+0x146>
		v->D_ref = v->D_prev;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	639a      	str	r2, [r3, #56]	; 0x38
	}

	v->Power_wind_prev = v->Power_wind;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a1a      	ldr	r2, [r3, #32]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	625a      	str	r2, [r3, #36]	; 0x24
	v->Vwt_prev = v->Vwt;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	689a      	ldr	r2, [r3, #8]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	60da      	str	r2, [r3, #12]
	v->D_prev = v->D_ref;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800c07a:	bf00      	nop
 800c07c:	370c      	adds	r7, #12
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
	...

0800c088 <TestMPPTUpdate>:

void TestMPPTUpdate(MPPT_PNO *mppt, float cur, float vol){
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60f8      	str	r0, [r7, #12]
 800c090:	ed87 0a02 	vstr	s0, [r7, #8]
 800c094:	edc7 0a01 	vstr	s1, [r7, #4]

	static float vwt_avg_multiplier = 0.002f;
	static float iwt_avg_multiplier = 0.002f;
	mppt ->Vwt = ((vol - mppt->Vwt)*vwt_avg_multiplier) + mppt->Vwt;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	edd3 7a02 	vldr	s15, [r3, #8]
 800c09e:	ed97 7a01 	vldr	s14, [r7, #4]
 800c0a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c0a6:	4b13      	ldr	r3, [pc, #76]	; (800c0f4 <TestMPPTUpdate+0x6c>)
 800c0a8:	edd3 7a00 	vldr	s15, [r3]
 800c0ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	edd3 7a02 	vldr	s15, [r3, #8]
 800c0b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	edc3 7a02 	vstr	s15, [r3, #8]
	mppt ->Iwt = ((cur - mppt->Iwt)*iwt_avg_multiplier) + mppt->Iwt;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	edd3 7a00 	vldr	s15, [r3]
 800c0c6:	ed97 7a02 	vldr	s14, [r7, #8]
 800c0ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c0ce:	4b0a      	ldr	r3, [pc, #40]	; (800c0f8 <TestMPPTUpdate+0x70>)
 800c0d0:	edd3 7a00 	vldr	s15, [r3]
 800c0d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	edd3 7a00 	vldr	s15, [r3]
 800c0de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	edc3 7a00 	vstr	s15, [r3]

}
 800c0e8:	bf00      	nop
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr
 800c0f4:	20000478 	.word	0x20000478
 800c0f8:	2000047c 	.word	0x2000047c

0800c0fc <malloc>:
 800c0fc:	4b02      	ldr	r3, [pc, #8]	; (800c108 <malloc+0xc>)
 800c0fe:	4601      	mov	r1, r0
 800c100:	6818      	ldr	r0, [r3, #0]
 800c102:	f000 b82b 	b.w	800c15c <_malloc_r>
 800c106:	bf00      	nop
 800c108:	200004cc 	.word	0x200004cc

0800c10c <free>:
 800c10c:	4b02      	ldr	r3, [pc, #8]	; (800c118 <free+0xc>)
 800c10e:	4601      	mov	r1, r0
 800c110:	6818      	ldr	r0, [r3, #0]
 800c112:	f000 b937 	b.w	800c384 <_free_r>
 800c116:	bf00      	nop
 800c118:	200004cc 	.word	0x200004cc

0800c11c <sbrk_aligned>:
 800c11c:	b570      	push	{r4, r5, r6, lr}
 800c11e:	4e0e      	ldr	r6, [pc, #56]	; (800c158 <sbrk_aligned+0x3c>)
 800c120:	460c      	mov	r4, r1
 800c122:	6831      	ldr	r1, [r6, #0]
 800c124:	4605      	mov	r5, r0
 800c126:	b911      	cbnz	r1, 800c12e <sbrk_aligned+0x12>
 800c128:	f000 f8e2 	bl	800c2f0 <_sbrk_r>
 800c12c:	6030      	str	r0, [r6, #0]
 800c12e:	4621      	mov	r1, r4
 800c130:	4628      	mov	r0, r5
 800c132:	f000 f8dd 	bl	800c2f0 <_sbrk_r>
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	d00a      	beq.n	800c150 <sbrk_aligned+0x34>
 800c13a:	1cc4      	adds	r4, r0, #3
 800c13c:	f024 0403 	bic.w	r4, r4, #3
 800c140:	42a0      	cmp	r0, r4
 800c142:	d007      	beq.n	800c154 <sbrk_aligned+0x38>
 800c144:	1a21      	subs	r1, r4, r0
 800c146:	4628      	mov	r0, r5
 800c148:	f000 f8d2 	bl	800c2f0 <_sbrk_r>
 800c14c:	3001      	adds	r0, #1
 800c14e:	d101      	bne.n	800c154 <sbrk_aligned+0x38>
 800c150:	f04f 34ff 	mov.w	r4, #4294967295
 800c154:	4620      	mov	r0, r4
 800c156:	bd70      	pop	{r4, r5, r6, pc}
 800c158:	200017cc 	.word	0x200017cc

0800c15c <_malloc_r>:
 800c15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c160:	1ccd      	adds	r5, r1, #3
 800c162:	f025 0503 	bic.w	r5, r5, #3
 800c166:	3508      	adds	r5, #8
 800c168:	2d0c      	cmp	r5, #12
 800c16a:	bf38      	it	cc
 800c16c:	250c      	movcc	r5, #12
 800c16e:	2d00      	cmp	r5, #0
 800c170:	4607      	mov	r7, r0
 800c172:	db01      	blt.n	800c178 <_malloc_r+0x1c>
 800c174:	42a9      	cmp	r1, r5
 800c176:	d905      	bls.n	800c184 <_malloc_r+0x28>
 800c178:	230c      	movs	r3, #12
 800c17a:	603b      	str	r3, [r7, #0]
 800c17c:	2600      	movs	r6, #0
 800c17e:	4630      	mov	r0, r6
 800c180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c184:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c258 <_malloc_r+0xfc>
 800c188:	f000 f868 	bl	800c25c <__malloc_lock>
 800c18c:	f8d8 3000 	ldr.w	r3, [r8]
 800c190:	461c      	mov	r4, r3
 800c192:	bb5c      	cbnz	r4, 800c1ec <_malloc_r+0x90>
 800c194:	4629      	mov	r1, r5
 800c196:	4638      	mov	r0, r7
 800c198:	f7ff ffc0 	bl	800c11c <sbrk_aligned>
 800c19c:	1c43      	adds	r3, r0, #1
 800c19e:	4604      	mov	r4, r0
 800c1a0:	d155      	bne.n	800c24e <_malloc_r+0xf2>
 800c1a2:	f8d8 4000 	ldr.w	r4, [r8]
 800c1a6:	4626      	mov	r6, r4
 800c1a8:	2e00      	cmp	r6, #0
 800c1aa:	d145      	bne.n	800c238 <_malloc_r+0xdc>
 800c1ac:	2c00      	cmp	r4, #0
 800c1ae:	d048      	beq.n	800c242 <_malloc_r+0xe6>
 800c1b0:	6823      	ldr	r3, [r4, #0]
 800c1b2:	4631      	mov	r1, r6
 800c1b4:	4638      	mov	r0, r7
 800c1b6:	eb04 0903 	add.w	r9, r4, r3
 800c1ba:	f000 f899 	bl	800c2f0 <_sbrk_r>
 800c1be:	4581      	cmp	r9, r0
 800c1c0:	d13f      	bne.n	800c242 <_malloc_r+0xe6>
 800c1c2:	6821      	ldr	r1, [r4, #0]
 800c1c4:	1a6d      	subs	r5, r5, r1
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	4638      	mov	r0, r7
 800c1ca:	f7ff ffa7 	bl	800c11c <sbrk_aligned>
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	d037      	beq.n	800c242 <_malloc_r+0xe6>
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	442b      	add	r3, r5
 800c1d6:	6023      	str	r3, [r4, #0]
 800c1d8:	f8d8 3000 	ldr.w	r3, [r8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d038      	beq.n	800c252 <_malloc_r+0xf6>
 800c1e0:	685a      	ldr	r2, [r3, #4]
 800c1e2:	42a2      	cmp	r2, r4
 800c1e4:	d12b      	bne.n	800c23e <_malloc_r+0xe2>
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	605a      	str	r2, [r3, #4]
 800c1ea:	e00f      	b.n	800c20c <_malloc_r+0xb0>
 800c1ec:	6822      	ldr	r2, [r4, #0]
 800c1ee:	1b52      	subs	r2, r2, r5
 800c1f0:	d41f      	bmi.n	800c232 <_malloc_r+0xd6>
 800c1f2:	2a0b      	cmp	r2, #11
 800c1f4:	d917      	bls.n	800c226 <_malloc_r+0xca>
 800c1f6:	1961      	adds	r1, r4, r5
 800c1f8:	42a3      	cmp	r3, r4
 800c1fa:	6025      	str	r5, [r4, #0]
 800c1fc:	bf18      	it	ne
 800c1fe:	6059      	strne	r1, [r3, #4]
 800c200:	6863      	ldr	r3, [r4, #4]
 800c202:	bf08      	it	eq
 800c204:	f8c8 1000 	streq.w	r1, [r8]
 800c208:	5162      	str	r2, [r4, r5]
 800c20a:	604b      	str	r3, [r1, #4]
 800c20c:	4638      	mov	r0, r7
 800c20e:	f104 060b 	add.w	r6, r4, #11
 800c212:	f000 f829 	bl	800c268 <__malloc_unlock>
 800c216:	f026 0607 	bic.w	r6, r6, #7
 800c21a:	1d23      	adds	r3, r4, #4
 800c21c:	1af2      	subs	r2, r6, r3
 800c21e:	d0ae      	beq.n	800c17e <_malloc_r+0x22>
 800c220:	1b9b      	subs	r3, r3, r6
 800c222:	50a3      	str	r3, [r4, r2]
 800c224:	e7ab      	b.n	800c17e <_malloc_r+0x22>
 800c226:	42a3      	cmp	r3, r4
 800c228:	6862      	ldr	r2, [r4, #4]
 800c22a:	d1dd      	bne.n	800c1e8 <_malloc_r+0x8c>
 800c22c:	f8c8 2000 	str.w	r2, [r8]
 800c230:	e7ec      	b.n	800c20c <_malloc_r+0xb0>
 800c232:	4623      	mov	r3, r4
 800c234:	6864      	ldr	r4, [r4, #4]
 800c236:	e7ac      	b.n	800c192 <_malloc_r+0x36>
 800c238:	4634      	mov	r4, r6
 800c23a:	6876      	ldr	r6, [r6, #4]
 800c23c:	e7b4      	b.n	800c1a8 <_malloc_r+0x4c>
 800c23e:	4613      	mov	r3, r2
 800c240:	e7cc      	b.n	800c1dc <_malloc_r+0x80>
 800c242:	230c      	movs	r3, #12
 800c244:	603b      	str	r3, [r7, #0]
 800c246:	4638      	mov	r0, r7
 800c248:	f000 f80e 	bl	800c268 <__malloc_unlock>
 800c24c:	e797      	b.n	800c17e <_malloc_r+0x22>
 800c24e:	6025      	str	r5, [r4, #0]
 800c250:	e7dc      	b.n	800c20c <_malloc_r+0xb0>
 800c252:	605b      	str	r3, [r3, #4]
 800c254:	deff      	udf	#255	; 0xff
 800c256:	bf00      	nop
 800c258:	200017c8 	.word	0x200017c8

0800c25c <__malloc_lock>:
 800c25c:	4801      	ldr	r0, [pc, #4]	; (800c264 <__malloc_lock+0x8>)
 800c25e:	f000 b881 	b.w	800c364 <__retarget_lock_acquire_recursive>
 800c262:	bf00      	nop
 800c264:	2000190c 	.word	0x2000190c

0800c268 <__malloc_unlock>:
 800c268:	4801      	ldr	r0, [pc, #4]	; (800c270 <__malloc_unlock+0x8>)
 800c26a:	f000 b87c 	b.w	800c366 <__retarget_lock_release_recursive>
 800c26e:	bf00      	nop
 800c270:	2000190c 	.word	0x2000190c

0800c274 <siprintf>:
 800c274:	b40e      	push	{r1, r2, r3}
 800c276:	b500      	push	{lr}
 800c278:	b09c      	sub	sp, #112	; 0x70
 800c27a:	ab1d      	add	r3, sp, #116	; 0x74
 800c27c:	9002      	str	r0, [sp, #8]
 800c27e:	9006      	str	r0, [sp, #24]
 800c280:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c284:	4809      	ldr	r0, [pc, #36]	; (800c2ac <siprintf+0x38>)
 800c286:	9107      	str	r1, [sp, #28]
 800c288:	9104      	str	r1, [sp, #16]
 800c28a:	4909      	ldr	r1, [pc, #36]	; (800c2b0 <siprintf+0x3c>)
 800c28c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c290:	9105      	str	r1, [sp, #20]
 800c292:	6800      	ldr	r0, [r0, #0]
 800c294:	9301      	str	r3, [sp, #4]
 800c296:	a902      	add	r1, sp, #8
 800c298:	f000 f91a 	bl	800c4d0 <_svfiprintf_r>
 800c29c:	9b02      	ldr	r3, [sp, #8]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	701a      	strb	r2, [r3, #0]
 800c2a2:	b01c      	add	sp, #112	; 0x70
 800c2a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2a8:	b003      	add	sp, #12
 800c2aa:	4770      	bx	lr
 800c2ac:	200004cc 	.word	0x200004cc
 800c2b0:	ffff0208 	.word	0xffff0208

0800c2b4 <memset>:
 800c2b4:	4402      	add	r2, r0
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d100      	bne.n	800c2be <memset+0xa>
 800c2bc:	4770      	bx	lr
 800c2be:	f803 1b01 	strb.w	r1, [r3], #1
 800c2c2:	e7f9      	b.n	800c2b8 <memset+0x4>

0800c2c4 <strstr>:
 800c2c4:	780a      	ldrb	r2, [r1, #0]
 800c2c6:	b570      	push	{r4, r5, r6, lr}
 800c2c8:	b96a      	cbnz	r2, 800c2e6 <strstr+0x22>
 800c2ca:	bd70      	pop	{r4, r5, r6, pc}
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d109      	bne.n	800c2e4 <strstr+0x20>
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d0f6      	beq.n	800c2ca <strstr+0x6>
 800c2dc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c2e0:	429e      	cmp	r6, r3
 800c2e2:	d0f7      	beq.n	800c2d4 <strstr+0x10>
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	7803      	ldrb	r3, [r0, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1ef      	bne.n	800c2cc <strstr+0x8>
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	e7ec      	b.n	800c2ca <strstr+0x6>

0800c2f0 <_sbrk_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d06      	ldr	r5, [pc, #24]	; (800c30c <_sbrk_r+0x1c>)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	4608      	mov	r0, r1
 800c2fa:	602b      	str	r3, [r5, #0]
 800c2fc:	f7f5 fd40 	bl	8001d80 <_sbrk>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_sbrk_r+0x1a>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_sbrk_r+0x1a>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	20001908 	.word	0x20001908

0800c310 <__errno>:
 800c310:	4b01      	ldr	r3, [pc, #4]	; (800c318 <__errno+0x8>)
 800c312:	6818      	ldr	r0, [r3, #0]
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	200004cc 	.word	0x200004cc

0800c31c <__libc_init_array>:
 800c31c:	b570      	push	{r4, r5, r6, lr}
 800c31e:	4d0d      	ldr	r5, [pc, #52]	; (800c354 <__libc_init_array+0x38>)
 800c320:	4c0d      	ldr	r4, [pc, #52]	; (800c358 <__libc_init_array+0x3c>)
 800c322:	1b64      	subs	r4, r4, r5
 800c324:	10a4      	asrs	r4, r4, #2
 800c326:	2600      	movs	r6, #0
 800c328:	42a6      	cmp	r6, r4
 800c32a:	d109      	bne.n	800c340 <__libc_init_array+0x24>
 800c32c:	4d0b      	ldr	r5, [pc, #44]	; (800c35c <__libc_init_array+0x40>)
 800c32e:	4c0c      	ldr	r4, [pc, #48]	; (800c360 <__libc_init_array+0x44>)
 800c330:	f000 fbae 	bl	800ca90 <_init>
 800c334:	1b64      	subs	r4, r4, r5
 800c336:	10a4      	asrs	r4, r4, #2
 800c338:	2600      	movs	r6, #0
 800c33a:	42a6      	cmp	r6, r4
 800c33c:	d105      	bne.n	800c34a <__libc_init_array+0x2e>
 800c33e:	bd70      	pop	{r4, r5, r6, pc}
 800c340:	f855 3b04 	ldr.w	r3, [r5], #4
 800c344:	4798      	blx	r3
 800c346:	3601      	adds	r6, #1
 800c348:	e7ee      	b.n	800c328 <__libc_init_array+0xc>
 800c34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c34e:	4798      	blx	r3
 800c350:	3601      	adds	r6, #1
 800c352:	e7f2      	b.n	800c33a <__libc_init_array+0x1e>
 800c354:	0800cefc 	.word	0x0800cefc
 800c358:	0800cefc 	.word	0x0800cefc
 800c35c:	0800cefc 	.word	0x0800cefc
 800c360:	0800cf00 	.word	0x0800cf00

0800c364 <__retarget_lock_acquire_recursive>:
 800c364:	4770      	bx	lr

0800c366 <__retarget_lock_release_recursive>:
 800c366:	4770      	bx	lr

0800c368 <memcpy>:
 800c368:	440a      	add	r2, r1
 800c36a:	4291      	cmp	r1, r2
 800c36c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c370:	d100      	bne.n	800c374 <memcpy+0xc>
 800c372:	4770      	bx	lr
 800c374:	b510      	push	{r4, lr}
 800c376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c37a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c37e:	4291      	cmp	r1, r2
 800c380:	d1f9      	bne.n	800c376 <memcpy+0xe>
 800c382:	bd10      	pop	{r4, pc}

0800c384 <_free_r>:
 800c384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c386:	2900      	cmp	r1, #0
 800c388:	d044      	beq.n	800c414 <_free_r+0x90>
 800c38a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c38e:	9001      	str	r0, [sp, #4]
 800c390:	2b00      	cmp	r3, #0
 800c392:	f1a1 0404 	sub.w	r4, r1, #4
 800c396:	bfb8      	it	lt
 800c398:	18e4      	addlt	r4, r4, r3
 800c39a:	f7ff ff5f 	bl	800c25c <__malloc_lock>
 800c39e:	4a1e      	ldr	r2, [pc, #120]	; (800c418 <_free_r+0x94>)
 800c3a0:	9801      	ldr	r0, [sp, #4]
 800c3a2:	6813      	ldr	r3, [r2, #0]
 800c3a4:	b933      	cbnz	r3, 800c3b4 <_free_r+0x30>
 800c3a6:	6063      	str	r3, [r4, #4]
 800c3a8:	6014      	str	r4, [r2, #0]
 800c3aa:	b003      	add	sp, #12
 800c3ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3b0:	f7ff bf5a 	b.w	800c268 <__malloc_unlock>
 800c3b4:	42a3      	cmp	r3, r4
 800c3b6:	d908      	bls.n	800c3ca <_free_r+0x46>
 800c3b8:	6825      	ldr	r5, [r4, #0]
 800c3ba:	1961      	adds	r1, r4, r5
 800c3bc:	428b      	cmp	r3, r1
 800c3be:	bf01      	itttt	eq
 800c3c0:	6819      	ldreq	r1, [r3, #0]
 800c3c2:	685b      	ldreq	r3, [r3, #4]
 800c3c4:	1949      	addeq	r1, r1, r5
 800c3c6:	6021      	streq	r1, [r4, #0]
 800c3c8:	e7ed      	b.n	800c3a6 <_free_r+0x22>
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	b10b      	cbz	r3, 800c3d4 <_free_r+0x50>
 800c3d0:	42a3      	cmp	r3, r4
 800c3d2:	d9fa      	bls.n	800c3ca <_free_r+0x46>
 800c3d4:	6811      	ldr	r1, [r2, #0]
 800c3d6:	1855      	adds	r5, r2, r1
 800c3d8:	42a5      	cmp	r5, r4
 800c3da:	d10b      	bne.n	800c3f4 <_free_r+0x70>
 800c3dc:	6824      	ldr	r4, [r4, #0]
 800c3de:	4421      	add	r1, r4
 800c3e0:	1854      	adds	r4, r2, r1
 800c3e2:	42a3      	cmp	r3, r4
 800c3e4:	6011      	str	r1, [r2, #0]
 800c3e6:	d1e0      	bne.n	800c3aa <_free_r+0x26>
 800c3e8:	681c      	ldr	r4, [r3, #0]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	6053      	str	r3, [r2, #4]
 800c3ee:	440c      	add	r4, r1
 800c3f0:	6014      	str	r4, [r2, #0]
 800c3f2:	e7da      	b.n	800c3aa <_free_r+0x26>
 800c3f4:	d902      	bls.n	800c3fc <_free_r+0x78>
 800c3f6:	230c      	movs	r3, #12
 800c3f8:	6003      	str	r3, [r0, #0]
 800c3fa:	e7d6      	b.n	800c3aa <_free_r+0x26>
 800c3fc:	6825      	ldr	r5, [r4, #0]
 800c3fe:	1961      	adds	r1, r4, r5
 800c400:	428b      	cmp	r3, r1
 800c402:	bf04      	itt	eq
 800c404:	6819      	ldreq	r1, [r3, #0]
 800c406:	685b      	ldreq	r3, [r3, #4]
 800c408:	6063      	str	r3, [r4, #4]
 800c40a:	bf04      	itt	eq
 800c40c:	1949      	addeq	r1, r1, r5
 800c40e:	6021      	streq	r1, [r4, #0]
 800c410:	6054      	str	r4, [r2, #4]
 800c412:	e7ca      	b.n	800c3aa <_free_r+0x26>
 800c414:	b003      	add	sp, #12
 800c416:	bd30      	pop	{r4, r5, pc}
 800c418:	200017c8 	.word	0x200017c8

0800c41c <__ssputs_r>:
 800c41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c420:	688e      	ldr	r6, [r1, #8]
 800c422:	461f      	mov	r7, r3
 800c424:	42be      	cmp	r6, r7
 800c426:	680b      	ldr	r3, [r1, #0]
 800c428:	4682      	mov	sl, r0
 800c42a:	460c      	mov	r4, r1
 800c42c:	4690      	mov	r8, r2
 800c42e:	d82c      	bhi.n	800c48a <__ssputs_r+0x6e>
 800c430:	898a      	ldrh	r2, [r1, #12]
 800c432:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c436:	d026      	beq.n	800c486 <__ssputs_r+0x6a>
 800c438:	6965      	ldr	r5, [r4, #20]
 800c43a:	6909      	ldr	r1, [r1, #16]
 800c43c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c440:	eba3 0901 	sub.w	r9, r3, r1
 800c444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c448:	1c7b      	adds	r3, r7, #1
 800c44a:	444b      	add	r3, r9
 800c44c:	106d      	asrs	r5, r5, #1
 800c44e:	429d      	cmp	r5, r3
 800c450:	bf38      	it	cc
 800c452:	461d      	movcc	r5, r3
 800c454:	0553      	lsls	r3, r2, #21
 800c456:	d527      	bpl.n	800c4a8 <__ssputs_r+0x8c>
 800c458:	4629      	mov	r1, r5
 800c45a:	f7ff fe7f 	bl	800c15c <_malloc_r>
 800c45e:	4606      	mov	r6, r0
 800c460:	b360      	cbz	r0, 800c4bc <__ssputs_r+0xa0>
 800c462:	6921      	ldr	r1, [r4, #16]
 800c464:	464a      	mov	r2, r9
 800c466:	f7ff ff7f 	bl	800c368 <memcpy>
 800c46a:	89a3      	ldrh	r3, [r4, #12]
 800c46c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c474:	81a3      	strh	r3, [r4, #12]
 800c476:	6126      	str	r6, [r4, #16]
 800c478:	6165      	str	r5, [r4, #20]
 800c47a:	444e      	add	r6, r9
 800c47c:	eba5 0509 	sub.w	r5, r5, r9
 800c480:	6026      	str	r6, [r4, #0]
 800c482:	60a5      	str	r5, [r4, #8]
 800c484:	463e      	mov	r6, r7
 800c486:	42be      	cmp	r6, r7
 800c488:	d900      	bls.n	800c48c <__ssputs_r+0x70>
 800c48a:	463e      	mov	r6, r7
 800c48c:	6820      	ldr	r0, [r4, #0]
 800c48e:	4632      	mov	r2, r6
 800c490:	4641      	mov	r1, r8
 800c492:	f000 faab 	bl	800c9ec <memmove>
 800c496:	68a3      	ldr	r3, [r4, #8]
 800c498:	1b9b      	subs	r3, r3, r6
 800c49a:	60a3      	str	r3, [r4, #8]
 800c49c:	6823      	ldr	r3, [r4, #0]
 800c49e:	4433      	add	r3, r6
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	2000      	movs	r0, #0
 800c4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4a8:	462a      	mov	r2, r5
 800c4aa:	f000 fab9 	bl	800ca20 <_realloc_r>
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d1e0      	bne.n	800c476 <__ssputs_r+0x5a>
 800c4b4:	6921      	ldr	r1, [r4, #16]
 800c4b6:	4650      	mov	r0, sl
 800c4b8:	f7ff ff64 	bl	800c384 <_free_r>
 800c4bc:	230c      	movs	r3, #12
 800c4be:	f8ca 3000 	str.w	r3, [sl]
 800c4c2:	89a3      	ldrh	r3, [r4, #12]
 800c4c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4c8:	81a3      	strh	r3, [r4, #12]
 800c4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ce:	e7e9      	b.n	800c4a4 <__ssputs_r+0x88>

0800c4d0 <_svfiprintf_r>:
 800c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d4:	4698      	mov	r8, r3
 800c4d6:	898b      	ldrh	r3, [r1, #12]
 800c4d8:	061b      	lsls	r3, r3, #24
 800c4da:	b09d      	sub	sp, #116	; 0x74
 800c4dc:	4607      	mov	r7, r0
 800c4de:	460d      	mov	r5, r1
 800c4e0:	4614      	mov	r4, r2
 800c4e2:	d50e      	bpl.n	800c502 <_svfiprintf_r+0x32>
 800c4e4:	690b      	ldr	r3, [r1, #16]
 800c4e6:	b963      	cbnz	r3, 800c502 <_svfiprintf_r+0x32>
 800c4e8:	2140      	movs	r1, #64	; 0x40
 800c4ea:	f7ff fe37 	bl	800c15c <_malloc_r>
 800c4ee:	6028      	str	r0, [r5, #0]
 800c4f0:	6128      	str	r0, [r5, #16]
 800c4f2:	b920      	cbnz	r0, 800c4fe <_svfiprintf_r+0x2e>
 800c4f4:	230c      	movs	r3, #12
 800c4f6:	603b      	str	r3, [r7, #0]
 800c4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fc:	e0d0      	b.n	800c6a0 <_svfiprintf_r+0x1d0>
 800c4fe:	2340      	movs	r3, #64	; 0x40
 800c500:	616b      	str	r3, [r5, #20]
 800c502:	2300      	movs	r3, #0
 800c504:	9309      	str	r3, [sp, #36]	; 0x24
 800c506:	2320      	movs	r3, #32
 800c508:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c50c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c510:	2330      	movs	r3, #48	; 0x30
 800c512:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c6b8 <_svfiprintf_r+0x1e8>
 800c516:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c51a:	f04f 0901 	mov.w	r9, #1
 800c51e:	4623      	mov	r3, r4
 800c520:	469a      	mov	sl, r3
 800c522:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c526:	b10a      	cbz	r2, 800c52c <_svfiprintf_r+0x5c>
 800c528:	2a25      	cmp	r2, #37	; 0x25
 800c52a:	d1f9      	bne.n	800c520 <_svfiprintf_r+0x50>
 800c52c:	ebba 0b04 	subs.w	fp, sl, r4
 800c530:	d00b      	beq.n	800c54a <_svfiprintf_r+0x7a>
 800c532:	465b      	mov	r3, fp
 800c534:	4622      	mov	r2, r4
 800c536:	4629      	mov	r1, r5
 800c538:	4638      	mov	r0, r7
 800c53a:	f7ff ff6f 	bl	800c41c <__ssputs_r>
 800c53e:	3001      	adds	r0, #1
 800c540:	f000 80a9 	beq.w	800c696 <_svfiprintf_r+0x1c6>
 800c544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c546:	445a      	add	r2, fp
 800c548:	9209      	str	r2, [sp, #36]	; 0x24
 800c54a:	f89a 3000 	ldrb.w	r3, [sl]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f000 80a1 	beq.w	800c696 <_svfiprintf_r+0x1c6>
 800c554:	2300      	movs	r3, #0
 800c556:	f04f 32ff 	mov.w	r2, #4294967295
 800c55a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c55e:	f10a 0a01 	add.w	sl, sl, #1
 800c562:	9304      	str	r3, [sp, #16]
 800c564:	9307      	str	r3, [sp, #28]
 800c566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c56a:	931a      	str	r3, [sp, #104]	; 0x68
 800c56c:	4654      	mov	r4, sl
 800c56e:	2205      	movs	r2, #5
 800c570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c574:	4850      	ldr	r0, [pc, #320]	; (800c6b8 <_svfiprintf_r+0x1e8>)
 800c576:	f7f3 fe6b 	bl	8000250 <memchr>
 800c57a:	9a04      	ldr	r2, [sp, #16]
 800c57c:	b9d8      	cbnz	r0, 800c5b6 <_svfiprintf_r+0xe6>
 800c57e:	06d0      	lsls	r0, r2, #27
 800c580:	bf44      	itt	mi
 800c582:	2320      	movmi	r3, #32
 800c584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c588:	0711      	lsls	r1, r2, #28
 800c58a:	bf44      	itt	mi
 800c58c:	232b      	movmi	r3, #43	; 0x2b
 800c58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c592:	f89a 3000 	ldrb.w	r3, [sl]
 800c596:	2b2a      	cmp	r3, #42	; 0x2a
 800c598:	d015      	beq.n	800c5c6 <_svfiprintf_r+0xf6>
 800c59a:	9a07      	ldr	r2, [sp, #28]
 800c59c:	4654      	mov	r4, sl
 800c59e:	2000      	movs	r0, #0
 800c5a0:	f04f 0c0a 	mov.w	ip, #10
 800c5a4:	4621      	mov	r1, r4
 800c5a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5aa:	3b30      	subs	r3, #48	; 0x30
 800c5ac:	2b09      	cmp	r3, #9
 800c5ae:	d94d      	bls.n	800c64c <_svfiprintf_r+0x17c>
 800c5b0:	b1b0      	cbz	r0, 800c5e0 <_svfiprintf_r+0x110>
 800c5b2:	9207      	str	r2, [sp, #28]
 800c5b4:	e014      	b.n	800c5e0 <_svfiprintf_r+0x110>
 800c5b6:	eba0 0308 	sub.w	r3, r0, r8
 800c5ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	9304      	str	r3, [sp, #16]
 800c5c2:	46a2      	mov	sl, r4
 800c5c4:	e7d2      	b.n	800c56c <_svfiprintf_r+0x9c>
 800c5c6:	9b03      	ldr	r3, [sp, #12]
 800c5c8:	1d19      	adds	r1, r3, #4
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	9103      	str	r1, [sp, #12]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	bfbb      	ittet	lt
 800c5d2:	425b      	neglt	r3, r3
 800c5d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c5d8:	9307      	strge	r3, [sp, #28]
 800c5da:	9307      	strlt	r3, [sp, #28]
 800c5dc:	bfb8      	it	lt
 800c5de:	9204      	strlt	r2, [sp, #16]
 800c5e0:	7823      	ldrb	r3, [r4, #0]
 800c5e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c5e4:	d10c      	bne.n	800c600 <_svfiprintf_r+0x130>
 800c5e6:	7863      	ldrb	r3, [r4, #1]
 800c5e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c5ea:	d134      	bne.n	800c656 <_svfiprintf_r+0x186>
 800c5ec:	9b03      	ldr	r3, [sp, #12]
 800c5ee:	1d1a      	adds	r2, r3, #4
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	9203      	str	r2, [sp, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	bfb8      	it	lt
 800c5f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5fc:	3402      	adds	r4, #2
 800c5fe:	9305      	str	r3, [sp, #20]
 800c600:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c6c8 <_svfiprintf_r+0x1f8>
 800c604:	7821      	ldrb	r1, [r4, #0]
 800c606:	2203      	movs	r2, #3
 800c608:	4650      	mov	r0, sl
 800c60a:	f7f3 fe21 	bl	8000250 <memchr>
 800c60e:	b138      	cbz	r0, 800c620 <_svfiprintf_r+0x150>
 800c610:	9b04      	ldr	r3, [sp, #16]
 800c612:	eba0 000a 	sub.w	r0, r0, sl
 800c616:	2240      	movs	r2, #64	; 0x40
 800c618:	4082      	lsls	r2, r0
 800c61a:	4313      	orrs	r3, r2
 800c61c:	3401      	adds	r4, #1
 800c61e:	9304      	str	r3, [sp, #16]
 800c620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c624:	4825      	ldr	r0, [pc, #148]	; (800c6bc <_svfiprintf_r+0x1ec>)
 800c626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c62a:	2206      	movs	r2, #6
 800c62c:	f7f3 fe10 	bl	8000250 <memchr>
 800c630:	2800      	cmp	r0, #0
 800c632:	d038      	beq.n	800c6a6 <_svfiprintf_r+0x1d6>
 800c634:	4b22      	ldr	r3, [pc, #136]	; (800c6c0 <_svfiprintf_r+0x1f0>)
 800c636:	bb1b      	cbnz	r3, 800c680 <_svfiprintf_r+0x1b0>
 800c638:	9b03      	ldr	r3, [sp, #12]
 800c63a:	3307      	adds	r3, #7
 800c63c:	f023 0307 	bic.w	r3, r3, #7
 800c640:	3308      	adds	r3, #8
 800c642:	9303      	str	r3, [sp, #12]
 800c644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c646:	4433      	add	r3, r6
 800c648:	9309      	str	r3, [sp, #36]	; 0x24
 800c64a:	e768      	b.n	800c51e <_svfiprintf_r+0x4e>
 800c64c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c650:	460c      	mov	r4, r1
 800c652:	2001      	movs	r0, #1
 800c654:	e7a6      	b.n	800c5a4 <_svfiprintf_r+0xd4>
 800c656:	2300      	movs	r3, #0
 800c658:	3401      	adds	r4, #1
 800c65a:	9305      	str	r3, [sp, #20]
 800c65c:	4619      	mov	r1, r3
 800c65e:	f04f 0c0a 	mov.w	ip, #10
 800c662:	4620      	mov	r0, r4
 800c664:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c668:	3a30      	subs	r2, #48	; 0x30
 800c66a:	2a09      	cmp	r2, #9
 800c66c:	d903      	bls.n	800c676 <_svfiprintf_r+0x1a6>
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d0c6      	beq.n	800c600 <_svfiprintf_r+0x130>
 800c672:	9105      	str	r1, [sp, #20]
 800c674:	e7c4      	b.n	800c600 <_svfiprintf_r+0x130>
 800c676:	fb0c 2101 	mla	r1, ip, r1, r2
 800c67a:	4604      	mov	r4, r0
 800c67c:	2301      	movs	r3, #1
 800c67e:	e7f0      	b.n	800c662 <_svfiprintf_r+0x192>
 800c680:	ab03      	add	r3, sp, #12
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	462a      	mov	r2, r5
 800c686:	4b0f      	ldr	r3, [pc, #60]	; (800c6c4 <_svfiprintf_r+0x1f4>)
 800c688:	a904      	add	r1, sp, #16
 800c68a:	4638      	mov	r0, r7
 800c68c:	f3af 8000 	nop.w
 800c690:	1c42      	adds	r2, r0, #1
 800c692:	4606      	mov	r6, r0
 800c694:	d1d6      	bne.n	800c644 <_svfiprintf_r+0x174>
 800c696:	89ab      	ldrh	r3, [r5, #12]
 800c698:	065b      	lsls	r3, r3, #25
 800c69a:	f53f af2d 	bmi.w	800c4f8 <_svfiprintf_r+0x28>
 800c69e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6a0:	b01d      	add	sp, #116	; 0x74
 800c6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a6:	ab03      	add	r3, sp, #12
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	462a      	mov	r2, r5
 800c6ac:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <_svfiprintf_r+0x1f4>)
 800c6ae:	a904      	add	r1, sp, #16
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	f000 f879 	bl	800c7a8 <_printf_i>
 800c6b6:	e7eb      	b.n	800c690 <_svfiprintf_r+0x1c0>
 800c6b8:	0800cec0 	.word	0x0800cec0
 800c6bc:	0800ceca 	.word	0x0800ceca
 800c6c0:	00000000 	.word	0x00000000
 800c6c4:	0800c41d 	.word	0x0800c41d
 800c6c8:	0800cec6 	.word	0x0800cec6

0800c6cc <_printf_common>:
 800c6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d0:	4616      	mov	r6, r2
 800c6d2:	4699      	mov	r9, r3
 800c6d4:	688a      	ldr	r2, [r1, #8]
 800c6d6:	690b      	ldr	r3, [r1, #16]
 800c6d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	bfb8      	it	lt
 800c6e0:	4613      	movlt	r3, r2
 800c6e2:	6033      	str	r3, [r6, #0]
 800c6e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c6e8:	4607      	mov	r7, r0
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	b10a      	cbz	r2, 800c6f2 <_printf_common+0x26>
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	6033      	str	r3, [r6, #0]
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	0699      	lsls	r1, r3, #26
 800c6f6:	bf42      	ittt	mi
 800c6f8:	6833      	ldrmi	r3, [r6, #0]
 800c6fa:	3302      	addmi	r3, #2
 800c6fc:	6033      	strmi	r3, [r6, #0]
 800c6fe:	6825      	ldr	r5, [r4, #0]
 800c700:	f015 0506 	ands.w	r5, r5, #6
 800c704:	d106      	bne.n	800c714 <_printf_common+0x48>
 800c706:	f104 0a19 	add.w	sl, r4, #25
 800c70a:	68e3      	ldr	r3, [r4, #12]
 800c70c:	6832      	ldr	r2, [r6, #0]
 800c70e:	1a9b      	subs	r3, r3, r2
 800c710:	42ab      	cmp	r3, r5
 800c712:	dc26      	bgt.n	800c762 <_printf_common+0x96>
 800c714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c718:	1e13      	subs	r3, r2, #0
 800c71a:	6822      	ldr	r2, [r4, #0]
 800c71c:	bf18      	it	ne
 800c71e:	2301      	movne	r3, #1
 800c720:	0692      	lsls	r2, r2, #26
 800c722:	d42b      	bmi.n	800c77c <_printf_common+0xb0>
 800c724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c728:	4649      	mov	r1, r9
 800c72a:	4638      	mov	r0, r7
 800c72c:	47c0      	blx	r8
 800c72e:	3001      	adds	r0, #1
 800c730:	d01e      	beq.n	800c770 <_printf_common+0xa4>
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	6922      	ldr	r2, [r4, #16]
 800c736:	f003 0306 	and.w	r3, r3, #6
 800c73a:	2b04      	cmp	r3, #4
 800c73c:	bf02      	ittt	eq
 800c73e:	68e5      	ldreq	r5, [r4, #12]
 800c740:	6833      	ldreq	r3, [r6, #0]
 800c742:	1aed      	subeq	r5, r5, r3
 800c744:	68a3      	ldr	r3, [r4, #8]
 800c746:	bf0c      	ite	eq
 800c748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c74c:	2500      	movne	r5, #0
 800c74e:	4293      	cmp	r3, r2
 800c750:	bfc4      	itt	gt
 800c752:	1a9b      	subgt	r3, r3, r2
 800c754:	18ed      	addgt	r5, r5, r3
 800c756:	2600      	movs	r6, #0
 800c758:	341a      	adds	r4, #26
 800c75a:	42b5      	cmp	r5, r6
 800c75c:	d11a      	bne.n	800c794 <_printf_common+0xc8>
 800c75e:	2000      	movs	r0, #0
 800c760:	e008      	b.n	800c774 <_printf_common+0xa8>
 800c762:	2301      	movs	r3, #1
 800c764:	4652      	mov	r2, sl
 800c766:	4649      	mov	r1, r9
 800c768:	4638      	mov	r0, r7
 800c76a:	47c0      	blx	r8
 800c76c:	3001      	adds	r0, #1
 800c76e:	d103      	bne.n	800c778 <_printf_common+0xac>
 800c770:	f04f 30ff 	mov.w	r0, #4294967295
 800c774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c778:	3501      	adds	r5, #1
 800c77a:	e7c6      	b.n	800c70a <_printf_common+0x3e>
 800c77c:	18e1      	adds	r1, r4, r3
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	2030      	movs	r0, #48	; 0x30
 800c782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c786:	4422      	add	r2, r4
 800c788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c78c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c790:	3302      	adds	r3, #2
 800c792:	e7c7      	b.n	800c724 <_printf_common+0x58>
 800c794:	2301      	movs	r3, #1
 800c796:	4622      	mov	r2, r4
 800c798:	4649      	mov	r1, r9
 800c79a:	4638      	mov	r0, r7
 800c79c:	47c0      	blx	r8
 800c79e:	3001      	adds	r0, #1
 800c7a0:	d0e6      	beq.n	800c770 <_printf_common+0xa4>
 800c7a2:	3601      	adds	r6, #1
 800c7a4:	e7d9      	b.n	800c75a <_printf_common+0x8e>
	...

0800c7a8 <_printf_i>:
 800c7a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ac:	7e0f      	ldrb	r7, [r1, #24]
 800c7ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c7b0:	2f78      	cmp	r7, #120	; 0x78
 800c7b2:	4691      	mov	r9, r2
 800c7b4:	4680      	mov	r8, r0
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	469a      	mov	sl, r3
 800c7ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c7be:	d807      	bhi.n	800c7d0 <_printf_i+0x28>
 800c7c0:	2f62      	cmp	r7, #98	; 0x62
 800c7c2:	d80a      	bhi.n	800c7da <_printf_i+0x32>
 800c7c4:	2f00      	cmp	r7, #0
 800c7c6:	f000 80d4 	beq.w	800c972 <_printf_i+0x1ca>
 800c7ca:	2f58      	cmp	r7, #88	; 0x58
 800c7cc:	f000 80c0 	beq.w	800c950 <_printf_i+0x1a8>
 800c7d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c7d8:	e03a      	b.n	800c850 <_printf_i+0xa8>
 800c7da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c7de:	2b15      	cmp	r3, #21
 800c7e0:	d8f6      	bhi.n	800c7d0 <_printf_i+0x28>
 800c7e2:	a101      	add	r1, pc, #4	; (adr r1, 800c7e8 <_printf_i+0x40>)
 800c7e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7e8:	0800c841 	.word	0x0800c841
 800c7ec:	0800c855 	.word	0x0800c855
 800c7f0:	0800c7d1 	.word	0x0800c7d1
 800c7f4:	0800c7d1 	.word	0x0800c7d1
 800c7f8:	0800c7d1 	.word	0x0800c7d1
 800c7fc:	0800c7d1 	.word	0x0800c7d1
 800c800:	0800c855 	.word	0x0800c855
 800c804:	0800c7d1 	.word	0x0800c7d1
 800c808:	0800c7d1 	.word	0x0800c7d1
 800c80c:	0800c7d1 	.word	0x0800c7d1
 800c810:	0800c7d1 	.word	0x0800c7d1
 800c814:	0800c959 	.word	0x0800c959
 800c818:	0800c881 	.word	0x0800c881
 800c81c:	0800c913 	.word	0x0800c913
 800c820:	0800c7d1 	.word	0x0800c7d1
 800c824:	0800c7d1 	.word	0x0800c7d1
 800c828:	0800c97b 	.word	0x0800c97b
 800c82c:	0800c7d1 	.word	0x0800c7d1
 800c830:	0800c881 	.word	0x0800c881
 800c834:	0800c7d1 	.word	0x0800c7d1
 800c838:	0800c7d1 	.word	0x0800c7d1
 800c83c:	0800c91b 	.word	0x0800c91b
 800c840:	682b      	ldr	r3, [r5, #0]
 800c842:	1d1a      	adds	r2, r3, #4
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	602a      	str	r2, [r5, #0]
 800c848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c84c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c850:	2301      	movs	r3, #1
 800c852:	e09f      	b.n	800c994 <_printf_i+0x1ec>
 800c854:	6820      	ldr	r0, [r4, #0]
 800c856:	682b      	ldr	r3, [r5, #0]
 800c858:	0607      	lsls	r7, r0, #24
 800c85a:	f103 0104 	add.w	r1, r3, #4
 800c85e:	6029      	str	r1, [r5, #0]
 800c860:	d501      	bpl.n	800c866 <_printf_i+0xbe>
 800c862:	681e      	ldr	r6, [r3, #0]
 800c864:	e003      	b.n	800c86e <_printf_i+0xc6>
 800c866:	0646      	lsls	r6, r0, #25
 800c868:	d5fb      	bpl.n	800c862 <_printf_i+0xba>
 800c86a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c86e:	2e00      	cmp	r6, #0
 800c870:	da03      	bge.n	800c87a <_printf_i+0xd2>
 800c872:	232d      	movs	r3, #45	; 0x2d
 800c874:	4276      	negs	r6, r6
 800c876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c87a:	485a      	ldr	r0, [pc, #360]	; (800c9e4 <_printf_i+0x23c>)
 800c87c:	230a      	movs	r3, #10
 800c87e:	e012      	b.n	800c8a6 <_printf_i+0xfe>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	6820      	ldr	r0, [r4, #0]
 800c884:	1d19      	adds	r1, r3, #4
 800c886:	6029      	str	r1, [r5, #0]
 800c888:	0605      	lsls	r5, r0, #24
 800c88a:	d501      	bpl.n	800c890 <_printf_i+0xe8>
 800c88c:	681e      	ldr	r6, [r3, #0]
 800c88e:	e002      	b.n	800c896 <_printf_i+0xee>
 800c890:	0641      	lsls	r1, r0, #25
 800c892:	d5fb      	bpl.n	800c88c <_printf_i+0xe4>
 800c894:	881e      	ldrh	r6, [r3, #0]
 800c896:	4853      	ldr	r0, [pc, #332]	; (800c9e4 <_printf_i+0x23c>)
 800c898:	2f6f      	cmp	r7, #111	; 0x6f
 800c89a:	bf0c      	ite	eq
 800c89c:	2308      	moveq	r3, #8
 800c89e:	230a      	movne	r3, #10
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8a6:	6865      	ldr	r5, [r4, #4]
 800c8a8:	60a5      	str	r5, [r4, #8]
 800c8aa:	2d00      	cmp	r5, #0
 800c8ac:	bfa2      	ittt	ge
 800c8ae:	6821      	ldrge	r1, [r4, #0]
 800c8b0:	f021 0104 	bicge.w	r1, r1, #4
 800c8b4:	6021      	strge	r1, [r4, #0]
 800c8b6:	b90e      	cbnz	r6, 800c8bc <_printf_i+0x114>
 800c8b8:	2d00      	cmp	r5, #0
 800c8ba:	d04b      	beq.n	800c954 <_printf_i+0x1ac>
 800c8bc:	4615      	mov	r5, r2
 800c8be:	fbb6 f1f3 	udiv	r1, r6, r3
 800c8c2:	fb03 6711 	mls	r7, r3, r1, r6
 800c8c6:	5dc7      	ldrb	r7, [r0, r7]
 800c8c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c8cc:	4637      	mov	r7, r6
 800c8ce:	42bb      	cmp	r3, r7
 800c8d0:	460e      	mov	r6, r1
 800c8d2:	d9f4      	bls.n	800c8be <_printf_i+0x116>
 800c8d4:	2b08      	cmp	r3, #8
 800c8d6:	d10b      	bne.n	800c8f0 <_printf_i+0x148>
 800c8d8:	6823      	ldr	r3, [r4, #0]
 800c8da:	07de      	lsls	r6, r3, #31
 800c8dc:	d508      	bpl.n	800c8f0 <_printf_i+0x148>
 800c8de:	6923      	ldr	r3, [r4, #16]
 800c8e0:	6861      	ldr	r1, [r4, #4]
 800c8e2:	4299      	cmp	r1, r3
 800c8e4:	bfde      	ittt	le
 800c8e6:	2330      	movle	r3, #48	; 0x30
 800c8e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c8ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c8f0:	1b52      	subs	r2, r2, r5
 800c8f2:	6122      	str	r2, [r4, #16]
 800c8f4:	f8cd a000 	str.w	sl, [sp]
 800c8f8:	464b      	mov	r3, r9
 800c8fa:	aa03      	add	r2, sp, #12
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	4640      	mov	r0, r8
 800c900:	f7ff fee4 	bl	800c6cc <_printf_common>
 800c904:	3001      	adds	r0, #1
 800c906:	d14a      	bne.n	800c99e <_printf_i+0x1f6>
 800c908:	f04f 30ff 	mov.w	r0, #4294967295
 800c90c:	b004      	add	sp, #16
 800c90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c912:	6823      	ldr	r3, [r4, #0]
 800c914:	f043 0320 	orr.w	r3, r3, #32
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	4833      	ldr	r0, [pc, #204]	; (800c9e8 <_printf_i+0x240>)
 800c91c:	2778      	movs	r7, #120	; 0x78
 800c91e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c922:	6823      	ldr	r3, [r4, #0]
 800c924:	6829      	ldr	r1, [r5, #0]
 800c926:	061f      	lsls	r7, r3, #24
 800c928:	f851 6b04 	ldr.w	r6, [r1], #4
 800c92c:	d402      	bmi.n	800c934 <_printf_i+0x18c>
 800c92e:	065f      	lsls	r7, r3, #25
 800c930:	bf48      	it	mi
 800c932:	b2b6      	uxthmi	r6, r6
 800c934:	07df      	lsls	r7, r3, #31
 800c936:	bf48      	it	mi
 800c938:	f043 0320 	orrmi.w	r3, r3, #32
 800c93c:	6029      	str	r1, [r5, #0]
 800c93e:	bf48      	it	mi
 800c940:	6023      	strmi	r3, [r4, #0]
 800c942:	b91e      	cbnz	r6, 800c94c <_printf_i+0x1a4>
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	f023 0320 	bic.w	r3, r3, #32
 800c94a:	6023      	str	r3, [r4, #0]
 800c94c:	2310      	movs	r3, #16
 800c94e:	e7a7      	b.n	800c8a0 <_printf_i+0xf8>
 800c950:	4824      	ldr	r0, [pc, #144]	; (800c9e4 <_printf_i+0x23c>)
 800c952:	e7e4      	b.n	800c91e <_printf_i+0x176>
 800c954:	4615      	mov	r5, r2
 800c956:	e7bd      	b.n	800c8d4 <_printf_i+0x12c>
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	6826      	ldr	r6, [r4, #0]
 800c95c:	6961      	ldr	r1, [r4, #20]
 800c95e:	1d18      	adds	r0, r3, #4
 800c960:	6028      	str	r0, [r5, #0]
 800c962:	0635      	lsls	r5, r6, #24
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	d501      	bpl.n	800c96c <_printf_i+0x1c4>
 800c968:	6019      	str	r1, [r3, #0]
 800c96a:	e002      	b.n	800c972 <_printf_i+0x1ca>
 800c96c:	0670      	lsls	r0, r6, #25
 800c96e:	d5fb      	bpl.n	800c968 <_printf_i+0x1c0>
 800c970:	8019      	strh	r1, [r3, #0]
 800c972:	2300      	movs	r3, #0
 800c974:	6123      	str	r3, [r4, #16]
 800c976:	4615      	mov	r5, r2
 800c978:	e7bc      	b.n	800c8f4 <_printf_i+0x14c>
 800c97a:	682b      	ldr	r3, [r5, #0]
 800c97c:	1d1a      	adds	r2, r3, #4
 800c97e:	602a      	str	r2, [r5, #0]
 800c980:	681d      	ldr	r5, [r3, #0]
 800c982:	6862      	ldr	r2, [r4, #4]
 800c984:	2100      	movs	r1, #0
 800c986:	4628      	mov	r0, r5
 800c988:	f7f3 fc62 	bl	8000250 <memchr>
 800c98c:	b108      	cbz	r0, 800c992 <_printf_i+0x1ea>
 800c98e:	1b40      	subs	r0, r0, r5
 800c990:	6060      	str	r0, [r4, #4]
 800c992:	6863      	ldr	r3, [r4, #4]
 800c994:	6123      	str	r3, [r4, #16]
 800c996:	2300      	movs	r3, #0
 800c998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c99c:	e7aa      	b.n	800c8f4 <_printf_i+0x14c>
 800c99e:	6923      	ldr	r3, [r4, #16]
 800c9a0:	462a      	mov	r2, r5
 800c9a2:	4649      	mov	r1, r9
 800c9a4:	4640      	mov	r0, r8
 800c9a6:	47d0      	blx	sl
 800c9a8:	3001      	adds	r0, #1
 800c9aa:	d0ad      	beq.n	800c908 <_printf_i+0x160>
 800c9ac:	6823      	ldr	r3, [r4, #0]
 800c9ae:	079b      	lsls	r3, r3, #30
 800c9b0:	d413      	bmi.n	800c9da <_printf_i+0x232>
 800c9b2:	68e0      	ldr	r0, [r4, #12]
 800c9b4:	9b03      	ldr	r3, [sp, #12]
 800c9b6:	4298      	cmp	r0, r3
 800c9b8:	bfb8      	it	lt
 800c9ba:	4618      	movlt	r0, r3
 800c9bc:	e7a6      	b.n	800c90c <_printf_i+0x164>
 800c9be:	2301      	movs	r3, #1
 800c9c0:	4632      	mov	r2, r6
 800c9c2:	4649      	mov	r1, r9
 800c9c4:	4640      	mov	r0, r8
 800c9c6:	47d0      	blx	sl
 800c9c8:	3001      	adds	r0, #1
 800c9ca:	d09d      	beq.n	800c908 <_printf_i+0x160>
 800c9cc:	3501      	adds	r5, #1
 800c9ce:	68e3      	ldr	r3, [r4, #12]
 800c9d0:	9903      	ldr	r1, [sp, #12]
 800c9d2:	1a5b      	subs	r3, r3, r1
 800c9d4:	42ab      	cmp	r3, r5
 800c9d6:	dcf2      	bgt.n	800c9be <_printf_i+0x216>
 800c9d8:	e7eb      	b.n	800c9b2 <_printf_i+0x20a>
 800c9da:	2500      	movs	r5, #0
 800c9dc:	f104 0619 	add.w	r6, r4, #25
 800c9e0:	e7f5      	b.n	800c9ce <_printf_i+0x226>
 800c9e2:	bf00      	nop
 800c9e4:	0800ced1 	.word	0x0800ced1
 800c9e8:	0800cee2 	.word	0x0800cee2

0800c9ec <memmove>:
 800c9ec:	4288      	cmp	r0, r1
 800c9ee:	b510      	push	{r4, lr}
 800c9f0:	eb01 0402 	add.w	r4, r1, r2
 800c9f4:	d902      	bls.n	800c9fc <memmove+0x10>
 800c9f6:	4284      	cmp	r4, r0
 800c9f8:	4623      	mov	r3, r4
 800c9fa:	d807      	bhi.n	800ca0c <memmove+0x20>
 800c9fc:	1e43      	subs	r3, r0, #1
 800c9fe:	42a1      	cmp	r1, r4
 800ca00:	d008      	beq.n	800ca14 <memmove+0x28>
 800ca02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca0a:	e7f8      	b.n	800c9fe <memmove+0x12>
 800ca0c:	4402      	add	r2, r0
 800ca0e:	4601      	mov	r1, r0
 800ca10:	428a      	cmp	r2, r1
 800ca12:	d100      	bne.n	800ca16 <memmove+0x2a>
 800ca14:	bd10      	pop	{r4, pc}
 800ca16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca1e:	e7f7      	b.n	800ca10 <memmove+0x24>

0800ca20 <_realloc_r>:
 800ca20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca24:	4680      	mov	r8, r0
 800ca26:	4614      	mov	r4, r2
 800ca28:	460e      	mov	r6, r1
 800ca2a:	b921      	cbnz	r1, 800ca36 <_realloc_r+0x16>
 800ca2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca30:	4611      	mov	r1, r2
 800ca32:	f7ff bb93 	b.w	800c15c <_malloc_r>
 800ca36:	b92a      	cbnz	r2, 800ca44 <_realloc_r+0x24>
 800ca38:	f7ff fca4 	bl	800c384 <_free_r>
 800ca3c:	4625      	mov	r5, r4
 800ca3e:	4628      	mov	r0, r5
 800ca40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca44:	f000 f81b 	bl	800ca7e <_malloc_usable_size_r>
 800ca48:	4284      	cmp	r4, r0
 800ca4a:	4607      	mov	r7, r0
 800ca4c:	d802      	bhi.n	800ca54 <_realloc_r+0x34>
 800ca4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca52:	d812      	bhi.n	800ca7a <_realloc_r+0x5a>
 800ca54:	4621      	mov	r1, r4
 800ca56:	4640      	mov	r0, r8
 800ca58:	f7ff fb80 	bl	800c15c <_malloc_r>
 800ca5c:	4605      	mov	r5, r0
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	d0ed      	beq.n	800ca3e <_realloc_r+0x1e>
 800ca62:	42bc      	cmp	r4, r7
 800ca64:	4622      	mov	r2, r4
 800ca66:	4631      	mov	r1, r6
 800ca68:	bf28      	it	cs
 800ca6a:	463a      	movcs	r2, r7
 800ca6c:	f7ff fc7c 	bl	800c368 <memcpy>
 800ca70:	4631      	mov	r1, r6
 800ca72:	4640      	mov	r0, r8
 800ca74:	f7ff fc86 	bl	800c384 <_free_r>
 800ca78:	e7e1      	b.n	800ca3e <_realloc_r+0x1e>
 800ca7a:	4635      	mov	r5, r6
 800ca7c:	e7df      	b.n	800ca3e <_realloc_r+0x1e>

0800ca7e <_malloc_usable_size_r>:
 800ca7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca82:	1f18      	subs	r0, r3, #4
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	bfbc      	itt	lt
 800ca88:	580b      	ldrlt	r3, [r1, r0]
 800ca8a:	18c0      	addlt	r0, r0, r3
 800ca8c:	4770      	bx	lr
	...

0800ca90 <_init>:
 800ca90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca92:	bf00      	nop
 800ca94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca96:	bc08      	pop	{r3}
 800ca98:	469e      	mov	lr, r3
 800ca9a:	4770      	bx	lr

0800ca9c <_fini>:
 800ca9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9e:	bf00      	nop
 800caa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caa2:	bc08      	pop	{r3}
 800caa4:	469e      	mov	lr, r3
 800caa6:	4770      	bx	lr
